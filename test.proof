(set .c1 (input :conclusion ((let ((?v_37 (f3 c_0 c_0))(?v_0 (f2 c_0))(?v_1 (f1 c_0))) (let ((?v_36 (not (= ?v_0 ?v_1)))(?v_39 (f3 c_0 c_1))(?v_2 (f2 c_1))) (let ((?v_38 (not (= ?v_2 ?v_1)))(?v_41 (f3 c_0 c_2))(?v_4 (f2 c_2))) (let ((?v_40 (not (= ?v_4 ?v_1)))(?v_43 (f3 c_1 c_0))(?v_3 (f1 c_1))) (let ((?v_42 (not (= ?v_0 ?v_3)))(?v_45 (f3 c_1 c_1))(?v_44 (not (= ?v_3 ?v_2)))(?v_47 (f3 c_1 c_2))(?v_46 (not (= ?v_3 ?v_4)))(?v_49 (f3 c_2 c_0))(?v_5 (f1 c_2))) (let ((?v_48 (not (= ?v_0 ?v_5)))(?v_51 (f3 c_2 c_1))(?v_50 (not (= ?v_2 ?v_5)))(?v_53 (f3 c_2 c_2))(?v_52 (not (= ?v_5 ?v_4)))(?v_6 (f3 c4 c5))(?v_8 (= c_0 c_0))(?v_9 (f3 c_0 c5))) (let ((?v_7 (not (= c_0 ?v_9)))(?v_22 (f2 c4))) (let ((?v_10 (not (= ?v_22 ?v_1)))(?v_14 (f2 c5))) (let ((?v_11 (not (= ?v_14 ?v_1)))(?v_12 (not (= c_1 ?v_9)))(?v_13 (not (= ?v_9 c_2)))(?v_15 (= c_0 c_1))(?v_16 (not (= ?v_3 ?v_14)))(?v_17 (f3 c_1 c5))) (let ((?v_21 (not (= c_0 ?v_17)))(?v_24 (not (= c_1 ?v_17)))(?v_26 (not (= ?v_17 c_2)))(?v_18 (= c_0 c_2))(?v_19 (not (= ?v_5 ?v_14)))(?v_20 (f3 c_2 c5))) (let ((?v_28 (not (= ?v_20 c_0)))(?v_30 (not (= ?v_20 c_1)))(?v_31 (not (= ?v_20 c_2)))(?v_23 (= c_0 c_1))(?v_25 (not (= ?v_22 ?v_3)))(?v_27 (= c_1 c_1))(?v_29 (= c_1 c_2))(?v_32 (= c_0 c_2))(?v_33 (not (= ?v_22 ?v_5)))(?v_34 (= c_1 c_2))(?v_35 (= c_2 c_2))(?v_55 (f3 c_0 c4))) (let ((?v_54 (not (= ?v_55 c_0)))(?v_56 (not (= ?v_55 c_1)))(?v_57 (not (= ?v_55 c_2)))(?v_58 (f3 c_1 c4))) (let ((?v_60 (not (= ?v_58 c_0)))(?v_61 (not (= ?v_58 c_1)))(?v_62 (not (= ?v_58 c_2)))(?v_59 (f3 c_2 c4))) (let ((?v_63 (not (= ?v_59 c_0)))(?v_64 (not (= ?v_59 c_1)))(?v_65 (not (= ?v_59 c_2)))(?v_66 (f2 ?v_6))) (and (distinct c_0 c_1 c_2) (or (= (f2 ?v_37) ?v_0) ?v_36) (or (= ?v_0 (f2 ?v_39)) ?v_38) (or (= ?v_0 (f2 ?v_41)) ?v_40) (or (= ?v_2 (f2 ?v_43)) ?v_42) (or (= ?v_2 (f2 ?v_45)) ?v_44) (or (= ?v_2 (f2 ?v_47)) ?v_46) (or (= (f2 ?v_49) ?v_4) ?v_48) (or (= (f2 ?v_51) ?v_4) ?v_50) (or (= (f2 ?v_53) ?v_4) ?v_52) (= ?v_0 (f1 ?v_0)) (= ?v_2 (f1 ?v_2)) (= (f1 ?v_4) ?v_4) (= (f3 ?v_0 c_0) c_0) (= c_1 (f3 ?v_2 c_1)) (= (f3 ?v_4 c_2) c_2) (= (f3 c7 ?v_6) (f3 c6 ?v_6)) (or ?v_8 ?v_7 ?v_10 ?v_11 ?v_7) (or ?v_8 ?v_12 ?v_10 ?v_11 ?v_12) (or ?v_8 ?v_13 ?v_10 ?v_11 ?v_13) (or ?v_15 ?v_7 ?v_10 ?v_16 ?v_21) (or ?v_15 ?v_12 ?v_10 ?v_16 ?v_24) (or ?v_15 ?v_13 ?v_10 ?v_16 ?v_26) (or ?v_18 ?v_7 ?v_10 ?v_19 ?v_28) (or ?v_18 ?v_12 ?v_10 ?v_19 ?v_30) (or ?v_18 ?v_13 ?v_10 ?v_19 ?v_31) (or ?v_23 ?v_21 ?v_25 ?v_11 ?v_7) (or ?v_23 ?v_24 ?v_25 ?v_11 ?v_12) (or ?v_23 ?v_26 ?v_25 ?v_11 ?v_13) (or ?v_27 ?v_21 ?v_25 ?v_16 ?v_21) (or ?v_27 ?v_24 ?v_25 ?v_16 ?v_24) (or ?v_27 ?v_26 ?v_25 ?v_16 ?v_26) (or ?v_29 ?v_21 ?v_25 ?v_19 ?v_28) (or ?v_29 ?v_24 ?v_25 ?v_19 ?v_30) (or ?v_29 ?v_26 ?v_25 ?v_19 ?v_31) (or ?v_32 ?v_28 ?v_33 ?v_11 ?v_7) (or ?v_32 ?v_30 ?v_33 ?v_11 ?v_12) (or ?v_32 ?v_31 ?v_33 ?v_11 ?v_13) (or ?v_34 ?v_28 ?v_33 ?v_16 ?v_21) (or ?v_34 ?v_30 ?v_33 ?v_16 ?v_24) (or ?v_34 ?v_31 ?v_33 ?v_16 ?v_26) (or ?v_35 ?v_28 ?v_33 ?v_19 ?v_28) (or ?v_35 ?v_30 ?v_33 ?v_19 ?v_30) (or ?v_35 ?v_31 ?v_33 ?v_19 ?v_31) (= ?v_1 (f2 ?v_1)) (= ?v_3 (f2 ?v_3)) (= ?v_5 (f2 ?v_5)) (or ?v_36 (= ?v_1 (f1 ?v_37))) (or ?v_38 (= ?v_3 (f1 ?v_39))) (or ?v_40 (= (f1 ?v_41) ?v_5)) (or ?v_42 (= ?v_1 (f1 ?v_43))) (or ?v_44 (= ?v_3 (f1 ?v_45))) (or ?v_46 (= (f1 ?v_47) ?v_5)) (or ?v_48 (= ?v_1 (f1 ?v_49))) (or ?v_50 (= ?v_3 (f1 ?v_51))) (or ?v_52 (= (f1 ?v_53) ?v_5)) (or ?v_8 ?v_10 ?v_54 ?v_54 ?v_11) (or ?v_8 ?v_10 ?v_56 ?v_56 ?v_11) (or ?v_8 ?v_10 ?v_57 ?v_57 ?v_11) (or ?v_15 ?v_10 ?v_60 ?v_54 ?v_16) (or ?v_15 ?v_10 ?v_61 ?v_56 ?v_16) (or ?v_15 ?v_10 ?v_62 ?v_57 ?v_16) (or ?v_18 ?v_10 ?v_63 ?v_54 ?v_19) (or ?v_18 ?v_10 ?v_64 ?v_56 ?v_19) (or ?v_18 ?v_10 ?v_65 ?v_57 ?v_19) (or ?v_23 ?v_25 ?v_54 ?v_60 ?v_11) (or ?v_23 ?v_25 ?v_56 ?v_61 ?v_11) (or ?v_23 ?v_25 ?v_57 ?v_62 ?v_11) (or ?v_27 ?v_25 ?v_60 ?v_60 ?v_16) (or ?v_27 ?v_25 ?v_61 ?v_61 ?v_16) (or ?v_27 ?v_25 ?v_62 ?v_62 ?v_16) (or ?v_29 ?v_25 ?v_63 ?v_60 ?v_19) (or ?v_29 ?v_25 ?v_64 ?v_61 ?v_19) (or ?v_29 ?v_25 ?v_65 ?v_62 ?v_19) (or ?v_32 ?v_33 ?v_54 ?v_63 ?v_11) (or ?v_32 ?v_33 ?v_56 ?v_64 ?v_11) (or ?v_32 ?v_33 ?v_57 ?v_65 ?v_11) (or ?v_34 ?v_33 ?v_60 ?v_63 ?v_16) (or ?v_34 ?v_33 ?v_61 ?v_64 ?v_16) (or ?v_34 ?v_33 ?v_62 ?v_65 ?v_16) (or ?v_35 ?v_33 ?v_63 ?v_63 ?v_19) (or ?v_35 ?v_33 ?v_64 ?v_64 ?v_19) (or ?v_35 ?v_33 ?v_65 ?v_65 ?v_19) (= ?v_66 (f1 c6)) (= (f1 c4) ?v_14) (= (f1 c7) ?v_66) (= (f3 c_0 ?v_1) c_0) (= c_1 (f3 c_1 ?v_3)) (= (f3 c_2 ?v_5) c_2) (or (= (f3 c_0 ?v_37) (f3 ?v_37 c_0)) ?v_36 ?v_36) (or (= (f3 c_0 ?v_39) (f3 ?v_37 c_1)) ?v_36 ?v_38) (or (= (f3 ?v_37 c_2) (f3 c_0 ?v_41)) ?v_36 ?v_40) (or (= (f3 c_0 ?v_43) (f3 ?v_39 c_0)) ?v_38 ?v_42) (or (= (f3 ?v_39 c_1) (f3 c_0 ?v_45)) ?v_38 ?v_44) (or (= (f3 c_0 ?v_47) (f3 ?v_39 c_2)) ?v_38 ?v_46) (or (= (f3 c_0 ?v_49) (f3 ?v_41 c_0)) ?v_40 ?v_48) (or (= (f3 c_0 ?v_51) (f3 ?v_41 c_1)) ?v_40 ?v_50) (or (= (f3 c_0 ?v_53) (f3 ?v_41 c_2)) ?v_40 ?v_52) (or (= (f3 c_1 ?v_37) (f3 ?v_43 c_0)) ?v_42 ?v_36) (or (= (f3 c_1 ?v_39) (f3 ?v_43 c_1)) ?v_42 ?v_38) (or (= (f3 ?v_43 c_2) (f3 c_1 ?v_41)) ?v_42 ?v_40) (or (= (f3 c_1 ?v_43) (f3 ?v_45 c_0)) ?v_44 ?v_42) (or (= (f3 ?v_45 c_1) (f3 c_1 ?v_45)) ?v_44 ?v_44) (or (= (f3 ?v_45 c_2) (f3 c_1 ?v_47)) ?v_44 ?v_46) (or (= (f3 c_1 ?v_49) (f3 ?v_47 c_0)) ?v_46 ?v_48) (or (= (f3 ?v_47 c_1) (f3 c_1 ?v_51)) ?v_46 ?v_50) (or (= (f3 c_1 ?v_53) (f3 ?v_47 c_2)) ?v_46 ?v_52) (or (= (f3 c_2 ?v_37) (f3 ?v_49 c_0)) ?v_48 ?v_36) (or (= (f3 c_2 ?v_39) (f3 ?v_49 c_1)) ?v_48 ?v_38) (or (= (f3 c_2 ?v_41) (f3 ?v_49 c_2)) ?v_48 ?v_40) (or (= (f3 c_2 ?v_43) (f3 ?v_51 c_0)) ?v_50 ?v_42) (or (= (f3 c_2 ?v_45) (f3 ?v_51 c_1)) ?v_50 ?v_44) (or (= (f3 ?v_51 c_2) (f3 c_2 ?v_47)) ?v_50 ?v_46) (or (= (f3 ?v_53 c_0) (f3 c_2 ?v_49)) ?v_52 ?v_48) (or (= (f3 c_2 ?v_51) (f3 ?v_53 c_1)) ?v_52 ?v_50) (or (= (f3 ?v_53 c_2) (f3 c_2 ?v_53)) ?v_52 ?v_52) (not (= c6 c7)) (or (= ?v_37 c_0) (= ?v_37 c_1) (= ?v_37 c_2)) (or (= ?v_39 c_0) (= ?v_39 c_1) (= ?v_39 c_2)) (or (= ?v_41 c_0) (= ?v_41 c_1) (= ?v_41 c_2)) (or (= ?v_43 c_0) (= ?v_43 c_1) (= ?v_43 c_2)) (or (= c_0 ?v_45) (= c_1 ?v_45) (= ?v_45 c_2)) (or (= c_0 ?v_47) (= ?v_47 c_1) (= ?v_47 c_2)) (or (= ?v_49 c_0) (= ?v_49 c_1) (= ?v_49 c_2)) (or (= ?v_51 c_0) (= ?v_51 c_1) (= ?v_51 c_2)) (or (= ?v_53 c_0) (= ?v_53 c_1) (= ?v_53 c_2)) (or (= ?v_0 c_0) (= ?v_0 c_1) (= ?v_0 c_2)) (or (= ?v_2 c_0) (= ?v_2 c_1) (= ?v_2 c_2)) (or (= c_0 ?v_4) (= ?v_4 c_1) (= ?v_4 c_2)) (or (= c_0 ?v_1) (= ?v_1 c_1) (= ?v_1 c_2)) (or (= ?v_3 c_0) (= ?v_3 c_1) (= ?v_3 c_2)) (or (= ?v_5 c_0) (= ?v_5 c_1) (= ?v_5 c_2)) (or (= c_0 c6) (= c6 c_1) (= c6 c_2)) (or (= c4 c_0) (= c4 c_1) (= c4 c_2)) (or (= c5 c_0) (= c5 c_1) (= c5 c_2)) (or (= c_0 c7) (= c_1 c7) (= c7 c_2))))))))))))))))))))
(set .c2 (tmp_alphaconv :clauses (.c1) :conclusion ((let ((@vr0 (f3 c_0 c_0))(@vr1 (f2 c_0))(@vr2 (f1 c_0))) (let ((@vr3 (not (= @vr2 @vr1)))(@vr4 (f3 c_0 c_1))(@vr5 (f2 c_1))) (let ((@vr6 (not (= @vr2 @vr5)))(@vr7 (f3 c_0 c_2))(@vr8 (f2 c_2))) (let ((@vr9 (not (= @vr2 @vr8)))(@vr10 (f3 c_1 c_0))(@vr11 (f1 c_1))) (let ((@vr12 (not (= @vr11 @vr1)))(@vr13 (f3 c_1 c_1))(@vr14 (not (= @vr11 @vr5)))(@vr15 (f3 c_1 c_2))(@vr16 (not (= @vr11 @vr8)))(@vr17 (f3 c_2 c_0))(@vr18 (f1 c_2))) (let ((@vr19 (not (= @vr18 @vr1)))(@vr20 (f3 c_2 c_1))(@vr21 (not (= @vr5 @vr18)))(@vr22 (f3 c_2 c_2))(@vr23 (not (= @vr18 @vr8)))(@vr24 (f3 c4 c5))(@vr25 (= c_0 c_0))(@vr26 (f3 c_0 c5))) (let ((@vr27 (not (= c_0 @vr26)))(@vr28 (f2 c4))) (let ((@vr29 (not (= @vr28 @vr2)))(@vr30 (f2 c5))) (let ((@vr31 (not (= @vr2 @vr30)))(@vr32 (not (= @vr26 c_1)))(@vr33 (not (= @vr26 c_2)))(@vr34 (= c_0 c_1))(@vr35 (not (= @vr11 @vr30)))(@vr36 (f3 c_1 c5))) (let ((@vr37 (not (= @vr36 c_0)))(@vr38 (not (= @vr36 c_1)))(@vr39 (not (= @vr36 c_2)))(@vr40 (= c_0 c_2))(@vr41 (not (= @vr18 @vr30)))(@vr42 (f3 c_2 c5))) (let ((@vr43 (not (= c_0 @vr42)))(@vr44 (not (= c_1 @vr42)))(@vr45 (not (= @vr42 c_2)))(@vr46 (= c_0 c_1))(@vr47 (not (= @vr28 @vr11)))(@vr48 (= c_1 c_1))(@vr49 (= c_1 c_2))(@vr50 (= c_0 c_2))(@vr51 (not (= @vr28 @vr18)))(@vr52 (= c_1 c_2))(@vr53 (= c_2 c_2))(@vr54 (f3 c_0 c4))) (let ((@vr55 (not (= @vr54 c_0)))(@vr56 (not (= @vr54 c_1)))(@vr57 (not (= @vr54 c_2)))(@vr58 (f3 c_1 c4))) (let ((@vr59 (not (= c_0 @vr58)))(@vr60 (not (= @vr58 c_1)))(@vr61 (not (= @vr58 c_2)))(@vr62 (f3 c_2 c4))) (let ((@vr63 (not (= c_0 @vr62)))(@vr64 (not (= c_1 @vr62)))(@vr65 (not (= c_2 @vr62)))(@vr66 (f2 @vr24))) (and (distinct c_0 c_1 c_2) (or (= @vr1 (f2 @vr0)) @vr3) (or (= (f2 @vr4) @vr1) @vr6) (or (= @vr1 (f2 @vr7)) @vr9) (or (= @vr5 (f2 @vr10)) @vr12) (or (= @vr5 (f2 @vr13)) @vr14) (or (= @vr5 (f2 @vr15)) @vr16) (or (= (f2 @vr17) @vr8) @vr19) (or (= (f2 @vr20) @vr8) @vr21) (or (= (f2 @vr22) @vr8) @vr23) (= (f1 @vr1) @vr1) (= @vr5 (f1 @vr5)) (= @vr8 (f1 @vr8)) (= (f3 @vr1 c_0) c_0) (= (f3 @vr5 c_1) c_1) (= (f3 @vr8 c_2) c_2) (= (f3 c7 @vr24) (f3 c6 @vr24)) (or @vr25 @vr27 @vr29 @vr31 @vr27) (or @vr25 @vr32 @vr29 @vr31 @vr32) (or @vr25 @vr33 @vr29 @vr31 @vr33) (or @vr34 @vr27 @vr29 @vr35 @vr37) (or @vr34 @vr32 @vr29 @vr35 @vr38) (or @vr34 @vr33 @vr29 @vr35 @vr39) (or @vr40 @vr27 @vr29 @vr41 @vr43) (or @vr40 @vr32 @vr29 @vr41 @vr44) (or @vr40 @vr33 @vr29 @vr41 @vr45) (or @vr46 @vr37 @vr47 @vr31 @vr27) (or @vr46 @vr38 @vr47 @vr31 @vr32) (or @vr46 @vr39 @vr47 @vr31 @vr33) (or @vr48 @vr37 @vr47 @vr35 @vr37) (or @vr48 @vr38 @vr47 @vr35 @vr38) (or @vr48 @vr39 @vr47 @vr35 @vr39) (or @vr49 @vr37 @vr47 @vr41 @vr43) (or @vr49 @vr38 @vr47 @vr41 @vr44) (or @vr49 @vr39 @vr47 @vr41 @vr45) (or @vr50 @vr43 @vr51 @vr31 @vr27) (or @vr50 @vr44 @vr51 @vr31 @vr32) (or @vr50 @vr45 @vr51 @vr31 @vr33) (or @vr52 @vr43 @vr51 @vr35 @vr37) (or @vr52 @vr44 @vr51 @vr35 @vr38) (or @vr52 @vr45 @vr51 @vr35 @vr39) (or @vr53 @vr43 @vr51 @vr41 @vr43) (or @vr53 @vr44 @vr51 @vr41 @vr44) (or @vr53 @vr45 @vr51 @vr41 @vr45) (= @vr2 (f2 @vr2)) (= @vr11 (f2 @vr11)) (= (f2 @vr18) @vr18) (or @vr3 (= @vr2 (f1 @vr0))) (or @vr6 (= @vr11 (f1 @vr4))) (or @vr9 (= (f1 @vr7) @vr18)) (or @vr12 (= @vr2 (f1 @vr10))) (or @vr14 (= @vr11 (f1 @vr13))) (or @vr16 (= @vr18 (f1 @vr15))) (or @vr19 (= @vr2 (f1 @vr17))) (or @vr21 (= @vr11 (f1 @vr20))) (or @vr23 (= @vr18 (f1 @vr22))) (or @vr25 @vr29 @vr55 @vr55 @vr31) (or @vr25 @vr29 @vr56 @vr56 @vr31) (or @vr25 @vr29 @vr57 @vr57 @vr31) (or @vr34 @vr29 @vr59 @vr55 @vr35) (or @vr34 @vr29 @vr60 @vr56 @vr35) (or @vr34 @vr29 @vr61 @vr57 @vr35) (or @vr40 @vr29 @vr63 @vr55 @vr41) (or @vr40 @vr29 @vr64 @vr56 @vr41) (or @vr40 @vr29 @vr65 @vr57 @vr41) (or @vr46 @vr47 @vr55 @vr59 @vr31) (or @vr46 @vr47 @vr56 @vr60 @vr31) (or @vr46 @vr47 @vr57 @vr61 @vr31) (or @vr48 @vr47 @vr59 @vr59 @vr35) (or @vr48 @vr47 @vr60 @vr60 @vr35) (or @vr48 @vr47 @vr61 @vr61 @vr35) (or @vr49 @vr47 @vr63 @vr59 @vr41) (or @vr49 @vr47 @vr64 @vr60 @vr41) (or @vr49 @vr47 @vr65 @vr61 @vr41) (or @vr50 @vr51 @vr55 @vr63 @vr31) (or @vr50 @vr51 @vr56 @vr64 @vr31) (or @vr50 @vr51 @vr57 @vr65 @vr31) (or @vr52 @vr51 @vr59 @vr63 @vr35) (or @vr52 @vr51 @vr60 @vr64 @vr35) (or @vr52 @vr51 @vr61 @vr65 @vr35) (or @vr53 @vr51 @vr63 @vr63 @vr41) (or @vr53 @vr51 @vr64 @vr64 @vr41) (or @vr53 @vr51 @vr65 @vr65 @vr41) (= @vr66 (f1 c6)) (= (f1 c4) @vr30) (= (f1 c7) @vr66) (= c_0 (f3 c_0 @vr2)) (= (f3 c_1 @vr11) c_1) (= (f3 c_2 @vr18) c_2) (or (= (f3 @vr0 c_0) (f3 c_0 @vr0)) @vr3 @vr3) (or (= (f3 @vr0 c_1) (f3 c_0 @vr4)) @vr3 @vr6) (or (= (f3 c_0 @vr7) (f3 @vr0 c_2)) @vr3 @vr9) (or (= (f3 @vr4 c_0) (f3 c_0 @vr10)) @vr6 @vr12) (or (= (f3 @vr4 c_1) (f3 c_0 @vr13)) @vr6 @vr14) (or (= (f3 @vr4 c_2) (f3 c_0 @vr15)) @vr6 @vr16) (or (= (f3 c_0 @vr17) (f3 @vr7 c_0)) @vr9 @vr19) (or (= (f3 c_0 @vr20) (f3 @vr7 c_1)) @vr9 @vr21) (or (= (f3 @vr7 c_2) (f3 c_0 @vr22)) @vr9 @vr23) (or (= (f3 c_1 @vr0) (f3 @vr10 c_0)) @vr12 @vr3) (or (= (f3 @vr10 c_1) (f3 c_1 @vr4)) @vr12 @vr6) (or (= (f3 @vr10 c_2) (f3 c_1 @vr7)) @vr12 @vr9) (or (= (f3 c_1 @vr10) (f3 @vr13 c_0)) @vr14 @vr12) (or (= (f3 c_1 @vr13) (f3 @vr13 c_1)) @vr14 @vr14) (or (= (f3 c_1 @vr15) (f3 @vr13 c_2)) @vr14 @vr16) (or (= (f3 @vr15 c_0) (f3 c_1 @vr17)) @vr16 @vr19) (or (= (f3 c_1 @vr20) (f3 @vr15 c_1)) @vr16 @vr21) (or (= (f3 c_1 @vr22) (f3 @vr15 c_2)) @vr16 @vr23) (or (= (f3 @vr17 c_0) (f3 c_2 @vr0)) @vr19 @vr3) (or (= (f3 @vr17 c_1) (f3 c_2 @vr4)) @vr19 @vr6) (or (= (f3 @vr17 c_2) (f3 c_2 @vr7)) @vr19 @vr9) (or (= (f3 c_2 @vr10) (f3 @vr20 c_0)) @vr21 @vr12) (or (= (f3 c_2 @vr13) (f3 @vr20 c_1)) @vr21 @vr14) (or (= (f3 @vr20 c_2) (f3 c_2 @vr15)) @vr21 @vr16) (or (= (f3 @vr22 c_0) (f3 c_2 @vr17)) @vr23 @vr19) (or (= (f3 @vr22 c_1) (f3 c_2 @vr20)) @vr23 @vr21) (or (= (f3 @vr22 c_2) (f3 c_2 @vr22)) @vr23 @vr23) (not (= c6 c7)) (or (= @vr0 c_0) (= @vr0 c_1) (= @vr0 c_2)) (or (= @vr4 c_0) (= @vr4 c_1) (= @vr4 c_2)) (or (= c_0 @vr7) (= c_1 @vr7) (= c_2 @vr7)) (or (= @vr10 c_0) (= @vr10 c_1) (= @vr10 c_2)) (or (= c_0 @vr13) (= @vr13 c_1) (= @vr13 c_2)) (or (= @vr15 c_0) (= @vr15 c_1) (= @vr15 c_2)) (or (= c_0 @vr17) (= c_1 @vr17) (= c_2 @vr17)) (or (= c_0 @vr20) (= c_1 @vr20) (= @vr20 c_2)) (or (= @vr22 c_0) (= @vr22 c_1) (= @vr22 c_2)) (or (= c_0 @vr1) (= @vr1 c_1) (= @vr1 c_2)) (or (= @vr5 c_0) (= @vr5 c_1) (= @vr5 c_2)) (or (= c_0 @vr8) (= @vr8 c_1) (= @vr8 c_2)) (or (= @vr2 c_0) (= @vr2 c_1) (= @vr2 c_2)) (or (= @vr11 c_0) (= @vr11 c_1) (= @vr11 c_2)) (or (= c_0 @vr18) (= @vr18 c_1) (= @vr18 c_2)) (or (= c_0 c6) (= c6 c_1) (= c6 c_2)) (or (= c4 c_0) (= c4 c_1) (= c4 c_2)) (or (= c5 c_0) (= c5 c_1) (= c5 c_2)) (or (= c_0 c7) (= c_1 c7) (= c7 c_2))))))))))))))))))))
(set .c3 (tmp_alphaconv :clauses (.c2) :conclusion ((let ((@vr67 (f3 c_0 c_0))(@vr68 (f2 c_0))(@vr69 (f1 c_0))) (let ((@vr70 (not (= @vr68 @vr69)))(@vr71 (f3 c_0 c_1))(@vr72 (f2 c_1))) (let ((@vr73 (not (= @vr72 @vr69)))(@vr74 (f3 c_0 c_2))(@vr75 (f2 c_2))) (let ((@vr76 (not (= @vr75 @vr69)))(@vr77 (f3 c_1 c_0))(@vr78 (f1 c_1))) (let ((@vr79 (not (= @vr68 @vr78)))(@vr80 (f3 c_1 c_1))(@vr81 (not (= @vr72 @vr78)))(@vr82 (f3 c_1 c_2))(@vr83 (not (= @vr75 @vr78)))(@vr84 (f3 c_2 c_0))(@vr85 (f1 c_2))) (let ((@vr86 (not (= @vr85 @vr68)))(@vr87 (f3 c_2 c_1))(@vr88 (not (= @vr85 @vr72)))(@vr89 (f3 c_2 c_2))(@vr90 (not (= @vr85 @vr75)))(@vr91 (f3 c4 c5))(@vr92 (= c_0 c_0))(@vr93 (f3 c_0 c5))) (let ((@vr94 (not (= c_0 @vr93)))(@vr95 (f2 c4))) (let ((@vr96 (not (= @vr69 @vr95)))(@vr97 (f2 c5))) (let ((@vr98 (not (= @vr69 @vr97)))(@vr99 (not (= @vr93 c_1)))(@vr100 (not (= @vr93 c_2)))(@vr101 (= c_0 c_1))(@vr102 (not (= @vr97 @vr78)))(@vr103 (f3 c_1 c5))) (let ((@vr104 (not (= @vr103 c_0)))(@vr105 (not (= @vr103 c_1)))(@vr106 (not (= @vr103 c_2)))(@vr107 (= c_0 c_2))(@vr108 (not (= @vr85 @vr97)))(@vr109 (f3 c_2 c5))) (let ((@vr110 (not (= @vr109 c_0)))(@vr111 (not (= @vr109 c_1)))(@vr112 (not (= @vr109 c_2)))(@vr113 (= c_0 c_1))(@vr114 (not (= @vr95 @vr78)))(@vr115 (= c_1 c_1))(@vr116 (= c_1 c_2))(@vr117 (= c_0 c_2))(@vr118 (not (= @vr85 @vr95)))(@vr119 (= c_1 c_2))(@vr120 (= c_2 c_2))(@vr121 (f3 c_0 c4))) (let ((@vr122 (not (= c_0 @vr121)))(@vr123 (not (= @vr121 c_1)))(@vr124 (not (= @vr121 c_2)))(@vr125 (f3 c_1 c4))) (let ((@vr126 (not (= @vr125 c_0)))(@vr127 (not (= @vr125 c_1)))(@vr128 (not (= @vr125 c_2)))(@vr129 (f3 c_2 c4))) (let ((@vr130 (not (= @vr129 c_0)))(@vr131 (not (= @vr129 c_1)))(@vr132 (not (= @vr129 c_2)))(@vr133 (f2 @vr91))) (and (distinct c_0 c_1 c_2) (or (= @vr68 (f2 @vr67)) @vr70) (or (= @vr68 (f2 @vr71)) @vr73) (or (= @vr68 (f2 @vr74)) @vr76) (or (= @vr72 (f2 @vr77)) @vr79) (or (= (f2 @vr80) @vr72) @vr81) (or (= @vr72 (f2 @vr82)) @vr83) (or (= (f2 @vr84) @vr75) @vr86) (or (= (f2 @vr87) @vr75) @vr88) (or (= (f2 @vr89) @vr75) @vr90) (= @vr68 (f1 @vr68)) (= @vr72 (f1 @vr72)) (= @vr75 (f1 @vr75)) (= (f3 @vr68 c_0) c_0) (= (f3 @vr72 c_1) c_1) (= (f3 @vr75 c_2) c_2) (= (f3 c7 @vr91) (f3 c6 @vr91)) (or @vr92 @vr94 @vr96 @vr98 @vr94) (or @vr92 @vr99 @vr96 @vr98 @vr99) (or @vr92 @vr100 @vr96 @vr98 @vr100) (or @vr101 @vr94 @vr96 @vr102 @vr104) (or @vr101 @vr99 @vr96 @vr102 @vr105) (or @vr101 @vr100 @vr96 @vr102 @vr106) (or @vr107 @vr94 @vr96 @vr108 @vr110) (or @vr107 @vr99 @vr96 @vr108 @vr111) (or @vr107 @vr100 @vr96 @vr108 @vr112) (or @vr113 @vr104 @vr114 @vr98 @vr94) (or @vr113 @vr105 @vr114 @vr98 @vr99) (or @vr113 @vr106 @vr114 @vr98 @vr100) (or @vr115 @vr104 @vr114 @vr102 @vr104) (or @vr115 @vr105 @vr114 @vr102 @vr105) (or @vr115 @vr106 @vr114 @vr102 @vr106) (or @vr116 @vr104 @vr114 @vr108 @vr110) (or @vr116 @vr105 @vr114 @vr108 @vr111) (or @vr116 @vr106 @vr114 @vr108 @vr112) (or @vr117 @vr110 @vr118 @vr98 @vr94) (or @vr117 @vr111 @vr118 @vr98 @vr99) (or @vr117 @vr112 @vr118 @vr98 @vr100) (or @vr119 @vr110 @vr118 @vr102 @vr104) (or @vr119 @vr111 @vr118 @vr102 @vr105) (or @vr119 @vr112 @vr118 @vr102 @vr106) (or @vr120 @vr110 @vr118 @vr108 @vr110) (or @vr120 @vr111 @vr118 @vr108 @vr111) (or @vr120 @vr112 @vr118 @vr108 @vr112) (= (f2 @vr69) @vr69) (= (f2 @vr78) @vr78) (= @vr85 (f2 @vr85)) (or @vr70 (= @vr69 (f1 @vr67))) (or @vr73 (= (f1 @vr71) @vr78)) (or @vr76 (= (f1 @vr74) @vr85)) (or @vr79 (= (f1 @vr77) @vr69)) (or @vr81 (= (f1 @vr80) @vr78)) (or @vr83 (= @vr85 (f1 @vr82))) (or @vr86 (= (f1 @vr84) @vr69)) (or @vr88 (= (f1 @vr87) @vr78)) (or @vr90 (= @vr85 (f1 @vr89))) (or @vr92 @vr96 @vr122 @vr122 @vr98) (or @vr92 @vr96 @vr123 @vr123 @vr98) (or @vr92 @vr96 @vr124 @vr124 @vr98) (or @vr101 @vr96 @vr126 @vr122 @vr102) (or @vr101 @vr96 @vr127 @vr123 @vr102) (or @vr101 @vr96 @vr128 @vr124 @vr102) (or @vr107 @vr96 @vr130 @vr122 @vr108) (or @vr107 @vr96 @vr131 @vr123 @vr108) (or @vr107 @vr96 @vr132 @vr124 @vr108) (or @vr113 @vr114 @vr122 @vr126 @vr98) (or @vr113 @vr114 @vr123 @vr127 @vr98) (or @vr113 @vr114 @vr124 @vr128 @vr98) (or @vr115 @vr114 @vr126 @vr126 @vr102) (or @vr115 @vr114 @vr127 @vr127 @vr102) (or @vr115 @vr114 @vr128 @vr128 @vr102) (or @vr116 @vr114 @vr130 @vr126 @vr108) (or @vr116 @vr114 @vr131 @vr127 @vr108) (or @vr116 @vr114 @vr132 @vr128 @vr108) (or @vr117 @vr118 @vr122 @vr130 @vr98) (or @vr117 @vr118 @vr123 @vr131 @vr98) (or @vr117 @vr118 @vr124 @vr132 @vr98) (or @vr119 @vr118 @vr126 @vr130 @vr102) (or @vr119 @vr118 @vr127 @vr131 @vr102) (or @vr119 @vr118 @vr128 @vr132 @vr102) (or @vr120 @vr118 @vr130 @vr130 @vr108) (or @vr120 @vr118 @vr131 @vr131 @vr108) (or @vr120 @vr118 @vr132 @vr132 @vr108) (= (f1 c6) @vr133) (= @vr97 (f1 c4)) (= (f1 c7) @vr133) (= c_0 (f3 c_0 @vr69)) (= (f3 c_1 @vr78) c_1) (= c_2 (f3 c_2 @vr85)) (or (= (f3 c_0 @vr67) (f3 @vr67 c_0)) @vr70 @vr70) (or (= (f3 @vr67 c_1) (f3 c_0 @vr71)) @vr70 @vr73) (or (= (f3 c_0 @vr74) (f3 @vr67 c_2)) @vr70 @vr76) (or (= (f3 c_0 @vr77) (f3 @vr71 c_0)) @vr73 @vr79) (or (= (f3 c_0 @vr80) (f3 @vr71 c_1)) @vr73 @vr81) (or (= (f3 c_0 @vr82) (f3 @vr71 c_2)) @vr73 @vr83) (or (= (f3 c_0 @vr84) (f3 @vr74 c_0)) @vr76 @vr86) (or (= (f3 c_0 @vr87) (f3 @vr74 c_1)) @vr76 @vr88) (or (= (f3 @vr74 c_2) (f3 c_0 @vr89)) @vr76 @vr90) (or (= (f3 c_1 @vr67) (f3 @vr77 c_0)) @vr79 @vr70) (or (= (f3 c_1 @vr71) (f3 @vr77 c_1)) @vr79 @vr73) (or (= (f3 @vr77 c_2) (f3 c_1 @vr74)) @vr79 @vr76) (or (= (f3 c_1 @vr77) (f3 @vr80 c_0)) @vr81 @vr79) (or (= (f3 c_1 @vr80) (f3 @vr80 c_1)) @vr81 @vr81) (or (= (f3 @vr80 c_2) (f3 c_1 @vr82)) @vr81 @vr83) (or (= (f3 @vr82 c_0) (f3 c_1 @vr84)) @vr83 @vr86) (or (= (f3 @vr82 c_1) (f3 c_1 @vr87)) @vr83 @vr88) (or (= (f3 @vr82 c_2) (f3 c_1 @vr89)) @vr83 @vr90) (or (= (f3 c_2 @vr67) (f3 @vr84 c_0)) @vr86 @vr70) (or (= (f3 @vr84 c_1) (f3 c_2 @vr71)) @vr86 @vr73) (or (= (f3 @vr84 c_2) (f3 c_2 @vr74)) @vr86 @vr76) (or (= (f3 c_2 @vr77) (f3 @vr87 c_0)) @vr88 @vr79) (or (= (f3 c_2 @vr80) (f3 @vr87 c_1)) @vr88 @vr81) (or (= (f3 @vr87 c_2) (f3 c_2 @vr82)) @vr88 @vr83) (or (= (f3 @vr89 c_0) (f3 c_2 @vr84)) @vr90 @vr86) (or (= (f3 @vr89 c_1) (f3 c_2 @vr87)) @vr90 @vr88) (or (= (f3 c_2 @vr89) (f3 @vr89 c_2)) @vr90 @vr90) (not (= c6 c7)) (or (= c_0 @vr67) (= @vr67 c_1) (= @vr67 c_2)) (or (= c_0 @vr71) (= @vr71 c_1) (= @vr71 c_2)) (or (= c_0 @vr74) (= c_1 @vr74) (= @vr74 c_2)) (or (= c_0 @vr77) (= c_1 @vr77) (= @vr77 c_2)) (or (= @vr80 c_0) (= @vr80 c_1) (= @vr80 c_2)) (or (= @vr82 c_0) (= @vr82 c_1) (= @vr82 c_2)) (or (= @vr84 c_0) (= @vr84 c_1) (= @vr84 c_2)) (or (= @vr87 c_0) (= @vr87 c_1) (= @vr87 c_2)) (or (= @vr89 c_0) (= @vr89 c_1) (= @vr89 c_2)) (or (= @vr68 c_0) (= @vr68 c_1) (= @vr68 c_2)) (or (= @vr72 c_0) (= @vr72 c_1) (= @vr72 c_2)) (or (= @vr75 c_0) (= @vr75 c_1) (= @vr75 c_2)) (or (= c_0 @vr69) (= @vr69 c_1) (= @vr69 c_2)) (or (= c_0 @vr78) (= @vr78 c_1) (= @vr78 c_2)) (or (= @vr85 c_0) (= @vr85 c_1) (= @vr85 c_2)) (or (= c_0 c6) (= c6 c_1) (= c6 c_2)) (or (= c4 c_0) (= c4 c_1) (= c4 c_2)) (or (= c5 c_0) (= c5 c_1) (= c5 c_2)) (or (= c_0 c7) (= c_1 c7) (= c7 c_2))))))))))))))))))))
(set .c4 (tmp_let_elim :clauses (.c3) :conclusion ((and (distinct c_0 c_1 c_2) (or (= (f2 (f3 c_0 c_0)) (f2 c_0)) (not (= (f2 c_0) (f1 c_0)))) (or (= (f2 c_0) (f2 (f3 c_0 c_1))) (not (= (f1 c_0) (f2 c_1)))) (or (= (f2 c_0) (f2 (f3 c_0 c_2))) (not (= (f2 c_2) (f1 c_0)))) (or (= (f2 (f3 c_1 c_0)) (f2 c_1)) (not (= (f2 c_0) (f1 c_1)))) (or (= (f2 (f3 c_1 c_1)) (f2 c_1)) (not (= (f1 c_1) (f2 c_1)))) (or (= (f2 (f3 c_1 c_2)) (f2 c_1)) (not (= (f2 c_2) (f1 c_1)))) (or (= (f2 c_2) (f2 (f3 c_2 c_0))) (not (= (f2 c_0) (f1 c_2)))) (or (= (f2 c_2) (f2 (f3 c_2 c_1))) (not (= (f1 c_2) (f2 c_1)))) (or (= (f2 c_2) (f2 (f3 c_2 c_2))) (not (= (f2 c_2) (f1 c_2)))) (= (f2 c_0) (f1 (f2 c_0))) (= (f1 (f2 c_1)) (f2 c_1)) (= (f2 c_2) (f1 (f2 c_2))) (= (f3 (f2 c_0) c_0) c_0) (= c_1 (f3 (f2 c_1) c_1)) (= (f3 (f2 c_2) c_2) c_2) (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5))) (or (= c_0 c_0) (not (= c_0 (f3 c_0 c5))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= c_0 (f3 c_0 c5)))) (or (= c_0 c_0) (not (= (f3 c_0 c5) c_1)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_1))) (or (= c_0 c_0) (not (= (f3 c_0 c5) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_2))) (or (= c_0 c_1) (not (= c_0 (f3 c_0 c5))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= c_0 (f3 c_1 c5)))) (or (= c_0 c_1) (not (= (f3 c_0 c5) c_1)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_1))) (or (= c_0 c_1) (not (= (f3 c_0 c5) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_2))) (or (= c_0 c_2) (not (= c_0 (f3 c_0 c5))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5)))) (or (= c_0 c_2) (not (= (f3 c_0 c5) c_1)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_1))) (or (= c_0 c_2) (not (= (f3 c_0 c5) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_2))) (or (= c_0 c_1) (not (= c_0 (f3 c_1 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= c_0 (f3 c_0 c5)))) (or (= c_0 c_1) (not (= (f3 c_1 c5) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_1))) (or (= c_0 c_1) (not (= (f3 c_1 c5) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_2))) (or (= c_1 c_1) (not (= c_0 (f3 c_1 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_1))) (not (= c_0 (f3 c_1 c5)))) (or (= c_1 c_1) (not (= (f3 c_1 c5) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_1))) (or (= c_1 c_1) (not (= (f3 c_1 c5) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_2))) (or (= c_1 c_2) (not (= c_0 (f3 c_1 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5)))) (or (= c_1 c_2) (not (= (f3 c_1 c5) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_1))) (or (= c_1 c_2) (not (= (f3 c_1 c5) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_2))) (or (= c_0 c_2) (not (= c_0 (f3 c_2 c5))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_0 (f3 c_0 c5)))) (or (= c_0 c_2) (not (= (f3 c_2 c5) c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_1))) (or (= c_0 c_2) (not (= (f3 c_2 c5) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_2))) (or (= c_1 c_2) (not (= c_0 (f3 c_2 c5))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= c_0 (f3 c_1 c5)))) (or (= c_1 c_2) (not (= (f3 c_2 c5) c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_1))) (or (= c_1 c_2) (not (= (f3 c_2 c5) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_2))) (or (= c_2 c_2) (not (= c_0 (f3 c_2 c5))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5)))) (or (= c_2 c_2) (not (= (f3 c_2 c5) c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_1))) (or (= c_2 c_2) (not (= (f3 c_2 c5) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_2))) (= (f1 c_0) (f2 (f1 c_0))) (= (f2 (f1 c_1)) (f1 c_1)) (= (f2 (f1 c_2)) (f1 c_2)) (or (not (= (f2 c_0) (f1 c_0))) (= (f1 (f3 c_0 c_0)) (f1 c_0))) (or (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f1 (f3 c_0 c_1)))) (or (not (= (f2 c_2) (f1 c_0))) (= (f1 (f3 c_0 c_2)) (f1 c_2))) (or (not (= (f2 c_0) (f1 c_1))) (= (f1 (f3 c_1 c_0)) (f1 c_0))) (or (not (= (f1 c_1) (f2 c_1))) (= (f1 (f3 c_1 c_1)) (f1 c_1))) (or (not (= (f2 c_2) (f1 c_1))) (= (f1 (f3 c_1 c_2)) (f1 c_2))) (or (not (= (f2 c_0) (f1 c_2))) (= (f1 c_0) (f1 (f3 c_2 c_0)))) (or (not (= (f1 c_2) (f2 c_1))) (= (f1 c_1) (f1 (f3 c_2 c_1)))) (or (not (= (f2 c_2) (f1 c_2))) (= (f1 (f3 c_2 c_2)) (f1 c_2))) (or (= c_0 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f3 c_0 c4) c_0)) (not (= (f3 c_0 c4) c_0)) (not (= (f2 c5) (f1 c_0)))) (or (= c_0 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f3 c_0 c4) c_1)) (not (= (f3 c_0 c4) c_1)) (not (= (f2 c5) (f1 c_0)))) (or (= c_0 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f3 c_0 c4) c_2)) (not (= (f3 c_0 c4) c_2)) (not (= (f2 c5) (f1 c_0)))) (or (= c_0 c_1) (not (= (f2 c4) (f1 c_0))) (not (= c_0 (f3 c_1 c4))) (not (= (f3 c_0 c4) c_0)) (not (= (f2 c5) (f1 c_1)))) (or (= c_0 c_1) (not (= (f2 c4) (f1 c_0))) (not (= c_1 (f3 c_1 c4))) (not (= (f3 c_0 c4) c_1)) (not (= (f2 c5) (f1 c_1)))) (or (= c_0 c_1) (not (= (f2 c4) (f1 c_0))) (not (= c_2 (f3 c_1 c4))) (not (= (f3 c_0 c4) c_2)) (not (= (f2 c5) (f1 c_1)))) (or (= c_0 c_2) (not (= (f2 c4) (f1 c_0))) (not (= c_0 (f3 c_2 c4))) (not (= (f3 c_0 c4) c_0)) (not (= (f2 c5) (f1 c_2)))) (or (= c_0 c_2) (not (= (f2 c4) (f1 c_0))) (not (= c_1 (f3 c_2 c4))) (not (= (f3 c_0 c4) c_1)) (not (= (f2 c5) (f1 c_2)))) (or (= c_0 c_2) (not (= (f2 c4) (f1 c_0))) (not (= c_2 (f3 c_2 c4))) (not (= (f3 c_0 c4) c_2)) (not (= (f2 c5) (f1 c_2)))) (or (= c_0 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f3 c_0 c4) c_0)) (not (= c_0 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_0)))) (or (= c_0 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f3 c_0 c4) c_1)) (not (= c_1 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_0)))) (or (= c_0 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f3 c_0 c4) c_2)) (not (= c_2 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_0)))) (or (= c_1 c_1) (not (= (f2 c4) (f1 c_1))) (not (= c_0 (f3 c_1 c4))) (not (= c_0 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_1)))) (or (= c_1 c_1) (not (= (f2 c4) (f1 c_1))) (not (= c_1 (f3 c_1 c4))) (not (= c_1 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_1)))) (or (= c_1 c_1) (not (= (f2 c4) (f1 c_1))) (not (= c_2 (f3 c_1 c4))) (not (= c_2 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_1)))) (or (= c_1 c_2) (not (= (f2 c4) (f1 c_1))) (not (= c_0 (f3 c_2 c4))) (not (= c_0 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_2)))) (or (= c_1 c_2) (not (= (f2 c4) (f1 c_1))) (not (= c_1 (f3 c_2 c4))) (not (= c_1 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_2)))) (or (= c_1 c_2) (not (= (f2 c4) (f1 c_1))) (not (= c_2 (f3 c_2 c4))) (not (= c_2 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_2)))) (or (= c_0 c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_0 c4) c_0)) (not (= c_0 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_0)))) (or (= c_0 c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_0 c4) c_1)) (not (= c_1 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_0)))) (or (= c_0 c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_0 c4) c_2)) (not (= c_2 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_0)))) (or (= c_1 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_0 (f3 c_1 c4))) (not (= c_0 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_1)))) (or (= c_1 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_1 (f3 c_1 c4))) (not (= c_1 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_1)))) (or (= c_1 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_2 (f3 c_1 c4))) (not (= c_2 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_1)))) (or (= c_2 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_0 (f3 c_2 c4))) (not (= c_0 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_2)))) (or (= c_2 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_1 (f3 c_2 c4))) (not (= c_1 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_2)))) (or (= c_2 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_2 (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_2)))) (= (f2 (f3 c4 c5)) (f1 c6)) (= (f2 c5) (f1 c4)) (= (f1 c7) (f2 (f3 c4 c5))) (= c_0 (f3 c_0 (f1 c_0))) (= (f3 c_1 (f1 c_1)) c_1) (= (f3 c_2 (f1 c_2)) c_2) (or (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0))) (not (= (f2 c_0) (f1 c_0))) (not (= (f2 c_0) (f1 c_0)))) (or (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1)) (not (= (f2 c_0) (f1 c_0))) (not (= (f1 c_0) (f2 c_1)))) (or (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2))) (not (= (f2 c_0) (f1 c_0))) (not (= (f2 c_2) (f1 c_0)))) (or (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0))) (not (= (f1 c_0) (f2 c_1))) (not (= (f2 c_0) (f1 c_1)))) (or (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_1) (f2 c_1)))) (or (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f1 c_0) (f2 c_1))) (not (= (f2 c_2) (f1 c_1)))) (or (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0))) (not (= (f2 c_2) (f1 c_0))) (not (= (f2 c_0) (f1 c_2)))) (or (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1))) (not (= (f2 c_2) (f1 c_0))) (not (= (f1 c_2) (f2 c_1)))) (or (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2)) (not (= (f2 c_2) (f1 c_0))) (not (= (f2 c_2) (f1 c_2)))) (or (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0))) (not (= (f2 c_0) (f1 c_1))) (not (= (f2 c_0) (f1 c_0)))) (or (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1))) (not (= (f2 c_0) (f1 c_1))) (not (= (f1 c_0) (f2 c_1)))) (or (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2)) (not (= (f2 c_0) (f1 c_1))) (not (= (f2 c_2) (f1 c_0)))) (or (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c_0) (f1 c_1)))) (or (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f2 c_1)))) (or (= (f3 (f3 c_1 c_1) c_2) (f3 c_1 (f3 c_1 c_2))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c_2) (f1 c_1)))) (or (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0))) (not (= (f2 c_2) (f1 c_1))) (not (= (f2 c_0) (f1 c_2)))) (or (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1)) (not (= (f2 c_2) (f1 c_1))) (not (= (f1 c_2) (f2 c_1)))) (or (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2))) (not (= (f2 c_2) (f1 c_1))) (not (= (f2 c_2) (f1 c_2)))) (or (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0))) (not (= (f2 c_0) (f1 c_2))) (not (= (f2 c_0) (f1 c_0)))) (or (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1))) (not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_0) (f2 c_1)))) (or (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2)) (not (= (f2 c_0) (f1 c_2))) (not (= (f2 c_2) (f1 c_0)))) (or (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0))) (not (= (f1 c_2) (f2 c_1))) (not (= (f2 c_0) (f1 c_1)))) (or (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1))) (not (= (f1 c_2) (f2 c_1))) (not (= (f1 c_1) (f2 c_1)))) (or (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2)) (not (= (f1 c_2) (f2 c_1))) (not (= (f2 c_2) (f1 c_1)))) (or (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c_2) (f1 c_2))) (not (= (f2 c_0) (f1 c_2)))) (or (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1))) (not (= (f2 c_2) (f1 c_2))) (not (= (f1 c_2) (f2 c_1)))) (or (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2))) (not (= (f2 c_2) (f1 c_2))) (not (= (f2 c_2) (f1 c_2)))) (not (= c6 c7)) (or (= (f3 c_0 c_0) c_0) (= (f3 c_0 c_0) c_1) (= (f3 c_0 c_0) c_2)) (or (= c_0 (f3 c_0 c_1)) (= c_1 (f3 c_0 c_1)) (= (f3 c_0 c_1) c_2)) (or (= (f3 c_0 c_2) c_0) (= (f3 c_0 c_2) c_1) (= (f3 c_0 c_2) c_2)) (or (= (f3 c_1 c_0) c_0) (= (f3 c_1 c_0) c_1) (= (f3 c_1 c_0) c_2)) (or (= (f3 c_1 c_1) c_0) (= (f3 c_1 c_1) c_1) (= (f3 c_1 c_1) c_2)) (or (= (f3 c_1 c_2) c_0) (= (f3 c_1 c_2) c_1) (= (f3 c_1 c_2) c_2)) (or (= (f3 c_2 c_0) c_0) (= (f3 c_2 c_0) c_1) (= (f3 c_2 c_0) c_2)) (or (= (f3 c_2 c_1) c_0) (= (f3 c_2 c_1) c_1) (= (f3 c_2 c_1) c_2)) (or (= c_0 (f3 c_2 c_2)) (= (f3 c_2 c_2) c_1) (= (f3 c_2 c_2) c_2)) (or (= (f2 c_0) c_0) (= (f2 c_0) c_1) (= (f2 c_0) c_2)) (or (= c_0 (f2 c_1)) (= c_1 (f2 c_1)) (= (f2 c_1) c_2)) (or (= (f2 c_2) c_0) (= (f2 c_2) c_1) (= (f2 c_2) c_2)) (or (= (f1 c_0) c_0) (= (f1 c_0) c_1) (= (f1 c_0) c_2)) (or (= (f1 c_1) c_0) (= (f1 c_1) c_1) (= (f1 c_1) c_2)) (or (= c_0 (f1 c_2)) (= (f1 c_2) c_1) (= (f1 c_2) c_2)) (or (= c_0 c6) (= c6 c_1) (= c6 c_2)) (or (= c4 c_0) (= c4 c_1) (= c4 c_2)) (or (= c5 c_0) (= c5 c_1) (= c5 c_2)) (or (= c_0 c7) (= c_1 c7) (= c7 c_2))))))
(set .c5 (tmp_distinct_elim :clauses (.c4) :conclusion ((and (and (not (= c_0 c_1)) (not (= c_0 c_2)) (not (= c_1 c_2))) (or (= (f2 (f3 c_0 c_0)) (f2 c_0)) (not (= (f2 c_0) (f1 c_0)))) (or (= (f2 c_0) (f2 (f3 c_0 c_1))) (not (= (f1 c_0) (f2 c_1)))) (or (= (f2 c_0) (f2 (f3 c_0 c_2))) (not (= (f2 c_2) (f1 c_0)))) (or (= (f2 (f3 c_1 c_0)) (f2 c_1)) (not (= (f2 c_0) (f1 c_1)))) (or (= (f2 (f3 c_1 c_1)) (f2 c_1)) (not (= (f1 c_1) (f2 c_1)))) (or (= (f2 (f3 c_1 c_2)) (f2 c_1)) (not (= (f2 c_2) (f1 c_1)))) (or (= (f2 c_2) (f2 (f3 c_2 c_0))) (not (= (f2 c_0) (f1 c_2)))) (or (= (f2 c_2) (f2 (f3 c_2 c_1))) (not (= (f1 c_2) (f2 c_1)))) (or (= (f2 c_2) (f2 (f3 c_2 c_2))) (not (= (f2 c_2) (f1 c_2)))) (= (f2 c_0) (f1 (f2 c_0))) (= (f1 (f2 c_1)) (f2 c_1)) (= (f2 c_2) (f1 (f2 c_2))) (= (f3 (f2 c_0) c_0) c_0) (= c_1 (f3 (f2 c_1) c_1)) (= (f3 (f2 c_2) c_2) c_2) (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5))) (or (= c_0 c_0) (not (= c_0 (f3 c_0 c5))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= c_0 (f3 c_0 c5)))) (or (= c_0 c_0) (not (= (f3 c_0 c5) c_1)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_1))) (or (= c_0 c_0) (not (= (f3 c_0 c5) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_2))) (or (= c_0 c_1) (not (= c_0 (f3 c_0 c5))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= c_0 (f3 c_1 c5)))) (or (= c_0 c_1) (not (= (f3 c_0 c5) c_1)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_1))) (or (= c_0 c_1) (not (= (f3 c_0 c5) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_2))) (or (= c_0 c_2) (not (= c_0 (f3 c_0 c5))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5)))) (or (= c_0 c_2) (not (= (f3 c_0 c5) c_1)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_1))) (or (= c_0 c_2) (not (= (f3 c_0 c5) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_2))) (or (= c_0 c_1) (not (= c_0 (f3 c_1 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= c_0 (f3 c_0 c5)))) (or (= c_0 c_1) (not (= (f3 c_1 c5) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_1))) (or (= c_0 c_1) (not (= (f3 c_1 c5) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_2))) (or (= c_1 c_1) (not (= c_0 (f3 c_1 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_1))) (not (= c_0 (f3 c_1 c5)))) (or (= c_1 c_1) (not (= (f3 c_1 c5) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_1))) (or (= c_1 c_1) (not (= (f3 c_1 c5) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_2))) (or (= c_1 c_2) (not (= c_0 (f3 c_1 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5)))) (or (= c_1 c_2) (not (= (f3 c_1 c5) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_1))) (or (= c_1 c_2) (not (= (f3 c_1 c5) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_2))) (or (= c_0 c_2) (not (= c_0 (f3 c_2 c5))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_0 (f3 c_0 c5)))) (or (= c_0 c_2) (not (= (f3 c_2 c5) c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_1))) (or (= c_0 c_2) (not (= (f3 c_2 c5) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_2))) (or (= c_1 c_2) (not (= c_0 (f3 c_2 c5))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= c_0 (f3 c_1 c5)))) (or (= c_1 c_2) (not (= (f3 c_2 c5) c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_1))) (or (= c_1 c_2) (not (= (f3 c_2 c5) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_2))) (or (= c_2 c_2) (not (= c_0 (f3 c_2 c5))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5)))) (or (= c_2 c_2) (not (= (f3 c_2 c5) c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_1))) (or (= c_2 c_2) (not (= (f3 c_2 c5) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_2))) (= (f1 c_0) (f2 (f1 c_0))) (= (f2 (f1 c_1)) (f1 c_1)) (= (f2 (f1 c_2)) (f1 c_2)) (or (not (= (f2 c_0) (f1 c_0))) (= (f1 (f3 c_0 c_0)) (f1 c_0))) (or (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f1 (f3 c_0 c_1)))) (or (not (= (f2 c_2) (f1 c_0))) (= (f1 (f3 c_0 c_2)) (f1 c_2))) (or (not (= (f2 c_0) (f1 c_1))) (= (f1 (f3 c_1 c_0)) (f1 c_0))) (or (not (= (f1 c_1) (f2 c_1))) (= (f1 (f3 c_1 c_1)) (f1 c_1))) (or (not (= (f2 c_2) (f1 c_1))) (= (f1 (f3 c_1 c_2)) (f1 c_2))) (or (not (= (f2 c_0) (f1 c_2))) (= (f1 c_0) (f1 (f3 c_2 c_0)))) (or (not (= (f1 c_2) (f2 c_1))) (= (f1 c_1) (f1 (f3 c_2 c_1)))) (or (not (= (f2 c_2) (f1 c_2))) (= (f1 (f3 c_2 c_2)) (f1 c_2))) (or (= c_0 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f3 c_0 c4) c_0)) (not (= (f3 c_0 c4) c_0)) (not (= (f2 c5) (f1 c_0)))) (or (= c_0 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f3 c_0 c4) c_1)) (not (= (f3 c_0 c4) c_1)) (not (= (f2 c5) (f1 c_0)))) (or (= c_0 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f3 c_0 c4) c_2)) (not (= (f3 c_0 c4) c_2)) (not (= (f2 c5) (f1 c_0)))) (or (= c_0 c_1) (not (= (f2 c4) (f1 c_0))) (not (= c_0 (f3 c_1 c4))) (not (= (f3 c_0 c4) c_0)) (not (= (f2 c5) (f1 c_1)))) (or (= c_0 c_1) (not (= (f2 c4) (f1 c_0))) (not (= c_1 (f3 c_1 c4))) (not (= (f3 c_0 c4) c_1)) (not (= (f2 c5) (f1 c_1)))) (or (= c_0 c_1) (not (= (f2 c4) (f1 c_0))) (not (= c_2 (f3 c_1 c4))) (not (= (f3 c_0 c4) c_2)) (not (= (f2 c5) (f1 c_1)))) (or (= c_0 c_2) (not (= (f2 c4) (f1 c_0))) (not (= c_0 (f3 c_2 c4))) (not (= (f3 c_0 c4) c_0)) (not (= (f2 c5) (f1 c_2)))) (or (= c_0 c_2) (not (= (f2 c4) (f1 c_0))) (not (= c_1 (f3 c_2 c4))) (not (= (f3 c_0 c4) c_1)) (not (= (f2 c5) (f1 c_2)))) (or (= c_0 c_2) (not (= (f2 c4) (f1 c_0))) (not (= c_2 (f3 c_2 c4))) (not (= (f3 c_0 c4) c_2)) (not (= (f2 c5) (f1 c_2)))) (or (= c_0 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f3 c_0 c4) c_0)) (not (= c_0 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_0)))) (or (= c_0 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f3 c_0 c4) c_1)) (not (= c_1 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_0)))) (or (= c_0 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f3 c_0 c4) c_2)) (not (= c_2 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_0)))) (or (= c_1 c_1) (not (= (f2 c4) (f1 c_1))) (not (= c_0 (f3 c_1 c4))) (not (= c_0 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_1)))) (or (= c_1 c_1) (not (= (f2 c4) (f1 c_1))) (not (= c_1 (f3 c_1 c4))) (not (= c_1 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_1)))) (or (= c_1 c_1) (not (= (f2 c4) (f1 c_1))) (not (= c_2 (f3 c_1 c4))) (not (= c_2 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_1)))) (or (= c_1 c_2) (not (= (f2 c4) (f1 c_1))) (not (= c_0 (f3 c_2 c4))) (not (= c_0 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_2)))) (or (= c_1 c_2) (not (= (f2 c4) (f1 c_1))) (not (= c_1 (f3 c_2 c4))) (not (= c_1 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_2)))) (or (= c_1 c_2) (not (= (f2 c4) (f1 c_1))) (not (= c_2 (f3 c_2 c4))) (not (= c_2 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_2)))) (or (= c_0 c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_0 c4) c_0)) (not (= c_0 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_0)))) (or (= c_0 c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_0 c4) c_1)) (not (= c_1 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_0)))) (or (= c_0 c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_0 c4) c_2)) (not (= c_2 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_0)))) (or (= c_1 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_0 (f3 c_1 c4))) (not (= c_0 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_1)))) (or (= c_1 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_1 (f3 c_1 c4))) (not (= c_1 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_1)))) (or (= c_1 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_2 (f3 c_1 c4))) (not (= c_2 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_1)))) (or (= c_2 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_0 (f3 c_2 c4))) (not (= c_0 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_2)))) (or (= c_2 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_1 (f3 c_2 c4))) (not (= c_1 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_2)))) (or (= c_2 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_2 (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_2)))) (= (f2 (f3 c4 c5)) (f1 c6)) (= (f2 c5) (f1 c4)) (= (f1 c7) (f2 (f3 c4 c5))) (= c_0 (f3 c_0 (f1 c_0))) (= (f3 c_1 (f1 c_1)) c_1) (= (f3 c_2 (f1 c_2)) c_2) (or (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0))) (not (= (f2 c_0) (f1 c_0))) (not (= (f2 c_0) (f1 c_0)))) (or (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1)) (not (= (f2 c_0) (f1 c_0))) (not (= (f1 c_0) (f2 c_1)))) (or (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2))) (not (= (f2 c_0) (f1 c_0))) (not (= (f2 c_2) (f1 c_0)))) (or (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0))) (not (= (f1 c_0) (f2 c_1))) (not (= (f2 c_0) (f1 c_1)))) (or (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_1) (f2 c_1)))) (or (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f1 c_0) (f2 c_1))) (not (= (f2 c_2) (f1 c_1)))) (or (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0))) (not (= (f2 c_2) (f1 c_0))) (not (= (f2 c_0) (f1 c_2)))) (or (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1))) (not (= (f2 c_2) (f1 c_0))) (not (= (f1 c_2) (f2 c_1)))) (or (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2)) (not (= (f2 c_2) (f1 c_0))) (not (= (f2 c_2) (f1 c_2)))) (or (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0))) (not (= (f2 c_0) (f1 c_1))) (not (= (f2 c_0) (f1 c_0)))) (or (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1))) (not (= (f2 c_0) (f1 c_1))) (not (= (f1 c_0) (f2 c_1)))) (or (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2)) (not (= (f2 c_0) (f1 c_1))) (not (= (f2 c_2) (f1 c_0)))) (or (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c_0) (f1 c_1)))) (or (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f2 c_1)))) (or (= (f3 (f3 c_1 c_1) c_2) (f3 c_1 (f3 c_1 c_2))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c_2) (f1 c_1)))) (or (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0))) (not (= (f2 c_2) (f1 c_1))) (not (= (f2 c_0) (f1 c_2)))) (or (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1)) (not (= (f2 c_2) (f1 c_1))) (not (= (f1 c_2) (f2 c_1)))) (or (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2))) (not (= (f2 c_2) (f1 c_1))) (not (= (f2 c_2) (f1 c_2)))) (or (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0))) (not (= (f2 c_0) (f1 c_2))) (not (= (f2 c_0) (f1 c_0)))) (or (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1))) (not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_0) (f2 c_1)))) (or (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2)) (not (= (f2 c_0) (f1 c_2))) (not (= (f2 c_2) (f1 c_0)))) (or (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0))) (not (= (f1 c_2) (f2 c_1))) (not (= (f2 c_0) (f1 c_1)))) (or (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1))) (not (= (f1 c_2) (f2 c_1))) (not (= (f1 c_1) (f2 c_1)))) (or (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2)) (not (= (f1 c_2) (f2 c_1))) (not (= (f2 c_2) (f1 c_1)))) (or (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c_2) (f1 c_2))) (not (= (f2 c_0) (f1 c_2)))) (or (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1))) (not (= (f2 c_2) (f1 c_2))) (not (= (f1 c_2) (f2 c_1)))) (or (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2))) (not (= (f2 c_2) (f1 c_2))) (not (= (f2 c_2) (f1 c_2)))) (not (= c6 c7)) (or (= (f3 c_0 c_0) c_0) (= (f3 c_0 c_0) c_1) (= (f3 c_0 c_0) c_2)) (or (= c_0 (f3 c_0 c_1)) (= c_1 (f3 c_0 c_1)) (= (f3 c_0 c_1) c_2)) (or (= (f3 c_0 c_2) c_0) (= (f3 c_0 c_2) c_1) (= (f3 c_0 c_2) c_2)) (or (= (f3 c_1 c_0) c_0) (= (f3 c_1 c_0) c_1) (= (f3 c_1 c_0) c_2)) (or (= (f3 c_1 c_1) c_0) (= (f3 c_1 c_1) c_1) (= (f3 c_1 c_1) c_2)) (or (= (f3 c_1 c_2) c_0) (= (f3 c_1 c_2) c_1) (= (f3 c_1 c_2) c_2)) (or (= (f3 c_2 c_0) c_0) (= (f3 c_2 c_0) c_1) (= (f3 c_2 c_0) c_2)) (or (= (f3 c_2 c_1) c_0) (= (f3 c_2 c_1) c_1) (= (f3 c_2 c_1) c_2)) (or (= c_0 (f3 c_2 c_2)) (= (f3 c_2 c_2) c_1) (= (f3 c_2 c_2) c_2)) (or (= (f2 c_0) c_0) (= (f2 c_0) c_1) (= (f2 c_0) c_2)) (or (= c_0 (f2 c_1)) (= c_1 (f2 c_1)) (= (f2 c_1) c_2)) (or (= (f2 c_2) c_0) (= (f2 c_2) c_1) (= (f2 c_2) c_2)) (or (= (f1 c_0) c_0) (= (f1 c_0) c_1) (= (f1 c_0) c_2)) (or (= (f1 c_1) c_0) (= (f1 c_1) c_1) (= (f1 c_1) c_2)) (or (= c_0 (f1 c_2)) (= (f1 c_2) c_1) (= (f1 c_2) c_2)) (or (= c_0 c6) (= c6 c_1) (= c6 c_2)) (or (= c4 c_0) (= c4 c_1) (= c4 c_2)) (or (= c5 c_0) (= c5 c_1) (= c5 c_2)) (or (= c_0 c7) (= c_1 c7) (= c7 c_2))))))
(set .c6 (and :clauses (.c5) :conclusion ((and (not (= c_0 c_1)) (not (= c_0 c_2)) (not (= c_1 c_2))))))
(set .c7 (and :clauses (.c6) :conclusion ((not (= c_0 c_1)))))
(set .c8 (and :clauses (.c6) :conclusion ((not (= c_0 c_2)))))
(set .c9 (and :clauses (.c6) :conclusion ((not (= c_1 c_2)))))
(set .c10 (and :clauses (.c5) :conclusion ((or (= (f2 (f3 c_0 c_0)) (f2 c_0)) (not (= (f2 c_0) (f1 c_0)))))))
(set .c11 (or :clauses (.c10) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 c_0)) (not (= (f2 c_0) (f1 c_0))))))
(set .c12 (and :clauses (.c5) :conclusion ((or (= (f2 c_0) (f2 (f3 c_0 c_1))) (not (= (f1 c_0) (f2 c_1)))))))
(set .c13 (or :clauses (.c12) :conclusion ((= (f2 c_0) (f2 (f3 c_0 c_1))) (not (= (f1 c_0) (f2 c_1))))))
(set .c14 (and :clauses (.c5) :conclusion ((or (= (f2 c_0) (f2 (f3 c_0 c_2))) (not (= (f2 c_2) (f1 c_0)))))))
(set .c15 (or :clauses (.c14) :conclusion ((= (f2 c_0) (f2 (f3 c_0 c_2))) (not (= (f2 c_2) (f1 c_0))))))
(set .c16 (and :clauses (.c5) :conclusion ((or (= (f2 (f3 c_1 c_0)) (f2 c_1)) (not (= (f2 c_0) (f1 c_1)))))))
(set .c17 (or :clauses (.c16) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 c_1)) (not (= (f2 c_0) (f1 c_1))))))
(set .c18 (and :clauses (.c5) :conclusion ((or (= (f2 (f3 c_1 c_1)) (f2 c_1)) (not (= (f1 c_1) (f2 c_1)))))))
(set .c19 (or :clauses (.c18) :conclusion ((= (f2 (f3 c_1 c_1)) (f2 c_1)) (not (= (f1 c_1) (f2 c_1))))))
(set .c20 (and :clauses (.c5) :conclusion ((or (= (f2 (f3 c_1 c_2)) (f2 c_1)) (not (= (f2 c_2) (f1 c_1)))))))
(set .c21 (or :clauses (.c20) :conclusion ((= (f2 (f3 c_1 c_2)) (f2 c_1)) (not (= (f2 c_2) (f1 c_1))))))
(set .c22 (and :clauses (.c5) :conclusion ((or (= (f2 c_2) (f2 (f3 c_2 c_0))) (not (= (f2 c_0) (f1 c_2)))))))
(set .c23 (or :clauses (.c22) :conclusion ((= (f2 c_2) (f2 (f3 c_2 c_0))) (not (= (f2 c_0) (f1 c_2))))))
(set .c24 (and :clauses (.c5) :conclusion ((or (= (f2 c_2) (f2 (f3 c_2 c_1))) (not (= (f1 c_2) (f2 c_1)))))))
(set .c25 (or :clauses (.c24) :conclusion ((= (f2 c_2) (f2 (f3 c_2 c_1))) (not (= (f1 c_2) (f2 c_1))))))
(set .c26 (and :clauses (.c5) :conclusion ((or (= (f2 c_2) (f2 (f3 c_2 c_2))) (not (= (f2 c_2) (f1 c_2)))))))
(set .c27 (or :clauses (.c26) :conclusion ((= (f2 c_2) (f2 (f3 c_2 c_2))) (not (= (f2 c_2) (f1 c_2))))))
(set .c28 (and :clauses (.c5) :conclusion ((= (f2 c_0) (f1 (f2 c_0))))))
(set .c29 (and :clauses (.c5) :conclusion ((= (f1 (f2 c_1)) (f2 c_1)))))
(set .c30 (and :clauses (.c5) :conclusion ((= (f2 c_2) (f1 (f2 c_2))))))
(set .c31 (and :clauses (.c5) :conclusion ((= (f3 (f2 c_0) c_0) c_0))))
(set .c32 (and :clauses (.c5) :conclusion ((= c_1 (f3 (f2 c_1) c_1)))))
(set .c33 (and :clauses (.c5) :conclusion ((= (f3 (f2 c_2) c_2) c_2))))
(set .c34 (and :clauses (.c5) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5))))))
(set .c35 (and :clauses (.c5) :conclusion ((or (= c_0 c_0) (not (= c_0 (f3 c_0 c5))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= c_0 (f3 c_0 c5)))))))
(set .c36 (or :clauses (.c35) :conclusion ((= c_0 c_0) (not (= c_0 (f3 c_0 c5))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_0))))))
(set .c37 (and :clauses (.c5) :conclusion ((or (= c_0 c_0) (not (= (f3 c_0 c5) c_1)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_1))))))
(set .c38 (or :clauses (.c37) :conclusion ((= c_0 c_0) (not (= (f3 c_0 c5) c_1)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_0))))))
(set .c39 (and :clauses (.c5) :conclusion ((or (= c_0 c_0) (not (= (f3 c_0 c5) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_2))))))
(set .c40 (or :clauses (.c39) :conclusion ((= c_0 c_0) (not (= (f3 c_0 c5) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_0))))))
(set .c41 (and :clauses (.c5) :conclusion ((or (= c_0 c_1) (not (= c_0 (f3 c_0 c5))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= c_0 (f3 c_1 c5)))))))
(set .c42 (or :clauses (.c41) :conclusion ((= c_0 c_1) (not (= c_0 (f3 c_0 c5))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= c_0 (f3 c_1 c5))))))
(set .c43 (and :clauses (.c5) :conclusion ((or (= c_0 c_1) (not (= (f3 c_0 c5) c_1)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_1))))))
(set .c44 (or :clauses (.c43) :conclusion ((= c_0 c_1) (not (= (f3 c_0 c5) c_1)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_1)))))
(set .c45 (and :clauses (.c5) :conclusion ((or (= c_0 c_1) (not (= (f3 c_0 c5) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_2))))))
(set .c46 (or :clauses (.c45) :conclusion ((= c_0 c_1) (not (= (f3 c_0 c5) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_2)))))
(set .c47 (and :clauses (.c5) :conclusion ((or (= c_0 c_2) (not (= c_0 (f3 c_0 c5))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5)))))))
(set .c48 (or :clauses (.c47) :conclusion ((= c_0 c_2) (not (= c_0 (f3 c_0 c5))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5))))))
(set .c49 (and :clauses (.c5) :conclusion ((or (= c_0 c_2) (not (= (f3 c_0 c5) c_1)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_1))))))
(set .c50 (or :clauses (.c49) :conclusion ((= c_0 c_2) (not (= (f3 c_0 c5) c_1)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_1)))))
(set .c51 (and :clauses (.c5) :conclusion ((or (= c_0 c_2) (not (= (f3 c_0 c5) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_2))))))
(set .c52 (or :clauses (.c51) :conclusion ((= c_0 c_2) (not (= (f3 c_0 c5) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_2)))))
(set .c53 (and :clauses (.c5) :conclusion ((or (= c_0 c_1) (not (= c_0 (f3 c_1 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= c_0 (f3 c_0 c5)))))))
(set .c54 (or :clauses (.c53) :conclusion ((= c_0 c_1) (not (= c_0 (f3 c_1 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= c_0 (f3 c_0 c5))))))
(set .c55 (and :clauses (.c5) :conclusion ((or (= c_0 c_1) (not (= (f3 c_1 c5) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_1))))))
(set .c56 (or :clauses (.c55) :conclusion ((= c_0 c_1) (not (= (f3 c_1 c5) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_1)))))
(set .c57 (and :clauses (.c5) :conclusion ((or (= c_0 c_1) (not (= (f3 c_1 c5) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_2))))))
(set .c58 (or :clauses (.c57) :conclusion ((= c_0 c_1) (not (= (f3 c_1 c5) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_2)))))
(set .c59 (and :clauses (.c5) :conclusion ((or (= c_1 c_1) (not (= c_0 (f3 c_1 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_1))) (not (= c_0 (f3 c_1 c5)))))))
(set .c60 (or :clauses (.c59) :conclusion ((= c_1 c_1) (not (= c_0 (f3 c_1 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_1))))))
(set .c61 (and :clauses (.c5) :conclusion ((or (= c_1 c_1) (not (= (f3 c_1 c5) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_1))))))
(set .c62 (or :clauses (.c61) :conclusion ((= c_1 c_1) (not (= (f3 c_1 c5) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_1))))))
(set .c63 (and :clauses (.c5) :conclusion ((or (= c_1 c_1) (not (= (f3 c_1 c5) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_2))))))
(set .c64 (or :clauses (.c63) :conclusion ((= c_1 c_1) (not (= (f3 c_1 c5) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_1))))))
(set .c65 (and :clauses (.c5) :conclusion ((or (= c_1 c_2) (not (= c_0 (f3 c_1 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5)))))))
(set .c66 (or :clauses (.c65) :conclusion ((= c_1 c_2) (not (= c_0 (f3 c_1 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5))))))
(set .c67 (and :clauses (.c5) :conclusion ((or (= c_1 c_2) (not (= (f3 c_1 c5) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_1))))))
(set .c68 (or :clauses (.c67) :conclusion ((= c_1 c_2) (not (= (f3 c_1 c5) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_1)))))
(set .c69 (and :clauses (.c5) :conclusion ((or (= c_1 c_2) (not (= (f3 c_1 c5) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_2))))))
(set .c70 (or :clauses (.c69) :conclusion ((= c_1 c_2) (not (= (f3 c_1 c5) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_2)))))
(set .c71 (and :clauses (.c5) :conclusion ((or (= c_0 c_2) (not (= c_0 (f3 c_2 c5))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_0 (f3 c_0 c5)))))))
(set .c72 (or :clauses (.c71) :conclusion ((= c_0 c_2) (not (= c_0 (f3 c_2 c5))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_0 (f3 c_0 c5))))))
(set .c73 (and :clauses (.c5) :conclusion ((or (= c_0 c_2) (not (= (f3 c_2 c5) c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_1))))))
(set .c74 (or :clauses (.c73) :conclusion ((= c_0 c_2) (not (= (f3 c_2 c5) c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_1)))))
(set .c75 (and :clauses (.c5) :conclusion ((or (= c_0 c_2) (not (= (f3 c_2 c5) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_2))))))
(set .c76 (or :clauses (.c75) :conclusion ((= c_0 c_2) (not (= (f3 c_2 c5) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_2)))))
(set .c77 (and :clauses (.c5) :conclusion ((or (= c_1 c_2) (not (= c_0 (f3 c_2 c5))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= c_0 (f3 c_1 c5)))))))
(set .c78 (or :clauses (.c77) :conclusion ((= c_1 c_2) (not (= c_0 (f3 c_2 c5))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= c_0 (f3 c_1 c5))))))
(set .c79 (and :clauses (.c5) :conclusion ((or (= c_1 c_2) (not (= (f3 c_2 c5) c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_1))))))
(set .c80 (or :clauses (.c79) :conclusion ((= c_1 c_2) (not (= (f3 c_2 c5) c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_1)))))
(set .c81 (and :clauses (.c5) :conclusion ((or (= c_1 c_2) (not (= (f3 c_2 c5) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_2))))))
(set .c82 (or :clauses (.c81) :conclusion ((= c_1 c_2) (not (= (f3 c_2 c5) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_2)))))
(set .c83 (and :clauses (.c5) :conclusion ((or (= c_2 c_2) (not (= c_0 (f3 c_2 c5))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5)))))))
(set .c84 (or :clauses (.c83) :conclusion ((= c_2 c_2) (not (= c_0 (f3 c_2 c5))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_2))))))
(set .c85 (and :clauses (.c5) :conclusion ((or (= c_2 c_2) (not (= (f3 c_2 c5) c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_1))))))
(set .c86 (or :clauses (.c85) :conclusion ((= c_2 c_2) (not (= (f3 c_2 c5) c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_2))))))
(set .c87 (and :clauses (.c5) :conclusion ((or (= c_2 c_2) (not (= (f3 c_2 c5) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_2))))))
(set .c88 (or :clauses (.c87) :conclusion ((= c_2 c_2) (not (= (f3 c_2 c5) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_2))))))
(set .c89 (and :clauses (.c5) :conclusion ((= (f1 c_0) (f2 (f1 c_0))))))
(set .c90 (and :clauses (.c5) :conclusion ((= (f2 (f1 c_1)) (f1 c_1)))))
(set .c91 (and :clauses (.c5) :conclusion ((= (f2 (f1 c_2)) (f1 c_2)))))
(set .c92 (and :clauses (.c5) :conclusion ((or (not (= (f2 c_0) (f1 c_0))) (= (f1 (f3 c_0 c_0)) (f1 c_0))))))
(set .c93 (or :clauses (.c92) :conclusion ((not (= (f2 c_0) (f1 c_0))) (= (f1 (f3 c_0 c_0)) (f1 c_0)))))
(set .c94 (and :clauses (.c5) :conclusion ((or (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f1 (f3 c_0 c_1)))))))
(set .c95 (or :clauses (.c94) :conclusion ((not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f1 (f3 c_0 c_1))))))
(set .c96 (and :clauses (.c5) :conclusion ((or (not (= (f2 c_2) (f1 c_0))) (= (f1 (f3 c_0 c_2)) (f1 c_2))))))
(set .c97 (or :clauses (.c96) :conclusion ((not (= (f2 c_2) (f1 c_0))) (= (f1 (f3 c_0 c_2)) (f1 c_2)))))
(set .c98 (and :clauses (.c5) :conclusion ((or (not (= (f2 c_0) (f1 c_1))) (= (f1 (f3 c_1 c_0)) (f1 c_0))))))
(set .c99 (or :clauses (.c98) :conclusion ((not (= (f2 c_0) (f1 c_1))) (= (f1 (f3 c_1 c_0)) (f1 c_0)))))
(set .c100 (and :clauses (.c5) :conclusion ((or (not (= (f1 c_1) (f2 c_1))) (= (f1 (f3 c_1 c_1)) (f1 c_1))))))
(set .c101 (or :clauses (.c100) :conclusion ((not (= (f1 c_1) (f2 c_1))) (= (f1 (f3 c_1 c_1)) (f1 c_1)))))
(set .c102 (and :clauses (.c5) :conclusion ((or (not (= (f2 c_2) (f1 c_1))) (= (f1 (f3 c_1 c_2)) (f1 c_2))))))
(set .c103 (or :clauses (.c102) :conclusion ((not (= (f2 c_2) (f1 c_1))) (= (f1 (f3 c_1 c_2)) (f1 c_2)))))
(set .c104 (and :clauses (.c5) :conclusion ((or (not (= (f2 c_0) (f1 c_2))) (= (f1 c_0) (f1 (f3 c_2 c_0)))))))
(set .c105 (or :clauses (.c104) :conclusion ((not (= (f2 c_0) (f1 c_2))) (= (f1 c_0) (f1 (f3 c_2 c_0))))))
(set .c106 (and :clauses (.c5) :conclusion ((or (not (= (f1 c_2) (f2 c_1))) (= (f1 c_1) (f1 (f3 c_2 c_1)))))))
(set .c107 (or :clauses (.c106) :conclusion ((not (= (f1 c_2) (f2 c_1))) (= (f1 c_1) (f1 (f3 c_2 c_1))))))
(set .c108 (and :clauses (.c5) :conclusion ((or (not (= (f2 c_2) (f1 c_2))) (= (f1 (f3 c_2 c_2)) (f1 c_2))))))
(set .c109 (or :clauses (.c108) :conclusion ((not (= (f2 c_2) (f1 c_2))) (= (f1 (f3 c_2 c_2)) (f1 c_2)))))
(set .c110 (and :clauses (.c5) :conclusion ((or (= c_0 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f3 c_0 c4) c_0)) (not (= (f3 c_0 c4) c_0)) (not (= (f2 c5) (f1 c_0)))))))
(set .c111 (or :clauses (.c110) :conclusion ((= c_0 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f3 c_0 c4) c_0)) (not (= (f2 c5) (f1 c_0))))))
(set .c112 (and :clauses (.c5) :conclusion ((or (= c_0 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f3 c_0 c4) c_1)) (not (= (f3 c_0 c4) c_1)) (not (= (f2 c5) (f1 c_0)))))))
(set .c113 (or :clauses (.c112) :conclusion ((= c_0 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f3 c_0 c4) c_1)) (not (= (f2 c5) (f1 c_0))))))
(set .c114 (and :clauses (.c5) :conclusion ((or (= c_0 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f3 c_0 c4) c_2)) (not (= (f3 c_0 c4) c_2)) (not (= (f2 c5) (f1 c_0)))))))
(set .c115 (or :clauses (.c114) :conclusion ((= c_0 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f3 c_0 c4) c_2)) (not (= (f2 c5) (f1 c_0))))))
(set .c116 (and :clauses (.c5) :conclusion ((or (= c_0 c_1) (not (= (f2 c4) (f1 c_0))) (not (= c_0 (f3 c_1 c4))) (not (= (f3 c_0 c4) c_0)) (not (= (f2 c5) (f1 c_1)))))))
(set .c117 (or :clauses (.c116) :conclusion ((= c_0 c_1) (not (= (f2 c4) (f1 c_0))) (not (= c_0 (f3 c_1 c4))) (not (= (f3 c_0 c4) c_0)) (not (= (f2 c5) (f1 c_1))))))
(set .c118 (and :clauses (.c5) :conclusion ((or (= c_0 c_1) (not (= (f2 c4) (f1 c_0))) (not (= c_1 (f3 c_1 c4))) (not (= (f3 c_0 c4) c_1)) (not (= (f2 c5) (f1 c_1)))))))
(set .c119 (or :clauses (.c118) :conclusion ((= c_0 c_1) (not (= (f2 c4) (f1 c_0))) (not (= c_1 (f3 c_1 c4))) (not (= (f3 c_0 c4) c_1)) (not (= (f2 c5) (f1 c_1))))))
(set .c120 (and :clauses (.c5) :conclusion ((or (= c_0 c_1) (not (= (f2 c4) (f1 c_0))) (not (= c_2 (f3 c_1 c4))) (not (= (f3 c_0 c4) c_2)) (not (= (f2 c5) (f1 c_1)))))))
(set .c121 (or :clauses (.c120) :conclusion ((= c_0 c_1) (not (= (f2 c4) (f1 c_0))) (not (= c_2 (f3 c_1 c4))) (not (= (f3 c_0 c4) c_2)) (not (= (f2 c5) (f1 c_1))))))
(set .c122 (and :clauses (.c5) :conclusion ((or (= c_0 c_2) (not (= (f2 c4) (f1 c_0))) (not (= c_0 (f3 c_2 c4))) (not (= (f3 c_0 c4) c_0)) (not (= (f2 c5) (f1 c_2)))))))
(set .c123 (or :clauses (.c122) :conclusion ((= c_0 c_2) (not (= (f2 c4) (f1 c_0))) (not (= c_0 (f3 c_2 c4))) (not (= (f3 c_0 c4) c_0)) (not (= (f2 c5) (f1 c_2))))))
(set .c124 (and :clauses (.c5) :conclusion ((or (= c_0 c_2) (not (= (f2 c4) (f1 c_0))) (not (= c_1 (f3 c_2 c4))) (not (= (f3 c_0 c4) c_1)) (not (= (f2 c5) (f1 c_2)))))))
(set .c125 (or :clauses (.c124) :conclusion ((= c_0 c_2) (not (= (f2 c4) (f1 c_0))) (not (= c_1 (f3 c_2 c4))) (not (= (f3 c_0 c4) c_1)) (not (= (f2 c5) (f1 c_2))))))
(set .c126 (and :clauses (.c5) :conclusion ((or (= c_0 c_2) (not (= (f2 c4) (f1 c_0))) (not (= c_2 (f3 c_2 c4))) (not (= (f3 c_0 c4) c_2)) (not (= (f2 c5) (f1 c_2)))))))
(set .c127 (or :clauses (.c126) :conclusion ((= c_0 c_2) (not (= (f2 c4) (f1 c_0))) (not (= c_2 (f3 c_2 c4))) (not (= (f3 c_0 c4) c_2)) (not (= (f2 c5) (f1 c_2))))))
(set .c128 (and :clauses (.c5) :conclusion ((or (= c_0 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f3 c_0 c4) c_0)) (not (= c_0 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_0)))))))
(set .c129 (or :clauses (.c128) :conclusion ((= c_0 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f3 c_0 c4) c_0)) (not (= c_0 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_0))))))
(set .c130 (and :clauses (.c5) :conclusion ((or (= c_0 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f3 c_0 c4) c_1)) (not (= c_1 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_0)))))))
(set .c131 (or :clauses (.c130) :conclusion ((= c_0 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f3 c_0 c4) c_1)) (not (= c_1 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_0))))))
(set .c132 (and :clauses (.c5) :conclusion ((or (= c_0 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f3 c_0 c4) c_2)) (not (= c_2 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_0)))))))
(set .c133 (or :clauses (.c132) :conclusion ((= c_0 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f3 c_0 c4) c_2)) (not (= c_2 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_0))))))
(set .c134 (and :clauses (.c5) :conclusion ((or (= c_1 c_1) (not (= (f2 c4) (f1 c_1))) (not (= c_0 (f3 c_1 c4))) (not (= c_0 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_1)))))))
(set .c135 (or :clauses (.c134) :conclusion ((= c_1 c_1) (not (= (f2 c4) (f1 c_1))) (not (= c_0 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_1))))))
(set .c136 (and :clauses (.c5) :conclusion ((or (= c_1 c_1) (not (= (f2 c4) (f1 c_1))) (not (= c_1 (f3 c_1 c4))) (not (= c_1 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_1)))))))
(set .c137 (or :clauses (.c136) :conclusion ((= c_1 c_1) (not (= (f2 c4) (f1 c_1))) (not (= c_1 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_1))))))
(set .c138 (and :clauses (.c5) :conclusion ((or (= c_1 c_1) (not (= (f2 c4) (f1 c_1))) (not (= c_2 (f3 c_1 c4))) (not (= c_2 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_1)))))))
(set .c139 (or :clauses (.c138) :conclusion ((= c_1 c_1) (not (= (f2 c4) (f1 c_1))) (not (= c_2 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_1))))))
(set .c140 (and :clauses (.c5) :conclusion ((or (= c_1 c_2) (not (= (f2 c4) (f1 c_1))) (not (= c_0 (f3 c_2 c4))) (not (= c_0 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_2)))))))
(set .c141 (or :clauses (.c140) :conclusion ((= c_1 c_2) (not (= (f2 c4) (f1 c_1))) (not (= c_0 (f3 c_2 c4))) (not (= c_0 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_2))))))
(set .c142 (and :clauses (.c5) :conclusion ((or (= c_1 c_2) (not (= (f2 c4) (f1 c_1))) (not (= c_1 (f3 c_2 c4))) (not (= c_1 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_2)))))))
(set .c143 (or :clauses (.c142) :conclusion ((= c_1 c_2) (not (= (f2 c4) (f1 c_1))) (not (= c_1 (f3 c_2 c4))) (not (= c_1 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_2))))))
(set .c144 (and :clauses (.c5) :conclusion ((or (= c_1 c_2) (not (= (f2 c4) (f1 c_1))) (not (= c_2 (f3 c_2 c4))) (not (= c_2 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_2)))))))
(set .c145 (or :clauses (.c144) :conclusion ((= c_1 c_2) (not (= (f2 c4) (f1 c_1))) (not (= c_2 (f3 c_2 c4))) (not (= c_2 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_2))))))
(set .c146 (and :clauses (.c5) :conclusion ((or (= c_0 c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_0 c4) c_0)) (not (= c_0 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_0)))))))
(set .c147 (or :clauses (.c146) :conclusion ((= c_0 c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_0 c4) c_0)) (not (= c_0 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_0))))))
(set .c148 (and :clauses (.c5) :conclusion ((or (= c_0 c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_0 c4) c_1)) (not (= c_1 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_0)))))))
(set .c149 (or :clauses (.c148) :conclusion ((= c_0 c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_0 c4) c_1)) (not (= c_1 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_0))))))
(set .c150 (and :clauses (.c5) :conclusion ((or (= c_0 c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_0 c4) c_2)) (not (= c_2 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_0)))))))
(set .c151 (or :clauses (.c150) :conclusion ((= c_0 c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_0 c4) c_2)) (not (= c_2 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_0))))))
(set .c152 (and :clauses (.c5) :conclusion ((or (= c_1 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_0 (f3 c_1 c4))) (not (= c_0 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_1)))))))
(set .c153 (or :clauses (.c152) :conclusion ((= c_1 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_0 (f3 c_1 c4))) (not (= c_0 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_1))))))
(set .c154 (and :clauses (.c5) :conclusion ((or (= c_1 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_1 (f3 c_1 c4))) (not (= c_1 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_1)))))))
(set .c155 (or :clauses (.c154) :conclusion ((= c_1 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_1 (f3 c_1 c4))) (not (= c_1 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_1))))))
(set .c156 (and :clauses (.c5) :conclusion ((or (= c_1 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_2 (f3 c_1 c4))) (not (= c_2 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_1)))))))
(set .c157 (or :clauses (.c156) :conclusion ((= c_1 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_2 (f3 c_1 c4))) (not (= c_2 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_1))))))
(set .c158 (and :clauses (.c5) :conclusion ((or (= c_2 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_0 (f3 c_2 c4))) (not (= c_0 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_2)))))))
(set .c159 (or :clauses (.c158) :conclusion ((= c_2 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_0 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_2))))))
(set .c160 (and :clauses (.c5) :conclusion ((or (= c_2 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_1 (f3 c_2 c4))) (not (= c_1 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_2)))))))
(set .c161 (or :clauses (.c160) :conclusion ((= c_2 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_1 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_2))))))
(set .c162 (and :clauses (.c5) :conclusion ((or (= c_2 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_2 (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_2)))))))
(set .c163 (or :clauses (.c162) :conclusion ((= c_2 c_2) (not (= (f2 c4) (f1 c_2))) (not (= c_2 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_2))))))
(set .c164 (and :clauses (.c5) :conclusion ((= (f2 (f3 c4 c5)) (f1 c6)))))
(set .c165 (and :clauses (.c5) :conclusion ((= (f2 c5) (f1 c4)))))
(set .c166 (and :clauses (.c5) :conclusion ((= (f1 c7) (f2 (f3 c4 c5))))))
(set .c167 (and :clauses (.c5) :conclusion ((= c_0 (f3 c_0 (f1 c_0))))))
(set .c168 (and :clauses (.c5) :conclusion ((= (f3 c_1 (f1 c_1)) c_1))))
(set .c169 (and :clauses (.c5) :conclusion ((= (f3 c_2 (f1 c_2)) c_2))))
(set .c170 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0))) (not (= (f2 c_0) (f1 c_0))) (not (= (f2 c_0) (f1 c_0)))))))
(set .c171 (or :clauses (.c170) :conclusion ((= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0))) (not (= (f2 c_0) (f1 c_0))))))
(set .c172 (and :clauses (.c5) :conclusion ((or (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1)) (not (= (f2 c_0) (f1 c_0))) (not (= (f1 c_0) (f2 c_1)))))))
(set .c173 (or :clauses (.c172) :conclusion ((= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1)) (not (= (f2 c_0) (f1 c_0))) (not (= (f1 c_0) (f2 c_1))))))
(set .c174 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2))) (not (= (f2 c_0) (f1 c_0))) (not (= (f2 c_2) (f1 c_0)))))))
(set .c175 (or :clauses (.c174) :conclusion ((= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2))) (not (= (f2 c_0) (f1 c_0))) (not (= (f2 c_2) (f1 c_0))))))
(set .c176 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0))) (not (= (f1 c_0) (f2 c_1))) (not (= (f2 c_0) (f1 c_1)))))))
(set .c177 (or :clauses (.c176) :conclusion ((= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0))) (not (= (f1 c_0) (f2 c_1))) (not (= (f2 c_0) (f1 c_1))))))
(set .c178 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_1) (f2 c_1)))))))
(set .c179 (or :clauses (.c178) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))))))
(set .c180 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f1 c_0) (f2 c_1))) (not (= (f2 c_2) (f1 c_1)))))))
(set .c181 (or :clauses (.c180) :conclusion ((= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f1 c_0) (f2 c_1))) (not (= (f2 c_2) (f1 c_1))))))
(set .c182 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0))) (not (= (f2 c_2) (f1 c_0))) (not (= (f2 c_0) (f1 c_2)))))))
(set .c183 (or :clauses (.c182) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0))) (not (= (f2 c_2) (f1 c_0))) (not (= (f2 c_0) (f1 c_2))))))
(set .c184 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1))) (not (= (f2 c_2) (f1 c_0))) (not (= (f1 c_2) (f2 c_1)))))))
(set .c185 (or :clauses (.c184) :conclusion ((= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1))) (not (= (f2 c_2) (f1 c_0))) (not (= (f1 c_2) (f2 c_1))))))
(set .c186 (and :clauses (.c5) :conclusion ((or (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2)) (not (= (f2 c_2) (f1 c_0))) (not (= (f2 c_2) (f1 c_2)))))))
(set .c187 (or :clauses (.c186) :conclusion ((= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2)) (not (= (f2 c_2) (f1 c_0))) (not (= (f2 c_2) (f1 c_2))))))
(set .c188 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0))) (not (= (f2 c_0) (f1 c_1))) (not (= (f2 c_0) (f1 c_0)))))))
(set .c189 (or :clauses (.c188) :conclusion ((= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0))) (not (= (f2 c_0) (f1 c_1))) (not (= (f2 c_0) (f1 c_0))))))
(set .c190 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1))) (not (= (f2 c_0) (f1 c_1))) (not (= (f1 c_0) (f2 c_1)))))))
(set .c191 (or :clauses (.c190) :conclusion ((= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1))) (not (= (f2 c_0) (f1 c_1))) (not (= (f1 c_0) (f2 c_1))))))
(set .c192 (and :clauses (.c5) :conclusion ((or (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2)) (not (= (f2 c_0) (f1 c_1))) (not (= (f2 c_2) (f1 c_0)))))))
(set .c193 (or :clauses (.c192) :conclusion ((= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2)) (not (= (f2 c_0) (f1 c_1))) (not (= (f2 c_2) (f1 c_0))))))
(set .c194 (and :clauses (.c5) :conclusion ((or (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c_0) (f1 c_1)))))))
(set .c195 (or :clauses (.c194) :conclusion ((= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c_0) (f1 c_1))))))
(set .c196 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f2 c_1)))))))
(set .c197 (or :clauses (.c196) :conclusion ((= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1))) (not (= (f1 c_1) (f2 c_1))))))
(set .c198 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_1 c_1) c_2) (f3 c_1 (f3 c_1 c_2))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c_2) (f1 c_1)))))))
(set .c199 (or :clauses (.c198) :conclusion ((= (f3 (f3 c_1 c_1) c_2) (f3 c_1 (f3 c_1 c_2))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c_2) (f1 c_1))))))
(set .c200 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0))) (not (= (f2 c_2) (f1 c_1))) (not (= (f2 c_0) (f1 c_2)))))))
(set .c201 (or :clauses (.c200) :conclusion ((= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0))) (not (= (f2 c_2) (f1 c_1))) (not (= (f2 c_0) (f1 c_2))))))
(set .c202 (and :clauses (.c5) :conclusion ((or (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1)) (not (= (f2 c_2) (f1 c_1))) (not (= (f1 c_2) (f2 c_1)))))))
(set .c203 (or :clauses (.c202) :conclusion ((= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1)) (not (= (f2 c_2) (f1 c_1))) (not (= (f1 c_2) (f2 c_1))))))
(set .c204 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2))) (not (= (f2 c_2) (f1 c_1))) (not (= (f2 c_2) (f1 c_2)))))))
(set .c205 (or :clauses (.c204) :conclusion ((= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2))) (not (= (f2 c_2) (f1 c_1))) (not (= (f2 c_2) (f1 c_2))))))
(set .c206 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0))) (not (= (f2 c_0) (f1 c_2))) (not (= (f2 c_0) (f1 c_0)))))))
(set .c207 (or :clauses (.c206) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0))) (not (= (f2 c_0) (f1 c_2))) (not (= (f2 c_0) (f1 c_0))))))
(set .c208 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1))) (not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_0) (f2 c_1)))))))
(set .c209 (or :clauses (.c208) :conclusion ((= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1))) (not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_0) (f2 c_1))))))
(set .c210 (and :clauses (.c5) :conclusion ((or (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2)) (not (= (f2 c_0) (f1 c_2))) (not (= (f2 c_2) (f1 c_0)))))))
(set .c211 (or :clauses (.c210) :conclusion ((= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2)) (not (= (f2 c_0) (f1 c_2))) (not (= (f2 c_2) (f1 c_0))))))
(set .c212 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0))) (not (= (f1 c_2) (f2 c_1))) (not (= (f2 c_0) (f1 c_1)))))))
(set .c213 (or :clauses (.c212) :conclusion ((= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0))) (not (= (f1 c_2) (f2 c_1))) (not (= (f2 c_0) (f1 c_1))))))
(set .c214 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1))) (not (= (f1 c_2) (f2 c_1))) (not (= (f1 c_1) (f2 c_1)))))))
(set .c215 (or :clauses (.c214) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1))) (not (= (f1 c_2) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))))))
(set .c216 (and :clauses (.c5) :conclusion ((or (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2)) (not (= (f1 c_2) (f2 c_1))) (not (= (f2 c_2) (f1 c_1)))))))
(set .c217 (or :clauses (.c216) :conclusion ((= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2)) (not (= (f1 c_2) (f2 c_1))) (not (= (f2 c_2) (f1 c_1))))))
(set .c218 (and :clauses (.c5) :conclusion ((or (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c_2) (f1 c_2))) (not (= (f2 c_0) (f1 c_2)))))))
(set .c219 (or :clauses (.c218) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c_2) (f1 c_2))) (not (= (f2 c_0) (f1 c_2))))))
(set .c220 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1))) (not (= (f2 c_2) (f1 c_2))) (not (= (f1 c_2) (f2 c_1)))))))
(set .c221 (or :clauses (.c220) :conclusion ((= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1))) (not (= (f2 c_2) (f1 c_2))) (not (= (f1 c_2) (f2 c_1))))))
(set .c222 (and :clauses (.c5) :conclusion ((or (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2))) (not (= (f2 c_2) (f1 c_2))) (not (= (f2 c_2) (f1 c_2)))))))
(set .c223 (or :clauses (.c222) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2))) (not (= (f2 c_2) (f1 c_2))))))
(set .c224 (and :clauses (.c5) :conclusion ((not (= c6 c7)))))
(set .c225 (and :clauses (.c5) :conclusion ((or (= (f3 c_0 c_0) c_0) (= (f3 c_0 c_0) c_1) (= (f3 c_0 c_0) c_2)))))
(set .c226 (or :clauses (.c225) :conclusion ((= (f3 c_0 c_0) c_0) (= (f3 c_0 c_0) c_1) (= (f3 c_0 c_0) c_2))))
(set .c227 (and :clauses (.c5) :conclusion ((or (= c_0 (f3 c_0 c_1)) (= c_1 (f3 c_0 c_1)) (= (f3 c_0 c_1) c_2)))))
(set .c228 (or :clauses (.c227) :conclusion ((= c_0 (f3 c_0 c_1)) (= c_1 (f3 c_0 c_1)) (= (f3 c_0 c_1) c_2))))
(set .c229 (and :clauses (.c5) :conclusion ((or (= (f3 c_0 c_2) c_0) (= (f3 c_0 c_2) c_1) (= (f3 c_0 c_2) c_2)))))
(set .c230 (or :clauses (.c229) :conclusion ((= (f3 c_0 c_2) c_0) (= (f3 c_0 c_2) c_1) (= (f3 c_0 c_2) c_2))))
(set .c231 (and :clauses (.c5) :conclusion ((or (= (f3 c_1 c_0) c_0) (= (f3 c_1 c_0) c_1) (= (f3 c_1 c_0) c_2)))))
(set .c232 (or :clauses (.c231) :conclusion ((= (f3 c_1 c_0) c_0) (= (f3 c_1 c_0) c_1) (= (f3 c_1 c_0) c_2))))
(set .c233 (and :clauses (.c5) :conclusion ((or (= (f3 c_1 c_1) c_0) (= (f3 c_1 c_1) c_1) (= (f3 c_1 c_1) c_2)))))
(set .c234 (or :clauses (.c233) :conclusion ((= (f3 c_1 c_1) c_0) (= (f3 c_1 c_1) c_1) (= (f3 c_1 c_1) c_2))))
(set .c235 (and :clauses (.c5) :conclusion ((or (= (f3 c_1 c_2) c_0) (= (f3 c_1 c_2) c_1) (= (f3 c_1 c_2) c_2)))))
(set .c236 (or :clauses (.c235) :conclusion ((= (f3 c_1 c_2) c_0) (= (f3 c_1 c_2) c_1) (= (f3 c_1 c_2) c_2))))
(set .c237 (and :clauses (.c5) :conclusion ((or (= (f3 c_2 c_0) c_0) (= (f3 c_2 c_0) c_1) (= (f3 c_2 c_0) c_2)))))
(set .c238 (or :clauses (.c237) :conclusion ((= (f3 c_2 c_0) c_0) (= (f3 c_2 c_0) c_1) (= (f3 c_2 c_0) c_2))))
(set .c239 (and :clauses (.c5) :conclusion ((or (= (f3 c_2 c_1) c_0) (= (f3 c_2 c_1) c_1) (= (f3 c_2 c_1) c_2)))))
(set .c240 (or :clauses (.c239) :conclusion ((= (f3 c_2 c_1) c_0) (= (f3 c_2 c_1) c_1) (= (f3 c_2 c_1) c_2))))
(set .c241 (and :clauses (.c5) :conclusion ((or (= c_0 (f3 c_2 c_2)) (= (f3 c_2 c_2) c_1) (= (f3 c_2 c_2) c_2)))))
(set .c242 (or :clauses (.c241) :conclusion ((= c_0 (f3 c_2 c_2)) (= (f3 c_2 c_2) c_1) (= (f3 c_2 c_2) c_2))))
(set .c243 (and :clauses (.c5) :conclusion ((or (= (f2 c_0) c_0) (= (f2 c_0) c_1) (= (f2 c_0) c_2)))))
(set .c244 (or :clauses (.c243) :conclusion ((= (f2 c_0) c_0) (= (f2 c_0) c_1) (= (f2 c_0) c_2))))
(set .c245 (and :clauses (.c5) :conclusion ((or (= c_0 (f2 c_1)) (= c_1 (f2 c_1)) (= (f2 c_1) c_2)))))
(set .c246 (or :clauses (.c245) :conclusion ((= c_0 (f2 c_1)) (= c_1 (f2 c_1)) (= (f2 c_1) c_2))))
(set .c247 (and :clauses (.c5) :conclusion ((or (= (f2 c_2) c_0) (= (f2 c_2) c_1) (= (f2 c_2) c_2)))))
(set .c248 (or :clauses (.c247) :conclusion ((= (f2 c_2) c_0) (= (f2 c_2) c_1) (= (f2 c_2) c_2))))
(set .c249 (and :clauses (.c5) :conclusion ((or (= (f1 c_0) c_0) (= (f1 c_0) c_1) (= (f1 c_0) c_2)))))
(set .c250 (or :clauses (.c249) :conclusion ((= (f1 c_0) c_0) (= (f1 c_0) c_1) (= (f1 c_0) c_2))))
(set .c251 (and :clauses (.c5) :conclusion ((or (= (f1 c_1) c_0) (= (f1 c_1) c_1) (= (f1 c_1) c_2)))))
(set .c252 (or :clauses (.c251) :conclusion ((= (f1 c_1) c_0) (= (f1 c_1) c_1) (= (f1 c_1) c_2))))
(set .c253 (and :clauses (.c5) :conclusion ((or (= c_0 (f1 c_2)) (= (f1 c_2) c_1) (= (f1 c_2) c_2)))))
(set .c254 (or :clauses (.c253) :conclusion ((= c_0 (f1 c_2)) (= (f1 c_2) c_1) (= (f1 c_2) c_2))))
(set .c255 (and :clauses (.c5) :conclusion ((or (= c_0 c6) (= c6 c_1) (= c6 c_2)))))
(set .c256 (or :clauses (.c255) :conclusion ((= c_0 c6) (= c6 c_1) (= c6 c_2))))
(set .c257 (and :clauses (.c5) :conclusion ((or (= c4 c_0) (= c4 c_1) (= c4 c_2)))))
(set .c258 (or :clauses (.c257) :conclusion ((= c4 c_0) (= c4 c_1) (= c4 c_2))))
(set .c259 (and :clauses (.c5) :conclusion ((or (= c5 c_0) (= c5 c_1) (= c5 c_2)))))
(set .c260 (or :clauses (.c259) :conclusion ((= c5 c_0) (= c5 c_1) (= c5 c_2))))
(set .c261 (and :clauses (.c5) :conclusion ((or (= c_0 c7) (= c_1 c7) (= c7 c_2)))))
(set .c262 (or :clauses (.c261) :conclusion ((= c_0 c7) (= c_1 c7) (= c7 c_2))))
(set .c263 (resolution :clauses (.c42 .c7) :conclusion ((not (= c_0 (f3 c_0 c5))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= c_0 (f3 c_1 c5))))))
(set .c264 (resolution :clauses (.c44 .c7) :conclusion ((not (= (f3 c_0 c5) c_1)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_1)))))
(set .c265 (resolution :clauses (.c46 .c7) :conclusion ((not (= (f3 c_0 c5) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_2)))))
(set .c266 (resolution :clauses (.c48 .c8) :conclusion ((not (= c_0 (f3 c_0 c5))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5))))))
(set .c267 (resolution :clauses (.c50 .c8) :conclusion ((not (= (f3 c_0 c5) c_1)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_1)))))
(set .c268 (resolution :clauses (.c52 .c8) :conclusion ((not (= (f3 c_0 c5) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_2)))))
(set .c269 (resolution :clauses (.c54 .c7) :conclusion ((not (= c_0 (f3 c_1 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= c_0 (f3 c_0 c5))))))
(set .c270 (resolution :clauses (.c56 .c7) :conclusion ((not (= (f3 c_1 c5) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_1)))))
(set .c271 (resolution :clauses (.c58 .c7) :conclusion ((not (= (f3 c_1 c5) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_2)))))
(set .c272 (resolution :clauses (.c66 .c9) :conclusion ((not (= c_0 (f3 c_1 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5))))))
(set .c273 (resolution :clauses (.c68 .c9) :conclusion ((not (= (f3 c_1 c5) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_1)))))
(set .c274 (resolution :clauses (.c70 .c9) :conclusion ((not (= (f3 c_1 c5) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 c5) c_2)))))
(set .c275 (resolution :clauses (.c72 .c8) :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_0 (f3 c_0 c5))))))
(set .c276 (resolution :clauses (.c74 .c8) :conclusion ((not (= (f3 c_2 c5) c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_1)))))
(set .c277 (resolution :clauses (.c76 .c8) :conclusion ((not (= (f3 c_2 c5) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c5) c_2)))))
(set .c278 (resolution :clauses (.c78 .c9) :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= c_0 (f3 c_1 c5))))))
(set .c279 (resolution :clauses (.c80 .c9) :conclusion ((not (= (f3 c_2 c5) c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_1)))))
(set .c280 (resolution :clauses (.c82 .c9) :conclusion ((not (= (f3 c_2 c5) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_2)))))
(set .c281 (resolution :clauses (.c117 .c7) :conclusion ((not (= (f2 c4) (f1 c_0))) (not (= c_0 (f3 c_1 c4))) (not (= (f3 c_0 c4) c_0)) (not (= (f2 c5) (f1 c_1))))))
(set .c282 (resolution :clauses (.c119 .c7) :conclusion ((not (= (f2 c4) (f1 c_0))) (not (= c_1 (f3 c_1 c4))) (not (= (f3 c_0 c4) c_1)) (not (= (f2 c5) (f1 c_1))))))
(set .c283 (resolution :clauses (.c121 .c7) :conclusion ((not (= (f2 c4) (f1 c_0))) (not (= c_2 (f3 c_1 c4))) (not (= (f3 c_0 c4) c_2)) (not (= (f2 c5) (f1 c_1))))))
(set .c284 (resolution :clauses (.c123 .c8) :conclusion ((not (= (f2 c4) (f1 c_0))) (not (= c_0 (f3 c_2 c4))) (not (= (f3 c_0 c4) c_0)) (not (= (f2 c5) (f1 c_2))))))
(set .c285 (resolution :clauses (.c125 .c8) :conclusion ((not (= (f2 c4) (f1 c_0))) (not (= c_1 (f3 c_2 c4))) (not (= (f3 c_0 c4) c_1)) (not (= (f2 c5) (f1 c_2))))))
(set .c286 (resolution :clauses (.c127 .c8) :conclusion ((not (= (f2 c4) (f1 c_0))) (not (= c_2 (f3 c_2 c4))) (not (= (f3 c_0 c4) c_2)) (not (= (f2 c5) (f1 c_2))))))
(set .c287 (resolution :clauses (.c129 .c7) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f3 c_0 c4) c_0)) (not (= c_0 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_0))))))
(set .c288 (resolution :clauses (.c131 .c7) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f3 c_0 c4) c_1)) (not (= c_1 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_0))))))
(set .c289 (resolution :clauses (.c133 .c7) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f3 c_0 c4) c_2)) (not (= c_2 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_0))))))
(set .c290 (resolution :clauses (.c141 .c9) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= c_0 (f3 c_2 c4))) (not (= c_0 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_2))))))
(set .c291 (resolution :clauses (.c143 .c9) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= c_1 (f3 c_2 c4))) (not (= c_1 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_2))))))
(set .c292 (resolution :clauses (.c145 .c9) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= c_2 (f3 c_2 c4))) (not (= c_2 (f3 c_1 c4))) (not (= (f2 c5) (f1 c_2))))))
(set .c293 (resolution :clauses (.c147 .c8) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f3 c_0 c4) c_0)) (not (= c_0 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_0))))))
(set .c294 (resolution :clauses (.c149 .c8) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f3 c_0 c4) c_1)) (not (= c_1 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_0))))))
(set .c295 (resolution :clauses (.c151 .c8) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f3 c_0 c4) c_2)) (not (= c_2 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_0))))))
(set .c296 (resolution :clauses (.c153 .c9) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= c_0 (f3 c_1 c4))) (not (= c_0 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_1))))))
(set .c297 (resolution :clauses (.c155 .c9) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= c_1 (f3 c_1 c4))) (not (= c_1 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_1))))))
(set .c298 (resolution :clauses (.c157 .c9) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= c_2 (f3 c_1 c4))) (not (= c_2 (f3 c_2 c4))) (not (= (f2 c5) (f1 c_1))))))
(set .c299 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c300 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c301 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c302 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 c7)) (= c6 c7))))
(set .c303 (resolution :clauses (.c302 .c224) :conclusion ((not (= c_0 c6)) (not (= c_0 c7)))))
(set .c304 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_0) (f1 c4))) (= (f2 c_0) (f1 c_0)))))
(set .c305 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c306 (resolution :clauses (.c304 .c305) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (= (f2 c_0) (f1 c_0)) (not (= c4 c_0)))))
(set .c307 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c308 (resolution :clauses (.c306 .c307) :conclusion ((not (= (f2 c5) (f1 c4))) (= (f2 c_0) (f1 c_0)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c309 (resolution :clauses (.c308 .c165) :conclusion ((= (f2 c_0) (f1 c_0)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c310 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_0) (f1 c_0)))))
(set .c311 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c312 (resolution :clauses (.c310 .c311) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)))))
(set .c313 (eq_congruent :conclusion ((not (= c4 c6)) (= (f1 c4) (f1 c6)))))
(set .c314 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= c6 c_1)) (= c4 c6))))
(set .c315 (resolution :clauses (.c313 .c314) :conclusion ((= (f1 c4) (f1 c6)) (not (= c4 c_1)) (not (= c6 c_1)))))
(set .c316 (resolution :clauses (.c312 .c315) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_1)))))
(set .c317 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c318 (resolution :clauses (.c316 .c317) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c5 c_0)))))
(set .c319 (resolution :clauses (.c318 .c164 .c165 .c166) :conclusion ((= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c5 c_0)))))
(set .c320 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (= (f2 c_0) (f1 c_0)))))
(set .c321 (eq_congruent :conclusion ((not (= (f1 c_0) c_0)) (= (f2 c_0) (f2 (f1 c_0))))))
(set .c322 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= c_0 (f1 c_2))) (= (f1 c_0) c_0))))
(set .c323 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c324 (resolution :clauses (.c322 .c323) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 (f1 c_2))) (= (f1 c_0) c_0) (not (= c6 c_2)))))
(set .c325 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c326 (resolution :clauses (.c324 .c325) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 (f1 c_2))) (= (f1 c_0) c_0) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c327 (resolution :clauses (.c321 .c326) :conclusion ((= (f2 c_0) (f2 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 (f1 c_2))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c328 (resolution :clauses (.c320 .c327) :conclusion ((not (= (f1 c_0) (f2 (f1 c_0)))) (= (f2 c_0) (f1 c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 (f1 c_2))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c329 (resolution :clauses (.c328 .c89 .c164 .c166) :conclusion ((= (f2 c_0) (f1 c_0)) (not (= c_0 (f1 c_2))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c330 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_0) (f2 c_1)))))
(set .c331 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c332 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c333 (resolution :clauses (.c331 .c332) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c334 (resolution :clauses (.c330 .c333) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c335 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c336 (resolution :clauses (.c334 .c335) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c337 (resolution :clauses (.c336 .c166) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c338 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= (f2 c_0) (f1 c_1)))))
(set .c339 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c340 (resolution :clauses (.c338 .c339) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= (f2 c_0) (f1 c_1)) (not (= c5 c_0)))))
(set .c341 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c342 (resolution :clauses (.c340 .c341) :conclusion ((not (= (f2 c5) (f1 c4))) (= (f2 c_0) (f1 c_1)) (not (= c5 c_0)) (not (= c4 c_1)))))
(set .c343 (resolution :clauses (.c342 .c165) :conclusion ((= (f2 c_0) (f1 c_1)) (not (= c5 c_0)) (not (= c4 c_1)))))
(set .c344 (resolution :clauses (.c337 .c17 .c343) :conclusion ((= (f1 c_0) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c345 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_0) (f1 c_0)))))
(set .c346 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c347 (resolution :clauses (.c345 .c346) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)))))
(set .c348 (eq_congruent :conclusion ((not (= c4 c6)) (= (f1 c4) (f1 c6)))))
(set .c349 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c6 c_2)) (= c4 c6))))
(set .c350 (resolution :clauses (.c348 .c349) :conclusion ((= (f1 c4) (f1 c6)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c351 (resolution :clauses (.c347 .c350) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c352 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c353 (resolution :clauses (.c351 .c352) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c6 c_2)) (not (= c5 c_0)))))
(set .c354 (resolution :clauses (.c353 .c164 .c165 .c166) :conclusion ((= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c6 c_2)) (not (= c5 c_0)))))
(set .c355 (eq_transitive :conclusion ((not (= (f2 c_0) (f1 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_0) (f1 c_0)))))
(set .c356 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c357 (resolution :clauses (.c355 .c356) :conclusion ((not (= (f2 c_0) (f1 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)))))
(set .c358 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c359 (resolution :clauses (.c357 .c358) :conclusion ((not (= (f2 c_0) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c360 (resolution :clauses (.c359 .c164 .c166) :conclusion ((not (= (f2 c_0) (f1 c_1))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c361 (eq_transitive :conclusion ((not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_0) (f1 c_0)))))
(set .c362 (eq_congruent :conclusion ((not (= (f2 c_0) c6)) (= (f1 (f2 c_0)) (f1 c6)))))
(set .c363 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_1)) (not (= c6 c_1)) (= (f2 c_0) c6))))
(set .c364 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c365 (resolution :clauses (.c363 .c364) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_1)) (not (= c6 c_1)) (= (f2 c_0) c6) (not (= c5 c_0)))))
(set .c366 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c367 (resolution :clauses (.c365 .c366) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_1)) (not (= c6 c_1)) (= (f2 c_0) c6) (not (= c5 c_0)) (not (= c4 c_2)))))
(set .c368 (resolution :clauses (.c362 .c367) :conclusion ((= (f1 (f2 c_0)) (f1 c6)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_1)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c4 c_2)))))
(set .c369 (resolution :clauses (.c361 .c368) :conclusion ((not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_0) (f1 c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_1)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c4 c_2)))))
(set .c370 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c371 (resolution :clauses (.c369 .c370) :conclusion ((not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_1)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= c_0 c7)))))
(set .c372 (resolution :clauses (.c371 .c28 .c164 .c165 .c166) :conclusion ((= (f2 c_0) (f1 c_0)) (not (= (f1 c_2) c_1)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= c_0 c7)))))
(set .c373 (eq_transitive :conclusion ((not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c_0))) (= (f2 c_0) (f1 c_0)))))
(set .c374 (eq_congruent :conclusion ((not (= (f2 c_0) c_0)) (= (f1 (f2 c_0)) (f1 c_0)))))
(set .c375 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= c_0 (f1 c_2))) (= (f2 c_0) c_0))))
(set .c376 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c377 (resolution :clauses (.c375 .c376) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= c_0 (f1 c_2))) (= (f2 c_0) c_0) (not (= c5 c_0)))))
(set .c378 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c379 (resolution :clauses (.c377 .c378) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= c_0 (f1 c_2))) (= (f2 c_0) c_0) (not (= c5 c_0)) (not (= c4 c_2)))))
(set .c380 (resolution :clauses (.c374 .c379) :conclusion ((= (f1 (f2 c_0)) (f1 c_0)) (not (= (f2 c5) (f1 c4))) (not (= c_0 (f1 c_2))) (not (= c5 c_0)) (not (= c4 c_2)))))
(set .c381 (resolution :clauses (.c373 .c380) :conclusion ((not (= (f2 c_0) (f1 (f2 c_0)))) (= (f2 c_0) (f1 c_0)) (not (= (f2 c5) (f1 c4))) (not (= c_0 (f1 c_2))) (not (= c5 c_0)) (not (= c4 c_2)))))
(set .c382 (resolution :clauses (.c381 .c28 .c165) :conclusion ((= (f2 c_0) (f1 c_0)) (not (= c_0 (f1 c_2))) (not (= c5 c_0)) (not (= c4 c_2)))))
(set .c383 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_2) (f2 (f1 c_2)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_0) (f1 c_0)))))
(set .c384 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c385 (resolution :clauses (.c383 .c384) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_2) (f2 (f1 c_2)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_0) (f1 c_0)) (not (= c5 c_0)))))
(set .c386 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c387 (resolution :clauses (.c385 .c386) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_2) (f2 (f1 c_2)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_0) (f1 c_0)) (not (= c5 c_0)) (not (= c4 c_2)))))
(set .c388 (eq_congruent :conclusion ((not (= (f1 c_2) c_2)) (= (f2 c_2) (f2 (f1 c_2))))))
(set .c389 (resolution :clauses (.c387 .c388) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_0) (f1 c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c390 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c391 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c392 (resolution :clauses (.c390 .c391) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c393 (resolution :clauses (.c389 .c392) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_0) (f1 c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c394 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c395 (resolution :clauses (.c393 .c394) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c7)))))
(set .c396 (resolution :clauses (.c395 .c91 .c165 .c166) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (= (f2 c_0) (f1 c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c7)))))
(set .c397 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c_0) (f1 c_2)))))
(set .c398 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c399 (resolution :clauses (.c397 .c398) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c_0) (f1 c_2)) (not (= c5 c_0)))))
(set .c400 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c401 (resolution :clauses (.c399 .c400) :conclusion ((not (= (f2 c5) (f1 c4))) (= (f2 c_0) (f1 c_2)) (not (= c5 c_0)) (not (= c4 c_2)))))
(set .c402 (resolution :clauses (.c401 .c165) :conclusion ((= (f2 c_0) (f1 c_2)) (not (= c5 c_0)) (not (= c4 c_2)))))
(set .c403 (resolution :clauses (.c396 .c254 .c382 .c372 .c256 .c354 .c23 .c402) :conclusion ((= (f2 c_0) (f1 c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= c_0 c7)) (= c_0 c6))))
(set .c404 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c405 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c406 (resolution :clauses (.c404 .c405) :conclusion ((not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 c7)))))
(set .c407 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c408 (resolution :clauses (.c406 .c407) :conclusion ((not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 c_0) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c409 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c410 (resolution :clauses (.c408 .c409) :conclusion ((not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_0)))))
(set .c411 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c412 (resolution :clauses (.c410 .c411) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_0)) (not (= c4 c_1)))))
(set .c413 (resolution :clauses (.c412 .c164 .c165 .c166) :conclusion ((not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_0)) (not (= c4 c_1)))))
(set .c414 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)))))
(set .c415 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 c4)))))
(set .c416 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c417 (resolution :clauses (.c415 .c416) :conclusion ((not (= c4 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 c4)))))
(set .c418 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (= c4 (f1 c_1)))))
(set .c419 (resolution :clauses (.c417 .c418) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 c4)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)))))
(set .c420 (resolution :clauses (.c414 .c419) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= c_1 (f3 c_1 c4)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)))))
(set .c421 (resolution :clauses (.c420 .c168) :conclusion ((= c_1 (f3 c_1 c4)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)))))
(set .c422 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c423 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c424 (resolution :clauses (.c422 .c423) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 c7)))))
(set .c425 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c426 (resolution :clauses (.c424 .c425) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c427 (resolution :clauses (.c426 .c164 .c166) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c428 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_0)) (f1 c7))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= c6 c7))))
(set .c429 (eq_congruent :conclusion ((not (= (f2 c_0) c7)) (= (f1 (f2 c_0)) (f1 c7)))))
(set .c430 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_0) c7))))
(set .c431 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c432 (resolution :clauses (.c430 .c431) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_0) c7) (not (= c5 c_0)))))
(set .c433 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c434 (resolution :clauses (.c432 .c433) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_0) c7) (not (= c5 c_0)) (not (= c4 c_1)))))
(set .c435 (resolution :clauses (.c429 .c434) :conclusion ((= (f1 (f2 c_0)) (f1 c7)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c4 c_1)))))
(set .c436 (resolution :clauses (.c428 .c435) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= c6 c7) (not (= c5 c_0)) (not (= c4 c_1)))))
(set .c437 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c438 (resolution :clauses (.c436 .c437) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= c6 c7) (not (= c5 c_0)) (not (= c4 c_1)))))
(set .c439 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c440 (resolution :clauses (.c438 .c439) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= c6 c7) (not (= c5 c_0)) (not (= c4 c_1)))))
(set .c441 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c442 (resolution :clauses (.c440 .c441) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= c6 c7) (not (= c5 c_0)) (not (= c4 c_1)))))
(set .c443 (resolution :clauses (.c442 .c28 .c164 .c165 .c166 .c224) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c4 c_1)))))
(set .c444 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f2 c_1) c_1) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)))))
(set .c445 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c4 c_1)) (= (f3 (f2 c_1) c_1) (f3 c_2 c4)))))
(set .c446 (eq_transitive :conclusion ((not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c447 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c448 (resolution :clauses (.c446 .c447) :conclusion ((not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c6 c_2)))))
(set .c449 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c450 (resolution :clauses (.c448 .c449) :conclusion ((not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c451 (resolution :clauses (.c445 .c450) :conclusion ((not (= c4 c_1)) (= (f3 (f2 c_1) c_1) (f3 c_2 c4)) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c452 (resolution :clauses (.c444 .c451) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c453 (resolution :clauses (.c452 .c166 .c164 .c32) :conclusion ((= c_1 (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c454 (resolution :clauses (.c443 .c252 .c427 .c421 .c297 .c453) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c4 c_1)) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c455 (eq_transitive :conclusion ((not (= (f1 (f2 c_1)) (f1 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c456 (eq_congruent :conclusion ((not (= c_1 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_1)))))
(set .c457 (eq_transitive :conclusion ((not (= (f1 c_2) c_1)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c_0) (f2 c_1))) (= c_1 (f2 c_1)))))
(set .c458 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c459 (resolution :clauses (.c457 .c458) :conclusion ((not (= (f1 c_2) c_1)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 c_1))) (= c_1 (f2 c_1)) (not (= c_0 c7)))))
(set .c460 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c461 (resolution :clauses (.c459 .c460) :conclusion ((not (= (f1 c_2) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 c_1))) (= c_1 (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c462 (resolution :clauses (.c456 .c461) :conclusion ((= (f1 (f2 c_1)) (f1 c_1)) (not (= (f1 c_2) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 c_1))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c463 (resolution :clauses (.c455 .c462) :conclusion ((not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= (f1 c_2) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 c_1))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c464 (resolution :clauses (.c463 .c29 .c164 .c166) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= (f1 c_2) c_1)) (not (= (f1 c_0) (f2 c_1))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c465 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)))))
(set .c466 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c467 (resolution :clauses (.c465 .c466) :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c6 c_2)))))
(set .c468 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c469 (resolution :clauses (.c467 .c468) :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c470 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f2 c4) (f2 c_1)))))
(set .c471 (resolution :clauses (.c469 .c470) :conclusion ((not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c472 (resolution :clauses (.c471 .c166 .c164) :conclusion ((not (= (f1 c_0) (f2 c_1))) (= (f2 c4) (f1 c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c473 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= (f2 c5) (f1 c_1)))))
(set .c474 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c475 (resolution :clauses (.c473 .c474) :conclusion ((not (= (f2 c5) (f1 c4))) (= (f2 c5) (f1 c_1)) (not (= c4 c_1)))))
(set .c476 (resolution :clauses (.c475 .c165) :conclusion ((= (f2 c5) (f1 c_1)) (not (= c4 c_1)))))
(set .c477 (resolution :clauses (.c464 .c254 .c454 .c472 .c476 .c329 .c256 .c344 .c319 .c258 .c403 .c309) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (= (f2 c_0) (f1 c_0)) (= c_0 c6))))
(set .c478 (eq_transitive :conclusion ((not (= (f1 (f2 c_1)) (f1 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c479 (eq_congruent :conclusion ((not (= c_1 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_1)))))
(set .c480 (eq_transitive :conclusion ((not (= (f1 c_2) c_1)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f2 (f1 c_0)) (f2 c_1))) (= c_1 (f2 c_1)))))
(set .c481 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c482 (resolution :clauses (.c480 .c481) :conclusion ((not (= (f1 c_2) c_1)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f2 (f1 c_0)) (f2 c_1))) (= c_1 (f2 c_1)) (not (= c_0 c7)))))
(set .c483 (eq_congruent :conclusion ((not (= (f1 c_0) c_1)) (= (f2 (f1 c_0)) (f2 c_1)))))
(set .c484 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_1)) (= (f1 c_0) c_1))))
(set .c485 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c486 (resolution :clauses (.c484 .c485) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_1)) (= (f1 c_0) c_1) (not (= c6 c_2)))))
(set .c487 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c488 (resolution :clauses (.c486 .c487) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_1)) (= (f1 c_0) c_1) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c489 (resolution :clauses (.c483 .c488) :conclusion ((= (f2 (f1 c_0)) (f2 c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_1)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c490 (resolution :clauses (.c482 .c489) :conclusion ((not (= (f1 c_2) c_1)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (= c_1 (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c491 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c492 (resolution :clauses (.c490 .c491) :conclusion ((not (= (f1 c_2) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (= c_1 (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c493 (resolution :clauses (.c479 .c492) :conclusion ((= (f1 (f2 c_1)) (f1 c_1)) (not (= (f1 c_2) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c494 (resolution :clauses (.c478 .c493) :conclusion ((not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= (f1 c_2) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c495 (resolution :clauses (.c494 .c29 .c89 .c164 .c166) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= (f1 c_2) c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c496 (resolution :clauses (.c495 .c254 .c329) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (= (f1 c_2) c_2) (= (f2 c_0) (f1 c_0)))))
(set .c497 (eq_transitive :conclusion ((not (= (f1 (f2 c_1)) (f1 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c498 (eq_congruent :conclusion ((not (= c_1 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_1)))))
(set .c499 (eq_transitive :conclusion ((not (= (f1 c_2) c_1)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f1 c_2)) (f2 c_1))) (= c_1 (f2 c_1)))))
(set .c500 (eq_congruent :conclusion ((not (= (f1 c_2) c_1)) (= (f2 (f1 c_2)) (f2 c_1)))))
(set .c501 (resolution :clauses (.c499 .c500) :conclusion ((not (= (f1 c_2) c_1)) (not (= (f2 (f1 c_2)) (f1 c_2))) (= c_1 (f2 c_1)))))
(set .c502 (resolution :clauses (.c498 .c501) :conclusion ((= (f1 (f2 c_1)) (f1 c_1)) (not (= (f1 c_2) c_1)) (not (= (f2 (f1 c_2)) (f1 c_2))))))
(set .c503 (resolution :clauses (.c497 .c502) :conclusion ((not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= (f1 c_2) c_1)) (not (= (f2 (f1 c_2)) (f1 c_2))))))
(set .c504 (resolution :clauses (.c503 .c29 .c91) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= (f1 c_2) c_1)))))
(set .c505 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_0)) (f1 c7))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 c_0) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c506 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f2 c4) (f2 c_1)))))
(set .c507 (resolution :clauses (.c505 .c506) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_0)) (f1 c7))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 c_0) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_1)))))
(set .c508 (eq_congruent :conclusion ((not (= c_0 (f1 c_2))) (= (f2 c_0) (f2 (f1 c_2))))))
(set .c509 (resolution :clauses (.c507 .c508) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_0)) (f1 c7))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_1)) (not (= c_0 (f1 c_2))))))
(set .c510 (eq_congruent :conclusion ((not (= (f2 c_0) c7)) (= (f1 (f2 c_0)) (f1 c7)))))
(set .c511 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (not (= c_0 c7)) (= (f2 c_0) c7))))
(set .c512 (eq_congruent :conclusion ((not (= c_0 (f1 c_2))) (= (f2 c_0) (f2 (f1 c_2))))))
(set .c513 (resolution :clauses (.c511 .c512) :conclusion ((not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (not (= c_0 c7)) (= (f2 c_0) c7))))
(set .c514 (resolution :clauses (.c510 .c513) :conclusion ((= (f1 (f2 c_0)) (f1 c7)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (not (= c_0 c7)))))
(set .c515 (resolution :clauses (.c509 .c514) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_1)) (not (= c_0 (f1 c_2))) (not (= c_0 c7)))))
(set .c516 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c517 (resolution :clauses (.c515 .c516) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_1)) (not (= c_0 (f1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c518 (resolution :clauses (.c517 .c28 .c91 .c164 .c166) :conclusion ((not (= (f2 c4) (f1 c_2))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_1)) (not (= c_0 (f1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c519 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_1)) (= (f2 (f3 c_1 c_1)) (f2 c_1)))))
(set .c520 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 c_1 c4))) (not (= c_1 (f3 c_1 c4))) (= (f3 c_1 c_1) c_1))))
(set .c521 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_1)) (= (f3 c_1 c_1) (f3 c_1 c4)))))
(set .c522 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c523 (resolution :clauses (.c521 .c522) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c_1) (f3 c_1 c4)))))
(set .c524 (resolution :clauses (.c520 .c523) :conclusion ((not (= c_1 (f3 c_1 c4))) (= (f3 c_1 c_1) c_1) (not (= c4 c_1)))))
(set .c525 (resolution :clauses (.c519 .c524) :conclusion ((= (f2 (f3 c_1 c_1)) (f2 c_1)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_1)))))
(set .c526 (eq_transitive :conclusion ((not (= c_0 (f1 c_2))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_0) (f2 (f1 c_2)))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c_0))) (not (= (f1 c_0) c_2)) (= c_0 c_2))))
(set .c527 (eq_congruent :conclusion ((not (= c_0 (f1 c_2))) (= (f2 c_0) (f2 (f1 c_2))))))
(set .c528 (resolution :clauses (.c526 .c527) :conclusion ((not (= c_0 (f1 c_2))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c_0))) (not (= (f1 c_0) c_2)) (= c_0 c_2))))
(set .c529 (eq_congruent :conclusion ((not (= (f2 c_0) c_0)) (= (f1 (f2 c_0)) (f1 c_0)))))
(set .c530 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (= (f2 c_0) c_0))))
(set .c531 (eq_congruent :conclusion ((not (= c_0 (f1 c_2))) (= (f2 c_0) (f2 (f1 c_2))))))
(set .c532 (resolution :clauses (.c530 .c531) :conclusion ((not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (= (f2 c_0) c_0))))
(set .c533 (resolution :clauses (.c529 .c532) :conclusion ((= (f1 (f2 c_0)) (f1 c_0)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))))))
(set .c534 (resolution :clauses (.c528 .c533) :conclusion ((not (= c_0 (f1 c_2))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 c_0) c_2)) (= c_0 c_2))))
(set .c535 (resolution :clauses (.c534 .c8 .c28 .c91) :conclusion ((not (= c_0 (f1 c_2))) (not (= (f1 c_0) c_2)))))
(set .c536 (eq_transitive :conclusion ((not (= c_0 (f1 c_2))) (not (= (f1 c_2) (f1 (f2 c_2)))) (not (= (f2 c_2) (f1 (f2 c_2)))) (not (= (f2 c_2) c_2)) (= c_0 c_2))))
(set .c537 (eq_congruent :conclusion ((not (= (f2 c_2) c_2)) (= (f1 c_2) (f1 (f2 c_2))))))
(set .c538 (resolution :clauses (.c536 .c537) :conclusion ((not (= c_0 (f1 c_2))) (not (= (f2 c_2) (f1 (f2 c_2)))) (not (= (f2 c_2) c_2)) (= c_0 c_2))))
(set .c539 (resolution :clauses (.c538 .c8 .c30) :conclusion ((not (= c_0 (f1 c_2))) (not (= (f2 c_2) c_2)))))
(set .c540 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_0)) (f1 c7))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 c_0) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 (f2 c_1)) (f1 c_2))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c541 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (= (f1 (f2 c_1)) (f1 c_2)))))
(set .c542 (resolution :clauses (.c540 .c541) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_0)) (f1 c7))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 c_0) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= (f2 c_1) c_2)))))
(set .c543 (eq_congruent :conclusion ((not (= c_0 (f1 c_2))) (= (f2 c_0) (f2 (f1 c_2))))))
(set .c544 (resolution :clauses (.c542 .c543) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_0)) (f1 c7))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= (f2 c_1) c_2)) (not (= c_0 (f1 c_2))))))
(set .c545 (eq_congruent :conclusion ((not (= (f2 c_0) c7)) (= (f1 (f2 c_0)) (f1 c7)))))
(set .c546 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (not (= c_0 c7)) (= (f2 c_0) c7))))
(set .c547 (eq_congruent :conclusion ((not (= c_0 (f1 c_2))) (= (f2 c_0) (f2 (f1 c_2))))))
(set .c548 (resolution :clauses (.c546 .c547) :conclusion ((not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (not (= c_0 c7)) (= (f2 c_0) c7))))
(set .c549 (resolution :clauses (.c545 .c548) :conclusion ((= (f1 (f2 c_0)) (f1 c7)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (not (= c_0 c7)))))
(set .c550 (resolution :clauses (.c544 .c549) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= (f2 c_1) c_2)) (not (= c_0 (f1 c_2))) (not (= c_0 c7)))))
(set .c551 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c552 (resolution :clauses (.c550 .c551) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= (f2 c_1) c_2)) (not (= c_0 (f1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c553 (resolution :clauses (.c552 .c28 .c29 .c91 .c164 .c166) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= (f2 c_1) c_2)) (not (= c_0 (f1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c554 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_0)) (f1 c7))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 c_0) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (not (= c_0 (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c555 (eq_congruent :conclusion ((not (= c_0 (f1 c_2))) (= (f2 c_0) (f2 (f1 c_2))))))
(set .c556 (resolution :clauses (.c554 .c555) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_0)) (f1 c7))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (not (= c_0 (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c557 (eq_congruent :conclusion ((not (= (f2 c_0) c7)) (= (f1 (f2 c_0)) (f1 c7)))))
(set .c558 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (not (= c_0 c7)) (= (f2 c_0) c7))))
(set .c559 (eq_congruent :conclusion ((not (= c_0 (f1 c_2))) (= (f2 c_0) (f2 (f1 c_2))))))
(set .c560 (resolution :clauses (.c558 .c559) :conclusion ((not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (not (= c_0 c7)) (= (f2 c_0) c7))))
(set .c561 (resolution :clauses (.c557 .c560) :conclusion ((= (f1 (f2 c_0)) (f1 c7)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (not (= c_0 c7)))))
(set .c562 (resolution :clauses (.c556 .c561) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (not (= c_0 (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 c7)))))
(set .c563 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c564 (resolution :clauses (.c562 .c563) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (not (= c_0 (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c565 (resolution :clauses (.c564 .c28 .c91 .c164 .c166) :conclusion ((not (= c_0 (f1 c_2))) (not (= c_0 (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c566 (eq_transitive :conclusion ((not (= (f1 (f2 c_1)) (f1 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c567 (eq_congruent :conclusion ((not (= c_1 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_1)))))
(set .c568 (resolution :clauses (.c566 .c567) :conclusion ((not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_1 (f2 c_1))))))
(set .c569 (resolution :clauses (.c568 .c29) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= c_1 (f2 c_1))))))
(set .c570 (resolution :clauses (.c246 .c565 .c553) :conclusion ((= c_1 (f2 c_1)) (not (= c_0 (f1 c_2))) (= (f1 c_1) (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c571 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f1 c_2))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_0) (f2 (f1 c_2)))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c_0))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c572 (eq_congruent :conclusion ((not (= c_0 (f1 c_2))) (= (f2 c_0) (f2 (f1 c_2))))))
(set .c573 (resolution :clauses (.c571 .c572) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f1 c_2))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c_0))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c574 (eq_congruent :conclusion ((not (= (f2 c_0) c_0)) (= (f1 (f2 c_0)) (f1 c_0)))))
(set .c575 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (= (f2 c_0) c_0))))
(set .c576 (eq_congruent :conclusion ((not (= c_0 (f1 c_2))) (= (f2 c_0) (f2 (f1 c_2))))))
(set .c577 (resolution :clauses (.c575 .c576) :conclusion ((not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))) (= (f2 c_0) c_0))))
(set .c578 (resolution :clauses (.c574 .c577) :conclusion ((= (f1 (f2 c_0)) (f1 c_0)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= c_0 (f1 c_2))))))
(set .c579 (resolution :clauses (.c573 .c578) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f1 c_2))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c580 (resolution :clauses (.c579 .c28 .c91) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f1 c_2))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c581 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 (f1 c_1)))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_2)) (= (f2 c_2) c_2))))
(set .c582 (eq_congruent :conclusion ((not (= (f1 c_1) c_2)) (= (f2 c_2) (f2 (f1 c_1))))))
(set .c583 (resolution :clauses (.c581 .c582) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_2)) (= (f2 c_2) c_2))))
(set .c584 (resolution :clauses (.c583 .c90) :conclusion ((not (= (f1 c_1) c_2)) (= (f2 c_2) c_2))))
(set .c585 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c586 (eq_congruent :conclusion ((not (= (f1 c_1) c_1)) (= (f2 (f1 c_1)) (f2 c_1)))))
(set .c587 (resolution :clauses (.c585 .c586) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (= (f1 c_1) (f2 c_1)) (not (= (f1 c_1) c_1)))))
(set .c588 (resolution :clauses (.c587 .c90) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= (f1 c_1) c_1)))))
(set .c589 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c590 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f2 c4) (f2 c_1)))))
(set .c591 (resolution :clauses (.c589 .c590) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_1)))))
(set .c592 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c593 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f1 c_2))) (not (= (f1 (f2 c_1)) (f1 c_2))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c594 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (= (f1 (f2 c_1)) (f1 c_2)))))
(set .c595 (resolution :clauses (.c593 .c594) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f1 c_2))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= (f2 c_1) c_2)))))
(set .c596 (resolution :clauses (.c595 .c29) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f1 c_2))) (= (f1 c_1) (f2 c_1)) (not (= (f2 c_1) c_2)))))
(set .c597 (resolution :clauses (.c596 .c246 .c592 .c252 .c584 .c539) :conclusion ((not (= c_0 (f1 c_2))) (= (f1 c_1) (f2 c_1)) (= c_1 (f2 c_1)) (= (f1 c_1) c_1))))
(set .c598 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_0) (f2 c_1)))))
(set .c599 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c600 (resolution :clauses (.c598 .c599) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_0) (f2 c_1)) (not (= c6 c_2)))))
(set .c601 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c602 (resolution :clauses (.c600 .c601) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_0) (f2 c_1)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c603 (resolution :clauses (.c602 .c164 .c166) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_0) (f2 c_1)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c604 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_1)) (f1 c7))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= c_0 (f2 c_1))) (not (= c_0 c7)) (= c6 c7))))
(set .c605 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c606 (resolution :clauses (.c604 .c605) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_1)) (f1 c7))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= c_0 (f2 c_1))) (not (= c_0 c7)) (= c6 c7))))
(set .c607 (eq_congruent :conclusion ((not (= (f2 c_1) c7)) (= (f1 (f2 c_1)) (f1 c7)))))
(set .c608 (eq_transitive :conclusion ((not (= c_0 (f2 c_1))) (not (= c_0 c7)) (= (f2 c_1) c7))))
(set .c609 (resolution :clauses (.c607 .c608) :conclusion ((= (f1 (f2 c_1)) (f1 c7)) (not (= c_0 (f2 c_1))) (not (= c_0 c7)))))
(set .c610 (resolution :clauses (.c606 .c609) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= c_0 (f2 c_1))) (not (= c_0 c7)) (= c6 c7))))
(set .c611 (resolution :clauses (.c610 .c29 .c164 .c166 .c224) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 (f2 c_1))) (not (= c_0 c7)))))
(set .c612 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c7))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)))))
(set .c613 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c614 (resolution :clauses (.c612 .c613) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c7))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c6 c_2)))))
(set .c615 (eq_congruent :conclusion ((not (= (f2 c_0) c7)) (= (f1 (f2 c_0)) (f1 c7)))))
(set .c616 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_0) c7))))
(set .c617 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c618 (resolution :clauses (.c616 .c617) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_0) c7))))
(set .c619 (resolution :clauses (.c615 .c618) :conclusion ((= (f1 (f2 c_0)) (f1 c7)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)))))
(set .c620 (resolution :clauses (.c614 .c619) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c6 c_2)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)))))
(set .c621 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c622 (resolution :clauses (.c620 .c621) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c6 c_2)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)))))
(set .c623 (resolution :clauses (.c622 .c28 .c90 .c164 .c166) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c6 c_2)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)))))
(set .c624 (resolution :clauses (.c623 .c252 .c427 .c603 .c246 .c611) :conclusion ((not (= (f1 c_2) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c6 c_2)) (not (= c_0 c7)) (= (f1 c_1) c_1) (= c_1 (f2 c_1)))))
(set .c625 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c626 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c627 (resolution :clauses (.c625 .c626) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)))))
(set .c628 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c629 (resolution :clauses (.c627 .c628) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c630 (resolution :clauses (.c629 .c164 .c166) :conclusion ((not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c631 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f2 c_0) (f2 (f1 c_0)))) (not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)))))
(set .c632 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c633 (resolution :clauses (.c631 .c632) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f2 c_0) (f2 (f1 c_0)))) (not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)))))
(set .c634 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c635 (resolution :clauses (.c633 .c634) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f2 c_0) (f2 (f1 c_0)))) (not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c636 (eq_congruent :conclusion ((not (= (f1 c_0) c_0)) (= (f2 c_0) (f2 (f1 c_0))))))
(set .c637 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0))))
(set .c638 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c639 (resolution :clauses (.c637 .c638) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c6 c_1)))))
(set .c640 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c641 (resolution :clauses (.c639 .c640) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c642 (resolution :clauses (.c636 .c641) :conclusion ((= (f2 c_0) (f2 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c643 (resolution :clauses (.c635 .c642) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f1 c_1) c_0)))))
(set .c644 (resolution :clauses (.c643 .c89 .c164 .c166) :conclusion ((not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f1 c_1) c_0)))))
(set .c645 (eq_transitive :conclusion ((not (= (f2 c_2) c_0)) (not (= (f2 c_2) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_0 c_2))))
(set .c646 (eq_congruent :conclusion ((not (= (f1 c_2) c_2)) (= (f2 c_2) (f2 (f1 c_2))))))
(set .c647 (resolution :clauses (.c645 .c646) :conclusion ((not (= (f2 c_2) c_0)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_0 c_2))))
(set .c648 (resolution :clauses (.c647 .c8 .c91) :conclusion ((not (= (f2 c_2) c_0)) (not (= (f1 c_2) c_2)))))
(set .c649 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f2 c_0) c_1)) (not (= (f2 c_0) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= c6 c7))))
(set .c650 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c651 (resolution :clauses (.c649 .c650) :conclusion ((not (= c6 c_1)) (not (= (f2 c_0) c_1)) (not (= (f2 c_0) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= c6 c7))))
(set .c652 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c653 (resolution :clauses (.c651 .c652) :conclusion ((not (= c6 c_1)) (not (= (f2 c_0) c_1)) (not (= (f2 c_0) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= c6 c7))))
(set .c654 (eq_congruent :conclusion ((not (= (f1 c_0) c_0)) (= (f2 c_0) (f2 (f1 c_0))))))
(set .c655 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0))))
(set .c656 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c657 (resolution :clauses (.c655 .c656) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c6 c_1)))))
(set .c658 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c659 (resolution :clauses (.c657 .c658) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c660 (resolution :clauses (.c654 .c659) :conclusion ((= (f2 c_0) (f2 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c661 (resolution :clauses (.c653 .c660) :conclusion ((not (= c6 c_1)) (not (= (f2 c_0) c_1)) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= c6 c7))))
(set .c662 (resolution :clauses (.c661 .c89 .c164 .c166 .c224) :conclusion ((not (= c6 c_1)) (not (= (f2 c_0) c_1)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)))))
(set .c663 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)))))
(set .c664 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_2)) (= (f3 c_2 c_2) (f3 c_2 (f1 c_2))))))
(set .c665 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c666 (resolution :clauses (.c664 .c665) :conclusion ((not (= (f1 c_2) c_2)) (= (f3 c_2 c_2) (f3 c_2 (f1 c_2))))))
(set .c667 (resolution :clauses (.c663 .c666) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= (f1 c_2) c_2)))))
(set .c668 (resolution :clauses (.c667 .c169) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= (f1 c_2) c_2)))))
(set .c669 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_1) c_0)) (not (= c_0 c7)) (= c6 c7))))
(set .c670 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c671 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c672 (resolution :clauses (.c670 .c671) :conclusion ((not (= (f2 c_1) c_2)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c673 (resolution :clauses (.c669 .c672) :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_1) c_0)) (not (= c_0 c7)) (= c6 c7) (not (= (f2 c_1) c_2)))))
(set .c674 (resolution :clauses (.c673 .c32 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_1) c_0)) (not (= c_0 c7)) (not (= (f2 c_1) c_2)))))
(set .c675 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f1 c_0)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)))))
(set .c676 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c677 (resolution :clauses (.c675 .c676) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f1 c_0)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)))))
(set .c678 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c679 (resolution :clauses (.c677 .c678) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f1 c_0)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c680 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f1 c_0))) (= (f2 (f3 c_2 c_0)) (f2 (f1 c_0))))))
(set .c681 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f3 c_2 c_0) (f1 c_0)))))
(set .c682 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c683 (resolution :clauses (.c681 .c682) :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f3 c_2 c_0) (f1 c_0)) (not (= c6 c_1)))))
(set .c684 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c685 (resolution :clauses (.c683 .c684) :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_2 c_0) (f1 c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c686 (resolution :clauses (.c680 .c685) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f1 c_0))) (not (= (f3 c_2 c_0) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c687 (resolution :clauses (.c679 .c686) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f3 c_2 c_0) c_0)) (not (= (f1 c_1) c_0)))))
(set .c688 (eq_congruent :conclusion ((not (= (f1 c_2) c_2)) (= (f2 c_2) (f2 (f1 c_2))))))
(set .c689 (resolution :clauses (.c687 .c688) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f3 c_2 c_0) c_0)) (not (= (f1 c_1) c_0)))))
(set .c690 (resolution :clauses (.c689 .c89 .c91 .c164 .c166) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f3 c_2 c_0) c_0)) (not (= (f1 c_1) c_0)))))
(set .c691 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c_2) (f1 (f3 c_2 c_0)))) (not (= (f1 c_2) c_2)) (= c_0 c_2))))
(set .c692 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_2)) (= (f1 c_2) (f1 (f3 c_2 c_0))))))
(set .c693 (resolution :clauses (.c691 .c692) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c_2) c_2)) (= c_0 c_2) (not (= (f3 c_2 c_0) c_2)))))
(set .c694 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c695 (resolution :clauses (.c693 .c694) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c_2) c_2)) (= c_0 c_2) (not (= (f3 c_2 c_0) c_2)) (not (= c_0 c7)))))
(set .c696 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c697 (resolution :clauses (.c695 .c696) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c_2) c_2)) (= c_0 c_2) (not (= (f3 c_2 c_0) c_2)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c698 (resolution :clauses (.c697 .c8 .c164 .c166) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c699 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 (f3 c_1 c_2)) (f1 c_1))) (not (= (f1 (f3 c_1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_0 c_2))))
(set .c700 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f1 (f3 c_1 c_2)) (f1 c_1)))))
(set .c701 (resolution :clauses (.c699 .c700) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 (f3 c_1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_0 c_2) (not (= (f3 c_1 c_2) c_1)))))
(set .c702 (resolution :clauses (.c701 .c8) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 (f3 c_1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_2) c_1)))))
(set .c703 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f3 c_1 c_2)) (f1 c7))) (not (= (f1 (f3 c_1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)))))
(set .c704 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c7)) (= (f1 (f3 c_1 c_2)) (f1 c7)))))
(set .c705 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)) (= (f3 c_1 c_2) c7))))
(set .c706 (resolution :clauses (.c704 .c705) :conclusion ((= (f1 (f3 c_1 c_2)) (f1 c7)) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)))))
(set .c707 (resolution :clauses (.c703 .c706) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f3 c_1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)))))
(set .c708 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c709 (resolution :clauses (.c707 .c708) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f3 c_1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c710 (resolution :clauses (.c709 .c164 .c166) :conclusion ((not (= (f1 (f3 c_1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c711 (resolution :clauses (.c710 .c236 .c702) :conclusion ((not (= (f1 (f3 c_1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_1)) (= (f3 c_1 c_2) c_2) (not (= (f1 c_1) c_0)))))
(set .c712 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_1)) (not (= (f3 c_1 c_1) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)))))
(set .c713 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_1)) (= (f3 c_1 c_1) (f3 c_1 c4)))))
(set .c714 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c715 (resolution :clauses (.c713 .c714) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c_1) (f3 c_1 c4)))))
(set .c716 (resolution :clauses (.c712 .c715) :conclusion ((not (= (f3 c_1 c_1) c_1)) (= c_1 (f3 c_1 c4)) (not (= c4 c_1)))))
(set .c717 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0))) (not (= (f3 c_1 c_0) c_0)) (= (f3 c_2 c_0) c_0))))
(set .c718 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0)))))
(set .c719 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c720 (resolution :clauses (.c718 .c719) :conclusion ((not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0)))))
(set .c721 (resolution :clauses (.c717 .c720) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 c_0) c_0)) (= (f3 c_2 c_0) c_0) (not (= (f1 c_1) c_0)))))
(set .c722 (resolution :clauses (.c721 .c168) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_1 c_0) c_0)) (= (f3 c_2 c_0) c_0) (not (= (f1 c_1) c_0)))))
(set .c723 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)))))
(set .c724 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_0) c_2)))))
(set .c725 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c726 (resolution :clauses (.c724 .c725) :conclusion ((not (= (f3 c_2 c_0) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_0) c_2)))))
(set .c727 (resolution :clauses (.c723 .c726) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= (f3 c_2 c_0) c_1)))))
(set .c728 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_2) (f1 c_2))) (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 (f1 c_2))))))
(set .c729 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= (f1 c_2) c_2)) (= (f3 c_0 c_2) (f1 c_2)))))
(set .c730 (resolution :clauses (.c728 .c729) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_2) c_2)) (not (= (f1 c_2) c_2)))))
(set .c731 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c732 (resolution :clauses (.c730 .c731) :conclusion ((= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_2) c_2)) (not (= (f1 c_2) c_2)))))
(set .c733 (resolution :clauses (.c727 .c732) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_0 c_2) c_2)) (not (= (f1 c_2) c_2)))))
(set .c734 (resolution :clauses (.c733 .c169) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_0 c_2) c_2)) (not (= (f1 c_2) c_2)))))
(set .c735 (eq_transitive :conclusion ((not (= (f2 (f3 c_1 c_1)) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_0 c_2) c_0)) (not (= (f3 c_0 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f2 (f3 c_1 c_1)) (f2 c_1)))))
(set .c736 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c737 (resolution :clauses (.c735 .c736) :conclusion ((not (= (f2 (f3 c_1 c_1)) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_0 c_2) c_0)) (not (= (f3 c_0 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f2 (f3 c_1 c_1)) (f2 c_1)) (not (= c_0 c7)))))
(set .c738 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c739 (resolution :clauses (.c737 .c738) :conclusion ((not (= (f2 (f3 c_1 c_1)) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_0 c_2) c_0)) (not (= (f3 c_0 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f2 (f3 c_1 c_1)) (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c740 (eq_congruent :conclusion ((not (= (f1 c_0) (f3 c_1 c_1))) (= (f2 (f3 c_1 c_1)) (f2 (f1 c_0))))))
(set .c741 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)))))
(set .c742 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c743 (resolution :clauses (.c741 .c742) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_0 c7)))))
(set .c744 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c745 (resolution :clauses (.c743 .c744) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c746 (resolution :clauses (.c740 .c745) :conclusion ((= (f2 (f3 c_1 c_1)) (f2 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c747 (resolution :clauses (.c739 .c746) :conclusion ((not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_0 c_2) c_0)) (not (= (f3 c_0 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f2 (f3 c_1 c_1)) (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_1) c_0)))))
(set .c748 (resolution :clauses (.c747 .c89 .c164 .c166) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_0 c_2) c_0)) (not (= (f3 c_0 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f2 (f3 c_1 c_1)) (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_1) c_0)))))
(set .c749 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (= (f3 c_0 c4) c_1))))
(set .c750 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c4 c_1)) (= (f3 c_0 c4) (f3 c_0 c_1)))))
(set .c751 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c752 (resolution :clauses (.c750 .c751) :conclusion ((not (= c4 c_1)) (= (f3 c_0 c4) (f3 c_0 c_1)))))
(set .c753 (resolution :clauses (.c749 .c752) :conclusion ((not (= c_1 (f3 c_0 c_1))) (= (f3 c_0 c4) c_1) (not (= c4 c_1)))))
(set .c754 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 c_1))) (not (= c_0 (f3 c_0 c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))))))
(set .c755 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c756 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c757 (resolution :clauses (.c755 .c756) :conclusion ((not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c758 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)))))
(set .c759 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c760 (resolution :clauses (.c758 .c759) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_0 c7)))))
(set .c761 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c762 (resolution :clauses (.c760 .c761) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c763 (resolution :clauses (.c757 .c762) :conclusion ((= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c764 (resolution :clauses (.c754 .c763) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 c_1))) (not (= c_0 (f3 c_0 c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c765 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 c_1)))))
(set .c766 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c767 (resolution :clauses (.c765 .c766) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 c_1)))))
(set .c768 (resolution :clauses (.c764 .c767) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c769 (resolution :clauses (.c768 .c164 .c166 .c167) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c770 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 c_0))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))))))
(set .c771 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_2) c_0)) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 c_0)))))
(set .c772 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c773 (resolution :clauses (.c771 .c772) :conclusion ((not (= (f3 c_1 c_2) c_0)) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 c_0)))))
(set .c774 (resolution :clauses (.c770 .c773) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f3 c_1 c_2) c_0)))))
(set .c775 (eq_congruent :conclusion ((not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2))))))
(set .c776 (resolution :clauses (.c774 .c775) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)))))
(set .c777 (resolution :clauses (.c776 .c169) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)))))
(set .c778 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) (f3 c_0 (f3 c_1 c_1)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))))))
(set .c779 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f3 c_0 c_0) (f3 c_0 (f3 c_1 c_1))))))
(set .c780 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c781 (resolution :clauses (.c779 .c780) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 c_0 c_0) (f3 c_0 (f3 c_1 c_1))))))
(set .c782 (resolution :clauses (.c778 .c781) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_0) c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)))))
(set .c783 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c784 (eq_transitive :conclusion ((not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c785 (resolution :clauses (.c783 .c784) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c786 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c787 (resolution :clauses (.c785 .c786) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c788 (resolution :clauses (.c782 .c787) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_0) c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c789 (resolution :clauses (.c788 .c32) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c790 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_1 c_2)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))))))
(set .c791 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c792 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c793 (resolution :clauses (.c791 .c792) :conclusion ((not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c794 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)))))
(set .c795 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c796 (resolution :clauses (.c794 .c795) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_0 c7)))))
(set .c797 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c798 (resolution :clauses (.c796 .c797) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c799 (resolution :clauses (.c793 .c798) :conclusion ((= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c800 (resolution :clauses (.c790 .c799) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_1 c_2)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c801 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_1) c_2)))))
(set .c802 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c803 (resolution :clauses (.c801 .c802) :conclusion ((not (= (f3 c_2 c_1) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_1) c_2)))))
(set .c804 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c805 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c806 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c807 (resolution :clauses (.c805 .c806) :conclusion ((not (= (f2 c_1) c_2)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c808 (resolution :clauses (.c804 .c807) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f2 c_1) c_2)))))
(set .c809 (resolution :clauses (.c803 .c808) :conclusion ((= (f3 c_1 c_2) (f3 (f3 c_2 c_1) c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 c_1) c_2)))))
(set .c810 (resolution :clauses (.c800 .c809) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_1 c_2)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f2 c_1) c_2)))))
(set .c811 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_1 c_2) c_0)) (= (f3 c_2 c_0) (f3 c_2 (f3 c_1 c_2))))))
(set .c812 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c813 (resolution :clauses (.c811 .c812) :conclusion ((not (= (f3 c_1 c_2) c_0)) (= (f3 c_2 c_0) (f3 c_2 (f3 c_1 c_2))))))
(set .c814 (resolution :clauses (.c810 .c813) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f2 c_1) c_2)))))
(set .c815 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c816 (eq_transitive :conclusion ((not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c817 (resolution :clauses (.c815 .c816) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c818 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c819 (resolution :clauses (.c817 .c818) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c820 (resolution :clauses (.c814 .c819) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c821 (resolution :clauses (.c820 .c32 .c164 .c166 .c167) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_1 c_2) c_0)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c822 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))))))
(set .c823 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c824 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c825 (resolution :clauses (.c823 .c824) :conclusion ((not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c826 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f3 c_1 c_2) (f1 c_0)))))
(set .c827 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c828 (resolution :clauses (.c826 .c827) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)))))
(set .c829 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c830 (resolution :clauses (.c828 .c829) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c831 (resolution :clauses (.c825 .c830) :conclusion ((= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c832 (resolution :clauses (.c822 .c831) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)))))
(set .c833 (eq_congruent :conclusion ((not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2))))))
(set .c834 (resolution :clauses (.c832 .c833) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)))))
(set .c835 (resolution :clauses (.c834 .c164 .c166 .c167 .c169) :conclusion ((not (= c7 c_2)) (not (= c_0 c7)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= c6 c_1)) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)))))
(set .c836 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_0 c_2) c_2)) (not (= (f3 c_0 c_2) (f3 (f3 c_1 c_2) c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))))))
(set .c837 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c838 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c839 (resolution :clauses (.c837 .c838) :conclusion ((not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c840 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f3 c_1 c_2) (f1 c_0)))))
(set .c841 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c842 (resolution :clauses (.c840 .c841) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)))))
(set .c843 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c844 (resolution :clauses (.c842 .c843) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c845 (resolution :clauses (.c839 .c844) :conclusion ((= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c846 (resolution :clauses (.c836 .c845) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_0 c_2) c_2)) (not (= (f3 c_0 c_2) (f3 (f3 c_1 c_2) c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c847 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_2 c_2))))))
(set .c848 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_2) c_2))))
(set .c849 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_2)) (= (f3 c_2 c_2) (f3 c_2 (f1 c_2))))))
(set .c850 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c851 (resolution :clauses (.c849 .c850) :conclusion ((not (= (f1 c_2) c_2)) (= (f3 c_2 c_2) (f3 c_2 (f1 c_2))))))
(set .c852 (resolution :clauses (.c848 .c851) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_2) c_2) (not (= (f1 c_2) c_2)))))
(set .c853 (resolution :clauses (.c847 .c852) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_2 c_2))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)))))
(set .c854 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c855 (resolution :clauses (.c853 .c854) :conclusion ((= (f3 c_1 c_2) (f3 c_1 (f3 c_2 c_2))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)))))
(set .c856 (resolution :clauses (.c846 .c855) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_0 c_2) c_2)) (not (= (f3 c_0 c_2) (f3 (f3 c_1 c_2) c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f1 c_2) c_2)))))
(set .c857 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_1 c_2) c_2)))))
(set .c858 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c859 (resolution :clauses (.c857 .c858) :conclusion ((not (= (f3 c_1 c_2) c_0)) (= (f3 c_0 c_2) (f3 (f3 c_1 c_2) c_2)))))
(set .c860 (resolution :clauses (.c856 .c859) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_0 c_2) c_2)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f1 c_2) c_2)))))
(set .c861 (eq_congruent :conclusion ((not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2))))))
(set .c862 (resolution :clauses (.c860 .c861) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_0 c_2) c_2)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c863 (resolution :clauses (.c862 .c164 .c166 .c167 .c169) :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c864 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_0) c_1)) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))))))
(set .c865 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c866 (resolution :clauses (.c864 .c865) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_0) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= c_0 c7)))))
(set .c867 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c868 (resolution :clauses (.c866 .c867) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_0) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c869 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c870 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c871 (resolution :clauses (.c869 .c870) :conclusion ((not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c872 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)))))
(set .c873 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c874 (resolution :clauses (.c872 .c873) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_0 c7)))))
(set .c875 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c876 (resolution :clauses (.c874 .c875) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c877 (resolution :clauses (.c871 .c876) :conclusion ((= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c878 (resolution :clauses (.c868 .c877) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_0) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_1) c_0)))))
(set .c879 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c880 (eq_transitive :conclusion ((not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c881 (resolution :clauses (.c879 .c880) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c882 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c883 (resolution :clauses (.c881 .c882) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c884 (resolution :clauses (.c878 .c883) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_0) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c885 (resolution :clauses (.c884 .c32 .c164 .c166 .c167) :conclusion ((not (= (f1 c_0) c_1)) (not (= (f1 c_1) c_0)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c886 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_0) c_2)) (not (= (f2 c_0) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))))))
(set .c887 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c888 (resolution :clauses (.c886 .c887) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_0) c_2)) (not (= (f2 c_0) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)))))
(set .c889 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c890 (resolution :clauses (.c888 .c889) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_0) c_2)) (not (= (f2 c_0) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c891 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c892 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c893 (resolution :clauses (.c891 .c892) :conclusion ((not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c894 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f3 c_1 c_2) (f1 c_0)))))
(set .c895 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c896 (resolution :clauses (.c894 .c895) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)))))
(set .c897 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c898 (resolution :clauses (.c896 .c897) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c899 (resolution :clauses (.c893 .c898) :conclusion ((= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c900 (resolution :clauses (.c890 .c899) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_0) c_2)) (not (= (f2 c_0) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_0)))))
(set .c901 (eq_congruent :conclusion ((not (= (f1 c_0) c_0)) (= (f2 c_0) (f2 (f1 c_0))))))
(set .c902 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0))))
(set .c903 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c904 (resolution :clauses (.c902 .c903) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c_0 c7)))))
(set .c905 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c906 (resolution :clauses (.c904 .c905) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c907 (resolution :clauses (.c901 .c906) :conclusion ((= (f2 c_0) (f2 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c908 (resolution :clauses (.c900 .c907) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_0) c_2)) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_0)))))
(set .c909 (eq_congruent :conclusion ((not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2))))))
(set .c910 (resolution :clauses (.c908 .c909) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_0) c_2)) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)))))
(set .c911 (resolution :clauses (.c910 .c89 .c164 .c166 .c167 .c169) :conclusion ((not (= (f2 c_0) c_2)) (not (= (f1 c_1) c_0)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)))))
(set .c912 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))))))
(set .c913 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c914 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c915 (resolution :clauses (.c913 .c914) :conclusion ((not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c916 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)))))
(set .c917 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c918 (resolution :clauses (.c916 .c917) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_0 c7)))))
(set .c919 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c920 (resolution :clauses (.c918 .c919) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c921 (resolution :clauses (.c915 .c920) :conclusion ((= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c922 (resolution :clauses (.c912 .c921) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c6 c_1)))))
(set .c923 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c924 (eq_transitive :conclusion ((not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c925 (resolution :clauses (.c923 .c924) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c926 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c927 (resolution :clauses (.c925 .c926) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c928 (resolution :clauses (.c922 .c927) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c6 c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c929 (resolution :clauses (.c928 .c32 .c164 .c166 .c167) :conclusion ((not (= c_1 c7)) (not (= c_0 c7)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c6 c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c930 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) c_2))))
(set .c931 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c932 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c933 (resolution :clauses (.c931 .c932) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c934 (resolution :clauses (.c930 .c933) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) c_2) (not (= (f3 c_1 c_1) c_0)))))
(set .c935 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1))))))
(set .c936 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (= (f3 c_1 c_1) (f1 c_1)))))
(set .c937 (resolution :clauses (.c935 .c936) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)))))
(set .c938 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c939 (resolution :clauses (.c937 .c938) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)))))
(set .c940 (resolution :clauses (.c934 .c939) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) c_2) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)))))
(set .c941 (resolution :clauses (.c940 .c168) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) c_2) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)))))
(set .c942 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f1 c_2)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))))))
(set .c943 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c944 (resolution :clauses (.c942 .c943) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f1 c_2)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)))))
(set .c945 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c946 (resolution :clauses (.c944 .c945) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f1 c_2)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c947 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c948 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c949 (resolution :clauses (.c947 .c948) :conclusion ((not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c950 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f3 c_1 c_2) (f1 c_0)))))
(set .c951 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c952 (resolution :clauses (.c950 .c951) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)))))
(set .c953 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c954 (resolution :clauses (.c952 .c953) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c955 (resolution :clauses (.c949 .c954) :conclusion ((= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c956 (resolution :clauses (.c946 .c955) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f1 c_2)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_0)))))
(set .c957 (eq_congruent :conclusion ((not (= (f1 c_0) c_0)) (= (f2 c_0) (f2 (f1 c_0))))))
(set .c958 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0))))
(set .c959 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c960 (resolution :clauses (.c958 .c959) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c_0 c7)))))
(set .c961 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c962 (resolution :clauses (.c960 .c961) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c963 (resolution :clauses (.c957 .c962) :conclusion ((= (f2 c_0) (f2 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c964 (resolution :clauses (.c956 .c963) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f1 c_2)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_0)))))
(set .c965 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f1 c_2))) (= (f2 (f1 c_2)) (f2 (f3 c_0 c_2))))))
(set .c966 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= (f1 c_2) c_2)) (= (f3 c_0 c_2) (f1 c_2)))))
(set .c967 (resolution :clauses (.c965 .c966) :conclusion ((= (f2 (f1 c_2)) (f2 (f3 c_0 c_2))) (not (= (f3 c_0 c_2) c_2)) (not (= (f1 c_2) c_2)))))
(set .c968 (resolution :clauses (.c964 .c967) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_0 c_2) c_2)))))
(set .c969 (eq_congruent :conclusion ((not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2))))))
(set .c970 (resolution :clauses (.c968 .c969) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_0 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c971 (resolution :clauses (.c970 .c89 .c91 .c164 .c166 .c167 .c169) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f1 c_1) c_0)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_0 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c972 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f3 c_0 c_1)))) (not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (not (= (f3 (f3 c_2 c_0) c_1) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))))))
(set .c973 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c974 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c975 (resolution :clauses (.c973 .c974) :conclusion ((not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c976 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f3 c_1 c_2) (f1 c_0)))))
(set .c977 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c978 (resolution :clauses (.c976 .c977) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)))))
(set .c979 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c980 (resolution :clauses (.c978 .c979) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c981 (resolution :clauses (.c975 .c980) :conclusion ((= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c982 (resolution :clauses (.c972 .c981) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f3 c_0 c_1)))) (not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (not (= (f3 (f3 c_2 c_0) c_1) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c983 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_0) c_1) (f3 c_1 c_1)))))
(set .c984 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c985 (resolution :clauses (.c983 .c984) :conclusion ((not (= (f3 c_2 c_0) c_1)) (= (f3 (f3 c_2 c_0) c_1) (f3 c_1 c_1)))))
(set .c986 (resolution :clauses (.c982 .c985) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f3 c_0 c_1)))) (not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_2 c_0) c_1)))))
(set .c987 (eq_congruent :conclusion ((not (= (f3 c_0 c_1) c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f3 c_0 c_1))))))
(set .c988 (resolution :clauses (.c986 .c987) :conclusion ((not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_0 c_1) c_2)))))
(set .c989 (resolution :clauses (.c988 .c164 .c166 .c167) :conclusion ((not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_0 c_1) c_2)))))
(set .c990 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_1) c_2)) (not (= (f2 c4) (f2 c_1))) (not (= (f2 c4) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))))))
(set .c991 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c992 (resolution :clauses (.c990 .c991) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_1) c_2)) (not (= (f2 c4) (f2 c_1))) (not (= (f2 c4) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)))))
(set .c993 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c994 (resolution :clauses (.c992 .c993) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_1) c_2)) (not (= (f2 c4) (f2 c_1))) (not (= (f2 c4) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c995 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c996 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c997 (resolution :clauses (.c995 .c996) :conclusion ((not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c998 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f3 c_1 c_2) (f1 c_0)))))
(set .c999 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c1000 (resolution :clauses (.c998 .c999) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)))))
(set .c1001 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1002 (resolution :clauses (.c1000 .c1001) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c1003 (resolution :clauses (.c997 .c1002) :conclusion ((= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c1004 (resolution :clauses (.c994 .c1003) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_1) c_2)) (not (= (f2 c4) (f2 c_1))) (not (= (f2 c4) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_0)))))
(set .c1005 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f2 c4) (f2 c_1)))))
(set .c1006 (resolution :clauses (.c1004 .c1005) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_1) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= c4 c_1)))))
(set .c1007 (eq_congruent :conclusion ((not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2))))))
(set .c1008 (resolution :clauses (.c1006 .c1007) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c_1) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= c4 c_1)) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)))))
(set .c1009 (resolution :clauses (.c1008 .c164 .c166 .c167 .c169) :conclusion ((not (= (f2 c_1) c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f1 c_1) c_0)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= c4 c_1)) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)))))
(set .c1010 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))))))
(set .c1011 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c1012 (resolution :clauses (.c1010 .c1011) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c4 c_1)))))
(set .c1013 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c1014 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1015 (resolution :clauses (.c1013 .c1014) :conclusion ((not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c1016 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f3 c_1 c_2) (f1 c_0)))))
(set .c1017 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c1018 (resolution :clauses (.c1016 .c1017) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)))))
(set .c1019 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1020 (resolution :clauses (.c1018 .c1019) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c1021 (resolution :clauses (.c1015 .c1020) :conclusion ((= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c1022 (resolution :clauses (.c1012 .c1021) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c4 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c1023 (eq_congruent :conclusion ((not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2))))))
(set .c1024 (resolution :clauses (.c1022 .c1023) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c4 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_0 c_1) c_2)))))
(set .c1025 (resolution :clauses (.c1024 .c164 .c165 .c166 .c167 .c169) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_2))) (not (= (f1 c_1) c_0)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= c4 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_0 c_1) c_2)))))
(set .c1026 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_0 c_2) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) c_2))))
(set .c1027 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f3 c_2 c_0))))))
(set .c1028 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1029 (resolution :clauses (.c1027 .c1028) :conclusion ((not (= (f3 c_2 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f3 c_2 c_0))))))
(set .c1030 (resolution :clauses (.c1026 .c1029) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_0 c_2) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) c_2) (not (= (f3 c_2 c_0) c_1)))))
(set .c1031 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_2) c_0)))))
(set .c1032 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1033 (resolution :clauses (.c1031 .c1032) :conclusion ((not (= (f3 c_0 c_2) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_2) c_0)))))
(set .c1034 (resolution :clauses (.c1030 .c1033) :conclusion ((not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) c_2) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_0 c_2) c_2)))))
(set .c1035 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_0)) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) c_2))))
(set .c1036 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_0) c_1)) (= (f3 c_0 (f3 c_1 c_0)) (f3 c_0 c_1)))))
(set .c1037 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_0) c_1))))
(set .c1038 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0)))))
(set .c1039 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1040 (resolution :clauses (.c1038 .c1039) :conclusion ((not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0)))))
(set .c1041 (resolution :clauses (.c1037 .c1040) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_0) c_1) (not (= (f1 c_1) c_0)))))
(set .c1042 (resolution :clauses (.c1036 .c1041) :conclusion ((not (= c_0 c_0)) (= (f3 c_0 (f3 c_1 c_0)) (f3 c_0 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f1 c_1) c_0)))))
(set .c1043 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1044 (resolution :clauses (.c1042 .c1043) :conclusion ((= (f3 c_0 (f3 c_1 c_0)) (f3 c_0 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f1 c_1) c_0)))))
(set .c1045 (resolution :clauses (.c1035 .c1044) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) c_2) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f1 c_1) c_0)))))
(set .c1046 (eq_congruent :conclusion ((not (= (f3 c_0 c_1) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c1047 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1048 (resolution :clauses (.c1046 .c1047) :conclusion ((not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c1049 (resolution :clauses (.c1045 .c1048) :conclusion ((not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) c_2) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f1 c_1) c_0)))))
(set .c1050 (resolution :clauses (.c1049 .c168) :conclusion ((not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) c_2) (not (= (f1 c_1) c_0)))))
(set .c1051 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 (f3 c_0 c_1)) (f1 c_2))) (not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))))))
(set .c1052 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c1053 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1054 (resolution :clauses (.c1052 .c1053) :conclusion ((not (= (f3 c_1 c_2) (f1 c_0))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))))))
(set .c1055 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f3 c_1 c_2) (f1 c_0)))))
(set .c1056 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c1057 (resolution :clauses (.c1055 .c1056) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)))))
(set .c1058 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1059 (resolution :clauses (.c1057 .c1058) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_1 c_2) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c1060 (resolution :clauses (.c1054 .c1059) :conclusion ((= (f3 c_0 (f3 c_1 c_2)) (f3 c_0 (f1 c_0))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c1061 (resolution :clauses (.c1051 .c1060) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 (f3 c_0 c_1)) (f1 c_2))) (not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c1062 (eq_congruent :conclusion ((not (= (f3 c_0 c_1) c_2)) (= (f1 (f3 c_0 c_1)) (f1 c_2)))))
(set .c1063 (resolution :clauses (.c1061 .c1062) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_0 c_1) c_2)))))
(set .c1064 (eq_congruent :conclusion ((not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_2 (f1 c_2))))))
(set .c1065 (resolution :clauses (.c1063 .c1064) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_0 c_1) c_2)))))
(set .c1066 (resolution :clauses (.c1065 .c164 .c166 .c167 .c169) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f1 c_1) c_0)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_0 c_1) c_2)))))
(set .c1067 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c_1 c4))) (not (= c_2 (f3 c_1 c4))) (not (= (f3 c_0 c5) c_2)) (= c_0 (f3 c_0 c5)))))
(set .c1068 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_1)) (= (f3 c_1 c_1) (f3 c_1 c4)))))
(set .c1069 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1070 (resolution :clauses (.c1068 .c1069) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c_1) (f3 c_1 c4)))))
(set .c1071 (resolution :clauses (.c1067 .c1070) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_2 (f3 c_1 c4))) (not (= (f3 c_0 c5) c_2)) (= c_0 (f3 c_0 c5)) (not (= c4 c_1)))))
(set .c1072 (eq_transitive :conclusion ((not (= (f3 c_0 c4) c_0)) (not (= (f3 c_0 c4) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_0 c5) c_2)) (= c_0 (f3 c_0 c5)))))
(set .c1073 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c4 c_1)) (= (f3 c_0 c4) (f3 c_0 c_1)))))
(set .c1074 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1075 (resolution :clauses (.c1073 .c1074) :conclusion ((not (= c4 c_1)) (= (f3 c_0 c4) (f3 c_0 c_1)))))
(set .c1076 (resolution :clauses (.c1072 .c1075) :conclusion ((not (= (f3 c_0 c4) c_0)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_0 c5) c_2)) (= c_0 (f3 c_0 c5)) (not (= c4 c_1)))))
(set .c1077 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))))))
(set .c1078 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c1079 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1080 (resolution :clauses (.c1078 .c1079) :conclusion ((not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c1081 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)))))
(set .c1082 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c1083 (resolution :clauses (.c1081 .c1082) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_0 c7)))))
(set .c1084 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1085 (resolution :clauses (.c1083 .c1084) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c1086 (resolution :clauses (.c1080 .c1085) :conclusion ((= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c1087 (resolution :clauses (.c1077 .c1086) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c1088 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1)))))
(set .c1089 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1090 (resolution :clauses (.c1088 .c1089) :conclusion ((not (= (f3 c_2 c_1) c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1)))))
(set .c1091 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c1092 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c1093 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1094 (resolution :clauses (.c1092 .c1093) :conclusion ((not (= (f2 c_1) c_2)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c1095 (resolution :clauses (.c1091 .c1094) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f2 c_1) c_2)))))
(set .c1096 (resolution :clauses (.c1090 .c1095) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 c_1) c_2)))))
(set .c1097 (resolution :clauses (.c1087 .c1096) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f2 c_1) c_2)))))
(set .c1098 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_1 c_1) c_0)) (= (f3 c_2 c_0) (f3 c_2 (f3 c_1 c_1))))))
(set .c1099 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c1100 (resolution :clauses (.c1098 .c1099) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 c_2 c_0) (f3 c_2 (f3 c_1 c_1))))))
(set .c1101 (resolution :clauses (.c1097 .c1100) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f2 c_1) c_2)))))
(set .c1102 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c1103 (eq_transitive :conclusion ((not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c1104 (resolution :clauses (.c1102 .c1103) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c1105 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1106 (resolution :clauses (.c1104 .c1105) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c1107 (resolution :clauses (.c1101 .c1106) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c1108 (resolution :clauses (.c1107 .c32 .c164 .c166 .c167) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c1109 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_0 c5) c_2)) (= c_0 (f3 c_0 c5)))))
(set .c1110 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_2 c_1) c_1)) (= (f3 c_1 c_1) (f3 c_1 (f3 c_2 c_1))))))
(set .c1111 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1112 (resolution :clauses (.c1110 .c1111) :conclusion ((not (= (f3 c_2 c_1) c_1)) (= (f3 c_1 c_1) (f3 c_1 (f3 c_2 c_1))))))
(set .c1113 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c1114 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c1115 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1116 (resolution :clauses (.c1114 .c1115) :conclusion ((not (= (f2 c_1) c_2)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c1117 (resolution :clauses (.c1113 .c1116) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f2 c_1) c_2)))))
(set .c1118 (resolution :clauses (.c1112 .c1117) :conclusion ((= (f3 c_1 c_1) (f3 c_1 (f3 c_2 c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 c_1) c_2)))))
(set .c1119 (resolution :clauses (.c1109 .c1118) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_0 c5) c_2)) (= c_0 (f3 c_0 c5)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 c_1) c_2)))))
(set .c1120 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_2) c_1) (f3 c_0 c_1)))))
(set .c1121 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1122 (resolution :clauses (.c1120 .c1121) :conclusion ((not (= (f3 c_1 c_2) c_0)) (= (f3 (f3 c_1 c_2) c_1) (f3 c_0 c_1)))))
(set .c1123 (resolution :clauses (.c1119 .c1122) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_0 c5) c_2)) (= c_0 (f3 c_0 c5)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 c_1) c_2)) (not (= (f3 c_1 c_2) c_0)))))
(set .c1124 (resolution :clauses (.c1123 .c32) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_0 c5) c_2)) (= c_0 (f3 c_0 c5)) (not (= (f2 c_1) c_2)) (not (= (f3 c_1 c_2) c_0)))))
(set .c1125 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f2 c_2) c_1)) (not (= (f2 c_2) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f3 c_2 c_0) c_2))))
(set .c1126 (eq_congruent :conclusion ((not (= (f1 c_2) c_2)) (= (f2 c_2) (f2 (f1 c_2))))))
(set .c1127 (resolution :clauses (.c1125 .c1126) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f2 c_2) c_1)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f3 c_2 c_0) c_2))))
(set .c1128 (resolution :clauses (.c1127 .c91) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f2 c_2) c_1)) (not (= (f1 c_2) c_2)) (= (f3 c_2 c_0) c_2))))
(set .c1129 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c_0) c_2)) (not (= (f3 c_0 c5) c_2)) (= c_0 (f3 c_0 c5)))))
(set .c1130 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c1131 (resolution :clauses (.c1129 .c1130) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) c_2)) (not (= (f3 c_0 c5) c_2)) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)))))
(set .c1132 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1133 (resolution :clauses (.c1131 .c1132) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) c_2)) (not (= (f3 c_0 c5) c_2)) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c1134 (resolution :clauses (.c1133 .c164 .c166) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_0) c_2)) (not (= (f3 c_0 c5) c_2)) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c1135 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c_0 c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) c_2))))
(set .c1136 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_2 c_1) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f3 c_2 c_1))))))
(set .c1137 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1138 (resolution :clauses (.c1136 .c1137) :conclusion ((not (= (f3 c_2 c_1) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f3 c_2 c_1))))))
(set .c1139 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c1140 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c1141 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1142 (resolution :clauses (.c1140 .c1141) :conclusion ((not (= (f2 c_1) c_2)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c1143 (resolution :clauses (.c1139 .c1142) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f2 c_1) c_2)))))
(set .c1144 (resolution :clauses (.c1138 .c1143) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f3 c_2 c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 c_1) c_2)))))
(set .c1145 (resolution :clauses (.c1135 .c1144) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) c_2) (not (= (f2 c_1) c_2)))))
(set .c1146 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c1147 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f3 c_0 c_2) (f2 c_1)))))
(set .c1148 (resolution :clauses (.c1146 .c1147) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 c_0 c_2) c_2)) (not (= (f2 c_1) c_2)))))
(set .c1149 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1150 (resolution :clauses (.c1148 .c1149) :conclusion ((= (f3 (f3 c_0 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 c_0 c_2) c_2)) (not (= (f2 c_1) c_2)))))
(set .c1151 (resolution :clauses (.c1145 .c1150) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) c_2) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_2) c_2)))))
(set .c1152 (resolution :clauses (.c1151 .c32) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_2 c_0) c_2) (not (= (f2 c_1) c_2)) (not (= (f3 c_0 c_2) c_2)))))
(set .c1153 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c5) (f3 c_2 (f1 c_2)))) (not (= c_0 (f3 c_2 c5))) (= c5 c_0))))
(set .c1154 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 (f1 c_2))) (= (f3 c_2 c5) (f3 c_2 (f1 c_2))))))
(set .c1155 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c1156 (resolution :clauses (.c1154 .c1155) :conclusion ((not (= c5 (f1 c_2))) (= (f3 c_2 c5) (f3 c_2 (f1 c_2))))))
(set .c1157 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c1158 (resolution :clauses (.c1156 .c1157) :conclusion ((= (f3 c_2 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1159 (resolution :clauses (.c1153 .c1158) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c_0 (f3 c_2 c5))) (= c5 c_0) (not (= (f1 c_2) c_2)))))
(set .c1160 (resolution :clauses (.c1159 .c169) :conclusion ((not (= c5 c_2)) (not (= c_0 (f3 c_2 c5))) (= c5 c_0) (not (= (f1 c_2) c_2)))))
(set .c1161 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c5) (f3 (f2 c_1) c_1))) (not (= c_0 (f3 c_2 c5))) (= c5 c_0))))
(set .c1162 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c5 c_1)) (= (f3 c_2 c5) (f3 (f2 c_1) c_1)))))
(set .c1163 (resolution :clauses (.c1161 .c1162) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_0 (f3 c_2 c5))) (= c5 c_0) (not (= (f2 c_1) c_2)))))
(set .c1164 (resolution :clauses (.c1163 .c32) :conclusion ((not (= c5 c_1)) (not (= c_0 (f3 c_2 c5))) (= c5 c_0) (not (= (f2 c_1) c_2)))))
(set .c1165 (resolution :clauses (.c1164 .c260 .c1160) :conclusion ((not (= c_0 (f3 c_2 c5))) (= c5 c_0) (not (= (f2 c_1) c_2)) (not (= (f1 c_2) c_2)))))
(set .c1166 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c1167 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c1168 (resolution :clauses (.c1166 .c1167) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_1)))))
(set .c1169 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c1170 (resolution :clauses (.c1168 .c1169) :conclusion ((not (= (f2 c5) (f1 c4))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c1171 (resolution :clauses (.c1170 .c165) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c1172 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c5) (f3 c_2 (f1 c_2)))) (= c_0 (f3 c_2 c5)))))
(set .c1173 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c1174 (resolution :clauses (.c1172 .c1173) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c5) (f3 c_2 (f1 c_2)))) (= c_0 (f3 c_2 c5)) (not (= c4 c_1)))))
(set .c1175 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c1176 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c1177 (resolution :clauses (.c1175 .c1176) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1178 (resolution :clauses (.c1174 .c1177) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c5) (f3 c_2 (f1 c_2)))) (= c_0 (f3 c_2 c5)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c1179 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 (f1 c_2))) (= (f3 c_2 c5) (f3 c_2 (f1 c_2))))))
(set .c1180 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c1181 (resolution :clauses (.c1179 .c1180) :conclusion ((not (= c5 (f1 c_2))) (= (f3 c_2 c5) (f3 c_2 (f1 c_2))))))
(set .c1182 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c1183 (resolution :clauses (.c1181 .c1182) :conclusion ((= (f3 c_2 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1184 (resolution :clauses (.c1178 .c1183) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 (f3 c_2 c5)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c1185 (resolution :clauses (.c1184 .c91 .c165 .c169) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)) (= c_0 (f3 c_2 c5)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c1186 (resolution :clauses (.c1185 .c260 .c1171) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)) (= c_0 (f3 c_2 c5)) (not (= c4 c_1)) (= c5 c_0) (= (f1 c_1) (f2 c_1)))))
(set .c1187 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c_1))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_0 c_2))))
(set .c1188 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c1189 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c1190 (resolution :clauses (.c1188 .c1189) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1191 (resolution :clauses (.c1187 .c1190) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c_1))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_0 c_2) (not (= c5 c_2)))))
(set .c1192 (resolution :clauses (.c1191 .c8 .c91) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c_1))) (not (= (f1 c_2) c_2)) (not (= c5 c_2)))))
(set .c1193 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c5) (f3 c_2 (f1 c_2)))) (= c_0 (f3 c_2 c5)))))
(set .c1194 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1195 (resolution :clauses (.c1193 .c1194) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c5) (f3 c_2 (f1 c_2)))) (= c_0 (f3 c_2 c5)) (not (= c6 c_1)))))
(set .c1196 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c1197 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 c7)) (= c4 c7))))
(set .c1198 (resolution :clauses (.c1196 .c1197) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c1199 (resolution :clauses (.c1195 .c1198) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c5) (f3 c_2 (f1 c_2)))) (= c_0 (f3 c_2 c5)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c1200 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c1201 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c1202 (resolution :clauses (.c1200 .c1201) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1203 (resolution :clauses (.c1199 .c1202) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c5) (f3 c_2 (f1 c_2)))) (= c_0 (f3 c_2 c5)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_2)))))
(set .c1204 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 (f1 c_2))) (= (f3 c_2 c5) (f3 c_2 (f1 c_2))))))
(set .c1205 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c1206 (resolution :clauses (.c1204 .c1205) :conclusion ((not (= c5 (f1 c_2))) (= (f3 c_2 c5) (f3 c_2 (f1 c_2))))))
(set .c1207 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c1208 (resolution :clauses (.c1206 .c1207) :conclusion ((= (f3 c_2 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1209 (resolution :clauses (.c1203 .c1208) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 (f3 c_2 c5)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_2)))))
(set .c1210 (resolution :clauses (.c1209 .c91 .c164 .c165 .c166 .c169) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)) (= c_0 (f3 c_2 c5)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_2)))))
(set .c1211 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f1 c_2)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (= c4 c_0))))
(set .c1212 (eq_congruent :conclusion ((not (= (f1 c_2) (f3 c4 c5))) (= (f2 (f1 c_2)) (f2 (f3 c4 c5))))))
(set .c1213 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_2) (f3 c4 c5)))))
(set .c1214 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c1215 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c1216 (resolution :clauses (.c1214 .c1215) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1217 (resolution :clauses (.c1213 .c1216) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1218 (resolution :clauses (.c1212 .c1217) :conclusion ((= (f2 (f1 c_2)) (f2 (f3 c4 c5))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1219 (resolution :clauses (.c1211 .c1218) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (= c4 c_0) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_2)))))
(set .c1220 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1221 (resolution :clauses (.c1219 .c1220) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (= c4 c_0) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_2)) (not (= c6 c_1)))))
(set .c1222 (resolution :clauses (.c1221 .c91 .c164 .c169) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_0)) (= c4 c_0) (not (= c5 c_2)) (not (= c6 c_1)))))
(set .c1223 (resolution :clauses (.c1222 .c258 .c1210) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c6 c_1)) (= c4 c_1) (= c_0 (f3 c_2 c5)) (not (= c_0 c7)))))
(set .c1224 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c1225 (eq_congruent :conclusion ((not (= (f3 c4 c5) c_1)) (= (f2 (f3 c4 c5)) (f2 c_1)))))
(set .c1226 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c1227 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c1228 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f2 c_1) c_2)) (= c4 (f2 c_1)))))
(set .c1229 (resolution :clauses (.c1227 .c1228) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f2 c_1) c_2)))))
(set .c1230 (resolution :clauses (.c1226 .c1229) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f2 c_1) c_2)))))
(set .c1231 (resolution :clauses (.c1225 .c1230) :conclusion ((= (f2 (f3 c4 c5)) (f2 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f2 c_1) c_2)))))
(set .c1232 (resolution :clauses (.c1224 .c1231) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f1 c_1) (f2 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f2 c_1) c_2)))))
(set .c1233 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1234 (resolution :clauses (.c1232 .c1233) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f1 c_1) (f2 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f2 c_1) c_2)) (not (= c6 c_1)))))
(set .c1235 (resolution :clauses (.c1234 .c32 .c164) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f2 c_1) c_2)) (not (= c6 c_1)))))
(set .c1236 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c1237 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c1238 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 c7)) (= c4 c7))))
(set .c1239 (resolution :clauses (.c1237 .c1238) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c1240 (resolution :clauses (.c1236 .c1239) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c1241 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c1242 (resolution :clauses (.c1240 .c1241) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_1)))))
(set .c1243 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1244 (resolution :clauses (.c1242 .c1243) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c6 c_1)))))
(set .c1245 (resolution :clauses (.c1244 .c164 .c165 .c166) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c6 c_1)))))
(set .c1246 (resolution :clauses (.c1245 .c258 .c1235 .c260 .c1223 .c1186 .c1165 .c246 .c592) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= c_0 c7)) (not (= c6 c_1)) (= c5 c_0) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_0)) (= c_1 (f2 c_1)))))
(set .c1247 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)))))
(set .c1248 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_1)) (f1 c7))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c1249 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1250 (resolution :clauses (.c1248 .c1249) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_1)) (f1 c7))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)))))
(set .c1251 (eq_congruent :conclusion ((not (= (f2 c_1) c7)) (= (f1 (f2 c_1)) (f1 c7)))))
(set .c1252 (eq_transitive :conclusion ((not (= c_0 (f2 c_1))) (not (= c_0 c7)) (= (f2 c_1) c7))))
(set .c1253 (resolution :clauses (.c1251 .c1252) :conclusion ((= (f1 (f2 c_1)) (f1 c7)) (not (= c_0 (f2 c_1))) (not (= c_0 c7)))))
(set .c1254 (resolution :clauses (.c1250 .c1253) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)) (not (= c_0 (f2 c_1))) (not (= c_0 c7)))))
(set .c1255 (resolution :clauses (.c1254 .c29 .c164 .c166) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= c6 c_1)) (not (= c_0 (f2 c_1))) (not (= c_0 c7)))))
(set .c1256 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c1257 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c1258 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)))))
(set .c1259 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1260 (resolution :clauses (.c1258 .c1259) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)))))
(set .c1261 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c1262 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c1263 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1264 (resolution :clauses (.c1262 .c1263) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)) (not (= c6 c_1)))))
(set .c1265 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c1266 (resolution :clauses (.c1264 .c1265) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= c5 (f1 c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c1267 (resolution :clauses (.c1261 .c1266) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c1268 (resolution :clauses (.c1260 .c1267) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c1269 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c1270 (resolution :clauses (.c1268 .c1269) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c1271 (resolution :clauses (.c1257 .c1270) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c1272 (resolution :clauses (.c1256 .c1271) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c1273 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c1274 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= (f1 c_1) (f3 c4 c5)))))
(set .c1275 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c1276 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c1277 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1278 (resolution :clauses (.c1276 .c1277) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)) (not (= c6 c_1)))))
(set .c1279 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c1280 (resolution :clauses (.c1278 .c1279) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= c5 (f1 c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c1281 (resolution :clauses (.c1275 .c1280) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c1282 (resolution :clauses (.c1274 .c1281) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c1283 (resolution :clauses (.c1273 .c1282) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)))))
(set .c1284 (resolution :clauses (.c1272 .c1283) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c1285 (resolution :clauses (.c1284 .c34 .c164 .c166 .c167 .c168 .c224) :conclusion ((not (= c6 c_1)) (not (= c_0 c7)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c1286 (resolution :clauses (.c1285 .c258 .c402 .c344 .c644 .c1246 .c252 .c1247 .c246 .c1255 .c630 .c256 .c624 .c303) :conclusion ((not (= c_0 c7)) (not (= (f1 c_2) c_2)) (= (f1 c_1) (f2 c_1)) (= c_1 (f2 c_1)) (= (f1 c_1) c_1))))
(set .c1287 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c4) (f2 (f1 c_1)))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)))))
(set .c1288 (eq_congruent :conclusion ((not (= c4 (f1 c_1))) (= (f2 c4) (f2 (f1 c_1))))))
(set .c1289 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (= c4 (f1 c_1)))))
(set .c1290 (resolution :clauses (.c1288 .c1289) :conclusion ((= (f2 c4) (f2 (f1 c_1))) (not (= c4 c_0)) (not (= (f1 c_1) c_0)))))
(set .c1291 (resolution :clauses (.c1287 .c1290) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)))))
(set .c1292 (resolution :clauses (.c1291 .c90) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)))))
(set .c1293 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f3 c_1 c_2)) (f1 (f2 c_0)))) (not (= (f1 (f3 c_1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)))))
(set .c1294 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1295 (resolution :clauses (.c1293 .c1294) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f3 c_1 c_2)) (f1 (f2 c_0)))) (not (= (f1 (f3 c_1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= (f1 c_1) c_0)))))
(set .c1296 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) (f2 c_0))) (= (f1 (f3 c_1 c_2)) (f1 (f2 c_0))))))
(set .c1297 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (= (f3 c_1 c_2) (f2 c_0)))))
(set .c1298 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1299 (resolution :clauses (.c1297 .c1298) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (= (f3 c_1 c_2) (f2 c_0)))))
(set .c1300 (resolution :clauses (.c1296 .c1299) :conclusion ((= (f1 (f3 c_1 c_2)) (f1 (f2 c_0))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))))))
(set .c1301 (resolution :clauses (.c1295 .c1300) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f3 c_1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)))))
(set .c1302 (resolution :clauses (.c1301 .c28 .c90) :conclusion ((not (= (f1 (f3 c_1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)))))
(set .c1303 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_2) (f2 (f1 c_2)))) (not (= (f2 c_2) (f1 c_0))) (not (= (f1 (f2 c_0)) (f1 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f3 c_1 c_2) c_0))))
(set .c1304 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1305 (resolution :clauses (.c1303 .c1304) :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_2) (f2 (f1 c_2)))) (not (= (f2 c_2) (f1 c_0))) (not (= (f1 (f2 c_0)) (f1 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f3 c_1 c_2) c_0))))
(set .c1306 (eq_congruent :conclusion ((not (= (f2 c_0) c_0)) (= (f1 (f2 c_0)) (f1 c_0)))))
(set .c1307 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_0) c_0))))
(set .c1308 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1309 (resolution :clauses (.c1307 .c1308) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_0) c_0))))
(set .c1310 (resolution :clauses (.c1306 .c1309) :conclusion ((= (f1 (f2 c_0)) (f1 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c1311 (resolution :clauses (.c1305 .c1310) :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_2) (f2 (f1 c_2)))) (not (= (f2 c_2) (f1 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f3 c_1 c_2) c_0))))
(set .c1312 (eq_congruent :conclusion ((not (= (f1 c_2) c_2)) (= (f2 c_2) (f2 (f1 c_2))))))
(set .c1313 (resolution :clauses (.c1311 .c1312) :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c_2) (f1 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f3 c_1 c_2) c_0))))
(set .c1314 (resolution :clauses (.c1313 .c28 .c90 .c91) :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c_2) (f1 c_0))) (not (= (f1 c_1) c_0)) (= (f3 c_1 c_2) c_0))))
(set .c1315 (eq_transitive :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= c_1 c_2))))
(set .c1316 (resolution :clauses (.c1315 .c9) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)))))
(set .c1317 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c_0))) (not (= (f1 c_0) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)))))
(set .c1318 (eq_congruent :conclusion ((not (= (f2 c_0) c_0)) (= (f1 (f2 c_0)) (f1 c_0)))))
(set .c1319 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_0) c_0))))
(set .c1320 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1321 (resolution :clauses (.c1319 .c1320) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_0) c_0))))
(set .c1322 (resolution :clauses (.c1318 .c1321) :conclusion ((= (f1 (f2 c_0)) (f1 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c1323 (resolution :clauses (.c1317 .c1322) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 c_0) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)))))
(set .c1324 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1325 (resolution :clauses (.c1323 .c1324) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 c_0) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)))))
(set .c1326 (resolution :clauses (.c1325 .c28 .c90) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_0) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)))))
(set .c1327 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 c5) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)))))
(set .c1328 (eq_congruent :conclusion ((not (= c5 (f1 c_1))) (= (f2 (f1 c_1)) (f2 c5)))))
(set .c1329 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c1330 (resolution :clauses (.c1328 .c1329) :conclusion ((= (f2 (f1 c_1)) (f2 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c1331 (resolution :clauses (.c1327 .c1330) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)))))
(set .c1332 (resolution :clauses (.c1331 .c90) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)))))
(set .c1333 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c_2) (f1 c_1))) (not (= (f2 c_2) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)))))
(set .c1334 (eq_congruent :conclusion ((not (= (f1 c_2) c_2)) (= (f2 c_2) (f2 (f1 c_2))))))
(set .c1335 (resolution :clauses (.c1333 .c1334) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c_2) (f1 c_1))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)))))
(set .c1336 (resolution :clauses (.c1335 .c91) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c_2) (f1 c_1))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)))))
(set .c1337 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f1 (f3 c_0 c_1)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)))))
(set .c1338 (eq_congruent :conclusion ((not (= (f3 c_0 c_1) c_2)) (= (f1 (f3 c_0 c_1)) (f1 c_2)))))
(set .c1339 (resolution :clauses (.c1337 .c1338) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)) (not (= (f3 c_0 c_1) c_2)))))
(set .c1340 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 c_0) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)))))
(set .c1341 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c_2 c5)))))
(set .c1342 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c1343 (resolution :clauses (.c1341 .c1342) :conclusion ((not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c_2 c5)))))
(set .c1344 (resolution :clauses (.c1340 .c1343) :conclusion ((not (= (f3 c_2 c_0) c_0)) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)))))
(set .c1345 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c_2) (f1 (f3 c_2 c_0)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)))))
(set .c1346 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_2)) (= (f1 c_2) (f1 (f3 c_2 c_0))))))
(set .c1347 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 c5))) (not (= (f3 c_2 c5) c_2)) (= (f3 c_2 c_0) c_2))))
(set .c1348 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c_2 c5)))))
(set .c1349 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c1350 (resolution :clauses (.c1348 .c1349) :conclusion ((not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c_2 c5)))))
(set .c1351 (resolution :clauses (.c1347 .c1350) :conclusion ((not (= (f3 c_2 c5) c_2)) (= (f3 c_2 c_0) c_2) (not (= c5 c_0)))))
(set .c1352 (resolution :clauses (.c1346 .c1351) :conclusion ((= (f1 c_2) (f1 (f3 c_2 c_0))) (not (= (f3 c_2 c5) c_2)) (not (= c5 c_0)))))
(set .c1353 (resolution :clauses (.c1345 .c1352) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)))))
(set .c1354 (eq_congruent :conclusion ((not (= (f2 c_0) c_0)) (= (f1 (f2 c_0)) (f1 c_0)))))
(set .c1355 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_0) c_0))))
(set .c1356 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1357 (resolution :clauses (.c1355 .c1356) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_0) c_0))))
(set .c1358 (resolution :clauses (.c1354 .c1357) :conclusion ((= (f1 (f2 c_0)) (f1 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c1359 (resolution :clauses (.c1353 .c1358) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)))))
(set .c1360 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1361 (resolution :clauses (.c1359 .c1360) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)))))
(set .c1362 (resolution :clauses (.c1361 .c28 .c90) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 c5) c_2)) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)))))
(set .c1363 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 c5))) (not (= (f3 c_2 c5) c_2)) (= c_1 c_2))))
(set .c1364 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c_2 c5)))))
(set .c1365 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c1366 (resolution :clauses (.c1364 .c1365) :conclusion ((not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c_2 c5)))))
(set .c1367 (resolution :clauses (.c1363 .c1366) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c5) c_2)) (= c_1 c_2) (not (= c5 c_0)))))
(set .c1368 (resolution :clauses (.c1367 .c9) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c5) c_2)) (not (= c5 c_0)))))
(set .c1369 (eq_transitive :conclusion ((not (= (f2 c_2) c_1)) (not (= (f2 c_2) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_1 c_2))))
(set .c1370 (eq_congruent :conclusion ((not (= (f1 c_2) c_2)) (= (f2 c_2) (f2 (f1 c_2))))))
(set .c1371 (resolution :clauses (.c1369 .c1370) :conclusion ((not (= (f2 c_2) c_1)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_1 c_2))))
(set .c1372 (resolution :clauses (.c1371 .c9 .c91) :conclusion ((not (= (f2 c_2) c_1)) (not (= (f1 c_2) c_2)))))
(set .c1373 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c_0 c7))))
(set .c1374 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1375 (resolution :clauses (.c1373 .c1374) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c_0 c7) (not (= c6 c_1)))))
(set .c1376 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c1377 (resolution :clauses (.c1375 .c1376) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c_0 c7) (not (= c6 c_1)))))
(set .c1378 (resolution :clauses (.c1377 .c164 .c166) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c_0 c7) (not (= c6 c_1)))))
(set .c1379 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c1380 (resolution :clauses (.c1379 .c224) :conclusion ((not (= c6 c_1)) (not (= c_1 c7)))))
(set .c1381 (resolution :clauses (.c1380 .c262 .c1378) :conclusion ((not (= c6 c_1)) (= c_0 c7) (not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)))))
(set .c1382 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c1383 (eq_congruent :conclusion ((not (= (f2 c_0) c6)) (not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))))))
(set .c1384 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (= (f2 c_0) c6))))
(set .c1385 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1386 (resolution :clauses (.c1384 .c1385) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (= (f2 c_0) c6))))
(set .c1387 (resolution :clauses (.c1383 .c1386) :conclusion ((not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)))))
(set .c1388 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c1389 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c1390 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (= c4 (f2 c_0)))))
(set .c1391 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1392 (resolution :clauses (.c1390 .c1391) :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (= c4 (f2 c_0)))))
(set .c1393 (resolution :clauses (.c1389 .c1392) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))))))
(set .c1394 (resolution :clauses (.c1388 .c1393) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))))))
(set .c1395 (resolution :clauses (.c1387 .c1394) :conclusion ((= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c1396 (resolution :clauses (.c1382 .c1395) :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c1397 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c1398 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c1399 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c1400 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (= c4 (f2 c_0)))))
(set .c1401 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1402 (resolution :clauses (.c1400 .c1401) :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (= c4 (f2 c_0)))))
(set .c1403 (resolution :clauses (.c1399 .c1402) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))))))
(set .c1404 (resolution :clauses (.c1398 .c1403) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f1 c_1) (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))))))
(set .c1405 (resolution :clauses (.c1397 .c1404) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))))))
(set .c1406 (resolution :clauses (.c1396 .c1405) :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c1407 (resolution :clauses (.c1406 .c31 .c34 .c90 .c168 .c224) :conclusion ((not (= c_0 c6)) (not (= c_1 c7)) (not (= (f1 c_1) c_0)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c1408 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c1409 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1410 (resolution :clauses (.c1408 .c1409) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c1411 (eq_congruent :conclusion ((not (= (f2 c_0) c6)) (= (f1 (f2 c_0)) (f1 c6)))))
(set .c1412 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (= (f2 c_0) c6))))
(set .c1413 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1414 (resolution :clauses (.c1412 .c1413) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (= (f2 c_0) c6))))
(set .c1415 (resolution :clauses (.c1411 .c1414) :conclusion ((= (f1 (f2 c_0)) (f1 c6)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)))))
(set .c1416 (resolution :clauses (.c1410 .c1415) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c1417 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c1418 (resolution :clauses (.c1416 .c1417) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c1419 (resolution :clauses (.c1418 .c28 .c90 .c164 .c166 .c224) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)) (not (= c7 c_2)))))
(set .c1420 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (= c6 c_2))))
(set .c1421 (eq_congruent :conclusion ((not (= c5 (f1 c_1))) (= (f2 (f1 c_1)) (f2 c5)))))
(set .c1422 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c1423 (resolution :clauses (.c1421 .c1422) :conclusion ((= (f2 (f1 c_1)) (f2 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c1424 (resolution :clauses (.c1420 .c1423) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (= c6 c_2) (not (= c5 c_0)))))
(set .c1425 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c1426 (resolution :clauses (.c1424 .c1425) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (= c6 c_2) (not (= c5 c_0)) (not (= c4 c_2)))))
(set .c1427 (resolution :clauses (.c1426 .c90 .c165) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)) (= c6 c_2) (not (= c5 c_0)) (not (= c4 c_2)))))
(set .c1428 (resolution :clauses (.c1427 .c258 .c1407 .c262 .c1419 .c256) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)) (= c6 c_2) (not (= c5 c_0)) (= c4 c_1) (= c_0 c7) (= c6 c_1))))
(set .c1429 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)))))
(set .c1430 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c1431 (resolution :clauses (.c1429 .c1430) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c4 c_2)))))
(set .c1432 (eq_congruent :conclusion ((not (= c5 (f1 c_1))) (= (f2 (f1 c_1)) (f2 c5)))))
(set .c1433 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c1434 (resolution :clauses (.c1432 .c1433) :conclusion ((= (f2 (f1 c_1)) (f2 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c1435 (resolution :clauses (.c1431 .c1434) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c1436 (resolution :clauses (.c1435 .c90 .c165) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c1437 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= c4 c_2))))
(set .c1438 (eq_congruent :conclusion ((not (= (f1 c_1) (f3 c4 c5))) (= (f2 (f1 c_1)) (f2 (f3 c4 c5))))))
(set .c1439 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c1440 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c1441 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (= c4 (f2 c_0)))))
(set .c1442 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1443 (resolution :clauses (.c1441 .c1442) :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (= c4 (f2 c_0)))))
(set .c1444 (resolution :clauses (.c1440 .c1443) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))))))
(set .c1445 (resolution :clauses (.c1439 .c1444) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f1 c_1) (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))))))
(set .c1446 (resolution :clauses (.c1438 .c1445) :conclusion ((= (f2 (f1 c_1)) (f2 (f3 c4 c5))) (not (= (f1 c_1) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))))))
(set .c1447 (resolution :clauses (.c1437 .c1446) :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= c4 c_2) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)))))
(set .c1448 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1449 (resolution :clauses (.c1447 .c1448) :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= c4 c_2) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1450 (resolution :clauses (.c1449 .c31 .c90 .c164) :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)) (= c4 c_2) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1451 (resolution :clauses (.c1450 .c258 .c1428) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)) (= c4 c_2) (not (= c5 c_0)) (= c4 c_1) (= c_0 c7) (= c6 c_1))))
(set .c1452 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c_0))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c1453 (eq_congruent :conclusion ((not (= (f2 c_0) c_0)) (= (f1 (f2 c_0)) (f1 c_0)))))
(set .c1454 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_0) c_0))))
(set .c1455 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1456 (resolution :clauses (.c1454 .c1455) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_0) c_0))))
(set .c1457 (resolution :clauses (.c1453 .c1456) :conclusion ((= (f1 (f2 c_0)) (f1 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c1458 (resolution :clauses (.c1452 .c1457) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= (f1 c_1) c_0)))))
(set .c1459 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1460 (resolution :clauses (.c1458 .c1459) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= (f1 c_1) c_0)))))
(set .c1461 (resolution :clauses (.c1460 .c28 .c90) :conclusion ((not (= (f1 c_0) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= (f1 c_1) c_0)))))
(set .c1462 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c6 c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)))))
(set .c1463 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c1464 (eq_congruent :conclusion ((not (= (f3 c4 c5) c_1)) (= (f2 (f3 c4 c5)) (f2 c_1)))))
(set .c1465 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c1466 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c1467 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c1468 (resolution :clauses (.c1466 .c1467) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c1469 (resolution :clauses (.c1465 .c1468) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c1470 (resolution :clauses (.c1464 .c1469) :conclusion ((= (f2 (f3 c4 c5)) (f2 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c1471 (resolution :clauses (.c1463 .c1470) :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f1 c_1) (f2 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c1472 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c1473 (resolution :clauses (.c1471 .c1472) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f1 c_1) (f2 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_1 c7)))))
(set .c1474 (resolution :clauses (.c1473 .c166 .c168) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_1 c7)))))
(set .c1475 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c1476 (resolution :clauses (.c1475 .c224) :conclusion ((not (= c6 c_2)) (not (= c7 c_2)))))
(set .c1477 (resolution :clauses (.c1476 .c256 .c1419) :conclusion ((not (= c7 c_2)) (= c6 c_1) (not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)))))
(set .c1478 (resolution :clauses (.c1451 .c1474 .c1436) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)) (not (= c5 c_0)) (= c_0 c7) (= c6 c_1) (= (f1 c_1) (f2 c_1)) (not (= c_1 c7)) (not (= (f2 c_1) c_2)))))
(set .c1479 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)))))
(set .c1480 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c1481 (resolution :clauses (.c1479 .c1480) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c_1 c7)))))
(set .c1482 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1483 (resolution :clauses (.c1481 .c1482) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c1484 (resolution :clauses (.c1483 .c164 .c166) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f2 c_1) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c1485 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c1486 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1487 (resolution :clauses (.c1485 .c1486) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= (f1 c_1) c_0)))))
(set .c1488 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (= (f1 (f2 c_0)) (f1 c4)))))
(set .c1489 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (= c4 (f2 c_0)))))
(set .c1490 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1491 (resolution :clauses (.c1489 .c1490) :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (= c4 (f2 c_0)))))
(set .c1492 (resolution :clauses (.c1488 .c1491) :conclusion ((= (f1 (f2 c_0)) (f1 c4)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))))))
(set .c1493 (resolution :clauses (.c1487 .c1492) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c1494 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c1495 (resolution :clauses (.c1493 .c1494) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 c5) (f1 c4))) (= (f1 c_1) (f2 c_1)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c1496 (resolution :clauses (.c1495 .c28 .c90 .c165) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c1497 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 (f2 c_0)) (f1 c4))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 (f1 c_1)) (f1 c_1))) (= (f2 c5) (f1 c_1)))))
(set .c1498 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1499 (resolution :clauses (.c1497 .c1498) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 (f2 c_0)) (f1 c4))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_1)) (f1 c_1))) (= (f2 c5) (f1 c_1)) (not (= (f1 c_1) c_0)))))
(set .c1500 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (= (f1 (f2 c_0)) (f1 c4)))))
(set .c1501 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c_0))) (= c4 (f2 c_0)))))
(set .c1502 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c1503 (resolution :clauses (.c1501 .c1502) :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (= c4 (f2 c_0)))))
(set .c1504 (resolution :clauses (.c1500 .c1503) :conclusion ((= (f1 (f2 c_0)) (f1 c4)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))))))
(set .c1505 (resolution :clauses (.c1499 .c1504) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f1 c_1)) (f1 c_1))) (= (f2 c5) (f1 c_1)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c1506 (resolution :clauses (.c1505 .c28 .c90 .c165) :conclusion ((= (f2 c5) (f1 c_1)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c1507 (resolution :clauses (.c1496 .c260 .c1192 .c1506) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= c5 c_0) (not (= (f1 c_2) c_2)))))
(set .c1508 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 c_1))) (not (= (f2 c_1) c_2)) (= c6 c_2))))
(set .c1509 (eq_congruent :conclusion ((not (= (f3 c4 c5) c_1)) (= (f2 (f3 c4 c5)) (f2 c_1)))))
(set .c1510 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c1511 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c1512 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f2 c_1) c_2)) (= c4 (f2 c_1)))))
(set .c1513 (resolution :clauses (.c1511 .c1512) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f2 c_1) c_2)))))
(set .c1514 (resolution :clauses (.c1510 .c1513) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f2 c_1) c_2)))))
(set .c1515 (resolution :clauses (.c1509 .c1514) :conclusion ((= (f2 (f3 c4 c5)) (f2 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f2 c_1) c_2)))))
(set .c1516 (resolution :clauses (.c1508 .c1515) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_1) c_2)) (= c6 c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)))))
(set .c1517 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c1518 (resolution :clauses (.c1516 .c1517) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_1) c_2)) (= c6 c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= c_1 c7)))))
(set .c1519 (resolution :clauses (.c1518 .c32 .c166) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f2 c_1) c_2)) (= c6 c_2) (not (= c5 c_1)) (not (= c4 c_2)) (not (= c_1 c7)))))
(set .c1520 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f1 c_2)) (f2 (f3 c4 c5)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c6 c_2))))
(set .c1521 (eq_congruent :conclusion ((not (= (f1 c_2) (f3 c4 c5))) (= (f2 (f1 c_2)) (f2 (f3 c4 c5))))))
(set .c1522 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_2) (f3 c4 c5)))))
(set .c1523 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c1524 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c1525 (resolution :clauses (.c1523 .c1524) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1526 (resolution :clauses (.c1522 .c1525) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1527 (resolution :clauses (.c1521 .c1526) :conclusion ((= (f2 (f1 c_2)) (f2 (f3 c4 c5))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1528 (resolution :clauses (.c1520 .c1527) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c6 c_2) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1529 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c1530 (resolution :clauses (.c1528 .c1529) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c6 c_2) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_1 c7)))))
(set .c1531 (resolution :clauses (.c1530 .c91 .c166 .c169) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)) (= c6 c_2) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_1 c7)))))
(set .c1532 (resolution :clauses (.c1531 .c260 .c1519 .c258 .c1507 .c256 .c1484 .c1186 .c1165 .c1478 .c262 .c1477 .c1381 .c246 .c592) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)) (= (f1 c_1) (f2 c_1)) (= c_0 c7) (= c_1 (f2 c_1)))))
(set .c1533 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f1 c_2)) (f2 (f3 c4 c5)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c6 c_2))))
(set .c1534 (eq_congruent :conclusion ((not (= (f1 c_2) (f3 c4 c5))) (= (f2 (f1 c_2)) (f2 (f3 c4 c5))))))
(set .c1535 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_2) (f3 c4 c5)))))
(set .c1536 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c1537 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c1538 (resolution :clauses (.c1536 .c1537) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1539 (resolution :clauses (.c1535 .c1538) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1540 (resolution :clauses (.c1534 .c1539) :conclusion ((= (f2 (f1 c_2)) (f2 (f3 c4 c5))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1541 (resolution :clauses (.c1533 .c1540) :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c6 c_2) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1542 (eq_congruent :conclusion ((not (= c6 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c6)))))
(set .c1543 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (= c6 (f2 c_1)))))
(set .c1544 (resolution :clauses (.c1542 .c1543) :conclusion ((= (f1 (f2 c_1)) (f1 c6)) (not (= c_0 c6)) (not (= c_0 (f2 c_1))))))
(set .c1545 (resolution :clauses (.c1541 .c1544) :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c6 c_2) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1546 (resolution :clauses (.c1545 .c29 .c91 .c164 .c169) :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f1 c_2) c_2)) (= c6 c_2) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1547 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (= c6 c_2))))
(set .c1548 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c1549 (resolution :clauses (.c1547 .c1548) :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (= c6 c_2) (not (= c4 c_2)))))
(set .c1550 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c1551 (resolution :clauses (.c1549 .c1550) :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (= c6 c_2) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c1552 (resolution :clauses (.c1551 .c165) :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f1 c_2) c_2)) (= c6 c_2) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c1553 (resolution :clauses (.c1552 .c260 .c1546) :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f1 c_2) c_2)) (= c6 c_2) (not (= c4 c_2)) (= c5 c_0))))
(set .c1554 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 (f2 c_1)) (f1 c6))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c1555 (eq_congruent :conclusion ((not (= c6 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c6)))))
(set .c1556 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (= c6 (f2 c_1)))))
(set .c1557 (resolution :clauses (.c1555 .c1556) :conclusion ((= (f1 (f2 c_1)) (f1 c6)) (not (= c_0 c6)) (not (= c_0 (f2 c_1))))))
(set .c1558 (resolution :clauses (.c1554 .c1557) :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 c6)) (not (= c_0 (f2 c_1))))))
(set .c1559 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c1560 (resolution :clauses (.c1558 .c1559) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= c_1 c7)))))
(set .c1561 (resolution :clauses (.c1560 .c29 .c164 .c166) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= c_1 c7)))))
(set .c1562 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c1563 (eq_congruent :conclusion ((not (= c6 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c6)))))
(set .c1564 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (= c6 (f2 c_1)))))
(set .c1565 (resolution :clauses (.c1563 .c1564) :conclusion ((= (f1 (f2 c_1)) (f1 c6)) (not (= c_0 c6)) (not (= c_0 (f2 c_1))))))
(set .c1566 (resolution :clauses (.c1562 .c1565) :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c1567 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c1568 (resolution :clauses (.c1566 .c1567) :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c1569 (resolution :clauses (.c1568 .c29 .c164 .c166 .c224) :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)))))
(set .c1570 (resolution :clauses (.c1569 .c262 .c1561) :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f1 c_2) c_2)) (= c_0 c7) (= (f1 c_1) (f2 c_1)))))
(set .c1571 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= c4 c_2))))
(set .c1572 (eq_congruent :conclusion ((not (= (f3 c4 c5) c_1)) (= (f2 (f3 c4 c5)) (f2 c_1)))))
(set .c1573 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c1574 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c1575 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (= c4 (f2 c_1)))))
(set .c1576 (resolution :clauses (.c1574 .c1575) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= c_0 (f2 c_1))))))
(set .c1577 (resolution :clauses (.c1573 .c1576) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= c_0 (f2 c_1))))))
(set .c1578 (resolution :clauses (.c1572 .c1577) :conclusion ((= (f2 (f3 c4 c5)) (f2 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= c_0 (f2 c_1))))))
(set .c1579 (resolution :clauses (.c1571 .c1578) :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= c4 c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)))))
(set .c1580 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1581 (resolution :clauses (.c1579 .c1580) :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= c4 c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c6 c_2)))))
(set .c1582 (resolution :clauses (.c1581 .c32 .c164) :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 c_2) c_2)) (= c4 c_2) (not (= c5 c_1)) (not (= c6 c_2)))))
(set .c1583 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c4 c_2))))
(set .c1584 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c1585 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c1586 (resolution :clauses (.c1584 .c1585) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1587 (resolution :clauses (.c1583 .c1586) :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c4 c_2) (not (= c5 c_2)))))
(set .c1588 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c4)))))
(set .c1589 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (= c4 (f2 c_1)))))
(set .c1590 (resolution :clauses (.c1588 .c1589) :conclusion ((= (f1 (f2 c_1)) (f1 c4)) (not (= c4 c_0)) (not (= c_0 (f2 c_1))))))
(set .c1591 (resolution :clauses (.c1587 .c1590) :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c4 c_2) (not (= c5 c_2)))))
(set .c1592 (resolution :clauses (.c1591 .c29 .c91 .c165) :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 c_2) c_2)) (= c4 c_2) (not (= c5 c_2)))))
(set .c1593 (resolution :clauses (.c1592 .c260 .c1582 .c258) :conclusion ((not (= c_0 (f2 c_1))) (not (= (f1 c_2) c_2)) (= c4 c_2) (= c5 c_0) (not (= c6 c_2)) (= c4 c_1))))
(set .c1594 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= c4 c_2)) (not (= c4 c_0)) (not (= c_0 (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c1595 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c1596 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c1597 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_2) (f3 c4 c5)))))
(set .c1598 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c1599 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c1600 (resolution :clauses (.c1598 .c1599) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1601 (resolution :clauses (.c1597 .c1600) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1602 (resolution :clauses (.c1596 .c1601) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1603 (resolution :clauses (.c1595 .c1602) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1604 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c1605 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_1) (f3 c4 c5)))))
(set .c1606 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c1607 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c1608 (resolution :clauses (.c1606 .c1607) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1609 (resolution :clauses (.c1605 .c1608) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1610 (resolution :clauses (.c1604 .c1609) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1611 (resolution :clauses (.c1603 .c1610) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c1612 (resolution :clauses (.c1611 .c34 .c168 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= c_1 c7)) (not (= (f1 c_2) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c1613 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c1614 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c1615 (resolution :clauses (.c1613 .c1614) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_2)))))
(set .c1616 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c1617 (resolution :clauses (.c1615 .c1616) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c1618 (resolution :clauses (.c1617 .c165) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c1619 (resolution :clauses (.c1618 .c260 .c1612) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c4 c_2)) (= c5 c_0) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c1620 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c1621 (eq_congruent :conclusion ((not (= (f3 c4 c5) c_1)) (= (f2 (f3 c4 c5)) (f2 c_1)))))
(set .c1622 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c1623 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c1624 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c1625 (resolution :clauses (.c1623 .c1624) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c1626 (resolution :clauses (.c1622 .c1625) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c1627 (resolution :clauses (.c1621 .c1626) :conclusion ((= (f2 (f3 c4 c5)) (f2 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c1628 (resolution :clauses (.c1620 .c1627) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f1 c_1) (f2 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c1629 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1630 (resolution :clauses (.c1628 .c1629) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f1 c_1) (f2 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c1631 (resolution :clauses (.c1630 .c164 .c168) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c1632 (resolution :clauses (.c1631 .c260 .c1171 .c1593 .c1619 .c262 .c1476) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c6 c_2)) (= c5 c_0) (not (= c_0 (f2 c_1))) (= c_0 c7))))
(set .c1633 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c1634 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1635 (resolution :clauses (.c1633 .c1634) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)))))
(set .c1636 (eq_congruent :conclusion ((not (= (f3 c4 c5) c_1)) (= (f2 (f3 c4 c5)) (f2 c_1)))))
(set .c1637 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c1638 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c1639 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c1640 (resolution :clauses (.c1638 .c1639) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c1641 (resolution :clauses (.c1637 .c1640) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c1642 (resolution :clauses (.c1636 .c1641) :conclusion ((= (f2 (f3 c4 c5)) (f2 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c1643 (resolution :clauses (.c1635 .c1642) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f1 c_1) (f2 c_1)) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c1644 (resolution :clauses (.c1643 .c164 .c168) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c1645 (resolution :clauses (.c1644 .c260 .c1171) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= (f1 c_1) c_2)) (= c5 c_0))))
(set .c1646 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_2)) (= c4 c_2))))
(set .c1647 (eq_congruent :conclusion ((not (= (f3 c4 c5) c_1)) (= (f2 (f3 c4 c5)) (f2 c_1)))))
(set .c1648 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c1649 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c1650 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (= c4 (f2 c_1)))))
(set .c1651 (resolution :clauses (.c1649 .c1650) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= c_0 (f2 c_1))))))
(set .c1652 (resolution :clauses (.c1648 .c1651) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= c_0 (f2 c_1))))))
(set .c1653 (resolution :clauses (.c1647 .c1652) :conclusion ((= (f2 (f3 c4 c5)) (f2 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= c_0 (f2 c_1))))))
(set .c1654 (resolution :clauses (.c1646 .c1653) :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_2)) (= c4 c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)))))
(set .c1655 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1656 (resolution :clauses (.c1654 .c1655) :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (= c4 c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c6 c_1)))))
(set .c1657 (resolution :clauses (.c1656 .c32 .c164) :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 c_1) c_2)) (= c4 c_2) (not (= c5 c_1)) (not (= c6 c_1)))))
(set .c1658 (resolution :clauses (.c1657 .c260 .c1592 .c258) :conclusion ((not (= c_0 (f2 c_1))) (not (= (f1 c_1) c_2)) (= c4 c_2) (not (= c6 c_1)) (= c5 c_0) (not (= (f1 c_2) c_2)) (= c4 c_1))))
(set .c1659 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c1660 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c1661 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_2) (f3 c4 c5)))))
(set .c1662 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c1663 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c1664 (resolution :clauses (.c1662 .c1663) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1665 (resolution :clauses (.c1661 .c1664) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1666 (resolution :clauses (.c1660 .c1665) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1667 (resolution :clauses (.c1659 .c1666) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c1668 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c1669 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_1) (f3 c4 c5)))))
(set .c1670 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c1671 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c1672 (resolution :clauses (.c1670 .c1671) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1673 (resolution :clauses (.c1669 .c1672) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1674 (resolution :clauses (.c1668 .c1673) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c1675 (resolution :clauses (.c1667 .c1674) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c1676 (resolution :clauses (.c1675 .c34 .c168 .c169 .c224) :conclusion ((not (= c6 c_1)) (not (= c7 c_2)) (not (= (f1 c_2) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c1677 (resolution :clauses (.c1676 .c260 .c1618 .c1658 .c1645 .c262 .c1380 .c256 .c1632) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= c5 c_0) (= (f1 c_1) (f2 c_1)) (not (= c_0 (f2 c_1))) (= c_0 c7) (= c_0 c6))))
(set .c1678 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c1679 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c1680 (resolution :clauses (.c1678 .c1679) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_2)))))
(set .c1681 (eq_congruent :conclusion ((not (= c5 (f1 c_0))) (= (f2 c5) (f2 (f1 c_0))))))
(set .c1682 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c1683 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c1684 (resolution :clauses (.c1682 .c1683) :conclusion ((not (= c5 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= c5 (f1 c_0)))))
(set .c1685 (resolution :clauses (.c1681 .c1684) :conclusion ((= (f2 c5) (f2 (f1 c_0))) (not (= c5 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))))))
(set .c1686 (resolution :clauses (.c1680 .c1685) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 (f2 c_1))))))
(set .c1687 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c1688 (resolution :clauses (.c1686 .c1687) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 (f2 c_1))))))
(set .c1689 (resolution :clauses (.c1688 .c29 .c89 .c165) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f1 c_1) (f2 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 (f2 c_1))))))
(set .c1690 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c1691 (eq_congruent :conclusion ((not (= (f1 c_0) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f1 c_0))))))
(set .c1692 (eq_transitive :conclusion ((not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= c_0 (f2 c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)))))
(set .c1693 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c1694 (resolution :clauses (.c1692 .c1693) :conclusion ((not (= (f1 (f2 c_1)) (f2 c_1))) (not (= c_0 (f2 c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)))))
(set .c1695 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c1696 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c1697 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c1698 (resolution :clauses (.c1696 .c1697) :conclusion ((not (= c5 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= c5 (f1 c_0)))))
(set .c1699 (resolution :clauses (.c1695 .c1698) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))))))
(set .c1700 (resolution :clauses (.c1694 .c1699) :conclusion ((not (= (f1 (f2 c_1)) (f2 c_1))) (not (= c_0 (f2 c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c1701 (resolution :clauses (.c1691 .c1700) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= c_0 (f2 c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c1702 (resolution :clauses (.c1690 .c1701) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 (f2 c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c1703 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c1704 (resolution :clauses (.c1702 .c1703) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 (f2 c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c1705 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c1706 (resolution :clauses (.c1704 .c1705) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c_0 (f2 c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c1707 (resolution :clauses (.c1706 .c29 .c89 .c164 .c167) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= c_0 (f2 c_1))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c1708 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f2 (f3 c4 c5)) (f2 (f1 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= c4 c_2))))
(set .c1709 (eq_congruent :conclusion ((not (= (f1 c_0) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f1 c_0))))))
(set .c1710 (eq_transitive :conclusion ((not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= c_0 (f2 c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)))))
(set .c1711 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c1712 (resolution :clauses (.c1710 .c1711) :conclusion ((not (= (f1 (f2 c_1)) (f2 c_1))) (not (= c_0 (f2 c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)))))
(set .c1713 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c1714 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c1715 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c1716 (resolution :clauses (.c1714 .c1715) :conclusion ((not (= c5 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= c5 (f1 c_0)))))
(set .c1717 (resolution :clauses (.c1713 .c1716) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))))))
(set .c1718 (resolution :clauses (.c1712 .c1717) :conclusion ((not (= (f1 (f2 c_1)) (f2 c_1))) (not (= c_0 (f2 c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c1719 (resolution :clauses (.c1709 .c1718) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= c_0 (f2 c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c1720 (resolution :clauses (.c1708 .c1719) :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= c4 c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_0)))))
(set .c1721 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1722 (resolution :clauses (.c1720 .c1721) :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= c4 c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1723 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c1724 (resolution :clauses (.c1722 .c1723) :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= c4 c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1725 (resolution :clauses (.c1724 .c29 .c89 .c164 .c167) :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 c_2) c_2)) (= c4 c_2) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1726 (resolution :clauses (.c1725 .c256 .c1707) :conclusion ((not (= c4 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 c_2) c_2)) (= c4 c_2) (not (= c5 c_0)) (= c_0 c6) (= (f1 c_1) (f2 c_1)))))
(set .c1727 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)))))
(set .c1728 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c1729 (resolution :clauses (.c1727 .c1728) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f1 c_0)))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_1)))))
(set .c1730 (eq_congruent :conclusion ((not (= c5 (f1 c_0))) (= (f2 c5) (f2 (f1 c_0))))))
(set .c1731 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c1732 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c1733 (resolution :clauses (.c1731 .c1732) :conclusion ((not (= c5 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= c5 (f1 c_0)))))
(set .c1734 (resolution :clauses (.c1730 .c1733) :conclusion ((= (f2 c5) (f2 (f1 c_0))) (not (= c5 c_0)) (not (= c_0 (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))))))
(set .c1735 (resolution :clauses (.c1729 .c1734) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 (f2 c_1))))))
(set .c1736 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c1737 (resolution :clauses (.c1735 .c1736) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_0) (f2 (f1 c_0)))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f1 c_1) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 (f2 c_1))))))
(set .c1738 (resolution :clauses (.c1737 .c29 .c89 .c165) :conclusion ((= (f1 c_1) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 (f2 c_1))))))
(set .c1739 (resolution :clauses (.c1738 .c258 .c1726 .c1689 .c1677 .c1570 .c246 .c1247 .c252 .c1532 .c1286 .c254 .c597 .c588 .c569 .c504) :conclusion ((= (f1 c_1) (f2 c_1)))))
(set .c1740 (resolution :clauses (.c19 .c1739) :conclusion ((= (f2 (f3 c_1 c_1)) (f2 c_1)))))
(set .c1741 (resolution :clauses (.c101 .c1739) :conclusion ((= (f1 (f3 c_1 c_1)) (f1 c_1)))))
(set .c1742 (resolution :clauses (.c197 .c1739) :conclusion ((= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1))))))
(set .c1743 (eq_transitive :conclusion ((not (= c_0 (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= c_0 c_2))))
(set .c1744 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c1745 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1746 (resolution :clauses (.c1744 .c1745) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1747 (resolution :clauses (.c1743 .c1746) :conclusion ((not (= c_0 (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= c_0 c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1748 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1749 (resolution :clauses (.c1747 .c1748) :conclusion ((not (= c_0 (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= c_0 c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1750 (resolution :clauses (.c1749 .c8 .c164) :conclusion ((not (= c_0 (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1751 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c5 c_2)) (= c_0 c_2))))
(set .c1752 (resolution :clauses (.c1751 .c8) :conclusion ((not (= c5 c_0)) (not (= c5 c_2)))))
(set .c1753 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c6 c_2)) (= c_0 c_2))))
(set .c1754 (resolution :clauses (.c1753 .c8) :conclusion ((not (= c_0 c6)) (not (= c6 c_2)))))
(set .c1755 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_2) c_2)) (not (= (f3 c_1 c_2) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c1756 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f1 c_1))))))
(set .c1757 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c1758 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c1759 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1760 (resolution :clauses (.c1758 .c1759) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1761 (resolution :clauses (.c1757 .c1760) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1762 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1763 (resolution :clauses (.c1761 .c1762) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1764 (resolution :clauses (.c1756 .c1763) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 c_2) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1765 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1766 (resolution :clauses (.c1764 .c1765) :conclusion ((= (f3 c_1 c_2) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1767 (resolution :clauses (.c1755 .c1766) :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_2) c_2)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1768 (resolution :clauses (.c1767 .c1739 .c164 .c168 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_2) c_2)) (not (= c_1 c7)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1769 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c5) c_2)) (not (= (f3 c_0 c_0) (f3 c_0 c5))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c1770 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c1771 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1772 (resolution :clauses (.c1770 .c1771) :conclusion ((not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c1773 (resolution :clauses (.c1769 .c1772) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c5) c_2)) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c5 c_0)))))
(set .c1774 (resolution :clauses (.c1773 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c5) c_2)) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (not (= c5 c_0)))))
(set .c1775 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c1776 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c1777 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1778 (resolution :clauses (.c1776 .c1777) :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c1779 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_2 (f3 c_1 c4))) (not (= (f3 c_1 c_1) (f3 c_1 c4))) (= (f2 c_0) (f3 c_1 c_1)))))
(set .c1780 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c1781 (resolution :clauses (.c1779 .c1780) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_2 (f3 c_1 c4))) (not (= (f3 c_1 c_1) (f3 c_1 c4))) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)))))
(set .c1782 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c1783 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1784 (resolution :clauses (.c1782 .c1783) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1785 (resolution :clauses (.c1781 .c1784) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_2 (f3 c_1 c4))) (not (= (f3 c_1 c_1) (f3 c_1 c4))) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1786 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1787 (resolution :clauses (.c1785 .c1786) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_2 (f3 c_1 c4))) (not (= (f3 c_1 c_1) (f3 c_1 c4))) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1788 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_1)) (= (f3 c_1 c_1) (f3 c_1 c4)))))
(set .c1789 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1790 (resolution :clauses (.c1788 .c1789) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c_1) (f3 c_1 c4)))))
(set .c1791 (resolution :clauses (.c1787 .c1790) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_2 (f3 c_1 c4))) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1792 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c1793 (resolution :clauses (.c1791 .c1792) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_2 (f3 c_1 c4))) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1794 (resolution :clauses (.c1778 .c1793) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_2 (f3 c_1 c4))) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1795 (resolution :clauses (.c1775 .c1794) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_2 (f3 c_1 c4))) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1796 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0))))))
(set .c1797 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1798 (resolution :clauses (.c1796 .c1797) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1799 (resolution :clauses (.c1795 .c1798) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_2 (f3 c_1 c4))) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c1800 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c1801 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1802 (resolution :clauses (.c1800 .c1801) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1803 (resolution :clauses (.c1799 .c1802) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_2 (f3 c_1 c4))) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c1804 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= c5 c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5)))))
(set .c1805 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c1806 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c1807 (eq_transitive :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c1808 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c1809 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1810 (resolution :clauses (.c1808 .c1809) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1811 (resolution :clauses (.c1807 .c1810) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1812 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1813 (resolution :clauses (.c1811 .c1812) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1814 (resolution :clauses (.c1806 .c1813) :conclusion ((not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1815 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1816 (resolution :clauses (.c1814 .c1815) :conclusion ((= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1817 (resolution :clauses (.c1805 .c1816) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1818 (resolution :clauses (.c1804 .c1817) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c6 c_2)))))
(set .c1819 (resolution :clauses (.c1803 .c1818) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_2 (f3 c_1 c4))) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= c_1 c7)) (not (= c_1 (f3 (f2 c_1) c_1))))))
(set .c1820 (resolution :clauses (.c1819 .c1739 .c31 .c32 .c34 .c164 .c165) :conclusion ((not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (= c_0 (f3 c_1 c5)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c_2 (f3 c_1 c4))) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c1821 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) c_0)) (not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 c_1))))
(set .c1822 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c1823 (eq_transitive :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c1824 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c1825 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1826 (resolution :clauses (.c1824 .c1825) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1827 (resolution :clauses (.c1823 .c1826) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1828 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1829 (resolution :clauses (.c1827 .c1828) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1830 (resolution :clauses (.c1822 .c1829) :conclusion ((not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1831 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1832 (resolution :clauses (.c1830 .c1831) :conclusion ((= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1833 (resolution :clauses (.c1821 .c1832) :conclusion ((not (= (f3 c_2 c_1) c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 c_1) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1834 (resolution :clauses (.c1833 .c7 .c32 .c164) :conclusion ((not (= (f3 c_2 c_1) c_0)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1835 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_0) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c1836 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c1837 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1838 (resolution :clauses (.c1836 .c1837) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1839 (resolution :clauses (.c1835 .c1838) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_0) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1840 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1841 (resolution :clauses (.c1839 .c1840) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_0) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1842 (resolution :clauses (.c1841 .c164 .c224) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_0) c_1)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1843 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c5) c_2)) (not (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_1)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (= c6 c7))))
(set .c1844 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 (f3 c_0 c_1))) (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_1))))))
(set .c1845 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1846 (resolution :clauses (.c1844 .c1845) :conclusion ((not (= c5 (f3 c_0 c_1))) (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_1))))))
(set .c1847 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c_0 (f3 c_0 c_1))) (= c5 (f3 c_0 c_1)))))
(set .c1848 (resolution :clauses (.c1846 .c1847) :conclusion ((= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_1))) (not (= c5 c_0)) (not (= c_0 (f3 c_0 c_1))))))
(set .c1849 (resolution :clauses (.c1843 .c1848) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c5) c_2)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (= c6 c7) (not (= c5 c_0)) (not (= c_0 (f3 c_0 c_1))))))
(set .c1850 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c1851 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1852 (resolution :clauses (.c1850 .c1851) :conclusion ((not (= (f3 c_0 c_0) (f2 c_1))) (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c1853 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c_0 c5))) (not (= (f3 c_0 c5) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f3 c_0 c_0) (f2 c_1)))))
(set .c1854 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c1855 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1856 (resolution :clauses (.c1854 .c1855) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1857 (resolution :clauses (.c1853 .c1856) :conclusion ((not (= (f3 c_0 c_0) (f3 c_0 c5))) (not (= (f3 c_0 c5) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f3 c_0 c_0) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1858 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1859 (resolution :clauses (.c1857 .c1858) :conclusion ((not (= (f3 c_0 c_0) (f3 c_0 c5))) (not (= (f3 c_0 c5) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f3 c_0 c_0) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1860 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c1861 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1862 (resolution :clauses (.c1860 .c1861) :conclusion ((not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c1863 (resolution :clauses (.c1859 .c1862) :conclusion ((not (= (f3 c_0 c5) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f3 c_0 c_0) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1864 (resolution :clauses (.c1852 .c1863) :conclusion ((= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c5) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1865 (resolution :clauses (.c1849 .c1864) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c5) c_2)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (= c6 c7) (not (= c5 c_0)) (not (= c_0 (f3 c_0 c_1))) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= c4 c_1)))))
(set .c1866 (resolution :clauses (.c1865 .c32 .c164 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c5) c_2)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c_0 (f3 c_0 c_1))) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= c4 c_1)))))
(set .c1867 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 c_1))))
(set .c1868 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c1869 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1870 (resolution :clauses (.c1868 .c1869) :conclusion ((not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c1871 (eq_transitive :conclusion ((not (= (f1 c_0) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)))))
(set .c1872 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c1873 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1874 (resolution :clauses (.c1872 .c1873) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1875 (resolution :clauses (.c1871 .c1874) :conclusion ((not (= (f1 c_0) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1876 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1877 (resolution :clauses (.c1875 .c1876) :conclusion ((not (= (f1 c_0) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1878 (resolution :clauses (.c1870 .c1877) :conclusion ((= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))) (not (= (f1 c_0) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1879 (resolution :clauses (.c1867 .c1878) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 c_1) (not (= (f1 c_0) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1880 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c1881 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1882 (resolution :clauses (.c1880 .c1881) :conclusion ((not (= (f3 c_0 c_0) (f2 c_1))) (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c1883 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c_0 c5))) (not (= (f3 c_0 c5) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f3 c_0 c_0) (f2 c_1)))))
(set .c1884 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c1885 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1886 (resolution :clauses (.c1884 .c1885) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1887 (resolution :clauses (.c1883 .c1886) :conclusion ((not (= (f3 c_0 c_0) (f3 c_0 c5))) (not (= (f3 c_0 c5) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f3 c_0 c_0) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1888 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1889 (resolution :clauses (.c1887 .c1888) :conclusion ((not (= (f3 c_0 c_0) (f3 c_0 c5))) (not (= (f3 c_0 c5) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f3 c_0 c_0) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1890 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c1891 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1892 (resolution :clauses (.c1890 .c1891) :conclusion ((not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c1893 (resolution :clauses (.c1889 .c1892) :conclusion ((not (= (f3 c_0 c5) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f3 c_0 c_0) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1894 (resolution :clauses (.c1882 .c1893) :conclusion ((= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c5) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1895 (resolution :clauses (.c1879 .c1894) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 c_1) (not (= (f1 c_0) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 c_0 c5) c_2)))))
(set .c1896 (resolution :clauses (.c1895 .c7 .c32 .c164 .c167) :conclusion ((not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 c_0 c5) c_2)))))
(set .c1897 (resolution :clauses (.c1896 .c228 .c1866) :conclusion ((not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 c_0 c5) c_2)) (= c_1 (f3 c_0 c_1)) (not (= c_1 c7)))))
(set .c1898 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 c_2 c_0) c_2)) (= c_0 c_2))))
(set .c1899 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c1900 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1901 (resolution :clauses (.c1899 .c1900) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c1902 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c1903 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c1904 (resolution :clauses (.c1902 .c1903) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c4 c_1)))))
(set .c1905 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c1906 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1907 (resolution :clauses (.c1905 .c1906) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1908 (resolution :clauses (.c1904 .c1907) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1909 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1910 (resolution :clauses (.c1908 .c1909) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1911 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c1912 (resolution :clauses (.c1910 .c1911) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1913 (resolution :clauses (.c1901 .c1912) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1914 (resolution :clauses (.c1898 .c1913) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 c_0) c_2)) (= c_0 c_2) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1915 (resolution :clauses (.c1914 .c8 .c1739 .c31 .c164 .c165) :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1916 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 c_2 c_0) c_1)) (= c_0 c_1))))
(set .c1917 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c1918 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1919 (resolution :clauses (.c1917 .c1918) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c1920 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c1921 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c1922 (resolution :clauses (.c1920 .c1921) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c4 c_1)))))
(set .c1923 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c1924 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1925 (resolution :clauses (.c1923 .c1924) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1926 (resolution :clauses (.c1922 .c1925) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1927 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1928 (resolution :clauses (.c1926 .c1927) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1929 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c1930 (resolution :clauses (.c1928 .c1929) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1931 (resolution :clauses (.c1919 .c1930) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1932 (resolution :clauses (.c1916 .c1931) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 c_0) c_1)) (= c_0 c_1) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1933 (resolution :clauses (.c1932 .c7 .c1739 .c31 .c164 .c165) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1934 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) c_2)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c1935 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0)))))
(set .c1936 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c1937 (resolution :clauses (.c1935 .c1936) :conclusion ((not (= (f3 c_2 c_1) c_1)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0)))))
(set .c1938 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c1939 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c1940 (eq_transitive :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c1941 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c1942 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1943 (resolution :clauses (.c1941 .c1942) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1944 (resolution :clauses (.c1940 .c1943) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1945 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1946 (resolution :clauses (.c1944 .c1945) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1947 (resolution :clauses (.c1939 .c1946) :conclusion ((not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1948 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1949 (resolution :clauses (.c1947 .c1948) :conclusion ((= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1950 (resolution :clauses (.c1938 .c1949) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1951 (resolution :clauses (.c1937 .c1950) :conclusion ((= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1952 (resolution :clauses (.c1934 .c1951) :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) c_2)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1953 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c1954 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1955 (resolution :clauses (.c1953 .c1954) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1956 (resolution :clauses (.c1952 .c1955) :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) c_2)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1957 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c1958 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_0) c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c1959 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c1960 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1961 (resolution :clauses (.c1959 .c1960) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1962 (resolution :clauses (.c1958 .c1961) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_0) c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1963 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c1964 (resolution :clauses (.c1962 .c1963) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_0) c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1965 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c1966 (resolution :clauses (.c1964 .c1965) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_0) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1967 (resolution :clauses (.c1957 .c1966) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_0) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c1968 (resolution :clauses (.c1956 .c1967) :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) c_2)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c1969 (resolution :clauses (.c1968 .c1739 .c32 .c34 .c164 .c168 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) c_2)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= c_1 c7)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c1970 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c1971 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_2)) (= (f3 c_2 c_2) (f3 c_2 (f1 c_2))))))
(set .c1972 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c1973 (resolution :clauses (.c1971 .c1972) :conclusion ((not (= (f1 c_2) c_2)) (= (f3 c_2 c_2) (f3 c_2 (f1 c_2))))))
(set .c1974 (resolution :clauses (.c1970 .c1973) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_2) c_2)))))
(set .c1975 (resolution :clauses (.c1974 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (not (= (f1 c_2) c_2)))))
(set .c1976 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 c5))) (not (= (f3 c_1 c5) c_2)) (= (f3 c_1 c_0) c_2))))
(set .c1977 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c_1 c5)))))
(set .c1978 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1979 (resolution :clauses (.c1977 .c1978) :conclusion ((not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c_1 c5)))))
(set .c1980 (resolution :clauses (.c1976 .c1979) :conclusion ((not (= (f3 c_1 c5) c_2)) (= (f3 c_1 c_0) c_2) (not (= c5 c_0)))))
(set .c1981 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 c_2))))
(set .c1982 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_2)) (= (f3 c_2 c_2) (f3 c_2 (f1 c_2))))))
(set .c1983 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c1984 (resolution :clauses (.c1982 .c1983) :conclusion ((not (= (f1 c_2) c_2)) (= (f3 c_2 c_2) (f3 c_2 (f1 c_2))))))
(set .c1985 (resolution :clauses (.c1981 .c1984) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 c_2) (not (= (f1 c_2) c_2)))))
(set .c1986 (resolution :clauses (.c1985 .c8 .c169) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_2) c_2)))))
(set .c1987 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c_1 c4))) (= c_2 (f3 c_1 c4)))))
(set .c1988 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_1)) (= (f3 c_1 c_1) (f3 c_1 c4)))))
(set .c1989 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1990 (resolution :clauses (.c1988 .c1989) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c_1) (f3 c_1 c4)))))
(set .c1991 (resolution :clauses (.c1987 .c1990) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= c_2 (f3 c_1 c4)) (not (= c4 c_1)))))
(set .c1992 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_1 c_0) c_2))))
(set .c1993 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c1994 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1995 (resolution :clauses (.c1993 .c1994) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c1996 (resolution :clauses (.c1992 .c1995) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_1 c_0) c_2) (not (= (f3 c_1 c_1) c_0)))))
(set .c1997 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c1998 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c1999 (resolution :clauses (.c1997 .c1998) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c2000 (resolution :clauses (.c1996 .c1999) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_1 c_0) c_2) (not (= (f3 c_1 c_1) c_0)))))
(set .c2001 (resolution :clauses (.c2000 .c1742) :conclusion ((not (= (f3 c_0 c_1) c_2)) (= (f3 c_1 c_0) c_2) (not (= (f3 c_1 c_1) c_0)))))
(set .c2002 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c5) (f3 c_1 (f3 c_1 c_1)))) (= c_0 (f3 c_1 c5)))))
(set .c2003 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 (f3 c_1 c_1))) (= (f3 c_1 c5) (f3 c_1 (f3 c_1 c_1))))))
(set .c2004 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (= c5 (f3 c_1 c_1)))))
(set .c2005 (resolution :clauses (.c2003 .c2004) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 c5) (f3 c_1 (f3 c_1 c_1))) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2006 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2007 (resolution :clauses (.c2005 .c2006) :conclusion ((= (f3 c_1 c5) (f3 c_1 (f3 c_1 c_1))) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2008 (resolution :clauses (.c2002 .c2007) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2009 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c2010 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2011 (resolution :clauses (.c2009 .c2010) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c2012 (resolution :clauses (.c2008 .c2011) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2013 (resolution :clauses (.c2012 .c1742) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2014 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 (f3 c_1 c_1)) (f1 c_1))) (not (= (f1 (f3 c_1 c_1)) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c2015 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c2016 (resolution :clauses (.c2014 .c2015) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 (f3 c_1 c_1)) (f1 c_1))) (not (= (f1 (f3 c_1 c_1)) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_1)))))
(set .c2017 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f1 (f3 c_1 c_1)) (f1 c_0)))))
(set .c2018 (resolution :clauses (.c2016 .c2017) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 (f3 c_1 c_1)) (f1 c_1))) (= (f2 c5) (f1 c_0)) (not (= c4 c_1)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2019 (resolution :clauses (.c2018 .c1741 .c165) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c4 c_1)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2020 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f2 c_1) c_1) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)))))
(set .c2021 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c4 c_1)) (= (f3 (f2 c_1) c_1) (f3 c_2 c4)))))
(set .c2022 (eq_transitive :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c2023 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c2024 (resolution :clauses (.c2022 .c2023) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c6 c_2)))))
(set .c2025 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2026 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2027 (resolution :clauses (.c2025 .c2026) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2028 (resolution :clauses (.c2024 .c2027) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2029 (resolution :clauses (.c2021 .c2028) :conclusion ((not (= c4 c_1)) (= (f3 (f2 c_1) c_1) (f3 c_2 c4)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c5 c_0)))))
(set .c2030 (resolution :clauses (.c2020 .c2029) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c5 c_0)))))
(set .c2031 (resolution :clauses (.c2030 .c164 .c32) :conclusion ((= c_1 (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c5 c_0)))))
(set .c2032 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)))))
(set .c2033 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c2034 (resolution :clauses (.c2032 .c2033) :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c6 c_2)))))
(set .c2035 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2036 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2037 (resolution :clauses (.c2035 .c2036) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2038 (resolution :clauses (.c2034 .c2037) :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2039 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f2 c4) (f2 c_1)))))
(set .c2040 (resolution :clauses (.c2038 .c2039) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2041 (resolution :clauses (.c2040 .c164) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f2 c4) (f1 c_2)) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2042 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c5) (f1 c_2)))))
(set .c2043 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c2044 (resolution :clauses (.c2042 .c2043) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= c6 c_2)))))
(set .c2045 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2046 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2047 (resolution :clauses (.c2045 .c2046) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2048 (resolution :clauses (.c2044 .c2047) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2049 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c2050 (resolution :clauses (.c2048 .c2049) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2051 (resolution :clauses (.c2050 .c165 .c164 .c1739) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f2 c5) (f1 c_2)) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2052 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_2) (f2 c_1)))))
(set .c2053 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c2054 (resolution :clauses (.c2052 .c2053) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_2) (f2 c_1)) (not (= c6 c_2)))))
(set .c2055 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2056 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2057 (resolution :clauses (.c2055 .c2056) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2058 (resolution :clauses (.c2054 .c2057) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_2) (f2 c_1)) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2059 (resolution :clauses (.c2058 .c164) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_2) (f2 c_1)) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2060 (resolution :clauses (.c2013 .c228 .c2001 .c753 .c294 .c2019 .c234 .c1991 .c716 .c1820 .c1969 .c297 .c272 .c213 .c2031 .c2041 .c2051 .c2059 .c1344 .c238 .c262 .c1933 .c1915 .c1476) :conclusion ((not (= c5 c_0)) (not (= c4 c_1)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= (f2 c5) (f1 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f1 c_1))) (= c_0 c7))))
(set .c2061 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c2062 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c2063 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2064 (resolution :clauses (.c2062 .c2063) :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c2065 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)))))
(set .c2066 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c2067 (resolution :clauses (.c2065 .c2066) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)))))
(set .c2068 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2069 (resolution :clauses (.c2067 .c2068) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2070 (resolution :clauses (.c2064 .c2069) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2071 (resolution :clauses (.c2061 .c2070) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2072 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0))))))
(set .c2073 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2074 (resolution :clauses (.c2072 .c2073) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2075 (resolution :clauses (.c2071 .c2074) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c2076 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c2077 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2078 (resolution :clauses (.c2076 .c2077) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2079 (resolution :clauses (.c2075 .c2078) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c2080 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c5 c_0)) (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 c5)))))
(set .c2081 (resolution :clauses (.c2079 .c2080) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))))))
(set .c2082 (resolution :clauses (.c2081 .c31 .c34 .c165) :conclusion ((not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= c_0 (f3 c_0 c5)) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))))))
(set .c2083 (resolution :clauses (.c2082 .c234 .c2013) :conclusion ((not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= c_0 (f3 c_0 c5)) (not (= (f1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))) (= (f3 c_1 c_1) c_1) (= c_0 (f3 c_1 c5)))))
(set .c2084 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_0 c5) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)))))
(set .c2085 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c2086 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2087 (resolution :clauses (.c2085 .c2086) :conclusion ((not (= (f2 c_0) (f3 c_0 c_1))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c2088 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)))))
(set .c2089 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c2090 (resolution :clauses (.c2088 .c2089) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)) (not (= c4 c_1)))))
(set .c2091 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2092 (resolution :clauses (.c2090 .c2091) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2093 (resolution :clauses (.c2087 .c2092) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2094 (resolution :clauses (.c2084 .c2093) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_0 c5) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2095 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c2096 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2097 (resolution :clauses (.c2095 .c2096) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2098 (resolution :clauses (.c2094 .c2097) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_0 c5) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c2099 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0))))))
(set .c2100 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2101 (resolution :clauses (.c2099 .c2100) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2102 (resolution :clauses (.c2098 .c2101) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_0 c5) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= c_1 c7)))))
(set .c2103 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c5 c_0)) (= (f3 c_0 c5) (f3 (f3 c_1 c_1) c_0)))))
(set .c2104 (resolution :clauses (.c2102 .c2103) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= c_1 c7)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2105 (resolution :clauses (.c2104 .c31 .c34 .c165) :conclusion ((not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= c_1 c7)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2106 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_0 c4) c_2))))
(set .c2107 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c4 c_1)) (= (f3 c_0 c4) (f3 c_0 c_1)))))
(set .c2108 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2109 (resolution :clauses (.c2107 .c2108) :conclusion ((not (= c4 c_1)) (= (f3 c_0 c4) (f3 c_0 c_1)))))
(set .c2110 (resolution :clauses (.c2106 .c2109) :conclusion ((not (= (f3 c_0 c_1) c_2)) (= (f3 c_0 c4) c_2) (not (= c4 c_1)))))
(set .c2111 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)))))
(set .c2112 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c5)))))
(set .c2113 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_2)) (= (f2 c_0) c_2))))
(set .c2114 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c2115 (resolution :clauses (.c2113 .c2114) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (= (f2 c_0) c_2) (not (= c4 c_1)))))
(set .c2116 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2117 (resolution :clauses (.c2115 .c2116) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (= (f2 c_0) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2118 (resolution :clauses (.c2112 .c2117) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= c4 c_1)))))
(set .c2119 (resolution :clauses (.c2111 .c2118) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= c4 c_1)))))
(set .c2120 (resolution :clauses (.c2119 .c31 .c165) :conclusion ((= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_2)) (not (= c4 c_1)))))
(set .c2121 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f2 c_1) c_1) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)))))
(set .c2122 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c4 c_1)) (= (f3 (f2 c_1) c_1) (f3 c_2 c4)))))
(set .c2123 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (= (f2 c_1) c_2))))
(set .c2124 (resolution :clauses (.c2122 .c2123) :conclusion ((not (= c4 c_1)) (= (f3 (f2 c_1) c_1) (f3 c_2 c4)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c2125 (resolution :clauses (.c2121 .c2124) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c2126 (resolution :clauses (.c2125 .c1739 .c32) :conclusion ((= c_1 (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f1 c_1) c_2)))))
(set .c2127 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c4) (f1 c_2)))))
(set .c2128 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f2 c4) (f2 c_1)))))
(set .c2129 (resolution :clauses (.c2127 .c2128) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c4) (f1 c_2)) (not (= c4 c_1)))))
(set .c2130 (resolution :clauses (.c2129 .c1739) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c4) (f1 c_2)) (not (= c4 c_1)))))
(set .c2131 (resolution :clauses (.c2105 .c234 .c1991 .c289 .c2110 .c228 .c2083 .c716 .c753 .c297 .c294 .c275 .c278 .c2120 .c2126 .c2130) :conclusion ((not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f1 c_2) c_2)))))
(set .c2132 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c5) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c5)))))
(set .c2133 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c2134 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2135 (resolution :clauses (.c2133 .c2134) :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c2136 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1))) (= (f2 c_0) (f3 c_1 c_1)))))
(set .c2137 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c2138 (resolution :clauses (.c2136 .c2137) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1))) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)))))
(set .c2139 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1)))))
(set .c2140 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2141 (resolution :clauses (.c2139 .c2140) :conclusion ((not (= (f1 c_1) c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1)))))
(set .c2142 (resolution :clauses (.c2138 .c2141) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)))))
(set .c2143 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2144 (resolution :clauses (.c2142 .c2143) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2145 (resolution :clauses (.c2135 .c2144) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2146 (resolution :clauses (.c2132 .c2145) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c5) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2147 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0))))))
(set .c2148 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2149 (resolution :clauses (.c2147 .c2148) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2150 (resolution :clauses (.c2146 .c2149) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c5) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c2151 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c5 (f3 c4 c5))) (= (f3 c_0 c5) (f3 c6 (f3 c4 c5))))))
(set .c2152 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c2153 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c2154 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c2155 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c2156 (resolution :clauses (.c2154 .c2155) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c2157 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2158 (resolution :clauses (.c2156 .c2157) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c2159 (resolution :clauses (.c2153 .c2158) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c2160 (resolution :clauses (.c2152 .c2159) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c2161 (resolution :clauses (.c2151 .c2160) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c2162 (resolution :clauses (.c2150 .c2161) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c2163 (resolution :clauses (.c2162 .c168 .c165 .c34 .c31) :conclusion ((not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c2164 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c2165 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)))))
(set .c2166 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c2167 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c2168 (resolution :clauses (.c2166 .c2167) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_1)))))
(set .c2169 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2170 (resolution :clauses (.c2168 .c2169) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2171 (resolution :clauses (.c2165 .c2170) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c2172 (resolution :clauses (.c2164 .c2171) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c2173 (resolution :clauses (.c2172 .c31 .c165) :conclusion ((= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c2174 (resolution :clauses (.c263 .c2163 .c2173 .c252 .c2131) :conclusion ((not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (= (f1 c_1) c_0) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)))))
(set .c2175 (eq_transitive :conclusion ((not (= c_1 (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_1 c_2))))
(set .c2176 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2177 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2178 (resolution :clauses (.c2176 .c2177) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2179 (resolution :clauses (.c2175 .c2178) :conclusion ((not (= c_1 (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_1 c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2180 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2181 (resolution :clauses (.c2179 .c2180) :conclusion ((not (= c_1 (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= c_1 c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2182 (resolution :clauses (.c2181 .c9 .c166) :conclusion ((not (= c_1 (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2183 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c2184 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0))))))
(set .c2185 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2186 (resolution :clauses (.c2184 .c2185) :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0))))))
(set .c2187 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)))))
(set .c2188 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0)))))
(set .c2189 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2190 (resolution :clauses (.c2188 .c2189) :conclusion ((not (= (f3 c_2 c_1) c_1)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0)))))
(set .c2191 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c2192 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c2193 (eq_transitive :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c2194 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2195 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2196 (resolution :clauses (.c2194 .c2195) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2197 (resolution :clauses (.c2193 .c2196) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2198 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2199 (resolution :clauses (.c2197 .c2198) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2200 (resolution :clauses (.c2192 .c2199) :conclusion ((not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2201 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2202 (resolution :clauses (.c2200 .c2201) :conclusion ((= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2203 (resolution :clauses (.c2191 .c2202) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2204 (resolution :clauses (.c2190 .c2203) :conclusion ((= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2205 (resolution :clauses (.c2187 .c2204) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2206 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0))))))
(set .c2207 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2208 (resolution :clauses (.c2206 .c2207) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2209 (resolution :clauses (.c2205 .c2208) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2210 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c2211 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2212 (resolution :clauses (.c2210 .c2211) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2213 (resolution :clauses (.c2209 .c2212) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c2214 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c2215 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2216 (resolution :clauses (.c2214 .c2215) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c2217 (resolution :clauses (.c2213 .c2216) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))))))
(set .c2218 (resolution :clauses (.c2186 .c2217) :conclusion ((= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))))))
(set .c2219 (resolution :clauses (.c2183 .c2218) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))))))
(set .c2220 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c5 c_0)) (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 c5)))))
(set .c2221 (resolution :clauses (.c2219 .c2220) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= c_0 (f3 c_0 c5)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))))))
(set .c2222 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c2223 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2224 (resolution :clauses (.c2222 .c2223) :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c2225 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)))))
(set .c2226 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0)))))
(set .c2227 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2228 (resolution :clauses (.c2226 .c2227) :conclusion ((not (= (f3 c_2 c_1) c_1)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0)))))
(set .c2229 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c2230 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c2231 (eq_transitive :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c2232 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2233 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2234 (resolution :clauses (.c2232 .c2233) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2235 (resolution :clauses (.c2231 .c2234) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2236 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2237 (resolution :clauses (.c2235 .c2236) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2238 (resolution :clauses (.c2230 .c2237) :conclusion ((not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2239 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2240 (resolution :clauses (.c2238 .c2239) :conclusion ((= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2241 (resolution :clauses (.c2229 .c2240) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2242 (resolution :clauses (.c2228 .c2241) :conclusion ((= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2243 (resolution :clauses (.c2225 .c2242) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2244 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0))))))
(set .c2245 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2246 (resolution :clauses (.c2244 .c2245) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2247 (resolution :clauses (.c2243 .c2246) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2248 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c2249 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2250 (resolution :clauses (.c2248 .c2249) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2251 (resolution :clauses (.c2247 .c2250) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c2252 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c2253 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2254 (resolution :clauses (.c2252 .c2253) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c2255 (resolution :clauses (.c2251 .c2254) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))))))
(set .c2256 (resolution :clauses (.c2224 .c2255) :conclusion ((= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))))))
(set .c2257 (resolution :clauses (.c2221 .c2256) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= c_0 (f3 c_0 c5)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))))))
(set .c2258 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 (f3 c_0 c_0))))))
(set .c2259 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2260 (resolution :clauses (.c2258 .c2259) :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 (f3 c_0 c_0))))))
(set .c2261 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)))))
(set .c2262 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0)))))
(set .c2263 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2264 (resolution :clauses (.c2262 .c2263) :conclusion ((not (= (f3 c_2 c_1) c_1)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0)))))
(set .c2265 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c2266 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c2267 (eq_transitive :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c2268 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2269 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2270 (resolution :clauses (.c2268 .c2269) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2271 (resolution :clauses (.c2267 .c2270) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2272 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2273 (resolution :clauses (.c2271 .c2272) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2274 (resolution :clauses (.c2266 .c2273) :conclusion ((not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2275 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2276 (resolution :clauses (.c2274 .c2275) :conclusion ((= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2277 (resolution :clauses (.c2265 .c2276) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2278 (resolution :clauses (.c2264 .c2277) :conclusion ((= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2279 (resolution :clauses (.c2261 .c2278) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2280 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0))))))
(set .c2281 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2282 (resolution :clauses (.c2280 .c2281) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2283 (resolution :clauses (.c2279 .c2282) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2284 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c2285 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2286 (resolution :clauses (.c2284 .c2285) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2287 (resolution :clauses (.c2283 .c2286) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c2288 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c2289 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2290 (resolution :clauses (.c2288 .c2289) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c2291 (resolution :clauses (.c2287 .c2290) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))))))
(set .c2292 (resolution :clauses (.c2260 .c2291) :conclusion ((= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 (f3 c_0 c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))))))
(set .c2293 (resolution :clauses (.c2257 .c2292) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= c_0 (f3 c_0 c5)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))))))
(set .c2294 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c2295 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2296 (resolution :clauses (.c2294 .c2295) :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c2297 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)))))
(set .c2298 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2299 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2300 (resolution :clauses (.c2298 .c2299) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2301 (resolution :clauses (.c2297 .c2300) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2302 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2303 (resolution :clauses (.c2301 .c2302) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2304 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c2305 (resolution :clauses (.c2303 .c2304) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2306 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2307 (resolution :clauses (.c2305 .c2306) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2308 (resolution :clauses (.c2296 .c2307) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2309 (resolution :clauses (.c2293 .c2308) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= c_0 (f3 c_0 c5)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c_1 c_1) c_2)))))
(set .c2310 (resolution :clauses (.c2309 .c1739 .c31 .c32 .c34 .c165 .c166) :conclusion ((not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= c_0 (f3 c_0 c5)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))) (not (= (f3 c_1 c_1) c_2)))))
(set .c2311 (resolution :clauses (.c2310 .c234 .c2013) :conclusion ((not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= c_0 (f3 c_0 c5)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))) (= (f3 c_1 c_1) c_1) (= c_0 (f3 c_1 c5)))))
(set .c2312 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c2313 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c2314 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2315 (resolution :clauses (.c2313 .c2314) :conclusion ((not (= (f2 c_0) (f3 c_0 c_1))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c2316 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)))))
(set .c2317 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2318 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2319 (resolution :clauses (.c2317 .c2318) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2320 (resolution :clauses (.c2316 .c2319) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2321 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2322 (resolution :clauses (.c2320 .c2321) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2323 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c2324 (resolution :clauses (.c2322 .c2323) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2325 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2326 (resolution :clauses (.c2324 .c2325) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2327 (resolution :clauses (.c2315 .c2326) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2328 (resolution :clauses (.c2312 .c2327) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2329 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c2330 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2331 (resolution :clauses (.c2329 .c2330) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2332 (resolution :clauses (.c2328 .c2331) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c2333 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0))))))
(set .c2334 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2335 (resolution :clauses (.c2333 .c2334) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2336 (resolution :clauses (.c2332 .c2335) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c2337 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= c5 c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5)))))
(set .c2338 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c2339 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c2340 (eq_transitive :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c2341 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2342 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2343 (resolution :clauses (.c2341 .c2342) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2344 (resolution :clauses (.c2340 .c2343) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2345 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2346 (resolution :clauses (.c2344 .c2345) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2347 (resolution :clauses (.c2339 .c2346) :conclusion ((not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2348 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2349 (resolution :clauses (.c2347 .c2348) :conclusion ((= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2350 (resolution :clauses (.c2338 .c2349) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2351 (resolution :clauses (.c2337 .c2350) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c7 c_2)))))
(set .c2352 (resolution :clauses (.c2336 .c2351) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c_1 (f3 (f2 c_1) c_1))))))
(set .c2353 (resolution :clauses (.c2352 .c1739 .c31 .c32 .c34 .c165 .c166) :conclusion ((not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (= c_0 (f3 c_1 c5)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c2354 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)))))
(set .c2355 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c5)))))
(set .c2356 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c2357 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2358 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2359 (resolution :clauses (.c2357 .c2358) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2360 (resolution :clauses (.c2356 .c2359) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2361 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2362 (resolution :clauses (.c2360 .c2361) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2363 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c2364 (resolution :clauses (.c2362 .c2363) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2365 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2366 (resolution :clauses (.c2364 .c2365) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2367 (resolution :clauses (.c2355 .c2366) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c7 c_2)))))
(set .c2368 (resolution :clauses (.c2354 .c2367) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c7 c_2)))))
(set .c2369 (resolution :clauses (.c2368 .c165 .c166 .c1739 .c31) :conclusion ((= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c7 c_2)))))
(set .c2370 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f2 c_1) c_1) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)))))
(set .c2371 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c4 c_1)) (= (f3 (f2 c_1) c_1) (f3 c_2 c4)))))
(set .c2372 (eq_transitive :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c2373 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2374 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2375 (resolution :clauses (.c2373 .c2374) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2376 (resolution :clauses (.c2372 .c2375) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2377 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2378 (resolution :clauses (.c2376 .c2377) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2379 (resolution :clauses (.c2371 .c2378) :conclusion ((not (= c4 c_1)) (= (f3 (f2 c_1) c_1) (f3 c_2 c4)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2380 (resolution :clauses (.c2370 .c2379) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2381 (resolution :clauses (.c2380 .c32 .c166) :conclusion ((= c_1 (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2382 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_2) (f2 c_1)))))
(set .c2383 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2384 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2385 (resolution :clauses (.c2383 .c2384) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2386 (resolution :clauses (.c2382 .c2385) :conclusion ((not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_2) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2387 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2388 (resolution :clauses (.c2386 .c2387) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_2) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2389 (resolution :clauses (.c2388 .c166) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_2) (f2 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2390 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c5) (f1 c_2)))))
(set .c2391 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2392 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2393 (resolution :clauses (.c2391 .c2392) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2394 (resolution :clauses (.c2390 .c2393) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c5) (f1 c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2395 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2396 (resolution :clauses (.c2394 .c2395) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2397 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c2398 (resolution :clauses (.c2396 .c2397) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2399 (resolution :clauses (.c2398 .c166 .c1739 .c165) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f2 c5) (f1 c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2400 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)))))
(set .c2401 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2402 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2403 (resolution :clauses (.c2401 .c2402) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2404 (resolution :clauses (.c2400 .c2403) :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2405 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2406 (resolution :clauses (.c2404 .c2405) :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2407 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f2 c4) (f2 c_1)))))
(set .c2408 (resolution :clauses (.c2406 .c2407) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2409 (resolution :clauses (.c2408 .c166) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f2 c4) (f1 c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2410 (resolution :clauses (.c2353 .c228 .c2311 .c716 .c753 .c272 .c297 .c213 .c294 .c275 .c2369 .c2381 .c2389 .c2399 .c2409) :conclusion ((not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_1))) (not (= (f2 c_0) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c2411 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)))))
(set .c2412 (eq_congruent :conclusion ((not (= c6 (f2 c_1))) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c2413 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c2414 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c2415 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c2416 (resolution :clauses (.c2414 .c2415) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c2417 (resolution :clauses (.c2413 .c2416) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c2418 (resolution :clauses (.c2412 .c2417) :conclusion ((not (= c6 (f2 c_1))) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c2419 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c6 (f2 c_1)))))
(set .c2420 (resolution :clauses (.c2418 .c2419) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= (f1 c_1) (f2 c_1))))))
(set .c2421 (resolution :clauses (.c2411 .c2420) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= (f1 c_1) (f2 c_1))))))
(set .c2422 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)))))
(set .c2423 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c2424 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c2425 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c2426 (resolution :clauses (.c2424 .c2425) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c2427 (resolution :clauses (.c2423 .c2426) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c4 (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c2428 (resolution :clauses (.c2422 .c2427) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c2429 (resolution :clauses (.c2421 .c2428) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_1 (f3 c_1 c4)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= (f1 c_1) (f2 c_1))) (not (= c_1 c7)))))
(set .c2430 (resolution :clauses (.c2429 .c168 .c1739 .c34 .c32) :conclusion ((= c_1 (f3 c_1 c4)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c_1 c7)))))
(set .c2431 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_0 c4) c_1))))
(set .c2432 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c4 c_1)) (= (f3 c_0 c4) (f3 (f2 c_1) c_1)))))
(set .c2433 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c2434 (resolution :clauses (.c2432 .c2433) :conclusion ((not (= c4 c_1)) (= (f3 c_0 c4) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c2435 (resolution :clauses (.c2431 .c2434) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_0 c4) c_1) (not (= c4 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c2436 (resolution :clauses (.c2435 .c1739 .c32) :conclusion ((= (f3 c_0 c4) c_1) (not (= c4 c_1)) (not (= (f1 c_1) c_0)))))
(set .c2437 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c_0) (f1 c_0)))))
(set .c2438 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c2439 (resolution :clauses (.c2437 .c2438) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c6)))))
(set .c2440 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2441 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2442 (resolution :clauses (.c2440 .c2441) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2443 (resolution :clauses (.c2439 .c2442) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2444 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c2445 (resolution :clauses (.c2443 .c2444) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2446 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2447 (resolution :clauses (.c2445 .c2446) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2448 (resolution :clauses (.c2447 .c165 .c164 .c1739) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2449 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_0) (f2 c_1)))))
(set .c2450 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c2451 (resolution :clauses (.c2449 .c2450) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c_0 c6)))))
(set .c2452 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2453 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2454 (resolution :clauses (.c2452 .c2453) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2455 (resolution :clauses (.c2451 .c2454) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2456 (resolution :clauses (.c2455 .c164) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2457 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c4) (f1 c_0)))))
(set .c2458 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c2459 (resolution :clauses (.c2457 .c2458) :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_0)) (not (= c_0 c6)))))
(set .c2460 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2461 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2462 (resolution :clauses (.c2460 .c2461) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2463 (resolution :clauses (.c2459 .c2462) :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2464 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f2 c4) (f2 c_1)))))
(set .c2465 (resolution :clauses (.c2463 .c2464) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2466 (resolution :clauses (.c2465 .c164) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f2 c4) (f1 c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2467 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c2468 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c2469 (resolution :clauses (.c2467 .c2468) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c_0 c6)))))
(set .c2470 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2471 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2472 (resolution :clauses (.c2470 .c2471) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2473 (resolution :clauses (.c2469 .c2472) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2474 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c2475 (resolution :clauses (.c2473 .c2474) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2476 (resolution :clauses (.c2475 .c165 .c164 .c1739) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (= (f2 c5) (f1 c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2477 (resolution :clauses (.c282 .c2430 .c2436 .c2174 .c262 .c2410 .c189 .c171 .c177 .c2448 .c2456 .c2466 .c2476) :conclusion ((not (= (f2 c5) (f1 c_1))) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_2) c_2)) (= c_0 c7) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 c_0) (f1 c_1))))))
(set .c2478 (eq_transitive :conclusion ((not (= c_0 (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_0 c_2))))
(set .c2479 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2480 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2481 (resolution :clauses (.c2479 .c2480) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2482 (resolution :clauses (.c2478 .c2481) :conclusion ((not (= c_0 (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_0 c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2483 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2484 (resolution :clauses (.c2482 .c2483) :conclusion ((not (= c_0 (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= c_0 c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2485 (resolution :clauses (.c2484 .c8 .c166) :conclusion ((not (= c_0 (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2486 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_0) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c2487 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c2488 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2489 (resolution :clauses (.c2487 .c2488) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c2490 (resolution :clauses (.c2486 .c2489) :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_0) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)))))
(set .c2491 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c2492 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c2493 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c2494 (eq_transitive :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c2495 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2496 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2497 (resolution :clauses (.c2495 .c2496) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2498 (resolution :clauses (.c2494 .c2497) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2499 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2500 (resolution :clauses (.c2498 .c2499) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2501 (resolution :clauses (.c2493 .c2500) :conclusion ((not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2502 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2503 (resolution :clauses (.c2501 .c2502) :conclusion ((= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2504 (resolution :clauses (.c2492 .c2503) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2505 (resolution :clauses (.c2491 .c2504) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 (f3 c_1 c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2506 (resolution :clauses (.c2490 .c2505) :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_0) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2507 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0))))))
(set .c2508 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2509 (resolution :clauses (.c2507 .c2508) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2510 (resolution :clauses (.c2506 .c2509) :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_0) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2511 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c2512 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2513 (resolution :clauses (.c2511 .c2512) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2514 (resolution :clauses (.c2510 .c2513) :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_0) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2515 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_0) (f3 c_0 (f3 c_1 c_1))))))
(set .c2516 (resolution :clauses (.c2514 .c2515) :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2517 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c2518 (eq_transitive :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c2519 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2520 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2521 (resolution :clauses (.c2519 .c2520) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2522 (resolution :clauses (.c2518 .c2521) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2523 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2524 (resolution :clauses (.c2522 .c2523) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2525 (resolution :clauses (.c2517 .c2524) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2526 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2527 (resolution :clauses (.c2525 .c2526) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2528 (resolution :clauses (.c2516 .c2527) :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2529 (resolution :clauses (.c2528 .c32 .c34 .c166 .c1742 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2530 (resolution :clauses (.c2529 .c234 .c1991 .c289 .c2110) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_1) c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c2531 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c2532 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c2533 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2534 (resolution :clauses (.c2532 .c2533) :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c2535 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)))))
(set .c2536 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2537 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2538 (resolution :clauses (.c2536 .c2537) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2539 (resolution :clauses (.c2535 .c2538) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2540 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2541 (resolution :clauses (.c2539 .c2540) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2542 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c2543 (resolution :clauses (.c2541 .c2542) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2544 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2545 (resolution :clauses (.c2543 .c2544) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2546 (resolution :clauses (.c2534 .c2545) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2547 (resolution :clauses (.c2531 .c2546) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2548 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c2549 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2550 (resolution :clauses (.c2548 .c2549) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2551 (resolution :clauses (.c2547 .c2550) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2552 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0))))))
(set .c2553 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2554 (resolution :clauses (.c2552 .c2553) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2555 (resolution :clauses (.c2551 .c2554) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2556 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= c5 c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5)))))
(set .c2557 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c2558 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c2559 (eq_transitive :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c2560 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2561 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2562 (resolution :clauses (.c2560 .c2561) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2563 (resolution :clauses (.c2559 .c2562) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2564 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2565 (resolution :clauses (.c2563 .c2564) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2566 (resolution :clauses (.c2558 .c2565) :conclusion ((not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2567 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2568 (resolution :clauses (.c2566 .c2567) :conclusion ((= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2569 (resolution :clauses (.c2557 .c2568) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2570 (resolution :clauses (.c2556 .c2569) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c7 c_2)))))
(set .c2571 (resolution :clauses (.c2555 .c2570) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))))))
(set .c2572 (resolution :clauses (.c2571 .c1739 .c31 .c32 .c34 .c165 .c166) :conclusion ((not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (= c_0 (f3 c_1 c5)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2573 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c2574 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c2575 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2576 (resolution :clauses (.c2574 .c2575) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c2577 (resolution :clauses (.c2573 .c2576) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)))))
(set .c2578 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c2579 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c2580 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c2581 (eq_transitive :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c2582 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2583 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2584 (resolution :clauses (.c2582 .c2583) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2585 (resolution :clauses (.c2581 .c2584) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2586 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2587 (resolution :clauses (.c2585 .c2586) :conclusion ((not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2588 (resolution :clauses (.c2580 .c2587) :conclusion ((not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2589 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2590 (resolution :clauses (.c2588 .c2589) :conclusion ((= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2591 (resolution :clauses (.c2579 .c2590) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2592 (resolution :clauses (.c2578 .c2591) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 (f3 c_1 c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2593 (resolution :clauses (.c2577 .c2592) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2594 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0))))))
(set .c2595 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2596 (resolution :clauses (.c2594 .c2595) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2597 (resolution :clauses (.c2593 .c2596) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2598 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c2599 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c4 c5) (f3 c_1 (f3 c_1 c_1)))) (= (f1 c_1) (f3 c4 c5)))))
(set .c2600 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))))))
(set .c2601 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c2602 (resolution :clauses (.c2600 .c2601) :conclusion ((= (f2 (f3 c_1 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2603 (resolution :clauses (.c2599 .c2602) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c4 c5) (f3 c_1 (f3 c_1 c_1)))) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2604 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2605 (resolution :clauses (.c2603 .c2604) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c4 c5) (f3 c_1 (f3 c_1 c_1)))) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c2606 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c2607 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2608 (resolution :clauses (.c2606 .c2607) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c2609 (resolution :clauses (.c2605 .c2608) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c4 c5) (f3 c_1 (f3 c_1 c_1)))) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2610 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f3 c_1 c_1))) (= (f3 c4 c5) (f3 c_1 (f3 c_1 c_1))))))
(set .c2611 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (= c5 (f3 c_1 c_1)))))
(set .c2612 (resolution :clauses (.c2610 .c2611) :conclusion ((not (= c4 c_1)) (= (f3 c4 c5) (f3 c_1 (f3 c_1 c_1))) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2613 (resolution :clauses (.c2609 .c2612) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2614 (resolution :clauses (.c2598 .c2613) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2615 (resolution :clauses (.c2597 .c2614) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c2616 (resolution :clauses (.c2615 .c1739 .c32 .c34 .c166 .c168 .c1742 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c2617 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c2618 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f2 c4) (f2 c_1)))))
(set .c2619 (resolution :clauses (.c2617 .c2618) :conclusion ((not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_1)))))
(set .c2620 (resolution :clauses (.c2619 .c1739) :conclusion ((= (f2 c4) (f1 c_1)) (not (= c4 c_1)))))
(set .c2621 (resolution :clauses (.c2616 .c228 .c753 .c294 .c2013 .c2019 .c234 .c2572 .c716 .c213 .c297 .c272 .c2409 .c2399 .c2389 .c2381 .c2369 .c262 .c1380 .c256 .c2477 .c2060 .c2620 .c195 .c17 .c343 .c476 .c1739) :conclusion ((not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (= c_0 c7))))
(set .c2622 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c5) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c5)))))
(set .c2623 (eq_congruent :conclusion ((not (= (f2 c_0) c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)))))
(set .c2624 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c2625 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c2626 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c2627 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c2628 (resolution :clauses (.c2626 .c2627) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c2629 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2630 (resolution :clauses (.c2628 .c2629) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c2631 (resolution :clauses (.c2625 .c2630) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c2632 (resolution :clauses (.c2624 .c2631) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c2633 (resolution :clauses (.c2623 .c2632) :conclusion ((not (= (f2 c_0) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c2634 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7))))
(set .c2635 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c2636 (resolution :clauses (.c2634 .c2635) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7) (not (= c4 c_2)))))
(set .c2637 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2638 (resolution :clauses (.c2636 .c2637) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c2639 (resolution :clauses (.c2633 .c2638) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c7 c_2)))))
(set .c2640 (resolution :clauses (.c2622 .c2639) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c5) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c7 c_2)))))
(set .c2641 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c5 (f3 c4 c5))) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))))))
(set .c2642 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c2643 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c2644 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c2645 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c2646 (resolution :clauses (.c2644 .c2645) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c2647 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2648 (resolution :clauses (.c2646 .c2647) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c2649 (resolution :clauses (.c2643 .c2648) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c2650 (resolution :clauses (.c2642 .c2649) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c2651 (resolution :clauses (.c2641 .c2650) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c2652 (resolution :clauses (.c2640 .c2651) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2653 (resolution :clauses (.c2652 .c31 .c165 .c34) :conclusion ((= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2654 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)))))
(set .c2655 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c5)))))
(set .c2656 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c2657 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c2658 (resolution :clauses (.c2656 .c2657) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c4 c_2)))))
(set .c2659 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2660 (resolution :clauses (.c2658 .c2659) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c2661 (resolution :clauses (.c2655 .c2660) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c4 c_2)))))
(set .c2662 (resolution :clauses (.c2654 .c2661) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c4 c_2)))))
(set .c2663 (resolution :clauses (.c2662 .c31 .c165) :conclusion ((= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f1 c_2) c_2)) (not (= c4 c_2)))))
(set .c2664 (eq_transitive :conclusion ((not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)))))
(set .c2665 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2666 (resolution :clauses (.c2664 .c2665) :conclusion ((not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c7 c_2)))))
(set .c2667 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c2668 (resolution :clauses (.c2666 .c2667) :conclusion ((not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2669 (eq_congruent :conclusion ((not (= c4 (f1 c_2))) (= (f2 c4) (f2 (f1 c_2))))))
(set .c2670 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (= c4 (f1 c_2)))))
(set .c2671 (resolution :clauses (.c2669 .c2670) :conclusion ((= (f2 c4) (f2 (f1 c_2))) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c2672 (resolution :clauses (.c2668 .c2671) :conclusion ((not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c7 c_2)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c2673 (resolution :clauses (.c2672 .c91 .c164 .c166) :conclusion ((= (f2 c4) (f1 c_1)) (not (= c7 c_2)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c2674 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c5) (f1 c_2)))))
(set .c2675 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c2676 (resolution :clauses (.c2674 .c2675) :conclusion ((not (= (f2 c5) (f1 c4))) (= (f2 c5) (f1 c_2)) (not (= c4 c_2)))))
(set .c2677 (resolution :clauses (.c2676 .c165) :conclusion ((= (f2 c5) (f1 c_2)) (not (= c4 c_2)))))
(set .c2678 (resolution :clauses (.c272 .c2653 .c2663 .c2673 .c2677) :conclusion ((not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2679 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 c_1))))
(set .c2680 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c_1 c_1))) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c2681 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f3 c_2 c_0) (f3 c_1 c_1)))))
(set .c2682 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c2683 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2684 (resolution :clauses (.c2682 .c2683) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c2685 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c2686 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2687 (resolution :clauses (.c2685 .c2686) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)))))
(set .c2688 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c2689 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c2690 (resolution :clauses (.c2688 .c2689) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2691 (resolution :clauses (.c2687 .c2690) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2692 (resolution :clauses (.c2684 .c2691) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2693 (resolution :clauses (.c2681 .c2692) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f3 c_2 c_0) (f3 c_1 c_1)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2694 (resolution :clauses (.c2680 .c2693) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2695 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2696 (resolution :clauses (.c2694 .c2695) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2697 (resolution :clauses (.c2679 .c2696) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 c_1) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2698 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))))))
(set .c2699 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2700 (resolution :clauses (.c2698 .c2699) :conclusion ((not (= (f3 c_1 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))))))
(set .c2701 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f3 c_1 c_0) (f1 c_1)))))
(set .c2702 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2703 (resolution :clauses (.c2701 .c2702) :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f3 c_1 c_0) (f1 c_1)) (not (= c7 c_2)))))
(set .c2704 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c2705 (resolution :clauses (.c2703 .c2704) :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_1 c_0) (f1 c_1)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2706 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c2707 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2708 (resolution :clauses (.c2706 .c2707) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c2709 (resolution :clauses (.c2705 .c2708) :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_1 c_0) (f1 c_1)) (not (= c7 c_2)) (not (= c6 c_1)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2710 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c2711 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2712 (resolution :clauses (.c2710 .c2711) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c2713 (resolution :clauses (.c2709 .c2712) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_1 c_0) (f1 c_1)) (not (= c7 c_2)) (not (= c6 c_1)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2714 (resolution :clauses (.c2700 .c2713) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c6 c_1)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2715 (resolution :clauses (.c2697 .c2714) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 c_1) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_1)))))
(set .c2716 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))))))
(set .c2717 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c2718 (resolution :clauses (.c2716 .c2717) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2719 (resolution :clauses (.c2715 .c2718) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 c_1) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_1)))))
(set .c2720 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c2721 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c2722 (resolution :clauses (.c2720 .c2721) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2723 (resolution :clauses (.c2719 .c2722) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 c_1) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_1)))))
(set .c2724 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_1 c_0))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0)))))
(set .c2725 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2726 (resolution :clauses (.c2724 .c2725) :conclusion ((not (= (f2 c_0) (f3 c_1 c_0))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0)))))
(set .c2727 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (= (f2 c_0) (f3 c_1 c_0)))))
(set .c2728 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2729 (resolution :clauses (.c2727 .c2728) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (= (f2 c_0) (f3 c_1 c_0)) (not (= c7 c_2)))))
(set .c2730 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c2731 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2732 (resolution :clauses (.c2730 .c2731) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c2733 (resolution :clauses (.c2729 .c2732) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (= (f2 c_0) (f3 c_1 c_0)) (not (= c7 c_2)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2734 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c2735 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2736 (resolution :clauses (.c2734 .c2735) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c2737 (resolution :clauses (.c2733 .c2736) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= (f2 c_0) (f3 c_1 c_0)) (not (= c7 c_2)) (not (= (f3 c_1 c_1) c_0)))))
(set .c2738 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c2739 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c2740 (resolution :clauses (.c2738 .c2739) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2741 (resolution :clauses (.c2737 .c2740) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= (f2 c_0) (f3 c_1 c_0)) (not (= c7 c_2)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2742 (resolution :clauses (.c2726 .c2741) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= c7 c_2)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2743 (resolution :clauses (.c2723 .c2742) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 c_1) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_1)))))
(set .c2744 (resolution :clauses (.c2743 .c7 .c31 .c34 .c164 .c166 .c168 .c1742) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_1)))))
(set .c2745 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 c_1))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_0 c5) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)))))
(set .c2746 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c5 c_0)) (= (f3 c_0 c5) (f3 (f3 c_1 c_1) c_0)))))
(set .c2747 (resolution :clauses (.c2745 .c2746) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 c_1))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)))))
(set .c2748 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_0) c_1)) (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 c_1)))))
(set .c2749 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (= (f3 c_1 c_0) c_1))))
(set .c2750 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c2751 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2752 (resolution :clauses (.c2750 .c2751) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c2753 (resolution :clauses (.c2749 .c2752) :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= c_1 (f3 c_0 c_1))) (= (f3 c_1 c_0) c_1) (not (= (f3 c_1 c_1) c_0)))))
(set .c2754 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c2755 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2756 (resolution :clauses (.c2754 .c2755) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c2757 (resolution :clauses (.c2753 .c2756) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= c_1 (f3 c_0 c_1))) (= (f3 c_1 c_0) c_1) (not (= (f3 c_1 c_1) c_0)))))
(set .c2758 (resolution :clauses (.c2748 .c2757) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 c_1)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 c_1) c_0)))))
(set .c2759 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2760 (resolution :clauses (.c2758 .c2759) :conclusion ((= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 c_1)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 c_1) c_0)))))
(set .c2761 (resolution :clauses (.c2747 .c2760) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= c_1 (f3 c_0 c_1))))))
(set .c2762 (resolution :clauses (.c2761 .c1742) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= c_1 (f3 c_0 c_1))))))
(set .c2763 (resolution :clauses (.c2762 .c228 .c2744) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (= c_0 (f3 c_0 c_1)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c2764 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 c_1 c_1) c_0))))
(set .c2765 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c2766 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2767 (resolution :clauses (.c2765 .c2766) :conclusion ((not (= c_1 (f3 c_0 c_1))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c2768 (resolution :clauses (.c2764 .c2767) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 c_1 c_1) c_0) (not (= c_1 (f3 c_0 c_1))))))
(set .c2769 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c2770 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2771 (resolution :clauses (.c2769 .c2770) :conclusion ((not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c2772 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)))))
(set .c2773 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2774 (resolution :clauses (.c2772 .c2773) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c7 c_2)))))
(set .c2775 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c2776 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c2777 (resolution :clauses (.c2775 .c2776) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2778 (resolution :clauses (.c2774 .c2777) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2779 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2780 (resolution :clauses (.c2778 .c2779) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2781 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c2782 (resolution :clauses (.c2780 .c2781) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2783 (resolution :clauses (.c2771 .c2782) :conclusion ((= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2784 (resolution :clauses (.c2768 .c2783) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 c_1 c_1) c_0) (not (= c_1 (f3 c_0 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2785 (resolution :clauses (.c2784 .c165 .c166 .c167) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (= (f3 c_1 c_1) c_0) (not (= c_1 (f3 c_0 c_1))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2786 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 c_1))))
(set .c2787 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c2788 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c2789 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2790 (resolution :clauses (.c2788 .c2789) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)) (not (= c7 c_2)))))
(set .c2791 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c2792 (resolution :clauses (.c2790 .c2791) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2793 (resolution :clauses (.c2787 .c2792) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2794 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2795 (resolution :clauses (.c2793 .c2794) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2796 (resolution :clauses (.c2786 .c2795) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 c_1) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2797 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c2798 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2799 (resolution :clauses (.c2797 .c2798) :conclusion ((not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c2800 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)))))
(set .c2801 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2802 (resolution :clauses (.c2800 .c2801) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c7 c_2)))))
(set .c2803 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c2804 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c2805 (resolution :clauses (.c2803 .c2804) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2806 (resolution :clauses (.c2802 .c2805) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2807 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2808 (resolution :clauses (.c2806 .c2807) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2809 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c2810 (resolution :clauses (.c2808 .c2809) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2811 (resolution :clauses (.c2799 .c2810) :conclusion ((= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2812 (resolution :clauses (.c2796 .c2811) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 c_1) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (not (= c6 c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2813 (resolution :clauses (.c2812 .c7 .c1739 .c32 .c164 .c165 .c166 .c167) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (not (= c6 c_1)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2814 (resolution :clauses (.c2813 .c228 .c2785 .c234 .c2763) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= c4 c_0)) (not (= c5 c_0)) (= c_0 (f3 c_0 c_1)) (= (f3 c_1 c_1) c_1) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))))))
(set .c2815 (eq_transitive :conclusion ((not (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 c_1))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_1) c_0))))
(set .c2816 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_0) c_1)) (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 c_1)))))
(set .c2817 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 c4))) (not (= c_1 (f3 c_1 c4))) (= (f3 c_1 c_0) c_1))))
(set .c2818 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_0)) (= (f3 c_1 c_0) (f3 c_1 c4)))))
(set .c2819 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2820 (resolution :clauses (.c2818 .c2819) :conclusion ((not (= c4 c_0)) (= (f3 c_1 c_0) (f3 c_1 c4)))))
(set .c2821 (resolution :clauses (.c2817 .c2820) :conclusion ((not (= c_1 (f3 c_1 c4))) (= (f3 c_1 c_0) c_1) (not (= c4 c_0)))))
(set .c2822 (resolution :clauses (.c2816 .c2821) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 c_1)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)))))
(set .c2823 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2824 (resolution :clauses (.c2822 .c2823) :conclusion ((= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 c_1)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)))))
(set .c2825 (resolution :clauses (.c2815 .c2824) :conclusion ((not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_1) c_0) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)))))
(set .c2826 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c2827 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2828 (resolution :clauses (.c2826 .c2827) :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c2829 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)))))
(set .c2830 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2831 (resolution :clauses (.c2829 .c2830) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c7 c_2)))))
(set .c2832 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c2833 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c2834 (resolution :clauses (.c2832 .c2833) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2835 (resolution :clauses (.c2831 .c2834) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2836 (resolution :clauses (.c2828 .c2835) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2837 (resolution :clauses (.c2825 .c2836) :conclusion ((not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_1) c_0) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c5 c_0)))))
(set .c2838 (resolution :clauses (.c2837 .c31 .c166) :conclusion ((not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (= (f3 c_1 c_1) c_0) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c5 c_0)))))
(set .c2839 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f1 c_2) c_1)) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c2840 (resolution :clauses (.c2839 .c224) :conclusion ((not (= c6 c_1)) (not (= (f1 c_2) c_1)) (not (= (f1 c_2) c_2)) (not (= c7 c_2)))))
(set .c2841 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 c_1))))
(set .c2842 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c2843 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2844 (resolution :clauses (.c2842 .c2843) :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c2845 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)))))
(set .c2846 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2847 (resolution :clauses (.c2845 .c2846) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c7 c_2)))))
(set .c2848 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c2849 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c2850 (resolution :clauses (.c2848 .c2849) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2851 (resolution :clauses (.c2847 .c2850) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2852 (resolution :clauses (.c2844 .c2851) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2853 (resolution :clauses (.c2841 .c2852) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 c_1) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2854 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))))))
(set .c2855 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2856 (resolution :clauses (.c2854 .c2855) :conclusion ((not (= (f3 c_1 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))))))
(set .c2857 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 c4))) (not (= c_2 (f3 c_1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f3 c_1 c_0) (f1 c_1)))))
(set .c2858 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2859 (resolution :clauses (.c2857 .c2858) :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 c4))) (not (= c_2 (f3 c_1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f3 c_1 c_0) (f1 c_1)) (not (= c7 c_2)))))
(set .c2860 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c2861 (resolution :clauses (.c2859 .c2860) :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 c4))) (not (= c_2 (f3 c_1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_1 c_0) (f1 c_1)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2862 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_0)) (= (f3 c_1 c_0) (f3 c_1 c4)))))
(set .c2863 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2864 (resolution :clauses (.c2862 .c2863) :conclusion ((not (= c4 c_0)) (= (f3 c_1 c_0) (f3 c_1 c4)))))
(set .c2865 (resolution :clauses (.c2861 .c2864) :conclusion ((not (= c_2 (f3 c_1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_1 c_0) (f1 c_1)) (not (= c7 c_2)) (not (= c6 c_1)) (not (= c4 c_0)))))
(set .c2866 (resolution :clauses (.c2856 .c2865) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))) (not (= c_2 (f3 c_1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c6 c_1)) (not (= c4 c_0)))))
(set .c2867 (resolution :clauses (.c2853 .c2866) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 c_1) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_2 (f3 c_1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_1)))))
(set .c2868 (resolution :clauses (.c2867 .c7 .c31 .c164 .c166 .c168) :conclusion ((not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_2 (f3 c_1 c4))) (not (= c6 c_1)))))
(set .c2869 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 c_2 c_0) c_1)) (= c_0 c_1))))
(set .c2870 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c2871 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2872 (resolution :clauses (.c2870 .c2871) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c2873 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c2874 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2875 (resolution :clauses (.c2873 .c2874) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)))))
(set .c2876 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c2877 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c2878 (resolution :clauses (.c2876 .c2877) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2879 (resolution :clauses (.c2875 .c2878) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2880 (resolution :clauses (.c2872 .c2879) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2881 (resolution :clauses (.c2869 .c2880) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 c_0) c_1)) (= c_0 c_1) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2882 (resolution :clauses (.c2881 .c7 .c31 .c166) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2883 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_1) c_0))))
(set .c2884 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c2885 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2886 (resolution :clauses (.c2884 .c2885) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c2887 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c2888 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2889 (resolution :clauses (.c2887 .c2888) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)))))
(set .c2890 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c2891 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c2892 (resolution :clauses (.c2890 .c2891) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2893 (resolution :clauses (.c2889 .c2892) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2894 (resolution :clauses (.c2886 .c2893) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2895 (resolution :clauses (.c2883 .c2894) :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_1) c_0) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2896 (resolution :clauses (.c2895 .c31 .c166) :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_1 c_1) c_0) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2897 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) c_2)) (not (= (f3 c_1 c_0) (f3 c_1 c4))) (= c_2 (f3 c_1 c4)))))
(set .c2898 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_0)) (= (f3 c_1 c_0) (f3 c_1 c4)))))
(set .c2899 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2900 (resolution :clauses (.c2898 .c2899) :conclusion ((not (= c4 c_0)) (= (f3 c_1 c_0) (f3 c_1 c4)))))
(set .c2901 (resolution :clauses (.c2897 .c2900) :conclusion ((not (= (f3 c_1 c_0) c_2)) (= c_2 (f3 c_1 c4)) (not (= c4 c_0)))))
(set .c2902 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c_0 c5))) (not (= (f3 c_0 c5) c_2)) (= (f3 c_0 c4) c_2))))
(set .c2903 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c4)) (= (f3 c_0 c4) (f3 c_0 c5)))))
(set .c2904 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2905 (resolution :clauses (.c2903 .c2904) :conclusion ((not (= c5 c4)) (= (f3 c_0 c4) (f3 c_0 c5)))))
(set .c2906 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c4 c_0)) (= c5 c4))))
(set .c2907 (resolution :clauses (.c2905 .c2906) :conclusion ((= (f3 c_0 c4) (f3 c_0 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c2908 (resolution :clauses (.c2902 .c2907) :conclusion ((not (= (f3 c_0 c5) c_2)) (= (f3 c_0 c4) c_2) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c2909 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 c_1))))
(set .c2910 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f1 c_1))))))
(set .c2911 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c2912 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2913 (resolution :clauses (.c2911 .c2912) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c7 c_2)))))
(set .c2914 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c2915 (resolution :clauses (.c2913 .c2914) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2916 (resolution :clauses (.c2910 .c2915) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 c_2) (f3 c_1 (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2917 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2918 (resolution :clauses (.c2916 .c2917) :conclusion ((= (f3 c_1 c_2) (f3 c_1 (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2919 (resolution :clauses (.c2909 .c2918) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 c_1) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2920 (resolution :clauses (.c2919 .c7 .c164 .c166 .c168) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2921 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 c_2) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c2922 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f1 c_1))))))
(set .c2923 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c2924 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2925 (resolution :clauses (.c2923 .c2924) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c7 c_2)))))
(set .c2926 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c2927 (resolution :clauses (.c2925 .c2926) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2928 (resolution :clauses (.c2922 .c2927) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 c_2) (f3 c_1 (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2929 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c2930 (resolution :clauses (.c2928 .c2929) :conclusion ((= (f3 c_1 c_2) (f3 c_1 (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c2931 (resolution :clauses (.c2921 .c2930) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)))))
(set .c2932 (resolution :clauses (.c2931 .c164 .c166 .c168 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 c_2) c_2)) (not (= c7 c_2)) (not (= (f1 c_2) c_2)))))
(set .c2933 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f1 c_0) c_1)) (not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c2934 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2935 (resolution :clauses (.c2933 .c2934) :conclusion ((not (= c6 c_1)) (not (= (f1 c_0) c_1)) (not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c2936 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c2937 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c2938 (resolution :clauses (.c2936 .c2937) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2939 (resolution :clauses (.c2935 .c2938) :conclusion ((not (= c6 c_1)) (not (= (f1 c_0) c_1)) (not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2940 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c2941 (resolution :clauses (.c2939 .c2940) :conclusion ((not (= c6 c_1)) (not (= (f1 c_0) c_1)) (not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2942 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c2943 (resolution :clauses (.c2941 .c2942) :conclusion ((not (= c6 c_1)) (not (= (f1 c_0) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2944 (resolution :clauses (.c2943 .c165 .c166 .c224) :conclusion ((not (= c6 c_1)) (not (= (f1 c_0) c_1)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2945 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2))))
(set .c2946 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c4 c_0)) (= (f3 c_0 c4) (f3 c_0 c_0)))))
(set .c2947 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2948 (resolution :clauses (.c2946 .c2947) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c4) (f3 c_0 c_0)))))
(set .c2949 (resolution :clauses (.c2945 .c2948) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c4 c_0)))))
(set .c2950 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c2951 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c2952 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2953 (resolution :clauses (.c2951 .c2952) :conclusion ((not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c2954 (resolution :clauses (.c2950 .c2953) :conclusion ((not (= (f3 c_0 c_0) c_0)) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)))))
(set .c2955 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 c4) c_1))))
(set .c2956 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c4 c_0)) (= (f3 c_0 c4) (f3 c_0 c_0)))))
(set .c2957 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2958 (resolution :clauses (.c2956 .c2957) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c4) (f3 c_0 c_0)))))
(set .c2959 (resolution :clauses (.c2955 .c2958) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 c4) c_1) (not (= c4 c_0)))))
(set .c2960 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c2961 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)))))
(set .c2962 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2963 (resolution :clauses (.c2961 .c2962) :conclusion ((not (= (f3 c_2 c_0) c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)))))
(set .c2964 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0))))
(set .c2965 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c2966 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2967 (resolution :clauses (.c2965 .c2966) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c2968 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c2969 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2970 (resolution :clauses (.c2968 .c2969) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)))))
(set .c2971 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c2972 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c2973 (resolution :clauses (.c2971 .c2972) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2974 (resolution :clauses (.c2970 .c2973) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2975 (resolution :clauses (.c2967 .c2974) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2976 (resolution :clauses (.c2964 .c2975) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2977 (resolution :clauses (.c2963 .c2976) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2978 (resolution :clauses (.c2960 .c2977) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2979 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))))))
(set .c2980 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c2981 (resolution :clauses (.c2979 .c2980) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2982 (resolution :clauses (.c2978 .c2981) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2983 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c2984 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c2985 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c2986 (resolution :clauses (.c2984 .c2985) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)) (not (= c7 c_2)))))
(set .c2987 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c2988 (resolution :clauses (.c2986 .c2987) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2989 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c2990 (resolution :clauses (.c2988 .c2989) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c2991 (resolution :clauses (.c2983 .c2990) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2992 (resolution :clauses (.c2982 .c2991) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c2993 (resolution :clauses (.c2992 .c31 .c34 .c164 .c166 .c168 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c7 c_2)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c2994 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c2995 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c2996 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c2997 (resolution :clauses (.c2995 .c2996) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c2998 (resolution :clauses (.c2994 .c2997) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= (f3 c_0 c_0) c_1)))))
(set .c2999 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c5 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c5)))))
(set .c3000 (resolution :clauses (.c2998 .c2999) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c_0 (f3 c_1 c5)) (not (= (f3 c_0 c_0) c_1)) (not (= c5 c_0)))))
(set .c3001 (eq_transitive :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)))))
(set .c3002 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c3003 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3004 (resolution :clauses (.c3002 .c3003) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c3005 (resolution :clauses (.c3001 .c3004) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= (f3 c_0 c_0) c_1)))))
(set .c3006 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c4 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c4)))))
(set .c3007 (resolution :clauses (.c3005 .c3006) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c_1 (f3 c_1 c4)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_0)))))
(set .c3008 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c3009 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c3010 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3011 (resolution :clauses (.c3009 .c3010) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c3012 (resolution :clauses (.c3008 .c3011) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_0 c_0) c_1)))))
(set .c3013 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) (f3 c_0 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c3014 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3015 (resolution :clauses (.c3013 .c3014) :conclusion ((not (= (f3 c_1 c_1) (f3 c_0 c_0))) (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c3016 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0))) (= (f3 c_1 c_1) (f3 c_0 c_0)))))
(set .c3017 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)))))
(set .c3018 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3019 (resolution :clauses (.c3017 .c3018) :conclusion ((not (= (f3 c_2 c_0) c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)))))
(set .c3020 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0))))
(set .c3021 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c3022 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3023 (resolution :clauses (.c3021 .c3022) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c3024 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c3025 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c3026 (resolution :clauses (.c3024 .c3025) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)))))
(set .c3027 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3028 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3029 (resolution :clauses (.c3027 .c3028) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3030 (resolution :clauses (.c3026 .c3029) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3031 (resolution :clauses (.c3023 .c3030) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3032 (resolution :clauses (.c3020 .c3031) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3033 (resolution :clauses (.c3019 .c3032) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3034 (resolution :clauses (.c3016 .c3033) :conclusion ((not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= (f3 c_1 c_1) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3035 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))))))
(set .c3036 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3037 (resolution :clauses (.c3035 .c3036) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3038 (resolution :clauses (.c3034 .c3037) :conclusion ((not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= (f3 c_1 c_1) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3039 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c3040 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c4 c5) c_1))))
(set .c3041 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3042 (resolution :clauses (.c3040 .c3041) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3043 (resolution :clauses (.c3039 .c3042) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3044 (resolution :clauses (.c3038 .c3043) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= (f3 c_1 c_1) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c3045 (resolution :clauses (.c3015 .c3044) :conclusion ((= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_1 c_1) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c3046 (resolution :clauses (.c3012 .c3045) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3047 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))))))
(set .c3048 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3049 (resolution :clauses (.c3047 .c3048) :conclusion ((not (= (f3 c_1 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))))))
(set .c3050 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f3 c_1 c_0) (f1 c_1)))))
(set .c3051 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c3052 (resolution :clauses (.c3050 .c3051) :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f3 c_1 c_0) (f1 c_1)) (not (= c7 c_2)))))
(set .c3053 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c3054 (resolution :clauses (.c3052 .c3053) :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_1 c_0) (f1 c_1)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c3055 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c3056 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3057 (resolution :clauses (.c3055 .c3056) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c3058 (resolution :clauses (.c3054 .c3057) :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_1 c_0) (f1 c_1)) (not (= c7 c_2)) (not (= c6 c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c3059 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c3060 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3061 (resolution :clauses (.c3059 .c3060) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c3062 (resolution :clauses (.c3058 .c3061) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_1 c_0) (f1 c_1)) (not (= c7 c_2)) (not (= c6 c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c3063 (resolution :clauses (.c3049 .c3062) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c6 c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c3064 (resolution :clauses (.c3046 .c3063) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c3065 (resolution :clauses (.c3064 .c31 .c34 .c164 .c166 .c168 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3066 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)))))
(set .c3067 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c5)))))
(set .c3068 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c3069 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c3070 (resolution :clauses (.c3068 .c3069) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)))))
(set .c3071 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3072 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3073 (resolution :clauses (.c3071 .c3072) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3074 (resolution :clauses (.c3070 .c3073) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3075 (resolution :clauses (.c3067 .c3074) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c5)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)))))
(set .c3076 (resolution :clauses (.c3066 .c3075) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)))))
(set .c3077 (resolution :clauses (.c3076 .c31 .c166) :conclusion ((= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)))))
(set .c3078 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)))))
(set .c3079 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3080 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3081 (resolution :clauses (.c3079 .c3080) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3082 (resolution :clauses (.c3078 .c3081) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3083 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c3084 (resolution :clauses (.c3082 .c3083) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c3085 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c3086 (resolution :clauses (.c3084 .c3085) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c3087 (resolution :clauses (.c3086 .c164) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c3088 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)))))
(set .c3089 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c3090 (resolution :clauses (.c3088 .c3089) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_2)) (not (= c7 c_2)))))
(set .c3091 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3092 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3093 (resolution :clauses (.c3091 .c3092) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3094 (resolution :clauses (.c3090 .c3093) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3095 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c3096 (resolution :clauses (.c3094 .c3095) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3097 (resolution :clauses (.c3096 .c166) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f2 c4) (f1 c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3098 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c_0) (f1 c_1)))))
(set .c3099 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3100 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3101 (resolution :clauses (.c3099 .c3100) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3102 (resolution :clauses (.c3098 .c3101) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c_0) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3103 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c3104 (resolution :clauses (.c3102 .c3103) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c3105 (resolution :clauses (.c3104 .c164) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f2 c_0) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c3106 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c_0) (f1 c_2)))))
(set .c3107 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c3108 (resolution :clauses (.c3106 .c3107) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_2)) (not (= c7 c_2)))))
(set .c3109 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3110 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3111 (resolution :clauses (.c3109 .c3110) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3112 (resolution :clauses (.c3108 .c3111) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3113 (resolution :clauses (.c3112 .c166) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f2 c_0) (f1 c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3114 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c5) (f1 c_1)))))
(set .c3115 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3116 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3117 (resolution :clauses (.c3115 .c3116) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3118 (resolution :clauses (.c3114 .c3117) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c5) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3119 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c3120 (resolution :clauses (.c3118 .c3119) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c3121 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3122 (resolution :clauses (.c3120 .c3121) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c3123 (resolution :clauses (.c3122 .c164) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f2 c5) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c3124 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c5) (f1 c_2)))))
(set .c3125 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c3126 (resolution :clauses (.c3124 .c3125) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_2)) (not (= c7 c_2)))))
(set .c3127 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3128 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3129 (resolution :clauses (.c3127 .c3128) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3130 (resolution :clauses (.c3126 .c3129) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3131 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3132 (resolution :clauses (.c3130 .c3131) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3133 (resolution :clauses (.c3132 .c166) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f2 c5) (f1 c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3134 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_0) (f1 c4))) (= (f2 c4) (f1 c_0)))))
(set .c3135 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c3136 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c4 c_0)) (= c5 c4))))
(set .c3137 (resolution :clauses (.c3135 .c3136) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c3138 (resolution :clauses (.c3134 .c3137) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_0) (f1 c4))) (= (f2 c4) (f1 c_0)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c3139 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c3140 (resolution :clauses (.c3138 .c3139) :conclusion ((not (= (f2 c5) (f1 c4))) (= (f2 c4) (f1 c_0)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c3141 (resolution :clauses (.c3140 .c165) :conclusion ((= (f2 c4) (f1 c_0)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c3142 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_0) (f1 c4))) (= (f2 c5) (f1 c_0)))))
(set .c3143 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c3144 (resolution :clauses (.c3142 .c3143) :conclusion ((not (= (f2 c5) (f1 c4))) (= (f2 c5) (f1 c_0)) (not (= c4 c_0)))))
(set .c3145 (resolution :clauses (.c3144 .c165) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c4 c_0)))))
(set .c3146 (resolution :clauses (.c3065 .c228 .c3007 .c3000 .c282 .c2959 .c226 .c2993 .c2954 .c272 .c195 .c207 .c275 .c3077 .c3087 .c3097 .c3105 .c3113 .c3123 .c3133 .c3141 .c3145 .c171 .c11 .c309 .c258 .c2678 .c262 .c1380 .c1739) :conclusion ((not (= c6 c_1)) (not (= (f1 c_2) c_2)) (not (= c5 c_0)) (= c4 c_1) (= c_0 c7))))
(set .c3147 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= c_1 c_2))))
(set .c3148 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_1) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f3 c_1 c_1))))))
(set .c3149 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3150 (resolution :clauses (.c3148 .c3149) :conclusion ((not (= (f3 c_1 c_1) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f3 c_1 c_1))))))
(set .c3151 (resolution :clauses (.c3147 .c3150) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= c_1 c_2) (not (= (f3 c_1 c_1) c_1)))))
(set .c3152 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c3153 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c3154 (resolution :clauses (.c3152 .c3153) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3155 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3156 (resolution :clauses (.c3154 .c3155) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3157 (resolution :clauses (.c3151 .c3156) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= c_1 c_2) (not (= (f3 c_1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c3158 (resolution :clauses (.c3157 .c9 .c1739 .c32) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_1 c_1) c_1)) (not (= (f1 c_1) c_2)))))
(set .c3159 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 c_1))))
(set .c3160 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c3161 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3162 (resolution :clauses (.c3160 .c3161) :conclusion ((not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c3163 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)))))
(set .c3164 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c3165 (resolution :clauses (.c3163 .c3164) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c7 c_2)))))
(set .c3166 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3167 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3168 (resolution :clauses (.c3166 .c3167) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3169 (resolution :clauses (.c3165 .c3168) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3170 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3171 (resolution :clauses (.c3169 .c3170) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3172 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c3173 (resolution :clauses (.c3171 .c3172) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3174 (resolution :clauses (.c3162 .c3173) :conclusion ((= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3175 (resolution :clauses (.c3159 .c3174) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 c_1) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3176 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c3177 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c3178 (resolution :clauses (.c3176 .c3177) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3179 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3180 (resolution :clauses (.c3178 .c3179) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3181 (resolution :clauses (.c3175 .c3180) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 c_1) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3182 (resolution :clauses (.c3181 .c7 .c1739 .c32 .c165 .c166 .c167) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3183 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= c_1 c_2))))
(set .c3184 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c3185 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c3186 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f3 c_1 c_1))) (= (f3 c4 c5) (f3 c_0 (f3 c_1 c_1))))))
(set .c3187 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (= c5 (f3 c_1 c_1)))))
(set .c3188 (resolution :clauses (.c3186 .c3187) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f3 c_1 c_1))) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c3189 (resolution :clauses (.c3185 .c3188) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c3190 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c3191 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c3192 (resolution :clauses (.c3190 .c3191) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3193 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3194 (resolution :clauses (.c3192 .c3193) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3195 (resolution :clauses (.c3189 .c3194) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3196 (resolution :clauses (.c3184 .c3195) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3197 (resolution :clauses (.c3183 .c3196) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (= c_1 c_2) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c3198 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))))))
(set .c3199 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3200 (resolution :clauses (.c3198 .c3199) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3201 (resolution :clauses (.c3197 .c3200) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (= c_1 c_2) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= c7 c_2)))))
(set .c3202 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 (f3 c_1 c_1))))))
(set .c3203 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0))))
(set .c3204 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c3205 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3206 (resolution :clauses (.c3204 .c3205) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c3207 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c3208 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c3209 (resolution :clauses (.c3207 .c3208) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)))))
(set .c3210 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3211 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3212 (resolution :clauses (.c3210 .c3211) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3213 (resolution :clauses (.c3209 .c3212) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3214 (resolution :clauses (.c3206 .c3213) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3215 (resolution :clauses (.c3203 .c3214) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3216 (resolution :clauses (.c3202 .c3215) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 (f3 c_1 c_1))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3217 (resolution :clauses (.c3201 .c3216) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (= c_1 c_2) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= c7 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)))))
(set .c3218 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c3219 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c3220 (resolution :clauses (.c3218 .c3219) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3221 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3222 (resolution :clauses (.c3220 .c3221) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3223 (resolution :clauses (.c3217 .c3222) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (= c_1 c_2) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= c7 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)))))
(set .c3224 (resolution :clauses (.c3223 .c9 .c1739 .c31 .c32 .c34 .c166) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_1) c_2)) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_2)) (not (= c7 c_2)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)))))
(set .c3225 (resolution :clauses (.c3224 .c234 .c3182 .c3158) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_1) c_2)) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f1 c_1) c_2)) (not (= c7 c_2)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)))))
(set .c3226 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c3227 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= c5 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c5)))))
(set .c3228 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0))))
(set .c3229 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c3230 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3231 (resolution :clauses (.c3229 .c3230) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c3232 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c3233 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c3234 (resolution :clauses (.c3232 .c3233) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)))))
(set .c3235 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3236 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3237 (resolution :clauses (.c3235 .c3236) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3238 (resolution :clauses (.c3234 .c3237) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3239 (resolution :clauses (.c3231 .c3238) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3240 (resolution :clauses (.c3228 .c3239) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3241 (resolution :clauses (.c3227 .c3240) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c5)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)))))
(set .c3242 (resolution :clauses (.c3226 .c3241) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)))))
(set .c3243 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))))))
(set .c3244 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3245 (resolution :clauses (.c3243 .c3244) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3246 (resolution :clauses (.c3242 .c3245) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)))))
(set .c3247 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c3248 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c3249 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c3250 (resolution :clauses (.c3248 .c3249) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c7 c_2)))))
(set .c3251 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3252 (resolution :clauses (.c3250 .c3251) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3253 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3254 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3255 (resolution :clauses (.c3253 .c3254) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3256 (resolution :clauses (.c3252 .c3255) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3257 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3258 (resolution :clauses (.c3256 .c3257) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3259 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c3260 (resolution :clauses (.c3258 .c3259) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3261 (resolution :clauses (.c3247 .c3260) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3262 (resolution :clauses (.c3246 .c3261) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c_0 c6)) (not (= (f2 c5) (f1 c4))) (not (= (f3 c_0 c_0) c_2)))))
(set .c3263 (resolution :clauses (.c3262 .c31 .c34 .c165 .c166 .c167) :conclusion ((not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_2)))))
(set .c3264 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_0) (f1 c4))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c3265 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c3266 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c4 c_0)) (= c5 c4))))
(set .c3267 (resolution :clauses (.c3265 .c3266) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c3268 (resolution :clauses (.c3264 .c3267) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_0) (f1 c4))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c3269 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c3270 (resolution :clauses (.c3268 .c3269) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c3271 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f1 (f3 c_0 c_0)) (f1 c_1)))))
(set .c3272 (resolution :clauses (.c3270 .c3271) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c4) (f1 c_1)) (not (= c5 c_0)) (not (= c4 c_0)) (not (= (f3 c_0 c_0) c_1)))))
(set .c3273 (resolution :clauses (.c3272 .c165) :conclusion ((not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c4) (f1 c_1)) (not (= c5 c_0)) (not (= c4 c_0)) (not (= (f3 c_0 c_0) c_1)))))
(set .c3274 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1))))
(set .c3275 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)))))
(set .c3276 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3277 (resolution :clauses (.c3275 .c3276) :conclusion ((not (= (f3 c_2 c_0) c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)))))
(set .c3278 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0))))
(set .c3279 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c3280 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3281 (resolution :clauses (.c3279 .c3280) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c3282 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c3283 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c3284 (resolution :clauses (.c3282 .c3283) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)))))
(set .c3285 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3286 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3287 (resolution :clauses (.c3285 .c3286) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3288 (resolution :clauses (.c3284 .c3287) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3289 (resolution :clauses (.c3281 .c3288) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3290 (resolution :clauses (.c3278 .c3289) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3291 (resolution :clauses (.c3277 .c3290) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3292 (resolution :clauses (.c3274 .c3291) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3293 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))))))
(set .c3294 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3295 (resolution :clauses (.c3293 .c3294) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3296 (resolution :clauses (.c3292 .c3295) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3297 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))))))
(set .c3298 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3299 (resolution :clauses (.c3297 .c3298) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3300 (resolution :clauses (.c3296 .c3299) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c3301 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c5 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c5)))))
(set .c3302 (resolution :clauses (.c3300 .c3301) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c3303 (resolution :clauses (.c3302 .c31 .c34 .c166) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c3304 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c_0 c5))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 c5) c_1))))
(set .c3305 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c3306 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3307 (resolution :clauses (.c3305 .c3306) :conclusion ((not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c3308 (resolution :clauses (.c3304 .c3307) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 c5) c_1) (not (= c5 c_0)))))
(set .c3309 (resolution :clauses (.c270 .c3273 .c3303 .c3308 .c226 .c3263 .c2954 .c207 .c275 .c3113 .c3097 .c3077) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= c5 c_0)) (not (= c4 c_0)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= (f2 c_0) (f1 c_0))))))
(set .c3310 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c3311 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_1)) (not (= c5 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 c5)))))
(set .c3312 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 c4))) (not (= c_1 (f3 c_1 c4))) (= (f3 c_1 c_0) c_1))))
(set .c3313 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_0)) (= (f3 c_1 c_0) (f3 c_1 c4)))))
(set .c3314 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3315 (resolution :clauses (.c3313 .c3314) :conclusion ((not (= c4 c_0)) (= (f3 c_1 c_0) (f3 c_1 c4)))))
(set .c3316 (resolution :clauses (.c3312 .c3315) :conclusion ((not (= c_1 (f3 c_1 c4))) (= (f3 c_1 c_0) c_1) (not (= c4 c_0)))))
(set .c3317 (resolution :clauses (.c3311 .c3316) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 c5)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)))))
(set .c3318 (resolution :clauses (.c3310 .c3317) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)))))
(set .c3319 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c3320 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3321 (resolution :clauses (.c3319 .c3320) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3322 (resolution :clauses (.c3318 .c3321) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)) (not (= c_1 c7)))))
(set .c3323 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c3324 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c3325 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3326 (resolution :clauses (.c3324 .c3325) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)))))
(set .c3327 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3328 (resolution :clauses (.c3326 .c3327) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3329 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3330 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3331 (resolution :clauses (.c3329 .c3330) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3332 (resolution :clauses (.c3328 .c3331) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3333 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3334 (resolution :clauses (.c3332 .c3333) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3335 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c3336 (resolution :clauses (.c3334 .c3335) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3337 (resolution :clauses (.c3323 .c3336) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3338 (resolution :clauses (.c3322 .c3337) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c3339 (resolution :clauses (.c3338 .c34 .c165 .c166 .c167) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c3340 (resolution :clauses (.c3339 .c226 .c2959 .c288) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_1) c_2)) (= (f3 c_0 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c3341 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 c_0 c_1))) (= c_0 (f3 c_0 c_1)))))
(set .c3342 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c3343 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c3344 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3345 (resolution :clauses (.c3343 .c3344) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3346 (resolution :clauses (.c3342 .c3345) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3347 (resolution :clauses (.c3341 .c3346) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 c_0 c_1))) (= c_0 (f3 c_0 c_1)) (not (= c_1 c7)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3348 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c3349 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c3350 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3351 (resolution :clauses (.c3349 .c3350) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)))))
(set .c3352 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3353 (resolution :clauses (.c3351 .c3352) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3354 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3355 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3356 (resolution :clauses (.c3354 .c3355) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3357 (resolution :clauses (.c3353 .c3356) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3358 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3359 (resolution :clauses (.c3357 .c3358) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3360 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c3361 (resolution :clauses (.c3359 .c3360) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3362 (resolution :clauses (.c3348 .c3361) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3363 (resolution :clauses (.c3347 .c3362) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 c_0 c_1))) (= c_0 (f3 c_0 c_1)) (not (= c_1 c7)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c3364 (resolution :clauses (.c3363 .c34 .c165 .c166 .c167 .c168) :conclusion ((not (= c_1 (f3 c_0 c_1))) (= c_0 (f3 c_0 c_1)) (not (= c_1 c7)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))))))
(set .c3365 (resolution :clauses (.c3364 .c226 .c3007 .c228) :conclusion ((= c_0 (f3 c_0 c_1)) (not (= c_1 c7)) (not (= (f1 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f3 c_0 c_0) c_0) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c_1 (f3 c_1 c4)) (= (f3 c_0 c_1) c_2))))
(set .c3366 (eq_transitive :conclusion ((not (= c_1 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 c_0) (f3 c_0 (f3 c_0 c_1)))) (not (= (f3 c_0 c_0) c_2)) (= c7 c_2))))
(set .c3367 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 c_0 (f3 c_0 c_1))))))
(set .c3368 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3369 (resolution :clauses (.c3367 .c3368) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 c_0 (f3 c_0 c_1))))))
(set .c3370 (resolution :clauses (.c3366 .c3369) :conclusion ((not (= c_1 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 c_0) c_2)) (= c7 c_2) (not (= c_0 (f3 c_0 c_1))))))
(set .c3371 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c3372 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3373 (resolution :clauses (.c3371 .c3372) :conclusion ((not (= (f3 c_0 c_0) (f2 c_1))) (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c3374 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_0 c_0) (f2 c_1)))))
(set .c3375 (resolution :clauses (.c3373 .c3374) :conclusion ((= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c3376 (resolution :clauses (.c3370 .c3375) :conclusion ((not (= c_1 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 c_0) c_2)) (= c7 c_2) (not (= c_0 (f3 c_0 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c3377 (resolution :clauses (.c3376 .c1739 .c32) :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 c_0) c_2)) (= c7 c_2) (not (= c_0 (f3 c_0 c_1))) (not (= (f1 c_1) c_2)))))
(set .c3378 (resolution :clauses (.c3377 .c226 .c3000) :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (= c7 c_2) (not (= c_0 (f3 c_0 c_1))) (not (= (f1 c_1) c_2)) (= (f3 c_0 c_0) c_0) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)))))
(set .c3379 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (= c6 c7))))
(set .c3380 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c3381 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3382 (resolution :clauses (.c3380 .c3381) :conclusion ((not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c3383 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)))))
(set .c3384 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3385 (resolution :clauses (.c3383 .c3384) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_1 c7)))))
(set .c3386 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3387 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3388 (resolution :clauses (.c3386 .c3387) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3389 (resolution :clauses (.c3385 .c3388) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3390 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3391 (resolution :clauses (.c3389 .c3390) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3392 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c3393 (resolution :clauses (.c3391 .c3392) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3394 (resolution :clauses (.c3382 .c3393) :conclusion ((= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3395 (resolution :clauses (.c3379 .c3394) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (= c6 c7) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3396 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c3397 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c3398 (resolution :clauses (.c3396 .c3397) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3399 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3400 (resolution :clauses (.c3398 .c3399) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3401 (resolution :clauses (.c3395 .c3400) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (= c6 c7) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c_0 c_1) c_2)))))
(set .c3402 (resolution :clauses (.c3401 .c1739 .c32 .c165 .c166 .c167 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 c7)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3403 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c5) (f3 c_1 (f3 c_1 c_1)))) (= c_0 (f3 c_1 c5)))))
(set .c3404 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c6)) (not (= (f3 c4 c5) c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c6 (f3 c4 c5))))))
(set .c3405 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c3406 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f3 c_1 c_1))) (= (f3 c4 c5) (f3 c_0 (f3 c_1 c_1))))))
(set .c3407 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (= c5 (f3 c_1 c_1)))))
(set .c3408 (resolution :clauses (.c3406 .c3407) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f3 c_1 c_1))) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c3409 (resolution :clauses (.c3405 .c3408) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c3410 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c3411 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c3412 (resolution :clauses (.c3410 .c3411) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3413 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3414 (resolution :clauses (.c3412 .c3413) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3415 (resolution :clauses (.c3409 .c3414) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3416 (resolution :clauses (.c3404 .c3415) :conclusion ((not (= (f3 c_1 c_1) c6)) (= (f3 (f3 c_1 c_1) c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3417 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_0 c6)) (= (f3 c_1 c_1) c6))))
(set .c3418 (resolution :clauses (.c3416 .c3417) :conclusion ((= (f3 (f3 c_1 c_1) c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c_0 c6)))))
(set .c3419 (resolution :clauses (.c3403 .c3418) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c5) (f3 c_1 (f3 c_1 c_1)))) (= c_0 (f3 c_1 c5)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c_0 c6)))))
(set .c3420 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 (f3 c_1 c_1))) (= (f3 c_1 c5) (f3 c_1 (f3 c_1 c_1))))))
(set .c3421 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (= c5 (f3 c_1 c_1)))))
(set .c3422 (resolution :clauses (.c3420 .c3421) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 c5) (f3 c_1 (f3 c_1 c_1))) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c3423 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3424 (resolution :clauses (.c3422 .c3423) :conclusion ((= (f3 c_1 c5) (f3 c_1 (f3 c_1 c_1))) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c3425 (resolution :clauses (.c3419 .c3424) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_0 (f3 c_1 c5)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c_0 c6)))))
(set .c3426 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c3427 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3428 (resolution :clauses (.c3426 .c3427) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3429 (resolution :clauses (.c3425 .c3428) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_0 (f3 c_1 c5)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c_0 c6)) (not (= c_1 c7)))))
(set .c3430 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_1 c_0))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0)))))
(set .c3431 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3432 (resolution :clauses (.c3430 .c3431) :conclusion ((not (= (f2 c_0) (f3 c_1 c_0))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0)))))
(set .c3433 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (= (f2 c_0) (f3 c_1 c_0)))))
(set .c3434 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3435 (resolution :clauses (.c3433 .c3434) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (= (f2 c_0) (f3 c_1 c_0)) (not (= c_1 c7)))))
(set .c3436 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c3437 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3438 (resolution :clauses (.c3436 .c3437) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c3439 (resolution :clauses (.c3435 .c3438) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (= (f2 c_0) (f3 c_1 c_0)) (not (= c_1 c7)) (not (= (f3 c_1 c_1) c_0)))))
(set .c3440 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c3441 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3442 (resolution :clauses (.c3440 .c3441) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c3443 (resolution :clauses (.c3439 .c3442) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= (f2 c_0) (f3 c_1 c_0)) (not (= c_1 c7)) (not (= (f3 c_1 c_1) c_0)))))
(set .c3444 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3445 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3446 (resolution :clauses (.c3444 .c3445) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3447 (resolution :clauses (.c3443 .c3446) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= (f2 c_0) (f3 c_1 c_0)) (not (= c_1 c7)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3448 (resolution :clauses (.c3432 .c3447) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= c_1 c7)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3449 (resolution :clauses (.c3429 .c3448) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_0 (f3 c_1 c5)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c_0 c6)) (not (= c_1 c7)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c3450 (resolution :clauses (.c3449 .c1739 .c31 .c32 .c34 .c166 .c1742) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (= c_0 (f3 c_1 c5)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c_0 c6)) (not (= c_1 c7)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))))))
(set .c3451 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)))))
(set .c3452 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c5)))))
(set .c3453 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_2)) (= (f2 c_0) c_2))))
(set .c3454 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3455 (resolution :clauses (.c3453 .c3454) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (= (f2 c_0) c_2) (not (= c_1 c7)))))
(set .c3456 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3457 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3458 (resolution :clauses (.c3456 .c3457) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3459 (resolution :clauses (.c3455 .c3458) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (= (f2 c_0) c_2) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3460 (resolution :clauses (.c3452 .c3459) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c5)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= c_1 c7)) (not (= c4 c_0)))))
(set .c3461 (resolution :clauses (.c3451 .c3460) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= c_1 c7)) (not (= c4 c_0)))))
(set .c3462 (resolution :clauses (.c3461 .c166 .c31) :conclusion ((= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_1) c_2)) (not (= c_1 c7)) (not (= c4 c_0)))))
(set .c3463 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)))))
(set .c3464 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3465 (resolution :clauses (.c3463 .c3464) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)) (not (= c_1 c7)))))
(set .c3466 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3467 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3468 (resolution :clauses (.c3466 .c3467) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3469 (resolution :clauses (.c3465 .c3468) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3470 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3471 (resolution :clauses (.c3469 .c3470) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3472 (resolution :clauses (.c3471 .c166) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3473 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c4) (f1 c_2)))))
(set .c3474 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3475 (resolution :clauses (.c3473 .c3474) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)))))
(set .c3476 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3477 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3478 (resolution :clauses (.c3476 .c3477) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3479 (resolution :clauses (.c3475 .c3478) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3480 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c3481 (resolution :clauses (.c3479 .c3480) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3482 (resolution :clauses (.c3481 .c166) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3483 (resolution :clauses (.c3450 .c234 .c3402 .c3158 .c3365 .c3378 .c3340 .c2954 .c272 .c275 .c3462 .c3472 .c3482) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f1 c_1) c_2)) (not (= c_0 c6)) (not (= c_1 c7)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (= c7 c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)))))
(set .c3484 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c3485 (resolution :clauses (.c3484 .c1739 .c224) :conclusion ((not (= c_0 c6)) (not (= c_0 (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)))))
(set .c3486 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) c_2)) (= c_0 c_2))))
(set .c3487 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c3488 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3489 (resolution :clauses (.c3487 .c3488) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c3490 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c3491 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3492 (resolution :clauses (.c3490 .c3491) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c_1 c7)))))
(set .c3493 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3494 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3495 (resolution :clauses (.c3493 .c3494) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3496 (resolution :clauses (.c3492 .c3495) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3497 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3498 (resolution :clauses (.c3496 .c3497) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3499 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c3500 (resolution :clauses (.c3498 .c3499) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3501 (resolution :clauses (.c3489 .c3500) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3502 (resolution :clauses (.c3486 .c3501) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) c_2)) (= c_0 c_2) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3503 (resolution :clauses (.c3502 .c8 .c165 .c166 .c167) :conclusion ((not (= (f3 c_0 c_1) c_2)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3504 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c5 c_0)) (not (= c5 c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c3505 (resolution :clauses (.c3504 .c224) :conclusion ((not (= c_0 c6)) (not (= c5 c_0)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c3506 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c3507 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1)))))
(set .c3508 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3509 (resolution :clauses (.c3507 .c3508) :conclusion ((not (= (f1 c_1) c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1)))))
(set .c3510 (resolution :clauses (.c3506 .c3509) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_1)))))
(set .c3511 (resolution :clauses (.c3510 .c168 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) c_0)) (not (= c_1 c7)) (not (= (f1 c_1) c_1)))))
(set .c3512 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_1 c4))) (not (= c_1 (f3 c_1 c4))) (not (= c_1 c7)) (= c6 c7))))
(set .c3513 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c4 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c4)))))
(set .c3514 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c3515 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3516 (resolution :clauses (.c3514 .c3515) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c_1 c7)))))
(set .c3517 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3518 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3519 (resolution :clauses (.c3517 .c3518) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3520 (resolution :clauses (.c3516 .c3519) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3521 (resolution :clauses (.c3513 .c3520) :conclusion ((not (= c4 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c4)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c5 c_0)))))
(set .c3522 (resolution :clauses (.c3512 .c3521) :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_1 (f3 c_1 c4))) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c5 c_0)))))
(set .c3523 (resolution :clauses (.c3522 .c31 .c166 .c224) :conclusion ((not (= c_0 c6)) (not (= c_1 (f3 c_1 c4))) (not (= c_1 c7)) (not (= c4 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_1) c_1)) (not (= c5 c_0)))))
(set .c3524 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= c_1 c7)) (= c6 c7))))
(set .c3525 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c3526 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3527 (resolution :clauses (.c3525 .c3526) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c3528 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c3529 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3530 (resolution :clauses (.c3528 .c3529) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c_1 c7)))))
(set .c3531 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3532 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3533 (resolution :clauses (.c3531 .c3532) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3534 (resolution :clauses (.c3530 .c3533) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3535 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3536 (resolution :clauses (.c3534 .c3535) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3537 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c3538 (resolution :clauses (.c3536 .c3537) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3539 (resolution :clauses (.c3527 .c3538) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3540 (resolution :clauses (.c3524 .c3539) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= c_1 c7)) (= c6 c7) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3541 (resolution :clauses (.c3540 .c165 .c166 .c167 .c224) :conclusion ((not (= c_0 c6)) (not (= c_1 (f3 c_0 c_1))) (not (= c_1 c7)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3542 (eq_transitive :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c_1) c_2)) (= c_1 c_2))))
(set .c3543 (resolution :clauses (.c3542 .c9 .c1739) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f2 c_1) c_2)))))
(set .c3544 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (= c_0 c_2))))
(set .c3545 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))))))
(set .c3546 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3547 (resolution :clauses (.c3545 .c3546) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3548 (resolution :clauses (.c3544 .c3547) :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (= c_0 c_2) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3549 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c3550 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3551 (resolution :clauses (.c3549 .c3550) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3552 (resolution :clauses (.c3548 .c3551) :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (= c_0 c_2) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c3553 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c3554 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3555 (resolution :clauses (.c3553 .c3554) :conclusion ((not (= (f3 c_1 c_0) c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c3556 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c3557 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c3558 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3559 (resolution :clauses (.c3557 .c3558) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c3560 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c3561 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3562 (resolution :clauses (.c3560 .c3561) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c_1 c7)))))
(set .c3563 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3564 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3565 (resolution :clauses (.c3563 .c3564) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3566 (resolution :clauses (.c3562 .c3565) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3567 (resolution :clauses (.c3559 .c3566) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3568 (resolution :clauses (.c3556 .c3567) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3569 (resolution :clauses (.c3555 .c3568) :conclusion ((= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3570 (resolution :clauses (.c3552 .c3569) :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= c_0 c_2) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)))))
(set .c3571 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c5 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c5)))))
(set .c3572 (resolution :clauses (.c3570 .c3571) :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= c_0 c_2) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)))))
(set .c3573 (resolution :clauses (.c3572 .c8 .c31 .c34 .c166) :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_1) c_1)))))
(set .c3574 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c3575 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c3576 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3577 (resolution :clauses (.c3575 .c3576) :conclusion ((not (= (f3 c_1 c_0) c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c3578 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c3579 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c3580 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3581 (resolution :clauses (.c3579 .c3580) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c3582 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c3583 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3584 (resolution :clauses (.c3582 .c3583) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c_1 c7)))))
(set .c3585 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3586 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3587 (resolution :clauses (.c3585 .c3586) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3588 (resolution :clauses (.c3584 .c3587) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3589 (resolution :clauses (.c3581 .c3588) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3590 (resolution :clauses (.c3578 .c3589) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3591 (resolution :clauses (.c3577 .c3590) :conclusion ((= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3592 (resolution :clauses (.c3574 .c3591) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3593 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c3594 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3595 (resolution :clauses (.c3593 .c3594) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3596 (resolution :clauses (.c3592 .c3595) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3597 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c3598 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c3599 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3600 (resolution :clauses (.c3598 .c3599) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)))))
(set .c3601 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3602 (resolution :clauses (.c3600 .c3601) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3603 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3604 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3605 (resolution :clauses (.c3603 .c3604) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3606 (resolution :clauses (.c3602 .c3605) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3607 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3608 (resolution :clauses (.c3606 .c3607) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3609 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c3610 (resolution :clauses (.c3608 .c3609) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3611 (resolution :clauses (.c3597 .c3610) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3612 (resolution :clauses (.c3596 .c3611) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 c5) (f1 c4))))))
(set .c3613 (resolution :clauses (.c3612 .c31 .c34 .c165 .c166 .c167 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3614 (eq_transitive :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_0) (f1 c4))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_1 c_2))))
(set .c3615 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f1 (f3 c_0 c_0)) (f1 c_2)))))
(set .c3616 (resolution :clauses (.c3614 .c3615) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_0) (f1 c4))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 c_2) c_2)) (= c_1 c_2) (not (= (f3 c_0 c_0) c_2)))))
(set .c3617 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c3618 (resolution :clauses (.c3616 .c3617) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 c_2) c_2)) (= c_1 c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)))))
(set .c3619 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3620 (resolution :clauses (.c3618 .c3619) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 c_2) c_2)) (= c_1 c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3621 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3622 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3623 (resolution :clauses (.c3621 .c3622) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3624 (resolution :clauses (.c3620 .c3623) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 c_2) c_2)) (= c_1 c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3625 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3626 (resolution :clauses (.c3624 .c3625) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 c_2) c_2)) (= c_1 c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c3627 (resolution :clauses (.c3626 .c9 .c165 .c166) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c3628 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c3629 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)))))
(set .c3630 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c3631 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3632 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3633 (resolution :clauses (.c3631 .c3632) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3634 (resolution :clauses (.c3630 .c3633) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3635 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3636 (resolution :clauses (.c3634 .c3635) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c3637 (resolution :clauses (.c3629 .c3636) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)))))
(set .c3638 (resolution :clauses (.c3628 .c3637) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)))))
(set .c3639 (resolution :clauses (.c3638 .c166 .c31) :conclusion ((= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)))))
(set .c3640 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)))))
(set .c3641 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c3642 (resolution :clauses (.c3640 .c3641) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c4 c_0)))))
(set .c3643 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3644 (resolution :clauses (.c3642 .c3643) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3645 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3646 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3647 (resolution :clauses (.c3645 .c3646) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3648 (resolution :clauses (.c3644 .c3647) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3649 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3650 (resolution :clauses (.c3648 .c3649) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c3651 (resolution :clauses (.c3650 .c166 .c1739 .c165) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f1 c_0) (f2 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c3652 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c_0) (f1 c_1)))))
(set .c3653 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3654 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3655 (resolution :clauses (.c3653 .c3654) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3656 (resolution :clauses (.c3652 .c3655) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c_0) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3657 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3658 (resolution :clauses (.c3656 .c3657) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c3659 (resolution :clauses (.c3658 .c166) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f2 c_0) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c3660 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c5) (f1 c_1)))))
(set .c3661 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3662 (resolution :clauses (.c3660 .c3661) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c5) (f1 c_1)) (not (= c5 c_0)))))
(set .c3663 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3664 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3665 (resolution :clauses (.c3663 .c3664) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3666 (resolution :clauses (.c3662 .c3665) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c5) (f1 c_1)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c3667 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3668 (resolution :clauses (.c3666 .c3667) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_1)) (not (= c5 c_0)) (not (= c4 c_0)) (not (= c_1 c7)))))
(set .c3669 (resolution :clauses (.c3668 .c166) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f2 c5) (f1 c_1)) (not (= c5 c_0)) (not (= c4 c_0)) (not (= c_1 c7)))))
(set .c3670 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c3671 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c3672 (resolution :clauses (.c3670 .c3671) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)))))
(set .c3673 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3674 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3675 (resolution :clauses (.c3673 .c3674) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3676 (resolution :clauses (.c3672 .c3675) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3677 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3678 (resolution :clauses (.c3676 .c3677) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c3679 (resolution :clauses (.c3678 .c166) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c3680 (resolution :clauses (.c3627 .c226 .c3613 .c2954 .c263 .c3639 .c252 .c3483 .c173 .c179 .c189 .c3651 .c3659 .c3669 .c3679 .c262 .c3309 .c1739) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 c_2) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f2 c4) (f1 c_0))) (= (f1 c_1) c_0) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c_0) (f1 c_0))) (= c_0 c7))))
(set .c3681 (eq_transitive :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2))))
(set .c3682 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)))))
(set .c3683 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3684 (resolution :clauses (.c3682 .c3683) :conclusion ((not (= (f3 c_2 c_0) c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)))))
(set .c3685 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0))))
(set .c3686 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c3687 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3688 (resolution :clauses (.c3686 .c3687) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c3689 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c3690 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c3691 (resolution :clauses (.c3689 .c3690) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)))))
(set .c3692 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3693 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3694 (resolution :clauses (.c3692 .c3693) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3695 (resolution :clauses (.c3691 .c3694) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3696 (resolution :clauses (.c3688 .c3695) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3697 (resolution :clauses (.c3685 .c3696) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3698 (resolution :clauses (.c3684 .c3697) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3699 (resolution :clauses (.c3681 .c3698) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3700 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c3701 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3702 (resolution :clauses (.c3700 .c3701) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3703 (resolution :clauses (.c3699 .c3702) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3704 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c3705 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c3706 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3707 (resolution :clauses (.c3705 .c3706) :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3708 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c3709 (resolution :clauses (.c3707 .c3708) :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c3710 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3711 (resolution :clauses (.c3709 .c3710) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c3712 (resolution :clauses (.c3704 .c3711) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c3713 (resolution :clauses (.c3703 .c3712) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c3714 (resolution :clauses (.c3713 .c31 .c34 .c164 .c166 .c168) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c3715 (resolution :clauses (.c288 .c3007 .c2959 .c226 .c3714 .c228) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c4 c_0)) (= (f3 c_0 c_0) c_0) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= (f3 c_0 c_1) c_2) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c5 c_0)) (not (= c_1 c7)) (= c_0 (f3 c_0 c_1)))))
(set .c3716 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 (f3 c_1 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_1) c_1))))
(set .c3717 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) (f3 c_0 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1))))))
(set .c3718 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3719 (resolution :clauses (.c3717 .c3718) :conclusion ((not (= (f1 c_1) (f3 c_0 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1))))))
(set .c3720 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_1) (f3 c_0 c_1)))))
(set .c3721 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c3722 (resolution :clauses (.c3720 .c3721) :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_1) (f3 c_0 c_1)) (not (= c6 c_2)))))
(set .c3723 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3724 (resolution :clauses (.c3722 .c3723) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_1) (f3 c_0 c_1)) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c3725 (resolution :clauses (.c3719 .c3724) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c3726 (resolution :clauses (.c3716 .c3725) :conclusion ((not (= (f3 c_1 c_1) (f3 (f3 c_1 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_1) c_1) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c3727 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_1)) (not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_0) c_1)))))
(set .c3728 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 c4))) (not (= c_1 (f3 c_1 c4))) (= (f3 c_1 c_0) c_1))))
(set .c3729 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_0)) (= (f3 c_1 c_0) (f3 c_1 c4)))))
(set .c3730 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3731 (resolution :clauses (.c3729 .c3730) :conclusion ((not (= c4 c_0)) (= (f3 c_1 c_0) (f3 c_1 c4)))))
(set .c3732 (resolution :clauses (.c3728 .c3731) :conclusion ((not (= c_1 (f3 c_1 c4))) (= (f3 c_1 c_0) c_1) (not (= c4 c_0)))))
(set .c3733 (resolution :clauses (.c3727 .c3732) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_0) c_1)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)))))
(set .c3734 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3735 (resolution :clauses (.c3733 .c3734) :conclusion ((= (f3 c_1 c_1) (f3 (f3 c_1 c_0) c_1)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)))))
(set .c3736 (resolution :clauses (.c3726 .c3735) :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_1) c_1) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_2)) (not (= c_1 c7)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)))))
(set .c3737 (resolution :clauses (.c3736 .c164 .c166 .c168) :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (= (f3 c_1 c_1) c_1) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_2)) (not (= c_1 c7)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)))))
(set .c3738 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (= c_0 c7))))
(set .c3739 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c3740 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3741 (resolution :clauses (.c3739 .c3740) :conclusion ((not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c3742 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)))))
(set .c3743 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c3744 (resolution :clauses (.c3742 .c3743) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c6 c_2)))))
(set .c3745 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3746 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3747 (resolution :clauses (.c3745 .c3746) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3748 (resolution :clauses (.c3744 .c3747) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3749 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3750 (resolution :clauses (.c3748 .c3749) :conclusion ((not (= (f1 c_0) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3751 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f1 c_0) (f1 c4)))))
(set .c3752 (resolution :clauses (.c3750 .c3751) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c_1 c_1)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3753 (resolution :clauses (.c3741 .c3752) :conclusion ((= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3754 (resolution :clauses (.c3738 .c3753) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (= c_0 c7) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3755 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c3756 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c3757 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c3758 (resolution :clauses (.c3756 .c3757) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)) (not (= c6 c_2)))))
(set .c3759 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3760 (resolution :clauses (.c3758 .c3759) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c3761 (resolution :clauses (.c3755 .c3760) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c3762 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3763 (resolution :clauses (.c3761 .c3762) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c3764 (resolution :clauses (.c3754 .c3763) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (= c_0 c7) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)))))
(set .c3765 (resolution :clauses (.c3764 .c1739 .c32 .c164 .c165 .c166 .c167) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 c7)) (= c_0 c7) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_0 c_1) c_2)))))
(set .c3766 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c3767 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= c5 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c5)))))
(set .c3768 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0))))
(set .c3769 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c3770 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3771 (resolution :clauses (.c3769 .c3770) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c3772 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c3773 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c3774 (resolution :clauses (.c3772 .c3773) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)))))
(set .c3775 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3776 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3777 (resolution :clauses (.c3775 .c3776) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3778 (resolution :clauses (.c3774 .c3777) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3779 (resolution :clauses (.c3771 .c3778) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3780 (resolution :clauses (.c3768 .c3779) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3781 (resolution :clauses (.c3767 .c3780) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c5)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)))))
(set .c3782 (resolution :clauses (.c3766 .c3781) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)))))
(set .c3783 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c3784 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3785 (resolution :clauses (.c3783 .c3784) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3786 (resolution :clauses (.c3782 .c3785) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)))))
(set .c3787 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c3788 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3789 (resolution :clauses (.c3787 .c3788) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3790 (resolution :clauses (.c3786 .c3789) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_1 c7)))))
(set .c3791 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_1 c_0))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0)))))
(set .c3792 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3793 (resolution :clauses (.c3791 .c3792) :conclusion ((not (= (f2 c_0) (f3 c_1 c_0))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0)))))
(set .c3794 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (= (f2 c_0) (f3 c_1 c_0)))))
(set .c3795 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c3796 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3797 (resolution :clauses (.c3795 .c3796) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c3798 (resolution :clauses (.c3794 .c3797) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (= (f2 c_0) (f3 c_1 c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c3799 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c3800 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3801 (resolution :clauses (.c3799 .c3800) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c3802 (resolution :clauses (.c3798 .c3801) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= (f2 c_0) (f3 c_1 c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c3803 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c3804 (resolution :clauses (.c3802 .c3803) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= (f2 c_0) (f3 c_1 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c6 c_2)))))
(set .c3805 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3806 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3807 (resolution :clauses (.c3805 .c3806) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3808 (resolution :clauses (.c3804 .c3807) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= (f2 c_0) (f3 c_1 c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3809 (resolution :clauses (.c3793 .c3808) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_0) c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_0)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3810 (resolution :clauses (.c3790 .c3809) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_0)))))
(set .c3811 (resolution :clauses (.c3810 .c31 .c34 .c164 .c1742) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_1 c_1) c_0)))))
(set .c3812 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c3813 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c3814 (resolution :clauses (.c3812 .c3813) :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c6 c_2)))))
(set .c3815 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3816 (resolution :clauses (.c3814 .c3815) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c3817 (resolution :clauses (.c3816 .c164 .c166) :conclusion ((not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c3818 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)))))
(set .c3819 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c5)))))
(set .c3820 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c3821 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c3822 (resolution :clauses (.c3820 .c3821) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)))))
(set .c3823 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3824 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3825 (resolution :clauses (.c3823 .c3824) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3826 (resolution :clauses (.c3822 .c3825) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3827 (resolution :clauses (.c3819 .c3826) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c5)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)))))
(set .c3828 (resolution :clauses (.c3818 .c3827) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)))))
(set .c3829 (resolution :clauses (.c3828 .c164 .c31) :conclusion ((= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)))))
(set .c3830 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)))))
(set .c3831 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c3832 (resolution :clauses (.c3830 .c3831) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c6 c_2)))))
(set .c3833 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3834 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3835 (resolution :clauses (.c3833 .c3834) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3836 (resolution :clauses (.c3832 .c3835) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3837 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c3838 (resolution :clauses (.c3836 .c3837) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3839 (resolution :clauses (.c3838 .c164) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f2 c4) (f1 c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3840 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_0) (f1 c_2)))))
(set .c3841 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c3842 (resolution :clauses (.c3840 .c3841) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c6 c_2)))))
(set .c3843 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3844 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3845 (resolution :clauses (.c3843 .c3844) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3846 (resolution :clauses (.c3842 .c3845) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3847 (resolution :clauses (.c3846 .c164) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f2 c_0) (f1 c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3848 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c5) (f1 c_2)))))
(set .c3849 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c3850 (resolution :clauses (.c3848 .c3849) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= c6 c_2)))))
(set .c3851 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))))))
(set .c3852 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c3853 (resolution :clauses (.c3851 .c3852) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3854 (resolution :clauses (.c3850 .c3853) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3855 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3856 (resolution :clauses (.c3854 .c3855) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3857 (resolution :clauses (.c3856 .c164) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f2 c5) (f1 c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c3858 (resolution :clauses (.c3811 .c234 .c3765 .c3158 .c3715 .c3378 .c2954 .c278 .c207 .c266 .c3817 .c3829 .c3839 .c3847 .c3857 .c189 .c173 .c179 .c3679 .c3669 .c3659 .c3651 .c262 .c1476 .c256 .c3680 .c171 .c93 .c11 .c3145 .c3141 .c309 .c1451 .c258 .c1739) :conclusion ((not (= c5 c_0)) (not (= (f1 c_2) c_2)) (= c_0 c7) (= c6 c_1) (= c4 c_2) (= c4 c_1))))
(set .c3859 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c3860 (eq_congruent :conclusion ((not (= (f2 c_0) c6)) (not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))))))
(set .c3861 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (= (f2 c_0) c6))))
(set .c3862 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c3863 (resolution :clauses (.c3861 .c3862) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (= (f2 c_0) c6) (not (= c4 c_2)))))
(set .c3864 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3865 (resolution :clauses (.c3863 .c3864) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (= (f2 c_0) c6) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c3866 (resolution :clauses (.c3860 .c3865) :conclusion ((not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c3867 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c3868 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c3869 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3870 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c3871 (resolution :clauses (.c3869 .c3870) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3872 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3873 (resolution :clauses (.c3871 .c3872) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c3874 (resolution :clauses (.c3868 .c3873) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3875 (resolution :clauses (.c3867 .c3874) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3876 (resolution :clauses (.c3866 .c3875) :conclusion ((= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c3877 (resolution :clauses (.c3859 .c3876) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c3878 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5)))))
(set .c3879 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c3880 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c3881 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3882 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c3883 (resolution :clauses (.c3881 .c3882) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3884 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3885 (resolution :clauses (.c3883 .c3884) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c3886 (resolution :clauses (.c3880 .c3885) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3887 (resolution :clauses (.c3879 .c3886) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3888 (resolution :clauses (.c3878 .c3887) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3889 (resolution :clauses (.c3877 .c3888) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c3890 (resolution :clauses (.c3889 .c31 .c165 .c34) :conclusion ((= c_0 (f3 c_1 c5)) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c3891 (eq_transitive :conclusion ((not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c3892 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c3893 (resolution :clauses (.c3891 .c3892) :conclusion ((not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)))))
(set .c3894 (eq_congruent :conclusion ((not (= c5 (f3 c4 c5))) (= (f2 c5) (f2 (f3 c4 c5))))))
(set .c3895 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c3896 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c3897 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3898 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c3899 (resolution :clauses (.c3897 .c3898) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3900 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3901 (resolution :clauses (.c3899 .c3900) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c3902 (resolution :clauses (.c3896 .c3901) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3903 (resolution :clauses (.c3895 .c3902) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3904 (resolution :clauses (.c3894 .c3903) :conclusion ((= (f2 c5) (f2 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3905 (resolution :clauses (.c3893 .c3904) :conclusion ((not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f1 c_2) c_2)))))
(set .c3906 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3907 (resolution :clauses (.c3905 .c3906) :conclusion ((not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f1 c_2) c_2)) (not (= c_1 c7)))))
(set .c3908 (eq_congruent :conclusion ((not (= c4 (f1 c_2))) (= (f2 c4) (f2 (f1 c_2))))))
(set .c3909 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (= c4 (f1 c_2)))))
(set .c3910 (resolution :clauses (.c3908 .c3909) :conclusion ((= (f2 c4) (f2 (f1 c_2))) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c3911 (resolution :clauses (.c3907 .c3910) :conclusion ((not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f1 c_2) c_2)) (not (= c_1 c7)))))
(set .c3912 (resolution :clauses (.c3911 .c166 .c91 .c165 .c31) :conclusion ((= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_2) c_2)) (not (= c_1 c7)))))
(set .c3913 (resolution :clauses (.c272 .c3890 .c3912 .c262 .c1476) :conclusion ((not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (= c_0 c7))))
(set .c3914 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c3915 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c3916 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c3917 (resolution :clauses (.c3915 .c3916) :conclusion ((not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c3918 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)))))
(set .c3919 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c3920 (resolution :clauses (.c3918 .c3919) :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)) (not (= c4 c_2)))))
(set .c3921 (eq_congruent :conclusion ((not (= c5 (f3 c4 c5))) (= (f2 c5) (f2 (f3 c4 c5))))))
(set .c3922 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c3923 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c3924 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3925 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c3926 (resolution :clauses (.c3924 .c3925) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3927 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3928 (resolution :clauses (.c3926 .c3927) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c3929 (resolution :clauses (.c3923 .c3928) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3930 (resolution :clauses (.c3922 .c3929) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3931 (resolution :clauses (.c3921 .c3930) :conclusion ((= (f2 c5) (f2 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3932 (resolution :clauses (.c3920 .c3931) :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c3933 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c3934 (resolution :clauses (.c3932 .c3933) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 c6)))))
(set .c3935 (resolution :clauses (.c3917 .c3934) :conclusion ((= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 c6)))))
(set .c3936 (resolution :clauses (.c3914 .c3935) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c3937 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_0) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c3938 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3939 (resolution :clauses (.c3937 .c3938) :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 (f3 c_1 c_0) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c3940 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)))))
(set .c3941 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c3942 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c3943 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c3944 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3945 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c3946 (resolution :clauses (.c3944 .c3945) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3947 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3948 (resolution :clauses (.c3946 .c3947) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c3949 (resolution :clauses (.c3943 .c3948) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3950 (resolution :clauses (.c3942 .c3949) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3951 (resolution :clauses (.c3941 .c3950) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3952 (resolution :clauses (.c3940 .c3951) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3953 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0)))))
(set .c3954 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c3955 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c3956 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3957 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c3958 (resolution :clauses (.c3956 .c3957) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3959 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3960 (resolution :clauses (.c3958 .c3959) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c3961 (resolution :clauses (.c3955 .c3960) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3962 (resolution :clauses (.c3954 .c3961) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3963 (resolution :clauses (.c3953 .c3962) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3964 (resolution :clauses (.c3952 .c3963) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c_1 c7)))))
(set .c3965 (resolution :clauses (.c3939 .c3964) :conclusion ((= (f3 (f3 c_1 c_0) c_1) (f3 (f3 c_0 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c_1 c7)))))
(set .c3966 (resolution :clauses (.c3936 .c3965) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))))))
(set .c3967 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) (f3 c_0 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1))))))
(set .c3968 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c3969 (resolution :clauses (.c3967 .c3968) :conclusion ((not (= (f1 c_1) (f3 c_0 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1))))))
(set .c3970 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_1) (f3 c_0 c_1)))))
(set .c3971 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c3972 (resolution :clauses (.c3970 .c3971) :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_1) (f3 c_0 c_1)) (not (= c4 c_2)))))
(set .c3973 (eq_congruent :conclusion ((not (= c5 (f3 c4 c5))) (= (f2 c5) (f2 (f3 c4 c5))))))
(set .c3974 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c3975 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c3976 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3977 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c3978 (resolution :clauses (.c3976 .c3977) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3979 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3980 (resolution :clauses (.c3978 .c3979) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c3981 (resolution :clauses (.c3975 .c3980) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3982 (resolution :clauses (.c3974 .c3981) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3983 (resolution :clauses (.c3973 .c3982) :conclusion ((= (f2 c5) (f2 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c3984 (resolution :clauses (.c3972 .c3983) :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_1) (f3 c_0 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c3985 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c3986 (resolution :clauses (.c3984 .c3985) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_1) (f3 c_0 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_1 c7)))))
(set .c3987 (resolution :clauses (.c3969 .c3986) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_1 c7)))))
(set .c3988 (resolution :clauses (.c3966 .c3987) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c3989 (resolution :clauses (.c3988 .c31 .c34 .c164 .c165 .c166 .c167 .c168 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= c_1 c7)) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c3990 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1))))
(set .c3991 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c3992 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c3993 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c3994 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3995 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c3996 (resolution :clauses (.c3994 .c3995) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c3997 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c3998 (resolution :clauses (.c3996 .c3997) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c3999 (resolution :clauses (.c3993 .c3998) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4000 (resolution :clauses (.c3992 .c3999) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4001 (resolution :clauses (.c3991 .c4000) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4002 (resolution :clauses (.c3990 .c4001) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4003 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5)))))
(set .c4004 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c4005 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4006 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4007 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4008 (resolution :clauses (.c4006 .c4007) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4009 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4010 (resolution :clauses (.c4008 .c4009) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4011 (resolution :clauses (.c4005 .c4010) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4012 (resolution :clauses (.c4004 .c4011) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4013 (resolution :clauses (.c4003 .c4012) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4014 (resolution :clauses (.c4002 .c4013) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c_1 c7)))))
(set .c4015 (resolution :clauses (.c4014 .c31 .c34 .c165) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c_1 c7)))))
(set .c4016 (resolution :clauses (.c4015 .c270 .c3308) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c4017 (eq_transitive :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2))))
(set .c4018 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c4019 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4020 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4021 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4022 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4023 (resolution :clauses (.c4021 .c4022) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4024 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4025 (resolution :clauses (.c4023 .c4024) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4026 (resolution :clauses (.c4020 .c4025) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4027 (resolution :clauses (.c4019 .c4026) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4028 (resolution :clauses (.c4018 .c4027) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4029 (resolution :clauses (.c4017 .c4028) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4030 (eq_congruent :conclusion ((not (= c7 (f3 c_0 c_1))) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_0 c_1) c_0)))))
(set .c4031 (eq_transitive :conclusion ((not (= c_1 c7)) (not (= c_1 (f3 c_0 c_1))) (= c7 (f3 c_0 c_1)))))
(set .c4032 (resolution :clauses (.c4030 .c4031) :conclusion ((not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_0 c_1) c_0)) (not (= c_1 c7)) (not (= c_1 (f3 c_0 c_1))))))
(set .c4033 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4034 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4035 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4036 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4037 (resolution :clauses (.c4035 .c4036) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4038 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4039 (resolution :clauses (.c4037 .c4038) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4040 (resolution :clauses (.c4034 .c4039) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4041 (resolution :clauses (.c4033 .c4040) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4042 (resolution :clauses (.c4032 .c4041) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f3 c_0 c_1) c_0)) (not (= c_1 c7)) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4043 (resolution :clauses (.c4029 .c4042) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c_1 c7)))))
(set .c4044 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0))))))
(set .c4045 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4046 (resolution :clauses (.c4044 .c4045) :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0))))))
(set .c4047 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)))))
(set .c4048 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c4049 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4050 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4051 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4052 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4053 (resolution :clauses (.c4051 .c4052) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4054 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4055 (resolution :clauses (.c4053 .c4054) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4056 (resolution :clauses (.c4050 .c4055) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4057 (resolution :clauses (.c4049 .c4056) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4058 (resolution :clauses (.c4048 .c4057) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4059 (resolution :clauses (.c4047 .c4058) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4060 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0)))))
(set .c4061 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4062 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4063 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4064 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4065 (resolution :clauses (.c4063 .c4064) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4066 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4067 (resolution :clauses (.c4065 .c4066) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4068 (resolution :clauses (.c4062 .c4067) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4069 (resolution :clauses (.c4061 .c4068) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4070 (resolution :clauses (.c4060 .c4069) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4071 (resolution :clauses (.c4059 .c4070) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c_1 c7)))))
(set .c4072 (resolution :clauses (.c4046 .c4071) :conclusion ((= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c_1 c7)))))
(set .c4073 (resolution :clauses (.c4043 .c4072) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c_1 c7)))))
(set .c4074 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c4075 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4076 (resolution :clauses (.c4074 .c4075) :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c4077 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)))))
(set .c4078 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c4079 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4080 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4081 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4082 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4083 (resolution :clauses (.c4081 .c4082) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4084 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4085 (resolution :clauses (.c4083 .c4084) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4086 (resolution :clauses (.c4080 .c4085) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4087 (resolution :clauses (.c4079 .c4086) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4088 (resolution :clauses (.c4078 .c4087) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4089 (resolution :clauses (.c4077 .c4088) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4090 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0)))))
(set .c4091 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4092 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4093 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4094 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4095 (resolution :clauses (.c4093 .c4094) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4096 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4097 (resolution :clauses (.c4095 .c4096) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4098 (resolution :clauses (.c4092 .c4097) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4099 (resolution :clauses (.c4091 .c4098) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4100 (resolution :clauses (.c4090 .c4099) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4101 (resolution :clauses (.c4089 .c4100) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c_1 c7)))))
(set .c4102 (resolution :clauses (.c4076 .c4101) :conclusion ((= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c_1 c7)))))
(set .c4103 (resolution :clauses (.c4073 .c4102) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c_1 c7)))))
(set .c4104 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_0 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0))))))
(set .c4105 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f3 c_0 c_0) (f1 c_1)))))
(set .c4106 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4107 (resolution :clauses (.c4105 .c4106) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f3 c_0 c_0) (f1 c_1)) (not (= c4 c_2)))))
(set .c4108 (eq_congruent :conclusion ((not (= c5 (f3 c4 c5))) (= (f2 c5) (f2 (f3 c4 c5))))))
(set .c4109 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c4110 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4111 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4112 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4113 (resolution :clauses (.c4111 .c4112) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4114 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4115 (resolution :clauses (.c4113 .c4114) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4116 (resolution :clauses (.c4110 .c4115) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4117 (resolution :clauses (.c4109 .c4116) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4118 (resolution :clauses (.c4108 .c4117) :conclusion ((= (f2 c5) (f2 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4119 (resolution :clauses (.c4107 .c4118) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f3 c_0 c_0) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c4120 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c4121 (resolution :clauses (.c4119 .c4120) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_0 c_0) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_1 c7)))))
(set .c4122 (resolution :clauses (.c4104 .c4121) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_1 c7)))))
(set .c4123 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c4124 (resolution :clauses (.c4122 .c4123) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_1 c7)))))
(set .c4125 (resolution :clauses (.c4103 .c4124) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c_1 c7)) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c4126 (resolution :clauses (.c4125 .c31 .c34 .c165 .c166 .c168) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c_1 c7)))))
(set .c4127 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)))))
(set .c4128 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c4129 (resolution :clauses (.c4127 .c4128) :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c_1 c7)))))
(set .c4130 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c4131 (resolution :clauses (.c4129 .c4130) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c4132 (resolution :clauses (.c4131 .c1739 .c164 .c166) :conclusion ((= (f1 c_0) (f2 c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c4133 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c_0) (f1 c_1)))))
(set .c4134 (eq_congruent :conclusion ((not (= c_0 (f3 c4 c5))) (= (f2 c_0) (f2 (f3 c4 c5))))))
(set .c4135 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4136 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4137 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4138 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4139 (resolution :clauses (.c4137 .c4138) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4140 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4141 (resolution :clauses (.c4139 .c4140) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4142 (resolution :clauses (.c4136 .c4141) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4143 (resolution :clauses (.c4135 .c4142) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4144 (resolution :clauses (.c4134 .c4143) :conclusion ((= (f2 c_0) (f2 (f3 c4 c5))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4145 (resolution :clauses (.c4133 .c4144) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c_0) (f1 c_1)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4146 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c4147 (resolution :clauses (.c4145 .c4146) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_1)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c_1 c7)))))
(set .c4148 (resolution :clauses (.c4147 .c165 .c166 .c31) :conclusion ((= (f2 c_0) (f1 c_1)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c_1 c7)))))
(set .c4149 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c4150 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4151 (resolution :clauses (.c4149 .c4150) :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_2)))))
(set .c4152 (eq_congruent :conclusion ((not (= c5 (f3 c4 c5))) (= (f2 c5) (f2 (f3 c4 c5))))))
(set .c4153 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c4154 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4155 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4156 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4157 (resolution :clauses (.c4155 .c4156) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4158 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4159 (resolution :clauses (.c4157 .c4158) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4160 (resolution :clauses (.c4154 .c4159) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4161 (resolution :clauses (.c4153 .c4160) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4162 (resolution :clauses (.c4152 .c4161) :conclusion ((= (f2 c5) (f2 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4163 (resolution :clauses (.c4151 .c4162) :conclusion ((not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c4164 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c4165 (resolution :clauses (.c4163 .c4164) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_1 c7)))))
(set .c4166 (resolution :clauses (.c4165 .c31 .c166 .c165) :conclusion ((not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c4167 (resolution :clauses (.c4126 .c226 .c4016 .c228 .c3989 .c3378 .c173 .c191 .c177 .c189 .c4132 .c4148 .c4166 .c272 .c3912 .c262) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (= (f3 c_0 c_0) c_0) (not (= (f2 c5) (f1 c_0))) (= c7 c_2) (not (= (f2 c_0) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5))) (= c_0 c7))))
(set .c4168 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c5) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c5)))))
(set .c4169 (eq_congruent :conclusion ((not (= (f2 c_0) c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)))))
(set .c4170 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4171 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4172 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4173 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4174 (resolution :clauses (.c4172 .c4173) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4175 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4176 (resolution :clauses (.c4174 .c4175) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4177 (resolution :clauses (.c4171 .c4176) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4178 (resolution :clauses (.c4170 .c4177) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4179 (resolution :clauses (.c4169 .c4178) :conclusion ((not (= (f2 c_0) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4180 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7))))
(set .c4181 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4182 (resolution :clauses (.c4180 .c4181) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7) (not (= c4 c_2)))))
(set .c4183 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4184 (resolution :clauses (.c4182 .c4183) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c4185 (resolution :clauses (.c4179 .c4184) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c7 c_2)))))
(set .c4186 (resolution :clauses (.c4168 .c4185) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c5) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c7 c_2)))))
(set .c4187 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c5 (f3 c4 c5))) (= (f3 c_0 c5) (f3 c6 (f3 c4 c5))))))
(set .c4188 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c4189 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4190 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4191 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4192 (resolution :clauses (.c4190 .c4191) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4193 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4194 (resolution :clauses (.c4192 .c4193) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4195 (resolution :clauses (.c4189 .c4194) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4196 (resolution :clauses (.c4188 .c4195) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4197 (resolution :clauses (.c4187 .c4196) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4198 (resolution :clauses (.c4186 .c4197) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c4199 (resolution :clauses (.c4198 .c31 .c34 .c165) :conclusion ((= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c4200 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c_0) (f1 c_0)))))
(set .c4201 (eq_congruent :conclusion ((not (= c_0 (f3 c4 c5))) (= (f2 c_0) (f2 (f3 c4 c5))))))
(set .c4202 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4203 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4204 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4205 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4206 (resolution :clauses (.c4204 .c4205) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4207 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4208 (resolution :clauses (.c4206 .c4207) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4209 (resolution :clauses (.c4203 .c4208) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4210 (resolution :clauses (.c4202 .c4209) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4211 (resolution :clauses (.c4201 .c4210) :conclusion ((= (f2 c_0) (f2 (f3 c4 c5))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4212 (resolution :clauses (.c4200 .c4211) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c_0) (f1 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4213 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c4214 (resolution :clauses (.c4212 .c4213) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c_0 c6)))))
(set .c4215 (resolution :clauses (.c4214 .c165 .c164 .c31) :conclusion ((= (f2 c_0) (f1 c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c6)))))
(set .c4216 (eq_transitive :conclusion ((not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c4217 (eq_congruent :conclusion ((not (= c5 (f3 c4 c5))) (= (f2 c5) (f2 (f3 c4 c5))))))
(set .c4218 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c4219 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4220 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4221 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4222 (resolution :clauses (.c4220 .c4221) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4223 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4224 (resolution :clauses (.c4222 .c4223) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4225 (resolution :clauses (.c4219 .c4224) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4226 (resolution :clauses (.c4218 .c4225) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4227 (resolution :clauses (.c4217 .c4226) :conclusion ((= (f2 c5) (f2 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4228 (resolution :clauses (.c4216 .c4227) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4229 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c4230 (resolution :clauses (.c4228 .c4229) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c_0 c6)))))
(set .c4231 (resolution :clauses (.c4230 .c31 .c165 .c164) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c6)))))
(set .c4232 (eq_transitive :conclusion ((not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (= (f2 c4) (f1 c_2)))))
(set .c4233 (eq_congruent :conclusion ((not (= c4 (f1 c_2))) (= (f2 c4) (f2 (f1 c_2))))))
(set .c4234 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (= c4 (f1 c_2)))))
(set .c4235 (resolution :clauses (.c4233 .c4234) :conclusion ((= (f2 c4) (f2 (f1 c_2))) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c4236 (resolution :clauses (.c4232 .c4235) :conclusion ((not (= (f2 (f1 c_2)) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c4237 (resolution :clauses (.c4236 .c91) :conclusion ((= (f2 c4) (f1 c_2)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c4238 (resolution :clauses (.c4199 .c4167 .c2954 .c171 .c275 .c4215 .c4231 .c256 .c3913 .c4237 .c2677 .c2663 .c3858 .c3146 .c2621) :conclusion ((not (= c5 c_0)) (not (= (f1 c_2) c_2)) (= c_0 c7))))
(set .c4239 (resolution :clauses (.c3007 .c228 .c288 .c3000 .c3065 .c2959 .c226 .c2993 .c2954 .c207 .c275 .c195 .c272 .c3133 .c3113 .c3097 .c3077 .c3105 .c3087 .c171 .c11 .c3145 .c309 .c258 .c2678 .c256 .c1476 .c1739) :conclusion ((not (= c5 c_0)) (not (= c7 c_2)) (not (= (f1 c_2) c_2)) (= c4 c_1) (= c_0 c6))))
(set .c4240 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 c_0 c_1))) (= c_0 (f3 c_0 c_1)))))
(set .c4241 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c4242 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c4243 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c4244 (resolution :clauses (.c4242 .c4243) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4245 (resolution :clauses (.c4241 .c4244) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4246 (resolution :clauses (.c4240 .c4245) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 c_0 c_1))) (= c_0 (f3 c_0 c_1)) (not (= c6 c_1)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4247 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c4248 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c4249 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4250 (resolution :clauses (.c4248 .c4249) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)))))
(set .c4251 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c4252 (resolution :clauses (.c4250 .c4251) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4253 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c4254 (resolution :clauses (.c4252 .c4253) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c4255 (resolution :clauses (.c4247 .c4254) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4256 (resolution :clauses (.c4246 .c4255) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 c_0 c_1))) (= c_0 (f3 c_0 c_1)) (not (= c6 c_1)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c4257 (resolution :clauses (.c4256 .c34 .c164 .c166 .c167 .c168) :conclusion ((not (= c_1 (f3 c_0 c_1))) (= c_0 (f3 c_0 c_1)) (not (= c6 c_1)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c4258 (resolution :clauses (.c288 .c3007 .c2959 .c226 .c4257) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c4 c_0)) (= (f3 c_0 c_0) c_0) (= c_0 (f3 c_0 c_1)) (not (= c6 c_1)) (not (= (f1 c_1) c_2)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c4259 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 (f3 c_1 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_1) c_1))))
(set .c4260 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) (f3 c_0 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1))))))
(set .c4261 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c4262 (resolution :clauses (.c4260 .c4261) :conclusion ((not (= (f1 c_1) (f3 c_0 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1))))))
(set .c4263 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_1) (f3 c_0 c_1)))))
(set .c4264 (resolution :clauses (.c4262 .c4263) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c4265 (resolution :clauses (.c4259 .c4264) :conclusion ((not (= (f3 c_1 c_1) (f3 (f3 c_1 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_1) c_1) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c4266 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_1)) (not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_0) c_1)))))
(set .c4267 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 c4))) (not (= c_1 (f3 c_1 c4))) (= (f3 c_1 c_0) c_1))))
(set .c4268 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_0)) (= (f3 c_1 c_0) (f3 c_1 c4)))))
(set .c4269 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c4270 (resolution :clauses (.c4268 .c4269) :conclusion ((not (= c4 c_0)) (= (f3 c_1 c_0) (f3 c_1 c4)))))
(set .c4271 (resolution :clauses (.c4267 .c4270) :conclusion ((not (= c_1 (f3 c_1 c4))) (= (f3 c_1 c_0) c_1) (not (= c4 c_0)))))
(set .c4272 (resolution :clauses (.c4266 .c4271) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_0) c_1)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)))))
(set .c4273 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c4274 (resolution :clauses (.c4272 .c4273) :conclusion ((= (f3 c_1 c_1) (f3 (f3 c_1 c_0) c_1)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)))))
(set .c4275 (resolution :clauses (.c4265 .c4274) :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_1) c_1) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)))))
(set .c4276 (resolution :clauses (.c4275 .c168) :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (= (f3 c_1 c_1) c_1) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c_1 (f3 c_1 c4))) (not (= c4 c_0)))))
(set .c4277 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c4278 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c4279 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c4280 (resolution :clauses (.c4278 .c4279) :conclusion ((not (= (f3 c_0 c_0) (f2 c_1))) (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c4281 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_0 c_0) (f2 c_1)))))
(set .c4282 (resolution :clauses (.c4280 .c4281) :conclusion ((= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c4283 (resolution :clauses (.c4277 .c4282) :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c4284 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c4285 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4286 (resolution :clauses (.c4284 .c4285) :conclusion ((not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c4287 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)))))
(set .c4288 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4289 (resolution :clauses (.c4287 .c4288) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)) (not (= c6 c_1)))))
(set .c4290 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c4291 (resolution :clauses (.c4289 .c4290) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c4292 (resolution :clauses (.c4286 .c4291) :conclusion ((= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c4293 (resolution :clauses (.c4283 .c4292) :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f3 c_0 c_1) c_2)))))
(set .c4294 (resolution :clauses (.c4293 .c1739 .c32 .c164 .c166 .c167 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c4295 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (= c_0 (f3 c_0 c_1)))))
(set .c4296 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c4297 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c4 c5) c_1))))
(set .c4298 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c4299 (resolution :clauses (.c4297 .c4298) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4300 (resolution :clauses (.c4296 .c4299) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4301 (resolution :clauses (.c4295 .c4300) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c_1)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4302 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c6)) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_0 c_0) c_1)))))
(set .c4303 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c4 c5) c_1))))
(set .c4304 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c4305 (resolution :clauses (.c4303 .c4304) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4306 (resolution :clauses (.c4302 .c4305) :conclusion ((not (= (f3 c_0 c_0) c6)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4307 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c6 c_1)) (= (f3 c_0 c_0) c6))))
(set .c4308 (resolution :clauses (.c4306 .c4307) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c4309 (resolution :clauses (.c4301 .c4308) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c_1)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c4310 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c4311 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4312 (resolution :clauses (.c4310 .c4311) :conclusion ((not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c4313 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)))))
(set .c4314 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4315 (resolution :clauses (.c4313 .c4314) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)) (not (= c6 c_1)))))
(set .c4316 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c4317 (resolution :clauses (.c4315 .c4316) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c4318 (resolution :clauses (.c4312 .c4317) :conclusion ((= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c4319 (resolution :clauses (.c4309 .c4318) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c_1)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c4320 (resolution :clauses (.c4319 .c34 .c164 .c166 .c167) :conclusion ((not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (= c_0 (f3 c_0 c_1)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c4321 (resolution :clauses (.c4320 .c226 .c4294 .c228 .c4258) :conclusion ((not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (= c_0 (f3 c_0 c_1)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= (f1 c_1) c_2)) (= (f3 c_0 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))))))
(set .c4322 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 c_0) (f3 c_0 (f3 c_0 c_1)))) (not (= (f3 c_0 c_0) c_2)) (= c_1 c_2))))
(set .c4323 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 c_0 (f3 c_0 c_1))))))
(set .c4324 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4325 (resolution :clauses (.c4323 .c4324) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 c_0 (f3 c_0 c_1))))))
(set .c4326 (resolution :clauses (.c4322 .c4325) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 c_0) c_2)) (= c_1 c_2) (not (= c_0 (f3 c_0 c_1))))))
(set .c4327 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c4328 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c4329 (resolution :clauses (.c4327 .c4328) :conclusion ((not (= (f3 c_0 c_0) (f2 c_1))) (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c4330 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_0 c_0) (f2 c_1)))))
(set .c4331 (resolution :clauses (.c4329 .c4330) :conclusion ((= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c4332 (resolution :clauses (.c4326 .c4331) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 c_0) c_2)) (= c_1 c_2) (not (= c_0 (f3 c_0 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c4333 (resolution :clauses (.c4332 .c9 .c1739 .c32) :conclusion ((not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 (f3 c_0 c_1))) (not (= (f1 c_1) c_2)))))
(set .c4334 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)))))
(set .c4335 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c5)))))
(set .c4336 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_2)) (= (f2 c_0) c_2))))
(set .c4337 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4338 (resolution :clauses (.c4336 .c4337) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (= (f2 c_0) c_2) (not (= c6 c_1)))))
(set .c4339 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c4340 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 c7)) (= c4 c7))))
(set .c4341 (resolution :clauses (.c4339 .c4340) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4342 (resolution :clauses (.c4338 .c4341) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (= (f2 c_0) c_2) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4343 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4344 (resolution :clauses (.c4342 .c4343) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (= (f2 c_0) c_2) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4345 (resolution :clauses (.c4335 .c4344) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4346 (resolution :clauses (.c4334 .c4345) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4347 (resolution :clauses (.c4346 .c165 .c164 .c31 .c166) :conclusion ((= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_2)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4348 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)))))
(set .c4349 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4350 (resolution :clauses (.c4348 .c4349) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)) (not (= c6 c_1)))))
(set .c4351 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c4352 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 c7)) (= c4 c7))))
(set .c4353 (resolution :clauses (.c4351 .c4352) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4354 (resolution :clauses (.c4350 .c4353) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4355 (resolution :clauses (.c4354 .c165 .c164 .c166) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4356 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c4) (f1 c_2)))))
(set .c4357 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4358 (resolution :clauses (.c4356 .c4357) :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c4) (f1 c_2)) (not (= c6 c_1)))))
(set .c4359 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c4360 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 c7)) (= c4 c7))))
(set .c4361 (resolution :clauses (.c4359 .c4360) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4362 (resolution :clauses (.c4358 .c4361) :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c4) (f1 c_2)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4363 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c4364 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c4 c_0)) (= c5 c4))))
(set .c4365 (resolution :clauses (.c4363 .c4364) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c4366 (resolution :clauses (.c4362 .c4365) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c4) (f1 c_2)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4367 (resolution :clauses (.c4366 .c166 .c165 .c164) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c4) (f1 c_2)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4368 (resolution :clauses (.c4333 .c226 .c3000 .c4321 .c2954 .c272 .c275 .c4347 .c4355 .c4367) :conclusion ((not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c5 c_0)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c6 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)))))
(set .c4369 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (= c4 c_2))))
(set .c4370 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c4371 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4372 (resolution :clauses (.c4370 .c4371) :conclusion ((not (= (f3 c_1 c_0) c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c4373 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c4374 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c4375 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4376 (resolution :clauses (.c4374 .c4375) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c4377 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c4378 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4379 (resolution :clauses (.c4377 .c4378) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c6 c_1)))))
(set .c4380 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c4381 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 c7)) (= c4 c7))))
(set .c4382 (resolution :clauses (.c4380 .c4381) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4383 (resolution :clauses (.c4379 .c4382) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4384 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4385 (resolution :clauses (.c4383 .c4384) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4386 (resolution :clauses (.c4376 .c4385) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4387 (resolution :clauses (.c4373 .c4386) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4388 (resolution :clauses (.c4372 .c4387) :conclusion ((= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4389 (resolution :clauses (.c4369 .c4388) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= c4 c_2) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4390 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c4391 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c4392 (resolution :clauses (.c4390 .c4391) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4393 (resolution :clauses (.c4389 .c4392) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= c4 c_2) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4394 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))))))
(set .c4395 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c4396 (resolution :clauses (.c4394 .c4395) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4397 (resolution :clauses (.c4393 .c4396) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= c4 c_2) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4398 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c5 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c5)))))
(set .c4399 (resolution :clauses (.c4397 .c4398) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= c4 c_2) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4400 (resolution :clauses (.c4399 .c31 .c34 .c164 .c165 .c166) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= c4 c_2) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4401 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1))))
(set .c4402 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c4403 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4404 (resolution :clauses (.c4402 .c4403) :conclusion ((not (= (f3 c_1 c_0) c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c4405 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c4406 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c4407 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4408 (resolution :clauses (.c4406 .c4407) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c4409 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c4410 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4411 (resolution :clauses (.c4409 .c4410) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c6 c_1)))))
(set .c4412 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c4413 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 c7)) (= c4 c7))))
(set .c4414 (resolution :clauses (.c4412 .c4413) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4415 (resolution :clauses (.c4411 .c4414) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4416 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4417 (resolution :clauses (.c4415 .c4416) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4418 (resolution :clauses (.c4408 .c4417) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4419 (resolution :clauses (.c4405 .c4418) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4420 (resolution :clauses (.c4404 .c4419) :conclusion ((= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4421 (resolution :clauses (.c4401 .c4420) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4422 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c4423 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c4424 (resolution :clauses (.c4422 .c4423) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4425 (resolution :clauses (.c4421 .c4424) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4426 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c4427 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c4428 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4429 (resolution :clauses (.c4427 .c4428) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)))))
(set .c4430 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c4431 (resolution :clauses (.c4429 .c4430) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4432 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c4433 (resolution :clauses (.c4431 .c4432) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c4434 (resolution :clauses (.c4426 .c4433) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4435 (resolution :clauses (.c4425 .c4434) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4436 (resolution :clauses (.c4435 .c31 .c34 .c164 .c165 .c166 .c167) :conclusion ((not (= c4 c_0)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4437 (eq_transitive :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_1 c_2))))
(set .c4438 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f1 (f3 c_0 c_0)) (f1 c_2)))))
(set .c4439 (resolution :clauses (.c4437 .c4438) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 c_2) c_2)) (= c_1 c_2) (not (= (f3 c_0 c_0) c_2)))))
(set .c4440 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c4441 (resolution :clauses (.c4439 .c4440) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 c_2) c_2)) (= c_1 c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)))))
(set .c4442 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4443 (resolution :clauses (.c4441 .c4442) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 c_2) c_2)) (= c_1 c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c4444 (resolution :clauses (.c4443 .c9 .c164 .c166) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c4445 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c4446 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)))))
(set .c4447 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c4448 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c4449 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 c7)) (= c4 c7))))
(set .c4450 (resolution :clauses (.c4448 .c4449) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4451 (resolution :clauses (.c4447 .c4450) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4452 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4453 (resolution :clauses (.c4451 .c4452) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c4454 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4455 (resolution :clauses (.c4453 .c4454) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= c5 c_0)))))
(set .c4456 (resolution :clauses (.c4446 .c4455) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c4457 (resolution :clauses (.c4445 .c4456) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c4458 (resolution :clauses (.c4457 .c165 .c164 .c31 .c166) :conclusion ((= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c4459 (resolution :clauses (.c4444 .c226 .c4436 .c2954 .c263 .c4458 .c252 .c4368 .c189 .c3123 .c3105 .c3087 .c173 .c171 .c93 .c11 .c3145 .c3141 .c1285 .c309) :conclusion ((not (= (f1 c_2) c_2)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= c4 c_0)) (= c4 c_1) (not (= c5 c_0)) (not (= (f1 c_0) (f2 c_1))))))
(set .c4460 (resolution :clauses (.c226 .c3000 .c4333) :conclusion ((= (f3 c_0 c_0) c_0) (not (= c_0 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f1 c_1) c_2)))))
(set .c4461 (eq_transitive :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2))))
(set .c4462 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c4463 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4464 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4465 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4466 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4467 (resolution :clauses (.c4465 .c4466) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4468 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4469 (resolution :clauses (.c4467 .c4468) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4470 (resolution :clauses (.c4464 .c4469) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4471 (resolution :clauses (.c4463 .c4470) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4472 (resolution :clauses (.c4462 .c4471) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4473 (resolution :clauses (.c4461 .c4472) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4474 (eq_congruent :conclusion ((not (= c6 (f3 c_0 c_1))) (not (= c_0 (f3 c4 c5))) (= (f3 (f3 c_0 c_1) c_0) (f3 c6 (f3 c4 c5))))))
(set .c4475 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 c_0 c_1))) (= c6 (f3 c_0 c_1)))))
(set .c4476 (resolution :clauses (.c4474 .c4475) :conclusion ((not (= c_0 (f3 c4 c5))) (= (f3 (f3 c_0 c_1) c_0) (f3 c6 (f3 c4 c5))) (not (= c6 c_1)) (not (= c_1 (f3 c_0 c_1))))))
(set .c4477 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4478 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4479 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4480 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4481 (resolution :clauses (.c4479 .c4480) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4482 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4483 (resolution :clauses (.c4481 .c4482) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4484 (resolution :clauses (.c4478 .c4483) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4485 (resolution :clauses (.c4477 .c4484) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4486 (resolution :clauses (.c4476 .c4485) :conclusion ((= (f3 (f3 c_0 c_1) c_0) (f3 c6 (f3 c4 c5))) (not (= c6 c_1)) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4487 (resolution :clauses (.c4473 .c4486) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c6 c_1)))))
(set .c4488 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0))))))
(set .c4489 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4490 (resolution :clauses (.c4488 .c4489) :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0))))))
(set .c4491 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)))))
(set .c4492 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c4493 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4494 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4495 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4496 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4497 (resolution :clauses (.c4495 .c4496) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4498 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4499 (resolution :clauses (.c4497 .c4498) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4500 (resolution :clauses (.c4494 .c4499) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4501 (resolution :clauses (.c4493 .c4500) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4502 (resolution :clauses (.c4492 .c4501) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4503 (resolution :clauses (.c4491 .c4502) :conclusion ((not (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c7)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4504 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c_0 (f3 c4 c5))) (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5))))))
(set .c4505 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4506 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4507 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4508 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4509 (resolution :clauses (.c4507 .c4508) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4510 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4511 (resolution :clauses (.c4509 .c4510) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4512 (resolution :clauses (.c4506 .c4511) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4513 (resolution :clauses (.c4505 .c4512) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4514 (resolution :clauses (.c4504 .c4513) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4515 (resolution :clauses (.c4503 .c4514) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c7)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c6 c_1)))))
(set .c4516 (resolution :clauses (.c4490 .c4515) :conclusion ((= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c7)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c6 c_1)))))
(set .c4517 (resolution :clauses (.c4487 .c4516) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c6 c_1)))))
(set .c4518 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c4519 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4520 (resolution :clauses (.c4518 .c4519) :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c4521 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)))))
(set .c4522 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c4523 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4524 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4525 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4526 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4527 (resolution :clauses (.c4525 .c4526) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4528 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4529 (resolution :clauses (.c4527 .c4528) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4530 (resolution :clauses (.c4524 .c4529) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4531 (resolution :clauses (.c4523 .c4530) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4532 (resolution :clauses (.c4522 .c4531) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4533 (resolution :clauses (.c4521 .c4532) :conclusion ((not (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c7)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4534 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c_0 (f3 c4 c5))) (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5))))))
(set .c4535 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4536 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4537 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4538 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4539 (resolution :clauses (.c4537 .c4538) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4540 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4541 (resolution :clauses (.c4539 .c4540) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4542 (resolution :clauses (.c4536 .c4541) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4543 (resolution :clauses (.c4535 .c4542) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4544 (resolution :clauses (.c4534 .c4543) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4545 (resolution :clauses (.c4533 .c4544) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c7)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c6 c_1)))))
(set .c4546 (resolution :clauses (.c4520 .c4545) :conclusion ((= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c7)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c6 c_1)))))
(set .c4547 (resolution :clauses (.c4517 .c4546) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c6 c_1)))))
(set .c4548 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_0 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0))))))
(set .c4549 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f3 c_0 c_0) (f1 c_1)))))
(set .c4550 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4551 (resolution :clauses (.c4549 .c4550) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f3 c_0 c_0) (f1 c_1)) (not (= c4 c_2)))))
(set .c4552 (eq_congruent :conclusion ((not (= c5 (f3 c4 c5))) (= (f2 c5) (f2 (f3 c4 c5))))))
(set .c4553 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c4554 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4555 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4556 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4557 (resolution :clauses (.c4555 .c4556) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4558 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4559 (resolution :clauses (.c4557 .c4558) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4560 (resolution :clauses (.c4554 .c4559) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4561 (resolution :clauses (.c4553 .c4560) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4562 (resolution :clauses (.c4552 .c4561) :conclusion ((= (f2 c5) (f2 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4563 (resolution :clauses (.c4551 .c4562) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f3 c_0 c_0) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c4564 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4565 (resolution :clauses (.c4563 .c4564) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_0 c_0) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c6 c_1)))))
(set .c4566 (resolution :clauses (.c4548 .c4565) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c6 c_1)))))
(set .c4567 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c4568 (resolution :clauses (.c4566 .c4567) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c6 c_1)))))
(set .c4569 (resolution :clauses (.c4547 .c4568) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c6 c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c4570 (resolution :clauses (.c4569 .c31 .c34 .c164 .c165 .c168) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c6 c_1)))))
(set .c4571 (eq_transitive :conclusion ((not (= (f3 c_1 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1))))
(set .c4572 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c4573 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4574 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4575 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4576 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4577 (resolution :clauses (.c4575 .c4576) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4578 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4579 (resolution :clauses (.c4577 .c4578) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4580 (resolution :clauses (.c4574 .c4579) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4581 (resolution :clauses (.c4573 .c4580) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4582 (resolution :clauses (.c4572 .c4581) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4583 (resolution :clauses (.c4571 .c4582) :conclusion ((not (= (f3 c_1 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1) (not (= c_0 c7)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4584 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c5 (f3 c4 c5))) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))))))
(set .c4585 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c4586 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4587 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4588 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4589 (resolution :clauses (.c4587 .c4588) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4590 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4591 (resolution :clauses (.c4589 .c4590) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4592 (resolution :clauses (.c4586 .c4591) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4593 (resolution :clauses (.c4585 .c4592) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4594 (resolution :clauses (.c4584 .c4593) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4595 (resolution :clauses (.c4583 .c4594) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1) (not (= c_0 c7)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c6 c_1)))))
(set .c4596 (resolution :clauses (.c4595 .c31 .c34 .c165) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c6 c_1)))))
(set .c4597 (resolution :clauses (.c4596 .c270 .c3308) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c6 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c4598 (eq_transitive :conclusion ((not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c4599 (eq_congruent :conclusion ((not (= c5 (f3 c4 c5))) (= (f2 c5) (f2 (f3 c4 c5))))))
(set .c4600 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c4601 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4602 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4603 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4604 (resolution :clauses (.c4602 .c4603) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4605 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4606 (resolution :clauses (.c4604 .c4605) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4607 (resolution :clauses (.c4601 .c4606) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4608 (resolution :clauses (.c4600 .c4607) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4609 (resolution :clauses (.c4599 .c4608) :conclusion ((= (f2 c5) (f2 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4610 (resolution :clauses (.c4598 .c4609) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4611 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c4612 (resolution :clauses (.c4610 .c4611) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_0)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c_0 c7)))))
(set .c4613 (resolution :clauses (.c4612 .c31 .c166 .c165) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c7)))))
(set .c4614 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c_0) (f1 c_1)))))
(set .c4615 (eq_congruent :conclusion ((not (= c_0 (f3 c4 c5))) (= (f2 c_0) (f2 (f3 c4 c5))))))
(set .c4616 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4617 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4618 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4619 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4620 (resolution :clauses (.c4618 .c4619) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4621 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4622 (resolution :clauses (.c4620 .c4621) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4623 (resolution :clauses (.c4617 .c4622) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4624 (resolution :clauses (.c4616 .c4623) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4625 (resolution :clauses (.c4615 .c4624) :conclusion ((= (f2 c_0) (f2 (f3 c4 c5))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4626 (resolution :clauses (.c4614 .c4625) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c_0) (f1 c_1)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4627 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4628 (resolution :clauses (.c4626 .c4627) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_1)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= c6 c_1)))))
(set .c4629 (resolution :clauses (.c4628 .c165 .c164 .c31) :conclusion ((= (f2 c_0) (f1 c_1)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c6 c_1)))))
(set .c4630 (eq_transitive :conclusion ((not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)))))
(set .c4631 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4632 (resolution :clauses (.c4630 .c4631) :conclusion ((not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)))))
(set .c4633 (eq_congruent :conclusion ((not (= c5 (f3 c4 c5))) (= (f2 c5) (f2 (f3 c4 c5))))))
(set .c4634 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c4635 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4636 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4637 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4638 (resolution :clauses (.c4636 .c4637) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4639 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4640 (resolution :clauses (.c4638 .c4639) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4641 (resolution :clauses (.c4635 .c4640) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4642 (resolution :clauses (.c4634 .c4641) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4643 (resolution :clauses (.c4633 .c4642) :conclusion ((= (f2 c5) (f2 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4644 (resolution :clauses (.c4632 .c4643) :conclusion ((not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f1 c_2) c_2)))))
(set .c4645 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4646 (resolution :clauses (.c4644 .c4645) :conclusion ((not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f1 c_2) c_2)) (not (= c6 c_1)))))
(set .c4647 (eq_congruent :conclusion ((not (= c4 (f1 c_2))) (= (f2 c4) (f2 (f1 c_2))))))
(set .c4648 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (= c4 (f1 c_2)))))
(set .c4649 (resolution :clauses (.c4647 .c4648) :conclusion ((= (f2 c4) (f2 (f1 c_2))) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c4650 (resolution :clauses (.c4646 .c4649) :conclusion ((not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f1 c_2) c_2)) (not (= c6 c_1)))))
(set .c4651 (resolution :clauses (.c4650 .c165 .c91 .c164 .c31) :conclusion ((= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_2) c_2)) (not (= c6 c_1)))))
(set .c4652 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c4653 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4654 (resolution :clauses (.c4652 .c4653) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_2)))))
(set .c4655 (eq_congruent :conclusion ((not (= c5 (f3 c4 c5))) (= (f2 c5) (f2 (f3 c4 c5))))))
(set .c4656 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c4657 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4658 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4659 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4660 (resolution :clauses (.c4658 .c4659) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4661 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4662 (resolution :clauses (.c4660 .c4661) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4663 (resolution :clauses (.c4657 .c4662) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4664 (resolution :clauses (.c4656 .c4663) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4665 (resolution :clauses (.c4655 .c4664) :conclusion ((= (f2 c5) (f2 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4666 (resolution :clauses (.c4654 .c4665) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c4667 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4668 (resolution :clauses (.c4666 .c4667) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c6 c_1)))))
(set .c4669 (resolution :clauses (.c4668 .c31 .c165 .c164) :conclusion ((not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c4670 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)))))
(set .c4671 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c4672 (resolution :clauses (.c4670 .c4671) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c6 c_1)))))
(set .c4673 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c4674 (resolution :clauses (.c4672 .c4673) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c4675 (resolution :clauses (.c4674 .c1739 .c164 .c166) :conclusion ((= (f1 c_0) (f2 c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c4676 (resolution :clauses (.c228 .c4570 .c4294 .c226 .c4597 .c4460 .c2954 .c275 .c177 .c189 .c272 .c4613 .c4629 .c4651 .c4669 .c173 .c171 .c403 .c4237 .c2677 .c2663 .c258 .c4459 .c4675) :conclusion ((not (= c_0 c7)) (not (= c5 c_0)) (not (= (f1 c_2) c_2)) (not (= c6 c_1)) (= c_0 c6) (= c4 c_1))))
(set .c4677 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c4678 (eq_congruent :conclusion ((not (= (f2 c_0) c6)) (not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))))))
(set .c4679 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (= (f2 c_0) c6))))
(set .c4680 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4681 (resolution :clauses (.c4679 .c4680) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (= (f2 c_0) c6) (not (= c4 c_2)))))
(set .c4682 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4683 (resolution :clauses (.c4681 .c4682) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (= (f2 c_0) c6) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c4684 (resolution :clauses (.c4678 .c4683) :conclusion ((not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c4685 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4686 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4687 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4688 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4689 (resolution :clauses (.c4687 .c4688) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4690 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4691 (resolution :clauses (.c4689 .c4690) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4692 (resolution :clauses (.c4686 .c4691) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4693 (resolution :clauses (.c4685 .c4692) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4694 (resolution :clauses (.c4684 .c4693) :conclusion ((= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c4695 (resolution :clauses (.c4677 .c4694) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c4696 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5)))))
(set .c4697 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c4698 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4699 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4700 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c4701 (resolution :clauses (.c4699 .c4700) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4702 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4703 (resolution :clauses (.c4701 .c4702) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4704 (resolution :clauses (.c4698 .c4703) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4705 (resolution :clauses (.c4697 .c4704) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4706 (resolution :clauses (.c4696 .c4705) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c4707 (resolution :clauses (.c4695 .c4706) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c4708 (resolution :clauses (.c4707 .c31 .c34 .c165) :conclusion ((= c_0 (f3 c_0 c5)) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c4709 (resolution :clauses (.c4708 .c275 .c4613 .c4237 .c2663) :conclusion ((not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c4710 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c4711 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= c5 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c5)))))
(set .c4712 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0))))
(set .c4713 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c4714 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4715 (resolution :clauses (.c4713 .c4714) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c4716 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c4717 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c4718 (resolution :clauses (.c4716 .c4717) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)))))
(set .c4719 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c4720 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 c7)) (= c4 c7))))
(set .c4721 (resolution :clauses (.c4719 .c4720) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4722 (resolution :clauses (.c4718 .c4721) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4723 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4724 (resolution :clauses (.c4722 .c4723) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4725 (resolution :clauses (.c4715 .c4724) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4726 (resolution :clauses (.c4712 .c4725) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4727 (resolution :clauses (.c4711 .c4726) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c5)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4728 (resolution :clauses (.c4710 .c4727) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4729 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c4730 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c4731 (resolution :clauses (.c4729 .c4730) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4732 (resolution :clauses (.c4728 .c4731) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4733 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c4734 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c4735 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c4736 (resolution :clauses (.c4734 .c4735) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4737 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c4738 (resolution :clauses (.c4736 .c4737) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c4739 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c4740 (resolution :clauses (.c4738 .c4739) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c4741 (resolution :clauses (.c4733 .c4740) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c4742 (resolution :clauses (.c4732 .c4741) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_2)))))
(set .c4743 (resolution :clauses (.c4742 .c31 .c34 .c164 .c165 .c166 .c167) :conclusion ((not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_2)))))
(set .c4744 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)))))
(set .c4745 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)))))
(set .c4746 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4747 (resolution :clauses (.c4745 .c4746) :conclusion ((not (= (f3 c_2 c_0) c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)))))
(set .c4748 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0))))
(set .c4749 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c4750 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4751 (resolution :clauses (.c4749 .c4750) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c4752 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c4753 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c4754 (resolution :clauses (.c4752 .c4753) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)))))
(set .c4755 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c4756 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 c7)) (= c4 c7))))
(set .c4757 (resolution :clauses (.c4755 .c4756) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4758 (resolution :clauses (.c4754 .c4757) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c4759 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4760 (resolution :clauses (.c4758 .c4759) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4761 (resolution :clauses (.c4751 .c4760) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4762 (resolution :clauses (.c4748 .c4761) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4763 (resolution :clauses (.c4747 .c4762) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4764 (resolution :clauses (.c4744 .c4763) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4765 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c4766 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c4767 (resolution :clauses (.c4765 .c4766) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4768 (resolution :clauses (.c4764 .c4767) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4769 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))))))
(set .c4770 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c4771 (resolution :clauses (.c4769 .c4770) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c4772 (resolution :clauses (.c4768 .c4771) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4773 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c4 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c4)))))
(set .c4774 (resolution :clauses (.c4772 .c4773) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c_1 (f3 c_1 c4)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4775 (resolution :clauses (.c4774 .c31 .c34 .c164 .c165 .c166) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c_1 (f3 c_1 c4)) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c4776 (resolution :clauses (.c4775 .c288 .c3273 .c2959 .c226 .c4743 .c2954 .c207 .c275 .c3847 .c3839 .c3829 .c171 .c93 .c11 .c3145 .c309 .c258 .c4709 .c256 .c4676) :conclusion ((not (= (f1 c_2) c_2)) (not (= c_0 c7)) (not (= c5 c_0)) (= c4 c_1) (= c_0 c6))))
(set .c4777 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c4778 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c4779 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4780 (resolution :clauses (.c4778 .c4779) :conclusion ((not (= (f2 c_0) (f3 c_0 c_1))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c4781 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)))))
(set .c4782 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c4783 (resolution :clauses (.c4781 .c4782) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)) (not (= c4 c_1)))))
(set .c4784 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c4785 (resolution :clauses (.c4783 .c4784) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c4786 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c4787 (resolution :clauses (.c4785 .c4786) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c4788 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4789 (resolution :clauses (.c4787 .c4788) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_0)))))
(set .c4790 (resolution :clauses (.c4780 .c4789) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_0)))))
(set .c4791 (resolution :clauses (.c4777 .c4790) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_0)))))
(set .c4792 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c4793 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c4794 (resolution :clauses (.c4792 .c4793) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c4795 (resolution :clauses (.c4791 .c4794) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_0)))))
(set .c4796 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c4797 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c4798 (resolution :clauses (.c4796 .c4797) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c4799 (resolution :clauses (.c4795 .c4798) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_0)))))
(set .c4800 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= c5 c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5)))))
(set .c4801 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c4802 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c4803 (eq_transitive :conclusion ((not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c4804 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c4805 (resolution :clauses (.c4803 .c4804) :conclusion ((not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c_0 c7)))))
(set .c4806 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c4807 (resolution :clauses (.c4805 .c4806) :conclusion ((not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c4808 (resolution :clauses (.c4802 .c4807) :conclusion ((not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c4809 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c4810 (resolution :clauses (.c4808 .c4809) :conclusion ((= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c4811 (resolution :clauses (.c4801 .c4810) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c4812 (resolution :clauses (.c4800 .c4811) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_1 c5)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c4813 (resolution :clauses (.c4799 .c4812) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_0)) (not (= c_1 (f3 (f2 c_1) c_1))))))
(set .c4814 (resolution :clauses (.c4813 .c1739 .c31 .c32 .c34 .c164 .c165 .c166) :conclusion ((not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (= c_0 (f3 c_1 c5)) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_0)))))
(set .c4815 (resolution :clauses (.c4814 .c228 .c4460 .c2954 .c252 .c275 .c278 .c753 .c421 .c1344 .c213 .c294 .c297 .c238 .c443 .c2059 .c2031 .c1933 .c1915 .c472) :conclusion ((not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_0)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f2 c_0) (f1 c_1))) (not (= (f2 (f3 c_1 c_0)) (f2 c_1))))))
(set .c4816 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_0 c5) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)))))
(set .c4817 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c4818 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4819 (resolution :clauses (.c4817 .c4818) :conclusion ((not (= (f2 c_0) (f3 c_0 c_1))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c4820 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)))))
(set .c4821 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c4822 (resolution :clauses (.c4820 .c4821) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)) (not (= c4 c_1)))))
(set .c4823 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4824 (resolution :clauses (.c4822 .c4823) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_0) (f3 c_0 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c4825 (resolution :clauses (.c4819 .c4824) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c4826 (resolution :clauses (.c4816 .c4825) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_0 c5) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c4827 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c4828 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c4829 (resolution :clauses (.c4827 .c4828) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c4830 (resolution :clauses (.c4826 .c4829) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_0 c5) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c4831 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c4832 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c4833 (resolution :clauses (.c4831 .c4832) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c4834 (resolution :clauses (.c4830 .c4833) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_0 c5) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c4835 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c5 c_0)) (= (f3 c_0 c5) (f3 (f3 c_1 c_1) c_0)))))
(set .c4836 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 c_1 c_1) c_0))))
(set .c4837 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c4838 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4839 (resolution :clauses (.c4837 .c4838) :conclusion ((not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c4840 (eq_transitive :conclusion ((not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)))))
(set .c4841 (resolution :clauses (.c4839 .c4840) :conclusion ((= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c4842 (resolution :clauses (.c4836 .c4841) :conclusion ((not (= (f3 c_1 c_1) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 c_1 c_1) c_0) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c4843 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c4844 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c4845 (resolution :clauses (.c4843 .c4844) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c4846 (resolution :clauses (.c4842 .c4845) :conclusion ((not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 c_1 c_1) c_0) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c4847 (resolution :clauses (.c4835 .c4846) :conclusion ((not (= c5 c_0)) (= (f3 c_0 c5) (f3 (f3 c_1 c_1) c_0)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c4848 (resolution :clauses (.c4834 .c4847) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c_0 c_0) c_1)))))
(set .c4849 (resolution :clauses (.c4848 .c1739 .c31 .c34 .c165 .c167) :conclusion ((not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f3 c_0 c_0) c_1)))))
(set .c4850 (resolution :clauses (.c4849 .c226 .c4294 .c228 .c4460 .c753 .c2954 .c294 .c275 .c278 .c2130 .c2126 .c2120) :conclusion ((not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f1 c_0) (f2 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f1 c_2) c_2)))))
(set .c4851 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)))))
(set .c4852 (eq_congruent :conclusion ((not (= (f2 c_1) c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c4853 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c4854 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c4855 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c4856 (resolution :clauses (.c4854 .c4855) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c4857 (resolution :clauses (.c4853 .c4856) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c4858 (resolution :clauses (.c4852 .c4857) :conclusion ((not (= (f2 c_1) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c4859 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_1) c7))))
(set .c4860 (resolution :clauses (.c4858 .c4859) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)))))
(set .c4861 (resolution :clauses (.c4851 .c4860) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)))))
(set .c4862 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c4 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4)))))
(set .c4863 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c4864 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c4865 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c4866 (resolution :clauses (.c4864 .c4865) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c4867 (resolution :clauses (.c4863 .c4866) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c4 (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c4868 (resolution :clauses (.c4862 .c4867) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c4869 (resolution :clauses (.c4861 .c4868) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_1 (f3 c_1 c4)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c4870 (resolution :clauses (.c4869 .c1739 .c32 .c34 .c168) :conclusion ((= c_1 (f3 c_1 c4)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c4871 (resolution :clauses (.c4870 .c288 .c2436) :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c4872 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c4873 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c4874 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4875 (resolution :clauses (.c4873 .c4874) :conclusion ((not (= (f2 c_0) (f3 c_1 c_1))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c4876 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1))) (= (f2 c_0) (f3 c_1 c_1)))))
(set .c4877 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c4878 (resolution :clauses (.c4876 .c4877) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1))) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)))))
(set .c4879 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1)))))
(set .c4880 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c4881 (resolution :clauses (.c4879 .c4880) :conclusion ((not (= (f1 c_1) c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1)))))
(set .c4882 (resolution :clauses (.c4878 .c4881) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)))))
(set .c4883 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4884 (resolution :clauses (.c4882 .c4883) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f2 c_0) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c4885 (resolution :clauses (.c4875 .c4884) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c4886 (resolution :clauses (.c4872 .c4885) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c4887 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c4888 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c4889 (resolution :clauses (.c4887 .c4888) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c4890 (resolution :clauses (.c4886 .c4889) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c4891 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5)))))
(set .c4892 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c4893 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c4894 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4895 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c4896 (resolution :clauses (.c4894 .c4895) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c4897 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4898 (resolution :clauses (.c4896 .c4897) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c4899 (resolution :clauses (.c4893 .c4898) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c4900 (resolution :clauses (.c4892 .c4899) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c4901 (resolution :clauses (.c4891 .c4900) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c4902 (resolution :clauses (.c4890 .c4901) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c4903 (resolution :clauses (.c4902 .c31 .c34 .c165 .c168) :conclusion ((not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_0 c5)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c4904 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (= (f2 c_0) (f1 c_0)))))
(set .c4905 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c4906 (resolution :clauses (.c4904 .c4905) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (= (f2 c_0) (f1 c_0)) (not (= c4 c_1)))))
(set .c4907 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c4908 (resolution :clauses (.c4906 .c4907) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (= (f2 c_0) (f1 c_0)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c4909 (resolution :clauses (.c4908 .c1739 .c165) :conclusion ((not (= (f1 c_0) (f2 c_1))) (= (f2 c_0) (f1 c_0)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c4910 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (= (f2 c4) (f1 c_0)))))
(set .c4911 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f2 c4) (f2 c_1)))))
(set .c4912 (resolution :clauses (.c4910 .c4911) :conclusion ((not (= (f1 c_0) (f2 c_1))) (= (f2 c4) (f1 c_0)) (not (= c4 c_1)))))
(set .c4913 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (= (f2 c5) (f1 c_0)))))
(set .c4914 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c4915 (resolution :clauses (.c4913 .c4914) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (= (f2 c5) (f1 c_0)) (not (= c4 c_1)))))
(set .c4916 (resolution :clauses (.c4915 .c1739 .c165) :conclusion ((not (= (f1 c_0) (f2 c_1))) (= (f2 c5) (f1 c_0)) (not (= c4 c_1)))))
(set .c4917 (resolution :clauses (.c4903 .c263 .c2173 .c252 .c4871 .c4850 .c256 .c4815 .c173 .c171 .c4909 .c4912 .c4916 .c177 .c195 .c17 .c344 .c2620 .c343 .c476 .c4776 .c303 .c4238 .c1739) :conclusion ((not (= c5 c_0)) (not (= (f1 c_2) c_2)))))
(set .c4918 (eq_transitive :conclusion ((not (= c_0 (f3 c_1 c5))) (not (= (f3 c_1 c5) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)))))
(set .c4919 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 c4)) (= (f3 c_1 c5) (f3 c_1 c4)))))
(set .c4920 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c4921 (resolution :clauses (.c4919 .c4920) :conclusion ((not (= c5 c4)) (= (f3 c_1 c5) (f3 c_1 c4)))))
(set .c4922 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c4 c_1)) (= c5 c4))))
(set .c4923 (resolution :clauses (.c4921 .c4922) :conclusion ((= (f3 c_1 c5) (f3 c_1 c4)) (not (= c5 c_1)) (not (= c4 c_1)))))
(set .c4924 (resolution :clauses (.c4918 .c4923) :conclusion ((not (= c_0 (f3 c_1 c5))) (= c_0 (f3 c_1 c4)) (not (= c5 c_1)) (not (= c4 c_1)))))
(set .c4925 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c4926 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c4927 (resolution :clauses (.c4925 .c4926) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_1)))))
(set .c4928 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c4929 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c4930 (resolution :clauses (.c4928 .c4929) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c4931 (resolution :clauses (.c4927 .c4930) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c4932 (resolution :clauses (.c4931 .c91 .c165) :conclusion ((not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c4933 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c_0 c5) (f3 c_0 c_1))) (= c_0 (f3 c_0 c5)))))
(set .c4934 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c_1)) (= (f3 c_0 c5) (f3 c_0 c_1)))))
(set .c4935 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4936 (resolution :clauses (.c4934 .c4935) :conclusion ((not (= c5 c_1)) (= (f3 c_0 c5) (f3 c_0 c_1)))))
(set .c4937 (resolution :clauses (.c4933 .c4936) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= c_0 (f3 c_0 c5)) (not (= c5 c_1)))))
(set .c4938 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c4939 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c4940 (eq_transitive :conclusion ((not (= c_0 (f3 c_1 c5))) (not (= (f3 c_1 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4941 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c5)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c4942 (eq_reflexive :conclusion ((= c5 c5))))
(set .c4943 (resolution :clauses (.c4941 .c4942) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c4944 (resolution :clauses (.c4940 .c4943) :conclusion ((not (= c_0 (f3 c_1 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_1)))))
(set .c4945 (resolution :clauses (.c4939 .c4944) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c4946 (resolution :clauses (.c4938 .c4945) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c4947 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1))))))
(set .c4948 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c4949 (resolution :clauses (.c4947 .c4948) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c4950 (resolution :clauses (.c4946 .c4949) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c5 c_1)))))
(set .c4951 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c5 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c5)))))
(set .c4952 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 c_1 c5))) (not (= c_0 (f3 c_1 c5))) (= (f3 c_1 c_1) c_0))))
(set .c4953 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c4954 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c4955 (resolution :clauses (.c4953 .c4954) :conclusion ((not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c4956 (resolution :clauses (.c4952 .c4955) :conclusion ((not (= c_0 (f3 c_1 c5))) (= (f3 c_1 c_1) c_0) (not (= c5 c_1)))))
(set .c4957 (resolution :clauses (.c4951 .c4956) :conclusion ((not (= c5 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c5)) (not (= c_0 (f3 c_1 c5))))))
(set .c4958 (resolution :clauses (.c4950 .c4957) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c5 c_1)))))
(set .c4959 (resolution :clauses (.c4958 .c34 .c1742) :conclusion ((not (= (f3 c_0 c_0) c_0)) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c5 c_1)))))
(set .c4960 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 c5))) (not (= c_0 (f3 c_1 c5))) (= c5 c_0))))
(set .c4961 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_1 c_1) c_0)))))
(set .c4962 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 c_1 c5))) (not (= c_0 (f3 c_1 c5))) (= (f3 c_1 c_1) c_0))))
(set .c4963 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c4964 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c4965 (resolution :clauses (.c4963 .c4964) :conclusion ((not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c4966 (resolution :clauses (.c4962 .c4965) :conclusion ((not (= c_0 (f3 c_1 c5))) (= (f3 c_1 c_1) c_0) (not (= c5 c_1)))))
(set .c4967 (resolution :clauses (.c4961 .c4966) :conclusion ((not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_1 c_1) c_0)) (not (= c_0 (f3 c_1 c5))) (not (= c5 c_1)))))
(set .c4968 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c4969 (resolution :clauses (.c4967 .c4968) :conclusion ((= (f3 c_0 c_0) (f3 (f3 c_1 c_1) c_0)) (not (= c_0 (f3 c_1 c5))) (not (= c5 c_1)))))
(set .c4970 (resolution :clauses (.c4960 .c4969) :conclusion ((not (= c5 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 c5))) (not (= c_0 (f3 c_1 c5))) (= c5 c_0))))
(set .c4971 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 (f3 c_1 c_0))) (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 c5)))))
(set .c4972 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5)))) (= c5 (f3 c_1 c_0)))))
(set .c4973 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c4974 (eq_transitive :conclusion ((not (= c_0 (f3 c_1 c5))) (not (= (f3 c_1 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4975 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c5)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c4976 (eq_reflexive :conclusion ((= c5 c5))))
(set .c4977 (resolution :clauses (.c4975 .c4976) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c4978 (resolution :clauses (.c4974 .c4977) :conclusion ((not (= c_0 (f3 c_1 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_1)))))
(set .c4979 (resolution :clauses (.c4973 .c4978) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c4980 (resolution :clauses (.c4972 .c4979) :conclusion ((not (= c5 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5)))) (= c5 (f3 c_1 c_0)) (not (= c_0 c7)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c4981 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c_0 (f3 c4 c5))) (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5))))))
(set .c4982 (eq_transitive :conclusion ((not (= c_0 (f3 c_1 c5))) (not (= (f3 c_1 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4983 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c5)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c4984 (eq_reflexive :conclusion ((= c5 c5))))
(set .c4985 (resolution :clauses (.c4983 .c4984) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c4986 (resolution :clauses (.c4982 .c4985) :conclusion ((not (= c_0 (f3 c_1 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_1)))))
(set .c4987 (resolution :clauses (.c4981 .c4986) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c4988 (resolution :clauses (.c4980 .c4987) :conclusion ((not (= c5 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c5 (f3 c_1 c_0)) (not (= c_0 c7)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c6 c_1)))))
(set .c4989 (resolution :clauses (.c4971 .c4988) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 c5)) (not (= c5 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c6 c_1)))))
(set .c4990 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c4991 (resolution :clauses (.c4989 .c4990) :conclusion ((= (f3 c_1 (f3 c_1 c_0)) (f3 c_1 c5)) (not (= c5 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c6 c_1)))))
(set .c4992 (resolution :clauses (.c4970 .c4991) :conclusion ((not (= c5 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= c_0 (f3 c_1 c5))) (= c5 c_0) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_1)))))
(set .c4993 (resolution :clauses (.c4992 .c34) :conclusion ((not (= c5 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= c_0 (f3 c_1 c5))) (= c5 c_0) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_1)))))
(set .c4994 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f1 (f3 c_0 c_1)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c4995 (eq_congruent :conclusion ((not (= (f3 c_0 c_1) c_2)) (= (f1 (f3 c_0 c_1)) (f1 c_2)))))
(set .c4996 (eq_transitive :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2))))
(set .c4997 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c4998 (eq_transitive :conclusion ((not (= c_0 (f3 c_1 c5))) (not (= (f3 c_1 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c4999 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c5)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c5000 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5001 (resolution :clauses (.c4999 .c5000) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c5002 (resolution :clauses (.c4998 .c5001) :conclusion ((not (= c_0 (f3 c_1 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_1)))))
(set .c5003 (resolution :clauses (.c4997 .c5002) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c5004 (resolution :clauses (.c4996 .c5003) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c5005 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1))))))
(set .c5006 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c5007 (resolution :clauses (.c5005 .c5006) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5008 (resolution :clauses (.c5004 .c5007) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c5 c_1)))))
(set .c5009 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c5010 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 c_1 c5))) (not (= c_0 (f3 c_1 c5))) (= (f3 c_1 c_1) c_0))))
(set .c5011 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c5012 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5013 (resolution :clauses (.c5011 .c5012) :conclusion ((not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c5014 (resolution :clauses (.c5010 .c5013) :conclusion ((not (= c_0 (f3 c_1 c5))) (= (f3 c_1 c_1) c_0) (not (= c5 c_1)))))
(set .c5015 (resolution :clauses (.c5009 .c5014) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)) (not (= c_0 (f3 c_1 c5))) (not (= c5 c_1)))))
(set .c5016 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5017 (resolution :clauses (.c5015 .c5016) :conclusion ((= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)) (not (= c_0 (f3 c_1 c5))) (not (= c5 c_1)))))
(set .c5018 (resolution :clauses (.c5008 .c5017) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c5 c_1)))))
(set .c5019 (resolution :clauses (.c4995 .c5018) :conclusion ((= (f1 (f3 c_0 c_1)) (f1 c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c5 c_1)))))
(set .c5020 (resolution :clauses (.c4994 .c5019) :conclusion ((not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c5 c_1)))))
(set .c5021 (resolution :clauses (.c5020 .c34 .c1742) :conclusion ((not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c5 c_1)))))
(set .c5022 (eq_transitive :conclusion ((not (= (f2 (f3 c_1 c_1)) (f2 c_0))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c_0) (f1 c_1)))))
(set .c5023 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f2 (f3 c_1 c_1)) (f2 c_0)))))
(set .c5024 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 c_1 c5))) (not (= c_0 (f3 c_1 c5))) (= (f3 c_1 c_1) c_0))))
(set .c5025 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c5026 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5027 (resolution :clauses (.c5025 .c5026) :conclusion ((not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c5028 (resolution :clauses (.c5024 .c5027) :conclusion ((not (= c_0 (f3 c_1 c5))) (= (f3 c_1 c_1) c_0) (not (= c5 c_1)))))
(set .c5029 (resolution :clauses (.c5023 .c5028) :conclusion ((= (f2 (f3 c_1 c_1)) (f2 c_0)) (not (= c_0 (f3 c_1 c5))) (not (= c5 c_1)))))
(set .c5030 (resolution :clauses (.c5022 .c5029) :conclusion ((not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c_0) (f1 c_1)) (not (= c_0 (f3 c_1 c5))) (not (= c5 c_1)))))
(set .c5031 (resolution :clauses (.c5030 .c1740 .c1739) :conclusion ((= (f2 c_0) (f1 c_1)) (not (= c_0 (f3 c_1 c5))) (not (= c5 c_1)))))
(set .c5032 (resolution :clauses (.c5021 .c226 .c4993 .c4959 .c195 .c5031 .c263 .c1739) :conclusion ((not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c_0 c7)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c5 c_1)) (= c5 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))))))
(set .c5033 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 c_0 c_0) c_0))))
(set .c5034 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_0)) (= (f3 c_0 c_0) (f3 c_0 (f1 c_0))))))
(set .c5035 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5036 (resolution :clauses (.c5034 .c5035) :conclusion ((not (= (f1 c_0) c_0)) (= (f3 c_0 c_0) (f3 c_0 (f1 c_0))))))
(set .c5037 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0))))
(set .c5038 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5039 (resolution :clauses (.c5037 .c5038) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c6 c_1)))))
(set .c5040 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5041 (resolution :clauses (.c5039 .c5040) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5042 (resolution :clauses (.c5036 .c5041) :conclusion ((= (f3 c_0 c_0) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5043 (resolution :clauses (.c5033 .c5042) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 c_0 c_0) c_0) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5044 (resolution :clauses (.c5043 .c164 .c166 .c167) :conclusion ((= (f3 c_0 c_0) c_0) (not (= (f1 c_1) c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5045 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c5)))))
(set .c5046 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 (f1 c_0))) (= (f3 c_0 c5) (f3 c_0 (f1 c_0))))))
(set .c5047 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5048 (resolution :clauses (.c5046 .c5047) :conclusion ((not (= c5 (f1 c_0))) (= (f3 c_0 c5) (f3 c_0 (f1 c_0))))))
(set .c5049 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c5050 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5051 (resolution :clauses (.c5049 .c5050) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)) (not (= c6 c_1)))))
(set .c5052 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5053 (resolution :clauses (.c5051 .c5052) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= c5 (f1 c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5054 (resolution :clauses (.c5048 .c5053) :conclusion ((= (f3 c_0 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5055 (resolution :clauses (.c5045 .c5054) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5056 (resolution :clauses (.c5055 .c164 .c166 .c167) :conclusion ((= c_0 (f3 c_0 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5057 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_0) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= c_0 c_2))))
(set .c5058 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_0)) (= (f3 c_0 c_0) (f3 c_0 (f1 c_0))))))
(set .c5059 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5060 (resolution :clauses (.c5058 .c5059) :conclusion ((not (= (f1 c_0) c_0)) (= (f3 c_0 c_0) (f3 c_0 (f1 c_0))))))
(set .c5061 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0))))
(set .c5062 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5063 (resolution :clauses (.c5061 .c5062) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c6 c_1)))))
(set .c5064 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5065 (resolution :clauses (.c5063 .c5064) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5066 (resolution :clauses (.c5060 .c5065) :conclusion ((= (f3 c_0 c_0) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5067 (resolution :clauses (.c5057 .c5066) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= c_0 c_2) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5068 (resolution :clauses (.c5067 .c8 .c164 .c166 .c167) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5069 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c4) (f2 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_0 c_2))))
(set .c5070 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f2 c4) (f2 c_1)))))
(set .c5071 (resolution :clauses (.c5069 .c5070) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_0 c_2) (not (= c4 c_1)))))
(set .c5072 (resolution :clauses (.c5071 .c8 .c1739) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)))))
(set .c5073 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_0 c_2))))
(set .c5074 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c5075 (resolution :clauses (.c5073 .c5074) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_0 c_2) (not (= c4 c_1)))))
(set .c5076 (resolution :clauses (.c5075 .c8 .c165) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c4 c_1)))))
(set .c5077 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c5078 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c5079 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5080 (resolution :clauses (.c5078 .c5079) :conclusion ((not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c5081 (resolution :clauses (.c5077 .c5080) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= c_0 (f3 c_1 c5)) (not (= c5 c_1)))))
(set .c5082 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 (f3 c_1 c_1)) (f1 c_1))) (not (= (f1 (f3 c_1 c_1)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_0 c_2))))
(set .c5083 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f1 (f3 c_1 c_1)) (f1 c_2)))))
(set .c5084 (resolution :clauses (.c5082 .c5083) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 (f3 c_1 c_1)) (f1 c_1))) (not (= (f1 c_2) c_2)) (= c_0 c_2) (not (= (f3 c_1 c_1) c_2)))))
(set .c5085 (resolution :clauses (.c5084 .c8 .c1741) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c5086 (resolution :clauses (.c5085 .c234 .c716 .c288 .c2436) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_2)) (= (f3 c_1 c_1) c_0) (not (= c4 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c5087 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c5088 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c5089 (eq_transitive :conclusion ((not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c5090 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c5091 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (= c5 (f1 c_1)))))
(set .c5092 (resolution :clauses (.c5090 .c5091) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c5093 (resolution :clauses (.c5089 .c5092) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5094 (resolution :clauses (.c5088 .c5093) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5095 (resolution :clauses (.c5087 .c5094) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5096 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c5097 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c5098 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5099 (resolution :clauses (.c5097 .c5098) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)))))
(set .c5100 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c5101 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (= c5 (f1 c_1)))))
(set .c5102 (resolution :clauses (.c5100 .c5101) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c5103 (resolution :clauses (.c5099 .c5102) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5104 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5105 (resolution :clauses (.c5103 .c5104) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c5106 (resolution :clauses (.c5096 .c5105) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5107 (resolution :clauses (.c5095 .c5106) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c5108 (resolution :clauses (.c5107 .c34 .c164 .c166 .c167 .c168 .c224) :conclusion ((not (= c6 c_1)) (not (= c_0 c7)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5109 (resolution :clauses (.c5108 .c252 .c5086 .c5081 .c5032 .c260 .c4932) :conclusion ((not (= c6 c_1)) (not (= c_0 c7)) (not (= c4 c_1)) (= (f1 c_1) c_2) (not (= (f1 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (= c5 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))))))
(set .c5110 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= c4 c_1)) (not (= c4 c_0)) (not (= c_0 c7)) (= c6 c7))))
(set .c5111 (resolution :clauses (.c5110 .c224) :conclusion ((not (= c6 c_1)) (not (= c4 c_1)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c5112 (eq_transitive :conclusion ((not (= c_0 c7)) (not (= c7 c_2)) (= c_0 c_2))))
(set .c5113 (resolution :clauses (.c5112 .c8) :conclusion ((not (= c_0 c7)) (not (= c7 c_2)))))
(set .c5114 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= c_0 c_2))))
(set .c5115 (resolution :clauses (.c5114 .c8) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)))))
(set .c5116 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)))))
(set .c5117 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_1)) (= (f3 c_1 c_1) (f3 c_1 c4)))))
(set .c5118 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5119 (resolution :clauses (.c5117 .c5118) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c_1) (f3 c_1 c4)))))
(set .c5120 (resolution :clauses (.c5116 .c5119) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= c_0 (f3 c_1 c4)) (not (= c4 c_1)))))
(set .c5121 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c5) (f3 c_2 (f1 c_2)))) (= c_0 (f3 c_2 c5)))))
(set .c5122 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 (f1 c_2))) (= (f3 c_2 c5) (f3 c_2 (f1 c_2))))))
(set .c5123 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c5124 (resolution :clauses (.c5122 .c5123) :conclusion ((not (= c5 (f1 c_2))) (= (f3 c_2 c5) (f3 c_2 (f1 c_2))))))
(set .c5125 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c5126 (resolution :clauses (.c5124 .c5125) :conclusion ((= (f3 c_2 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5127 (resolution :clauses (.c5121 .c5126) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 (f3 c_2 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5128 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c5129 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c5130 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c5131 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c5132 (resolution :clauses (.c5130 .c5131) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c5133 (resolution :clauses (.c5129 .c5132) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c5134 (resolution :clauses (.c5128 .c5133) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c5135 (resolution :clauses (.c5127 .c5134) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 (f3 c_2 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= (f1 c_1) c_2)))))
(set .c5136 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c5137 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c5138 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c5139 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c5140 (resolution :clauses (.c5138 .c5139) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c5141 (resolution :clauses (.c5137 .c5140) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c5142 (resolution :clauses (.c5136 .c5141) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c5143 (resolution :clauses (.c5135 .c5142) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 (f3 c_2 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= (f1 c_1) c_2)) (not (= c_0 c7)))))
(set .c5144 (resolution :clauses (.c5143 .c34 .c168 .c169) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c_1 c_1) c_2)) (= c_0 (f3 c_2 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= (f1 c_1) c_2)) (not (= c_0 c7)))))
(set .c5145 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c5) (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)))))
(set .c5146 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c5147 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c5148 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5149 (resolution :clauses (.c5147 .c5148) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)))))
(set .c5150 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c5151 (resolution :clauses (.c5149 .c5150) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5152 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5153 (resolution :clauses (.c5151 .c5152) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c5154 (resolution :clauses (.c5146 .c5153) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5155 (resolution :clauses (.c5145 .c5154) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c5) (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)) (not (= c_0 c7)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5156 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c5157 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c5158 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c5159 (resolution :clauses (.c5157 .c5158) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5160 (resolution :clauses (.c5156 .c5159) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5161 (resolution :clauses (.c5155 .c5160) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c5) (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)) (not (= c_0 c7)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5162 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c5 c_1)) (= (f3 c_2 c5) (f3 (f2 c_1) c_1)))))
(set .c5163 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (= (f2 c_1) c_2))))
(set .c5164 (resolution :clauses (.c5162 .c5163) :conclusion ((not (= c5 c_1)) (= (f3 c_2 c5) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c5165 (resolution :clauses (.c5161 .c5164) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)) (not (= c_0 c7)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5166 (resolution :clauses (.c5165 .c1739 .c32 .c34 .c164 .c166 .c167 .c168) :conclusion ((= c_0 (f3 c_2 c5)) (not (= c_0 c7)) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5167 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c_0 c_1))) (not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c4) c_0))))
(set .c5168 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c4 c_1)) (= (f3 c_0 c4) (f3 c_0 c_1)))))
(set .c5169 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5170 (resolution :clauses (.c5168 .c5169) :conclusion ((not (= c4 c_1)) (= (f3 c_0 c4) (f3 c_0 c_1)))))
(set .c5171 (resolution :clauses (.c5167 .c5170) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c4) c_0) (not (= c4 c_1)))))
(set .c5172 (resolution :clauses (.c5166 .c260 .c5144 .c234 .c5120 .c287 .c5171) :conclusion ((= c_0 (f3 c_2 c5)) (not (= c_0 c7)) (not (= (f1 c_1) c_2)) (not (= c6 c_1)) (not (= c4 c_1)) (= c5 c_0) (not (= c_0 (f3 c_0 c_1))) (not (= (f1 c_2) c_2)) (= (f3 c_1 c_1) c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c5173 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c5) (f3 c_2 (f1 c_2)))) (= c_0 (f3 c_2 c5)))))
(set .c5174 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 (f1 c_2))) (= (f3 c_2 c5) (f3 c_2 (f1 c_2))))))
(set .c5175 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c5176 (resolution :clauses (.c5174 .c5175) :conclusion ((not (= c5 (f1 c_2))) (= (f3 c_2 c5) (f3 c_2 (f1 c_2))))))
(set .c5177 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c5178 (resolution :clauses (.c5176 .c5177) :conclusion ((= (f3 c_2 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5179 (resolution :clauses (.c5173 .c5178) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 (f3 c_2 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5180 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c5181 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c5182 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c5183 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c5184 (resolution :clauses (.c5182 .c5183) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c5185 (resolution :clauses (.c5181 .c5184) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c5186 (resolution :clauses (.c5180 .c5185) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c5187 (resolution :clauses (.c5179 .c5186) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 (f3 c_2 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c7)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= (f1 c_1) c_2)))))
(set .c5188 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c5189 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c5190 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c5191 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c5192 (resolution :clauses (.c5190 .c5191) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c5193 (resolution :clauses (.c5189 .c5192) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c5194 (resolution :clauses (.c5188 .c5193) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c5195 (resolution :clauses (.c5187 .c5194) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 (f3 c_2 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c7)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= (f1 c_1) c_2)) (not (= c6 c_1)))))
(set .c5196 (resolution :clauses (.c5195 .c34 .c168 .c169) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_0 c_1) c_2)) (= c_0 (f3 c_2 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= (f1 c_1) c_2)) (not (= c6 c_1)))))
(set .c5197 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_0) (f3 c_0 (f3 c_1 c_1)))) (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0)))))
(set .c5198 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))))))
(set .c5199 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5200 (resolution :clauses (.c5198 .c5199) :conclusion ((not (= (f3 c_1 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))))))
(set .c5201 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (= (f3 c_1 c_0) (f1 c_1)))))
(set .c5202 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c5203 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5204 (resolution :clauses (.c5202 .c5203) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c5205 (resolution :clauses (.c5201 .c5204) :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (= (f3 c_1 c_0) (f1 c_1)) (not (= (f3 c_1 c_1) c_0)))))
(set .c5206 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c5207 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5208 (resolution :clauses (.c5206 .c5207) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c5209 (resolution :clauses (.c5205 .c5208) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (= (f3 c_1 c_0) (f1 c_1)) (not (= (f3 c_1 c_1) c_0)))))
(set .c5210 (resolution :clauses (.c5200 .c5209) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_0)))))
(set .c5211 (resolution :clauses (.c5197 .c5210) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_0) (f3 c_0 (f3 c_1 c_1)))) (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_0)))))
(set .c5212 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c5213 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c5214 (resolution :clauses (.c5212 .c5213) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c5215 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5216 (resolution :clauses (.c5214 .c5215) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c5217 (resolution :clauses (.c5211 .c5216) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_0) (f3 c_0 (f3 c_1 c_1)))) (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5218 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_0) (f3 c_0 (f3 c_1 c_1))))))
(set .c5219 (resolution :clauses (.c5217 .c5218) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5220 (resolution :clauses (.c5219 .c1742 .c168 .c1739 .c32) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0)) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_0)))))
(set .c5221 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_0 c_0) c_1))))
(set .c5222 (eq_congruent :conclusion ((not (= (f2 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c5223 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f2 c_1) (f3 c_0 c_1)))))
(set .c5224 (resolution :clauses (.c5222 .c5223) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c5225 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5226 (resolution :clauses (.c5224 .c5225) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c5227 (resolution :clauses (.c5221 .c5226) :conclusion ((not (= (f3 c_0 c_0) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_0 c_0) c_1) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c5228 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f3 c_0 c_0) (f3 c_0 (f3 c_1 c_1))))))
(set .c5229 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5230 (resolution :clauses (.c5228 .c5229) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 c_0 c_0) (f3 c_0 (f3 c_1 c_1))))))
(set .c5231 (resolution :clauses (.c5227 .c5230) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_0 c_0) c_1) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_1 c_1) c_0)))))
(set .c5232 (resolution :clauses (.c5231 .c32 .c1739) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (= (f3 c_0 c_0) c_1) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_1 c_1) c_0)))))
(set .c5233 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (= (f2 c_1) c_2))))
(set .c5234 (resolution :clauses (.c5233 .c1739) :conclusion ((not (= (f1 c_1) c_2)) (= (f2 c_1) c_2))))
(set .c5235 (resolution :clauses (.c4993 .c5081 .c260 .c5196 .c5220 .c5232 .c234 .c1991 .c289 .c2110 .c228 .c5172 .c1165 .c5234 .c716 .c753 .c297 .c294 .c2130 .c2126 .c5109 .c4916 .c4912 .c179 .c95 .c4675 .c1739) :conclusion ((= c5 c_0) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_1)) (not (= (f1 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_1))))))
(set .c5236 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_0 c_1) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c5237 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c5238 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5239 (resolution :clauses (.c5237 .c5238) :conclusion ((not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c5240 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c_0) c_0))))
(set .c5241 (eq_congruent :conclusion ((not (= (f2 c_0) c6)) (not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))))))
(set .c5242 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (= (f2 c_0) c6))))
(set .c5243 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c5244 (resolution :clauses (.c5242 .c5243) :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (= (f2 c_0) c6))))
(set .c5245 (eq_congruent :conclusion ((not (= c_0 (f3 c4 c5))) (= (f2 c_0) (f2 (f3 c4 c5))))))
(set .c5246 (eq_transitive :conclusion ((not (= c_0 (f3 c_1 c5))) (not (= (f3 c_1 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c5247 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c5)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c5248 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5249 (resolution :clauses (.c5247 .c5248) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c5250 (resolution :clauses (.c5246 .c5249) :conclusion ((not (= c_0 (f3 c_1 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_1)))))
(set .c5251 (resolution :clauses (.c5245 .c5250) :conclusion ((= (f2 c_0) (f2 (f3 c4 c5))) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c5252 (resolution :clauses (.c5244 .c5251) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (= (f2 c_0) c6) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c5253 (resolution :clauses (.c5241 .c5252) :conclusion ((not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c5254 (eq_transitive :conclusion ((not (= c_0 (f3 c_1 c5))) (not (= (f3 c_1 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c5255 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c5)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c5256 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5257 (resolution :clauses (.c5255 .c5256) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c5258 (resolution :clauses (.c5254 .c5257) :conclusion ((not (= c_0 (f3 c_1 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_1)))))
(set .c5259 (resolution :clauses (.c5253 .c5258) :conclusion ((= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c5260 (resolution :clauses (.c5240 .c5259) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c_0) c_0) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c5261 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c5262 (eq_transitive :conclusion ((not (= c_0 (f3 c_1 c5))) (not (= (f3 c_1 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c5263 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c5)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c5264 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5265 (resolution :clauses (.c5263 .c5264) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c5266 (resolution :clauses (.c5262 .c5265) :conclusion ((not (= c_0 (f3 c_1 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_1)))))
(set .c5267 (resolution :clauses (.c5261 .c5266) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c5268 (resolution :clauses (.c5260 .c5267) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c_0) c_0) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c5269 (resolution :clauses (.c5239 .c5268) :conclusion ((= (f3 c_0 c_1) (f3 (f3 c_0 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c5270 (resolution :clauses (.c5236 .c5269) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c5271 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c5272 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5273 (resolution :clauses (.c5271 .c5272) :conclusion ((not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c5274 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)))))
(set .c5275 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c5276 (resolution :clauses (.c5274 .c5275) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)) (not (= c6 c_2)))))
(set .c5277 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5278 (resolution :clauses (.c5276 .c5277) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5279 (resolution :clauses (.c5273 .c5278) :conclusion ((= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5280 (resolution :clauses (.c5270 .c5279) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c5281 (resolution :clauses (.c5280 .c31 .c34 .c164 .c166 .c167 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_0 c7)) (not (= (f1 c_2) c_2)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c5282 (eq_transitive :conclusion ((not (= c_0 (f3 c_1 c5))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 c_1))))
(set .c5283 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 c5)))))
(set .c5284 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)))))
(set .c5285 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c5286 (resolution :clauses (.c5284 .c5285) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)))))
(set .c5287 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5288 (resolution :clauses (.c5286 .c5287) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5289 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c5290 (resolution :clauses (.c5288 .c5289) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c5291 (resolution :clauses (.c5283 .c5290) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c5292 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5293 (resolution :clauses (.c5291 .c5292) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c5294 (resolution :clauses (.c5282 .c5293) :conclusion ((not (= c_0 (f3 c_1 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 c_1) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c5295 (resolution :clauses (.c5294 .c7 .c164 .c165 .c166 .c168) :conclusion ((not (= c_0 (f3 c_1 c5))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c5296 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_0) (f1 c_0)))))
(set .c5297 (eq_congruent :conclusion ((not (= c_0 (f3 c4 c5))) (= (f2 c_0) (f2 (f3 c4 c5))))))
(set .c5298 (eq_transitive :conclusion ((not (= c_0 (f3 c_1 c5))) (not (= (f3 c_1 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c5299 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c5)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c5300 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5301 (resolution :clauses (.c5299 .c5300) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c5302 (resolution :clauses (.c5298 .c5301) :conclusion ((not (= c_0 (f3 c_1 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_1)))))
(set .c5303 (resolution :clauses (.c5297 .c5302) :conclusion ((= (f2 c_0) (f2 (f3 c4 c5))) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c5304 (resolution :clauses (.c5296 .c5303) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_0) (f1 c_0)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)))))
(set .c5305 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5306 (resolution :clauses (.c5304 .c5305) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c5307 (resolution :clauses (.c5306 .c166) :conclusion ((= (f2 c_0) (f1 c_0)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c5308 (resolution :clauses (.c5295 .c260 .c4937 .c228 .c5281 .c173 .c5307 .c263) :conclusion ((not (= c_0 (f3 c_1 c5))) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)) (= c5 c_0) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_0) (f2 c_1))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))))))
(set .c5309 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c4 c_1)) (= c_0 c_1))))
(set .c5310 (resolution :clauses (.c5309 .c7) :conclusion ((not (= c4 c_0)) (not (= c4 c_1)))))
(set .c5311 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c5)))))
(set .c5312 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 (f1 c_0))) (= (f3 c_0 c5) (f3 c_0 (f1 c_0))))))
(set .c5313 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5314 (resolution :clauses (.c5312 .c5313) :conclusion ((not (= c5 (f1 c_0))) (= (f3 c_0 c5) (f3 c_0 (f1 c_0))))))
(set .c5315 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c5316 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c5317 (resolution :clauses (.c5315 .c5316) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)) (not (= c6 c_2)))))
(set .c5318 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5319 (resolution :clauses (.c5317 .c5318) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= c5 (f1 c_0)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5320 (resolution :clauses (.c5314 .c5319) :conclusion ((= (f3 c_0 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5321 (resolution :clauses (.c5311 .c5320) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5322 (resolution :clauses (.c5321 .c164 .c166 .c167) :conclusion ((= c_0 (f3 c_0 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5323 (resolution :clauses (.c5322 .c260 .c4937) :conclusion ((= c_0 (f3 c_0 c5)) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (= c5 c_0) (not (= c_0 (f3 c_0 c_1))))))
(set .c5324 (eq_transitive :conclusion ((not (= c_0 c7)) (not (= c_1 c7)) (= c_0 c_1))))
(set .c5325 (resolution :clauses (.c5324 .c7) :conclusion ((not (= c_0 c7)) (not (= c_1 c7)))))
(set .c5326 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c5327 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c5328 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c5329 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c5330 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)))))
(set .c5331 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c5332 (resolution :clauses (.c5330 .c5331) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)))))
(set .c5333 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5334 (resolution :clauses (.c5332 .c5333) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5335 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c5336 (resolution :clauses (.c5334 .c5335) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c5337 (resolution :clauses (.c5329 .c5336) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5338 (resolution :clauses (.c5328 .c5337) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5339 (resolution :clauses (.c5327 .c5338) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)))))
(set .c5340 (resolution :clauses (.c5326 .c5339) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)))))
(set .c5341 (eq_congruent :conclusion ((not (= c6 (f2 c_1))) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c5342 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c5343 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c5344 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)))))
(set .c5345 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c5346 (resolution :clauses (.c5344 .c5345) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)))))
(set .c5347 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5348 (resolution :clauses (.c5346 .c5347) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5349 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c5350 (resolution :clauses (.c5348 .c5349) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c5351 (resolution :clauses (.c5343 .c5350) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5352 (resolution :clauses (.c5342 .c5351) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5353 (resolution :clauses (.c5341 .c5352) :conclusion ((not (= c6 (f2 c_1))) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5354 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= c6 (f2 c_1)))))
(set .c5355 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c5356 (resolution :clauses (.c5354 .c5355) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= c6 (f2 c_1)))))
(set .c5357 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5358 (resolution :clauses (.c5356 .c5357) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= c6 (f2 c_1)) (not (= c_0 c7)))))
(set .c5359 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c5360 (resolution :clauses (.c5358 .c5359) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= c6 (f2 c_1)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c5361 (resolution :clauses (.c5353 .c5360) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5362 (resolution :clauses (.c5340 .c5361) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5363 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 c5)))))
(set .c5364 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)))))
(set .c5365 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c5366 (resolution :clauses (.c5364 .c5365) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)))))
(set .c5367 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5368 (resolution :clauses (.c5366 .c5367) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5369 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c5370 (resolution :clauses (.c5368 .c5369) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c5371 (resolution :clauses (.c5363 .c5370) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c5372 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5373 (resolution :clauses (.c5371 .c5372) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c5374 (resolution :clauses (.c5362 .c5373) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 (f3 c_1 c5)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5375 (resolution :clauses (.c5374 .c1739 .c32 .c34 .c164 .c165 .c166 .c168) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= c_0 (f3 c_1 c5)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)))))
(set .c5376 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c5377 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c5378 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c5379 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c5380 (resolution :clauses (.c5378 .c5379) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5381 (resolution :clauses (.c5377 .c5380) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5382 (resolution :clauses (.c5376 .c5381) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5383 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c5384 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c5385 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c5386 (resolution :clauses (.c5384 .c5385) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5387 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c5388 (resolution :clauses (.c5386 .c5387) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_2)))))
(set .c5389 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5390 (resolution :clauses (.c5388 .c5389) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5391 (resolution :clauses (.c5383 .c5390) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_2)))))
(set .c5392 (resolution :clauses (.c5382 .c5391) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c5393 (resolution :clauses (.c5392 .c34 .c164 .c166 .c167 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= c_0 c7)) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c5394 (resolution :clauses (.c5393 .c260 .c5375 .c234 .c5120 .c287 .c5171) :conclusion ((not (= c6 c_2)) (not (= c_0 c7)) (not (= (f1 c_2) c_2)) (not (= c4 c_1)) (= c5 c_0) (not (= c_0 (f3 c_0 c_1))) (= c_0 (f3 c_1 c5)) (not (= (f2 c5) (f1 c_0))) (= (f3 c_1 c_1) c_1) (not (= (f2 c4) (f1 c_1))))))
(set .c5395 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= c_1 c_2))))
(set .c5396 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c5397 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c5398 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c5399 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)))))
(set .c5400 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c5401 (resolution :clauses (.c5399 .c5400) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)))))
(set .c5402 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5403 (resolution :clauses (.c5401 .c5402) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5404 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c5405 (resolution :clauses (.c5403 .c5404) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c5406 (resolution :clauses (.c5398 .c5405) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5407 (resolution :clauses (.c5397 .c5406) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5408 (resolution :clauses (.c5396 .c5407) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)))))
(set .c5409 (resolution :clauses (.c5395 .c5408) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (= c_1 c_2) (not (= c_0 c7)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)))))
(set .c5410 (eq_congruent :conclusion ((not (= c6 (f2 c_1))) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c5411 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c5412 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c5413 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)))))
(set .c5414 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c5415 (resolution :clauses (.c5413 .c5414) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)))))
(set .c5416 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5417 (resolution :clauses (.c5415 .c5416) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5418 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c5419 (resolution :clauses (.c5417 .c5418) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (= c5 (f1 c_1)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c5420 (resolution :clauses (.c5412 .c5419) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5421 (resolution :clauses (.c5411 .c5420) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5422 (resolution :clauses (.c5410 .c5421) :conclusion ((not (= c6 (f2 c_1))) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5423 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= c6 (f2 c_1)))))
(set .c5424 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c5425 (resolution :clauses (.c5423 .c5424) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= c6 (f2 c_1)))))
(set .c5426 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5427 (resolution :clauses (.c5425 .c5426) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= c6 (f2 c_1)) (not (= c_0 c7)))))
(set .c5428 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c5429 (resolution :clauses (.c5427 .c5428) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= c6 (f2 c_1)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c5430 (resolution :clauses (.c5422 .c5429) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= c_0 c7)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5431 (resolution :clauses (.c5409 .c5430) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (= c_1 c_2) (not (= c_0 c7)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c6 c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5432 (resolution :clauses (.c5431 .c9 .c1739 .c32 .c34 .c164 .c165 .c166 .c168) :conclusion ((not (= (f3 c_0 c_1) c_2)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)))))
(set .c5433 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f2 c_1) c_1) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)))))
(set .c5434 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c4 c_1)) (= (f3 (f2 c_1) c_1) (f3 c_2 c4)))))
(set .c5435 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c5436 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c5437 (resolution :clauses (.c5435 .c5436) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c6 c_2)))))
(set .c5438 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5439 (resolution :clauses (.c5437 .c5438) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5440 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c5441 (resolution :clauses (.c5439 .c5440) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c5442 (resolution :clauses (.c5434 .c5441) :conclusion ((not (= c4 c_1)) (= (f3 (f2 c_1) c_1) (f3 c_2 c4)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5443 (resolution :clauses (.c5433 .c5442) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5444 (resolution :clauses (.c5443 .c165 .c32 .c164 .c1739 .c166) :conclusion ((= c_1 (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5445 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)))))
(set .c5446 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c5447 (resolution :clauses (.c5445 .c5446) :conclusion ((not (= (f2 c4) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)) (not (= c4 c_1)))))
(set .c5448 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f2 c4) (f2 c_1)))))
(set .c5449 (resolution :clauses (.c5447 .c5448) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)) (not (= c4 c_1)))))
(set .c5450 (resolution :clauses (.c5449 .c1739 .c165) :conclusion ((not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)) (not (= c4 c_1)))))
(set .c5451 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c5) (f1 c_2)))))
(set .c5452 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c5453 (resolution :clauses (.c5451 .c5452) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= c6 c_2)))))
(set .c5454 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5455 (resolution :clauses (.c5453 .c5454) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5456 (resolution :clauses (.c5455 .c164 .c166) :conclusion ((not (= (f2 c5) (f1 c_0))) (= (f2 c5) (f1 c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5457 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)))))
(set .c5458 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c5459 (resolution :clauses (.c5457 .c5458) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c4 c_1)))))
(set .c5460 (resolution :clauses (.c5459 .c1739 .c165) :conclusion ((not (= (f2 c5) (f1 c_0))) (= (f1 c_0) (f2 c_1)) (not (= c4 c_1)))))
(set .c5461 (resolution :clauses (.c5432 .c260 .c5081 .c234 .c1991 .c289 .c2110 .c228 .c5394 .c5308 .c716 .c753 .c291 .c285 .c5444 .c5450 .c5456 .c5460) :conclusion ((not (= c_0 c7)) (not (= c4 c_1)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)) (= c5 c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_1))))))
(set .c5462 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= c5 c_2))))
(set .c5463 (eq_congruent :conclusion ((not (= (f3 c4 c5) c_1)) (= (f2 (f3 c4 c5)) (f2 c_1)))))
(set .c5464 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c5465 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c5466 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= c5 (f1 c_1)))))
(set .c5467 (resolution :clauses (.c5465 .c5466) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_1)) (not (= c_1 (f2 c_1))) (not (= (f1 c_1) (f2 c_1))))))
(set .c5468 (resolution :clauses (.c5464 .c5467) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_1 (f2 c_1))) (not (= (f1 c_1) (f2 c_1))))))
(set .c5469 (resolution :clauses (.c5463 .c5468) :conclusion ((= (f2 (f3 c4 c5)) (f2 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_1 (f2 c_1))) (not (= (f1 c_1) (f2 c_1))))))
(set .c5470 (resolution :clauses (.c5462 .c5469) :conclusion ((not (= c5 c_1)) (not (= c_1 (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= c5 c_2) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5471 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c5472 (resolution :clauses (.c5470 .c5471) :conclusion ((not (= c5 c_1)) (not (= c_1 (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= c5 c_2) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= c6 c_2)))))
(set .c5473 (resolution :clauses (.c5472 .c1739 .c164 .c168) :conclusion ((not (= c5 c_1)) (not (= c_1 (f2 c_1))) (not (= (f1 c_2) c_2)) (= c5 c_2) (not (= c4 c_1)) (not (= c6 c_2)))))
(set .c5474 (resolution :clauses (.c5473 .c260 .c4932 .c246 .c5234 .c603 .c4916 .c5461 .c611 .c256 .c5235 .c2620 .c476) :conclusion ((not (= (f1 c_2) c_2)) (not (= c4 c_1)) (= c5 c_0) (not (= c_0 c7)) (= c_0 c6))))
(set .c5475 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c5476 (eq_congruent :conclusion ((not (= c4 c6)) (= (f1 c4) (f1 c6)))))
(set .c5477 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c6 c_2)) (= c4 c6))))
(set .c5478 (resolution :clauses (.c5476 .c5477) :conclusion ((= (f1 c4) (f1 c6)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c5479 (resolution :clauses (.c5475 .c5478) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c5480 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5481 (resolution :clauses (.c5479 .c5480) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5482 (resolution :clauses (.c5481 .c164 .c165 .c166) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c5483 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c5484 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c5485 (resolution :clauses (.c5483 .c5484) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)))))
(set .c5486 (eq_congruent :conclusion ((not (= c4 (f1 c_2))) (= (f2 c4) (f2 (f1 c_2))))))
(set .c5487 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (= c4 (f1 c_2)))))
(set .c5488 (resolution :clauses (.c5486 .c5487) :conclusion ((= (f2 c4) (f2 (f1 c_2))) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5489 (resolution :clauses (.c5485 .c5488) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5490 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5491 (resolution :clauses (.c5489 .c5490) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c6 c_1)))))
(set .c5492 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5493 (resolution :clauses (.c5491 .c5492) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5494 (resolution :clauses (.c5493 .c91 .c164 .c165 .c166) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5495 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c5496 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c5497 (resolution :clauses (.c5495 .c5496) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)))))
(set .c5498 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5499 (resolution :clauses (.c5497 .c5498) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c6 c_1)))))
(set .c5500 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5501 (resolution :clauses (.c5499 .c5500) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5502 (resolution :clauses (.c5501 .c164 .c165 .c166) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5503 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 (f3 c_0 c_1)) (f1 c4))) (not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c5504 (eq_congruent :conclusion ((not (= c4 (f3 c_0 c_1))) (= (f1 (f3 c_0 c_1)) (f1 c4)))))
(set .c5505 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_0 c_1) c_2)) (= c4 (f3 c_0 c_1)))))
(set .c5506 (resolution :clauses (.c5504 .c5505) :conclusion ((= (f1 (f3 c_0 c_1)) (f1 c4)) (not (= c4 c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c5507 (resolution :clauses (.c5503 .c5506) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c5508 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5509 (resolution :clauses (.c5507 .c5508) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_1)))))
(set .c5510 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5511 (resolution :clauses (.c5509 .c5510) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5512 (resolution :clauses (.c5511 .c164 .c165 .c166) :conclusion ((not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5513 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 (f3 c_0 c_1))) (= c_0 (f3 c_0 c_1)))))
(set .c5514 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c5515 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c5516 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5517 (resolution :clauses (.c5515 .c5516) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c5518 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c5519 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5520 (resolution :clauses (.c5518 .c5519) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c6 c_1)))))
(set .c5521 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5522 (resolution :clauses (.c5520 .c5521) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5523 (resolution :clauses (.c5517 .c5522) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5524 (resolution :clauses (.c5514 .c5523) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5525 (resolution :clauses (.c5524 .c164 .c166 .c167) :conclusion ((= c_0 (f3 c_0 c_1)) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5526 (eq_transitive :conclusion ((not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c5527 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5528 (resolution :clauses (.c5526 .c5527) :conclusion ((not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c6 c_1)))))
(set .c5529 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5530 (resolution :clauses (.c5528 .c5529) :conclusion ((not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5531 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c5532 (resolution :clauses (.c5530 .c5531) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_0)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_1)))))
(set .c5533 (resolution :clauses (.c5532 .c1739 .c164 .c166) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_1)))))
(set .c5534 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f1 c_2)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c5535 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c5536 (resolution :clauses (.c5534 .c5535) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f1 c_2)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)))))
(set .c5537 (eq_congruent :conclusion ((not (= (f1 c_2) (f3 c4 c5))) (= (f2 (f1 c_2)) (f2 (f3 c4 c5))))))
(set .c5538 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_2) (f3 c4 c5)))))
(set .c5539 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c5540 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c5541 (resolution :clauses (.c5539 .c5540) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5542 (resolution :clauses (.c5538 .c5541) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c5543 (resolution :clauses (.c5537 .c5542) :conclusion ((= (f2 (f1 c_2)) (f2 (f3 c4 c5))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c5544 (resolution :clauses (.c5536 .c5543) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_2)))))
(set .c5545 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5546 (resolution :clauses (.c5544 .c5545) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c5547 (resolution :clauses (.c5546 .c91 .c165 .c166 .c169) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c5548 (resolution :clauses (.c5547 .c260 .c5533 .c256 .c5482 .c258 .c3145) :conclusion ((= (f2 c5) (f1 c_0)) (not (= (f1 c_2) c_2)) (not (= c_0 c7)) (= c5 c_0) (= c_0 c6) (= c4 c_1))))
(set .c5549 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c5550 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5551 (resolution :clauses (.c5549 .c5550) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c_0 c7)))))
(set .c5552 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c5553 (resolution :clauses (.c5551 .c5552) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c_0 c7)) (not (= c4 c_2)))))
(set .c5554 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5555 (resolution :clauses (.c5553 .c5554) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c6 c_1)))))
(set .c5556 (resolution :clauses (.c5555 .c164 .c165 .c166) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c6 c_1)))))
(set .c5557 (eq_transitive :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)))))
(set .c5558 (eq_congruent :conclusion ((not (= c4 (f3 c4 c5))) (= (f2 c4) (f2 (f3 c4 c5))))))
(set .c5559 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 c5))) (not (= (f3 c_0 c5) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c5560 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c5)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5561 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5562 (resolution :clauses (.c5560 .c5561) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5563 (resolution :clauses (.c5559 .c5562) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 c5))) (= c4 (f3 c4 c5)))))
(set .c5564 (resolution :clauses (.c5558 .c5563) :conclusion ((= (f2 c4) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c_0 (f3 c_0 c5))))))
(set .c5565 (resolution :clauses (.c5557 .c5564) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 c5))))))
(set .c5566 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5567 (resolution :clauses (.c5565 .c5566) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 c5))) (not (= c6 c_1)))))
(set .c5568 (resolution :clauses (.c5567 .c164) :conclusion ((= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 c5))) (not (= c6 c_1)))))
(set .c5569 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c5570 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5571 (resolution :clauses (.c5569 .c5570) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c_0 c7)))))
(set .c5572 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c5573 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c5574 (resolution :clauses (.c5572 .c5573) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5575 (resolution :clauses (.c5571 .c5574) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c_0 c7)) (not (= c5 c_2)))))
(set .c5576 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5577 (resolution :clauses (.c5575 .c5576) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c_0 c7)) (not (= c5 c_2)) (not (= c6 c_1)))))
(set .c5578 (resolution :clauses (.c5577 .c91 .c164 .c166) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c_0 c7)) (not (= c5 c_2)) (not (= c6 c_1)))))
(set .c5579 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)))))
(set .c5580 (eq_congruent :conclusion ((not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1))))))
(set .c5581 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c5582 (resolution :clauses (.c5580 .c5581) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c5583 (resolution :clauses (.c5579 .c5582) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c5584 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5585 (resolution :clauses (.c5583 .c5584) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c6 c_1)))))
(set .c5586 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c5587 (resolution :clauses (.c5585 .c5586) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c6 c_1)))))
(set .c5588 (resolution :clauses (.c5587 .c164) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c6 c_1)))))
(set .c5589 (resolution :clauses (.c5588 .c260 .c5578 .c258 .c5556) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (= (f2 c4) (f1 c_1)) (not (= c6 c_1)) (= c5 c_0) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c_0 c7)) (= c4 c_1))))
(set .c5590 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c5)))))
(set .c5591 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 (f1 c_0))) (= (f3 c_0 c5) (f3 c_0 (f1 c_0))))))
(set .c5592 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5593 (resolution :clauses (.c5591 .c5592) :conclusion ((not (= c5 (f1 c_0))) (= (f3 c_0 c5) (f3 c_0 (f1 c_0))))))
(set .c5594 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c5595 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5596 (resolution :clauses (.c5594 .c5595) :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= c5 (f1 c_0)) (not (= c_0 c7)))))
(set .c5597 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5598 (resolution :clauses (.c5596 .c5597) :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= c5 (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c5599 (resolution :clauses (.c5593 .c5598) :conclusion ((= (f3 c_0 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c5600 (resolution :clauses (.c5590 .c5599) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c5601 (resolution :clauses (.c5600 .c164 .c166 .c167) :conclusion ((= c_0 (f3 c_0 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c5602 (resolution :clauses (.c5601 .c260 .c5588 .c5568) :conclusion ((not (= (f1 c_1) c_2)) (not (= c_0 c7)) (not (= c6 c_1)) (= c5 c_0) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)))))
(set .c5603 (eq_transitive :conclusion ((not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)))))
(set .c5604 (eq_congruent :conclusion ((not (= c4 (f1 c_2))) (= (f2 c4) (f2 (f1 c_2))))))
(set .c5605 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (= c4 (f1 c_2)))))
(set .c5606 (resolution :clauses (.c5604 .c5605) :conclusion ((= (f2 c4) (f2 (f1 c_2))) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5607 (resolution :clauses (.c5603 .c5606) :conclusion ((not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)))))
(set .c5608 (resolution :clauses (.c5607 .c91) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)))))
(set .c5609 (resolution :clauses (.c5608 .c258 .c5602 .c5589) :conclusion ((not (= (f1 c_2) c_2)) (= (f2 c4) (f1 c_1)) (= c4 c_1) (not (= c_0 c7)) (not (= c6 c_1)) (= c5 c_0) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 c5) (f1 c_0))))))
(set .c5610 (eq_transitive :conclusion ((not (= (f3 c_1 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (= (f3 c_1 c5) c_1))))
(set .c5611 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c5 (f3 c4 c5))) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))))))
(set .c5612 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)))))
(set .c5613 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c5614 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c5615 (resolution :clauses (.c5613 .c5614) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5616 (resolution :clauses (.c5612 .c5615) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5617 (resolution :clauses (.c5611 .c5616) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5618 (resolution :clauses (.c5610 .c5617) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (= (f3 c_1 c5) c_1) (not (= c6 c_1)) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5619 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c5620 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c5621 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c5622 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c5623 (resolution :clauses (.c5621 .c5622) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5624 (resolution :clauses (.c5620 .c5623) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5625 (resolution :clauses (.c5619 .c5624) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5626 (resolution :clauses (.c5618 .c5625) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 c_0 c_1))) (= (f3 c_1 c5) c_1) (not (= c6 c_1)) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)))))
(set .c5627 (resolution :clauses (.c5626 .c1739 .c32 .c34) :conclusion ((not (= c_1 (f3 c_0 c_1))) (= (f3 c_1 c5) c_1) (not (= c6 c_1)) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= c_0 c7)))))
(set .c5628 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c5) (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)))))
(set .c5629 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c5 c_1)) (= (f3 c_2 c5) (f3 (f2 c_1) c_1)))))
(set .c5630 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (= (f2 c_1) c_2))))
(set .c5631 (resolution :clauses (.c5629 .c5630) :conclusion ((not (= c5 c_1)) (= (f3 c_2 c5) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c5632 (resolution :clauses (.c5628 .c5631) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c5633 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1))))))
(set .c5634 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (= (f3 c_1 c_1) (f1 c_1)))))
(set .c5635 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c5636 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c5637 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c5638 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c5639 (resolution :clauses (.c5637 .c5638) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5640 (resolution :clauses (.c5636 .c5639) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5641 (resolution :clauses (.c5635 .c5640) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5642 (resolution :clauses (.c5634 .c5641) :conclusion ((not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (= (f3 c_1 c_1) (f1 c_1)) (not (= c_0 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5643 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c5644 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c5645 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c5646 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c5647 (resolution :clauses (.c5645 .c5646) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5648 (resolution :clauses (.c5644 .c5647) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5649 (resolution :clauses (.c5643 .c5648) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5650 (resolution :clauses (.c5642 .c5649) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (= (f3 c_1 c_1) (f1 c_1)) (not (= c_0 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c6 c_1)))))
(set .c5651 (resolution :clauses (.c5633 .c5650) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (not (= c_0 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c6 c_1)))))
(set .c5652 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5653 (resolution :clauses (.c5651 .c5652) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (not (= c_0 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c6 c_1)))))
(set .c5654 (resolution :clauses (.c5632 .c5653) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c6 c_1)))))
(set .c5655 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c5656 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5657 (resolution :clauses (.c5655 .c5656) :conclusion ((not (= (f3 c_1 c_1) (f3 c_0 c_1))) (= (f3 (f3 c_0 c_1) c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c5658 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (= (f3 c_1 c_1) (f3 c_0 c_1)))))
(set .c5659 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c5660 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c5661 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c5662 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c5663 (resolution :clauses (.c5661 .c5662) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5664 (resolution :clauses (.c5660 .c5663) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5665 (resolution :clauses (.c5659 .c5664) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5666 (resolution :clauses (.c5658 .c5665) :conclusion ((not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_1) (f3 c_0 c_1)) (not (= c_0 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5667 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c5668 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c5669 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c5670 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c5671 (resolution :clauses (.c5669 .c5670) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5672 (resolution :clauses (.c5668 .c5671) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5673 (resolution :clauses (.c5667 .c5672) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5674 (resolution :clauses (.c5666 .c5673) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_1) (f3 c_0 c_1)) (not (= c_0 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c6 c_1)))))
(set .c5675 (resolution :clauses (.c5657 .c5674) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 (f3 c_1 c_1) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c6 c_1)))))
(set .c5676 (resolution :clauses (.c5654 .c5675) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c6 c_1)))))
(set .c5677 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c5678 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5679 (resolution :clauses (.c5677 .c5678) :conclusion ((not (= (f1 c_0) (f3 c_1 c_1))) (= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))))))
(set .c5680 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (= (f1 c_0) (f3 c_1 c_1)))))
(set .c5681 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5682 (resolution :clauses (.c5680 .c5681) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (= (f1 c_0) (f3 c_1 c_1)) (not (= c6 c_1)))))
(set .c5683 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c5684 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c5685 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c5686 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c5687 (resolution :clauses (.c5685 .c5686) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5688 (resolution :clauses (.c5684 .c5687) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5689 (resolution :clauses (.c5683 .c5688) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5690 (resolution :clauses (.c5682 .c5689) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (= (f1 c_0) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5691 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c5692 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c5693 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c5694 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c5695 (resolution :clauses (.c5693 .c5694) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5696 (resolution :clauses (.c5692 .c5695) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5697 (resolution :clauses (.c5691 .c5696) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5698 (resolution :clauses (.c5690 .c5697) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f1 c_0) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5699 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5700 (resolution :clauses (.c5698 .c5699) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f1 c_0) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5701 (resolution :clauses (.c5679 .c5700) :conclusion ((= (f3 c_0 (f1 c_0)) (f3 c_0 (f3 c_1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5702 (resolution :clauses (.c5676 .c5701) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c5703 (resolution :clauses (.c5702 .c1739 .c32 .c34 .c164 .c166 .c167 .c168 .c1742) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c6 c_1)))))
(set .c5704 (eq_transitive :conclusion ((not (= (f3 c_2 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1))))
(set .c5705 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c5 c_1)) (= (f3 c_2 c5) (f3 (f2 c_1) c_1)))))
(set .c5706 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (= (f2 c_1) c_2))))
(set .c5707 (resolution :clauses (.c5705 .c5706) :conclusion ((not (= c5 c_1)) (= (f3 c_2 c5) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c5708 (resolution :clauses (.c5704 .c5707) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c5709 (resolution :clauses (.c5708 .c1739 .c32) :conclusion ((= (f3 c_2 c5) c_1) (not (= c5 c_1)) (not (= (f1 c_1) c_2)))))
(set .c5710 (resolution :clauses (.c5703 .c228 .c5627 .c279 .c5709) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_2)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c6 c_1)) (= c_0 (f3 c_0 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c5711 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c5) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c5)))))
(set .c5712 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c5 (f3 c4 c5))) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))))))
(set .c5713 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= c5 (f3 c4 c5)))))
(set .c5714 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c5715 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c5716 (resolution :clauses (.c5714 .c5715) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5717 (resolution :clauses (.c5713 .c5716) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5718 (resolution :clauses (.c5712 .c5717) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5719 (resolution :clauses (.c5711 .c5718) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c5)) (not (= c6 c_1)) (not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5720 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c5721 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_0) (f3 c4 c5)))))
(set .c5722 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5723 (resolution :clauses (.c5721 .c5722) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)))))
(set .c5724 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c5725 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c5726 (resolution :clauses (.c5724 .c5725) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5727 (resolution :clauses (.c5723 .c5726) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5728 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5729 (resolution :clauses (.c5727 .c5728) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c7)))))
(set .c5730 (resolution :clauses (.c5720 .c5729) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c5731 (resolution :clauses (.c5719 .c5730) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c5)) (not (= c6 c_1)) (not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c7)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)))))
(set .c5732 (resolution :clauses (.c5731 .c34 .c164 .c166 .c167 .c169) :conclusion ((= c_0 (f3 c_1 c5)) (not (= c6 c_1)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c7)) (not (= (f1 c_1) c_2)))))
(set .c5733 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c5) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c5)))))
(set .c5734 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c5 (f3 c4 c5))) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))))))
(set .c5735 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)))))
(set .c5736 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c5737 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c5738 (resolution :clauses (.c5736 .c5737) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5739 (resolution :clauses (.c5735 .c5738) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5740 (resolution :clauses (.c5734 .c5739) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5741 (resolution :clauses (.c5733 .c5740) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c5)) (not (= c6 c_1)) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5742 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c5743 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c5744 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c5745 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c5746 (resolution :clauses (.c5744 .c5745) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5747 (resolution :clauses (.c5743 .c5746) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5748 (resolution :clauses (.c5742 .c5747) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5749 (resolution :clauses (.c5741 .c5748) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c5)) (not (= c6 c_1)) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)))))
(set .c5750 (resolution :clauses (.c5749 .c1739 .c32 .c34) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= c_0 (f3 c_1 c5)) (not (= c6 c_1)) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= c_0 c7)))))
(set .c5751 (resolution :clauses (.c5750 .c5710 .c260 .c5732) :conclusion ((= c_0 (f3 c_1 c5)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= c_0 c7)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (= c_0 (f3 c_2 c5)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (= c5 c_0) (not (= (f1 c_2) c_2)))))
(set .c5752 (resolution :clauses (.c4937 .c5710 .c260 .c5601 .c263 .c5751) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (= c_0 (f3 c_2 c5)) (not (= (f1 c_1) c_2)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (= c5 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f1 c_2) c_2)))))
(set .c5753 (resolution :clauses (.c260 .c4937 .c5601) :conclusion ((= c5 c_0) (not (= c_0 (f3 c_0 c_1))) (= c_0 (f3 c_0 c5)) (not (= (f1 c_1) c_2)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c5754 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c4) c_0))))
(set .c5755 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c4 c_0)) (= (f3 c_0 c4) (f3 c_0 c_0)))))
(set .c5756 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5757 (resolution :clauses (.c5755 .c5756) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c4) (f3 c_0 c_0)))))
(set .c5758 (resolution :clauses (.c5754 .c5757) :conclusion ((not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c4 c_0)))))
(set .c5759 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_0)) (f3 c_0 c_1))) (not (= c_0 (f3 c_0 c_1))) (not (= c_0 c7)) (= c6 c7))))
(set .c5760 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c5761 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5762 (resolution :clauses (.c5760 .c5761) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c5763 (resolution :clauses (.c5759 .c5762) :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 (f3 c_1 c_0)) (f3 c_0 c_1))) (not (= c_0 (f3 c_0 c_1))) (not (= c_0 c7)) (= c6 c7))))
(set .c5764 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_0) c_1)) (= (f3 c_0 (f3 c_1 c_0)) (f3 c_0 c_1)))))
(set .c5765 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c_0) c_1))))
(set .c5766 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c_0 (f3 c4 c5))) (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5))))))
(set .c5767 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c5))) (not (= (f3 c_0 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c5768 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c5)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5769 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5770 (resolution :clauses (.c5768 .c5769) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5771 (resolution :clauses (.c5767 .c5770) :conclusion ((not (= c_0 (f3 c_0 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)))))
(set .c5772 (resolution :clauses (.c5766 .c5771) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5773 (resolution :clauses (.c5765 .c5772) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c_0) c_1) (not (= c6 c_1)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5774 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c5775 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c5))) (not (= (f3 c_0 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c5776 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c5)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5777 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5778 (resolution :clauses (.c5776 .c5777) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5779 (resolution :clauses (.c5775 .c5778) :conclusion ((not (= c_0 (f3 c_0 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)))))
(set .c5780 (resolution :clauses (.c5774 .c5779) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5781 (resolution :clauses (.c5773 .c5780) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c_0) c_1) (not (= c6 c_1)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c5782 (resolution :clauses (.c5764 .c5781) :conclusion ((not (= c_0 c_0)) (= (f3 c_0 (f3 c_1 c_0)) (f3 c_0 c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= c6 c_1)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c5783 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5784 (resolution :clauses (.c5782 .c5783) :conclusion ((= (f3 c_0 (f3 c_1 c_0)) (f3 c_0 c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= c6 c_1)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c5785 (resolution :clauses (.c5763 .c5784) :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c_0 (f3 c_0 c_1))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5786 (resolution :clauses (.c5785 .c34 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c_0 (f3 c_0 c_1))) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5787 (resolution :clauses (.c5786 .c226 .c5753 .c4333) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c_0 (f3 c_0 c_1))) (not (= c_0 c7)) (not (= c4 c_0)) (= (f3 c_0 c_0) c_0) (= c5 c_0) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))))))
(set .c5788 (resolution :clauses (.c288 .c3007 .c2959) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_0)))))
(set .c5789 (eq_transitive :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2))))
(set .c5790 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c5791 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c5))) (not (= (f3 c_0 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c5792 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c5)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5793 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5794 (resolution :clauses (.c5792 .c5793) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5795 (resolution :clauses (.c5791 .c5794) :conclusion ((not (= c_0 (f3 c_0 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)))))
(set .c5796 (resolution :clauses (.c5790 .c5795) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5797 (resolution :clauses (.c5789 .c5796) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5798 (eq_congruent :conclusion ((not (= c6 (f3 c_0 c_1))) (not (= c_0 (f3 c4 c5))) (= (f3 (f3 c_0 c_1) c_0) (f3 c6 (f3 c4 c5))))))
(set .c5799 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 c_0 c_1))) (= c6 (f3 c_0 c_1)))))
(set .c5800 (resolution :clauses (.c5798 .c5799) :conclusion ((not (= c_0 (f3 c4 c5))) (= (f3 (f3 c_0 c_1) c_0) (f3 c6 (f3 c4 c5))) (not (= c6 c_1)) (not (= c_1 (f3 c_0 c_1))))))
(set .c5801 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c5))) (not (= (f3 c_0 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c5802 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c5)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5803 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5804 (resolution :clauses (.c5802 .c5803) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5805 (resolution :clauses (.c5801 .c5804) :conclusion ((not (= c_0 (f3 c_0 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)))))
(set .c5806 (resolution :clauses (.c5800 .c5805) :conclusion ((= (f3 (f3 c_0 c_1) c_0) (f3 c6 (f3 c4 c5))) (not (= c6 c_1)) (not (= c_1 (f3 c_0 c_1))) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5807 (resolution :clauses (.c5797 .c5806) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c5808 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0))))))
(set .c5809 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5810 (resolution :clauses (.c5808 .c5809) :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0))))))
(set .c5811 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)))))
(set .c5812 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c5813 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c5))) (not (= (f3 c_0 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c5814 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c5)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5815 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5816 (resolution :clauses (.c5814 .c5815) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5817 (resolution :clauses (.c5813 .c5816) :conclusion ((not (= c_0 (f3 c_0 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)))))
(set .c5818 (resolution :clauses (.c5812 .c5817) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5819 (resolution :clauses (.c5811 .c5818) :conclusion ((not (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5820 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c_0 (f3 c4 c5))) (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5))))))
(set .c5821 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c5))) (not (= (f3 c_0 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c5822 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c5)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5823 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5824 (resolution :clauses (.c5822 .c5823) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5825 (resolution :clauses (.c5821 .c5824) :conclusion ((not (= c_0 (f3 c_0 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)))))
(set .c5826 (resolution :clauses (.c5820 .c5825) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5827 (resolution :clauses (.c5819 .c5826) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c5828 (resolution :clauses (.c5810 .c5827) :conclusion ((= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c5829 (resolution :clauses (.c5807 .c5828) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c5830 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c5831 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5832 (resolution :clauses (.c5830 .c5831) :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c5833 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)))))
(set .c5834 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c5835 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c5))) (not (= (f3 c_0 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c5836 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c5)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5837 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5838 (resolution :clauses (.c5836 .c5837) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5839 (resolution :clauses (.c5835 .c5838) :conclusion ((not (= c_0 (f3 c_0 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)))))
(set .c5840 (resolution :clauses (.c5834 .c5839) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5841 (resolution :clauses (.c5833 .c5840) :conclusion ((not (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5842 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c_0 (f3 c4 c5))) (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5))))))
(set .c5843 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c5))) (not (= (f3 c_0 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c5844 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c5)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5845 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5846 (resolution :clauses (.c5844 .c5845) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5847 (resolution :clauses (.c5843 .c5846) :conclusion ((not (= c_0 (f3 c_0 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)))))
(set .c5848 (resolution :clauses (.c5842 .c5847) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5849 (resolution :clauses (.c5841 .c5848) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c5850 (resolution :clauses (.c5832 .c5849) :conclusion ((= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c5851 (resolution :clauses (.c5829 .c5850) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c5852 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_0 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0))))))
(set .c5853 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_2)) (= (f3 c_0 c_0) (f1 c_1)))))
(set .c5854 (resolution :clauses (.c5852 .c5853) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_2)))))
(set .c5855 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5856 (resolution :clauses (.c5854 .c5855) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_2)))))
(set .c5857 (resolution :clauses (.c5851 .c5856) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= c6 c_1)) (not (= (f1 c_1) c_2)))))
(set .c5858 (resolution :clauses (.c5857 .c34 .c168) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= c6 c_1)) (not (= (f1 c_1) c_2)))))
(set .c5859 (resolution :clauses (.c5858 .c226 .c5788 .c228) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= (f3 c_0 c_1) c_2) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= c6 c_1)) (not (= (f1 c_1) c_2)) (= (f3 c_0 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= c_0 (f3 c_0 c_1)))))
(set .c5860 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c5861 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c5862 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5863 (resolution :clauses (.c5861 .c5862) :conclusion ((not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c5864 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)))))
(set .c5865 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5866 (resolution :clauses (.c5864 .c5865) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)) (not (= c6 c_1)))))
(set .c5867 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5868 (resolution :clauses (.c5866 .c5867) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5869 (resolution :clauses (.c5863 .c5868) :conclusion ((= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5870 (resolution :clauses (.c5860 .c5869) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c5871 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_0) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c5872 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5873 (resolution :clauses (.c5871 .c5872) :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 (f3 c_1 c_0) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c5874 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (= (f3 c_1 c_0) (f3 c_0 c_0)))))
(set .c5875 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c5876 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c5))) (not (= (f3 c_0 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c5877 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c5)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5878 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5879 (resolution :clauses (.c5877 .c5878) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5880 (resolution :clauses (.c5876 .c5879) :conclusion ((not (= c_0 (f3 c_0 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)))))
(set .c5881 (resolution :clauses (.c5875 .c5880) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5882 (resolution :clauses (.c5874 .c5881) :conclusion ((not (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5883 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c_0 (f3 c4 c5))) (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5))))))
(set .c5884 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c5))) (not (= (f3 c_0 c5) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c5885 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c5)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5886 (eq_reflexive :conclusion ((= c5 c5))))
(set .c5887 (resolution :clauses (.c5885 .c5886) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c5888 (resolution :clauses (.c5884 .c5887) :conclusion ((not (= c_0 (f3 c_0 c5))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)))))
(set .c5889 (resolution :clauses (.c5883 .c5888) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5890 (resolution :clauses (.c5882 .c5889) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c5891 (resolution :clauses (.c5873 .c5890) :conclusion ((= (f3 (f3 c_1 c_0) c_1) (f3 (f3 c_0 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c5892 (resolution :clauses (.c5870 .c5891) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5893 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) (f3 c_0 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1))))))
(set .c5894 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5895 (resolution :clauses (.c5893 .c5894) :conclusion ((not (= (f1 c_1) (f3 c_0 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1))))))
(set .c5896 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_1) (f3 c_0 c_1)))))
(set .c5897 (resolution :clauses (.c5895 .c5896) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c5898 (resolution :clauses (.c5892 .c5897) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5899 (resolution :clauses (.c5898 .c34 .c164 .c166 .c167 .c168 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_0 c7)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)))))
(set .c5900 (resolution :clauses (.c5899 .c5859) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_0 c7)) (not (= (f1 c_1) c_2)) (not (= c_0 (f3 c_0 c5))) (not (= c4 c_0)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= (f3 c_0 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= c_0 (f3 c_0 c_1)))))
(set .c5901 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c5) (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)))))
(set .c5902 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c5903 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f1 c_1) (f3 c4 c5)))))
(set .c5904 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c5905 (resolution :clauses (.c5903 .c5904) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c5906 (resolution :clauses (.c5902 .c5905) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c5907 (resolution :clauses (.c5901 .c5906) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c5) (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)) (not (= c6 c_1)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c5908 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c5 c_1)) (= (f3 c_2 c5) (f3 (f2 c_1) c_1)))))
(set .c5909 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (= (f2 c_1) c_2))))
(set .c5910 (resolution :clauses (.c5908 .c5909) :conclusion ((not (= c5 c_1)) (= (f3 c_2 c5) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c5911 (resolution :clauses (.c5907 .c5910) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)) (not (= c6 c_1)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5912 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c5913 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f1 c_0) (f3 c4 c5)))))
(set .c5914 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5915 (resolution :clauses (.c5913 .c5914) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)))))
(set .c5916 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c5917 (resolution :clauses (.c5915 .c5916) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c5918 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5919 (resolution :clauses (.c5917 .c5918) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c5920 (resolution :clauses (.c5912 .c5919) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c5921 (resolution :clauses (.c5911 .c5920) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)) (not (= c6 c_1)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c5922 (resolution :clauses (.c5921 .c1739 .c32 .c34 .c164 .c166 .c167 .c168) :conclusion ((= c_0 (f3 c_2 c5)) (not (= c6 c_1)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c5923 (eq_transitive :conclusion ((not (= (f3 c_0 c5) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (= (f3 c_0 c5) c_1))))
(set .c5924 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c_1)) (= (f3 c_0 c5) (f3 c_0 c_1)))))
(set .c5925 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c5926 (resolution :clauses (.c5924 .c5925) :conclusion ((not (= c5 c_1)) (= (f3 c_0 c5) (f3 c_0 c_1)))))
(set .c5927 (resolution :clauses (.c5923 .c5926) :conclusion ((not (= c_1 (f3 c_0 c_1))) (= (f3 c_0 c5) c_1) (not (= c5 c_1)))))
(set .c5928 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_2 c4))) (= c_0 (f3 c_2 c4)))))
(set .c5929 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c4 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c4)))))
(set .c5930 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (= (f2 c_0) c_2))))
(set .c5931 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c5932 (resolution :clauses (.c5930 .c5931) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (= (f2 c_0) c_2) (not (= c4 c_0)))))
(set .c5933 (resolution :clauses (.c5929 .c5932) :conclusion ((not (= c4 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)))))
(set .c5934 (resolution :clauses (.c5928 .c5933) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_2 c4)) (not (= c4 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)))))
(set .c5935 (resolution :clauses (.c5934 .c31) :conclusion ((= c_0 (f3 c_2 c4)) (not (= c4 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)))))
(set .c5936 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_0) (f1 c_0)))))
(set .c5937 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5938 (resolution :clauses (.c5936 .c5937) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)))))
(set .c5939 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5940 (resolution :clauses (.c5938 .c5939) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c5941 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c5942 (resolution :clauses (.c5940 .c5941) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= c4 c_0)))))
(set .c5943 (resolution :clauses (.c5942 .c166 .c164) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= c4 c_0)))))
(set .c5944 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (= (f2 c_0) (f1 c_1)))))
(set .c5945 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c5946 (resolution :clauses (.c5944 .c5945) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c_0) (f1 c_1)) (not (= c4 c_0)))))
(set .c5947 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c4) (f1 c_2)))))
(set .c5948 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)))))
(set .c5949 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5950 (resolution :clauses (.c5948 .c5949) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)) (not (= c6 c_1)))))
(set .c5951 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5952 (resolution :clauses (.c5950 .c5951) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5953 (resolution :clauses (.c5952 .c164 .c166) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c5954 (resolution :clauses (.c5927 .c228 .c5922 .c276 .c5709 .c260 .c5601 .c5900 .c5787 .c5758 .c284 .c173 .c189 .c171 .c191 .c177 .c5935 .c5943 .c5946 .c258 .c5752 .c5947 .c5953 .c1165 .c5234) :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) c_2)) (not (= c_0 c7)) (not (= (f2 c5) (f1 c_0))) (= c5 c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_0))) (not (= (f1 c_0) (f2 c_1))) (= c4 c_1) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f2 c5) (f1 c_1))) (not (= (f1 c_2) c_2)))))
(set .c5955 (eq_transitive :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 c5))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f3 c_0 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1))))
(set .c5956 (eq_congruent :conclusion ((not (= (f2 c_1) c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c5957 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c5958 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c5959 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c5960 (resolution :clauses (.c5958 .c5959) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5961 (resolution :clauses (.c5957 .c5960) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5962 (resolution :clauses (.c5956 .c5961) :conclusion ((not (= (f2 c_1) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5963 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_1) c7))))
(set .c5964 (resolution :clauses (.c5962 .c5963) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)))))
(set .c5965 (resolution :clauses (.c5955 .c5964) :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 c5))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f3 c_0 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)))))
(set .c5966 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f3 c_1 (f3 c_0 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c5967 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c5968 (resolution :clauses (.c5966 .c5967) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_0 c_1)) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c5969 (resolution :clauses (.c5965 .c5968) :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 c5))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c5970 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_1)) (not (= c5 c_1)) (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 c5)))))
(set .c5971 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_0) c_1))))
(set .c5972 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0)))))
(set .c5973 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c5974 (resolution :clauses (.c5972 .c5973) :conclusion ((not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0)))))
(set .c5975 (resolution :clauses (.c5971 .c5974) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_0) c_1) (not (= (f1 c_1) c_0)))))
(set .c5976 (resolution :clauses (.c5970 .c5975) :conclusion ((not (= c5 c_1)) (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 c5)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f1 c_1) c_0)))))
(set .c5977 (resolution :clauses (.c5969 .c5976) :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)))))
(set .c5978 (resolution :clauses (.c5977 .c168 .c34 .c32 .c1739) :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (= (f3 c_1 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c5979 (eq_transitive :conclusion ((not (= (f3 c_0 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_0 c5) c_1))))
(set .c5980 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c5 c_1)) (= (f3 c_0 c5) (f3 (f2 c_1) c_1)))))
(set .c5981 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c5982 (resolution :clauses (.c5980 .c5981) :conclusion ((not (= c5 c_1)) (= (f3 c_0 c5) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5983 (resolution :clauses (.c5979 .c5982) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_0 c5) c_1) (not (= c5 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c5984 (resolution :clauses (.c5983 .c1739 .c32) :conclusion ((= (f3 c_0 c5) c_1) (not (= c5 c_1)) (not (= (f1 c_1) c_0)))))
(set .c5985 (resolution :clauses (.c270 .c5978 .c5984) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c5986 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)))))
(set .c5987 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c4 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c4)))))
(set .c5988 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c5989 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c5990 (resolution :clauses (.c5988 .c5989) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c5991 (resolution :clauses (.c5987 .c5990) :conclusion ((not (= c4 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c5992 (resolution :clauses (.c5986 .c5991) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_1 c4)) (not (= c4 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c5993 (resolution :clauses (.c5992 .c31) :conclusion ((= c_0 (f3 c_1 c4)) (not (= c4 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c5994 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c4) (f1 c_0)))))
(set .c5995 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c5996 (resolution :clauses (.c5994 .c5995) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_0)) (not (= c_0 c7)))))
(set .c5997 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c5998 (resolution :clauses (.c5996 .c5997) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c5999 (resolution :clauses (.c5998 .c164 .c166) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c6000 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c5) (f1 c_1)))))
(set .c6001 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c6002 (resolution :clauses (.c6000 .c6001) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_1)) (not (= c6 c_1)))))
(set .c6003 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6004 (resolution :clauses (.c6002 .c6003) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c6005 (resolution :clauses (.c6004 .c164 .c166) :conclusion ((not (= (f2 c5) (f1 c_0))) (= (f2 c5) (f1 c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c6006 (resolution :clauses (.c5993 .c287 .c5758 .c226 .c5786 .c4444 .c5056 .c5525 .c252 .c5985 .c191 .c177 .c93 .c5946 .c5943 .c260 .c258 .c5578 .c5556 .c5954 .c5999 .c5609 .c6005 .c179 .c13 .c4675 .c1739) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f1 c_2) c_2)) (= c5 c_0) (= c4 c_1))))
(set .c6007 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c6008 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6009 (resolution :clauses (.c6007 .c6008) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c6 c_2)))))
(set .c6010 (eq_congruent :conclusion ((not (= c4 (f3 c4 c5))) (= (f2 c4) (f2 (f3 c4 c5))))))
(set .c6011 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 c5))) (not (= (f3 c_0 c5) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c6012 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c5)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c6013 (eq_reflexive :conclusion ((= c5 c5))))
(set .c6014 (resolution :clauses (.c6012 .c6013) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c5) (f3 c4 c5)))))
(set .c6015 (resolution :clauses (.c6011 .c6014) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 c5))) (= c4 (f3 c4 c5)))))
(set .c6016 (resolution :clauses (.c6010 .c6015) :conclusion ((= (f2 c4) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c_0 (f3 c_0 c5))))))
(set .c6017 (resolution :clauses (.c6009 .c6016) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 c5))))))
(set .c6018 (resolution :clauses (.c6017 .c164) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 c5))))))
(set .c6019 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c6020 (eq_congruent :conclusion ((not (= c4 (f1 c_2))) (= (f2 c4) (f2 (f1 c_2))))))
(set .c6021 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (= c4 (f1 c_2)))))
(set .c6022 (resolution :clauses (.c6020 .c6021) :conclusion ((= (f2 c4) (f2 (f1 c_2))) (not (= c4 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6023 (resolution :clauses (.c6019 .c6022) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_2)))))
(set .c6024 (resolution :clauses (.c6023 .c91) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_2)))))
(set .c6025 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c6026 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6027 (resolution :clauses (.c6025 .c6026) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c6 c_2)))))
(set .c6028 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6029 (resolution :clauses (.c6027 .c6028) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6030 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c6031 (resolution :clauses (.c6029 .c6030) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)))))
(set .c6032 (resolution :clauses (.c6031 .c1739 .c164 .c166) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)))))
(set .c6033 (resolution :clauses (.c258 .c6018 .c6024) :conclusion ((= c4 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c6 c_2)) (not (= c_0 (f3 c_0 c5))))))
(set .c6034 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c6035 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c6036 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_2) (f3 c4 c5)))))
(set .c6037 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c6038 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6039 (resolution :clauses (.c6037 .c6038) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6040 (resolution :clauses (.c6036 .c6039) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c6041 (resolution :clauses (.c6035 .c6040) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c6042 (resolution :clauses (.c6034 .c6041) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c6043 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c6044 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_0) (f3 c4 c5)))))
(set .c6045 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c6046 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6047 (resolution :clauses (.c6045 .c6046) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6048 (resolution :clauses (.c6044 .c6047) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c6049 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6050 (resolution :clauses (.c6048 .c6049) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c6051 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6052 (resolution :clauses (.c6050 .c6051) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6053 (resolution :clauses (.c6043 .c6052) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c6054 (resolution :clauses (.c6042 .c6053) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c6055 (resolution :clauses (.c6054 .c34 .c164 .c166 .c167 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= c_0 c7)) (not (= (f1 c_2) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c6056 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0))))
(set .c6057 (eq_congruent :conclusion ((not (= (f2 c_0) c6)) (not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))))))
(set .c6058 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (= (f2 c_0) c6))))
(set .c6059 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6060 (resolution :clauses (.c6058 .c6059) :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (= (f2 c_0) c6))))
(set .c6061 (eq_congruent :conclusion ((not (= c_0 (f3 c4 c5))) (= (f2 c_0) (f2 (f3 c4 c5))))))
(set .c6062 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c6063 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6064 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6065 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6066 (resolution :clauses (.c6064 .c6065) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)) (not (= c6 c_2)))))
(set .c6067 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6068 (resolution :clauses (.c6066 .c6067) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= c5 (f1 c_0)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6069 (resolution :clauses (.c6063 .c6068) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6070 (resolution :clauses (.c6062 .c6069) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6071 (resolution :clauses (.c6061 .c6070) :conclusion ((= (f2 c_0) (f2 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6072 (resolution :clauses (.c6060 .c6071) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (= (f2 c_0) c6) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)))))
(set .c6073 (resolution :clauses (.c6057 .c6072) :conclusion ((not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)))))
(set .c6074 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c6075 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6076 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6077 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6078 (resolution :clauses (.c6076 .c6077) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)) (not (= c6 c_2)))))
(set .c6079 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6080 (resolution :clauses (.c6078 .c6079) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= c5 (f1 c_0)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6081 (resolution :clauses (.c6075 .c6080) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6082 (resolution :clauses (.c6074 .c6081) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6083 (resolution :clauses (.c6073 .c6082) :conclusion ((= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)))))
(set .c6084 (resolution :clauses (.c6056 .c6083) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)))))
(set .c6085 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4)))))
(set .c6086 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c6087 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6088 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6089 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6090 (resolution :clauses (.c6088 .c6089) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)) (not (= c6 c_2)))))
(set .c6091 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6092 (resolution :clauses (.c6090 .c6091) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= c5 (f1 c_0)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6093 (resolution :clauses (.c6087 .c6092) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6094 (resolution :clauses (.c6086 .c6093) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6095 (resolution :clauses (.c6085 .c6094) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)))))
(set .c6096 (resolution :clauses (.c6084 .c6095) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)))))
(set .c6097 (resolution :clauses (.c6096 .c167 .c34 .c164 .c166 .c31) :conclusion ((= (f3 c_0 c4) c_0) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c6098 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_2 c4))) (= c_0 (f3 c_2 c4)))))
(set .c6099 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c4 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c4)))))
(set .c6100 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c6101 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6102 (resolution :clauses (.c6100 .c6101) :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)))))
(set .c6103 (eq_congruent :conclusion ((not (= c_0 (f3 c4 c5))) (= (f2 c_0) (f2 (f3 c4 c5))))))
(set .c6104 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c6105 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6106 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6107 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6108 (resolution :clauses (.c6106 .c6107) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)) (not (= c6 c_2)))))
(set .c6109 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6110 (resolution :clauses (.c6108 .c6109) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= c5 (f1 c_0)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6111 (resolution :clauses (.c6105 .c6110) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6112 (resolution :clauses (.c6104 .c6111) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6113 (resolution :clauses (.c6103 .c6112) :conclusion ((= (f2 c_0) (f2 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6114 (resolution :clauses (.c6102 .c6113) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)))))
(set .c6115 (resolution :clauses (.c6099 .c6114) :conclusion ((not (= c4 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c4)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)))))
(set .c6116 (resolution :clauses (.c6098 .c6115) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_2 c4)) (not (= c4 c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c7)))))
(set .c6117 (resolution :clauses (.c6116 .c31 .c167 .c166 .c164) :conclusion ((= c_0 (f3 c_2 c4)) (not (= c4 c_0)) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c6118 (eq_transitive :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c4) (f1 c_0)))))
(set .c6119 (eq_congruent :conclusion ((not (= c4 (f3 c4 c5))) (= (f2 c4) (f2 (f3 c4 c5))))))
(set .c6120 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c6121 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6122 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6123 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6124 (resolution :clauses (.c6122 .c6123) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= c5 (f1 c_0)) (not (= c6 c_2)))))
(set .c6125 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6126 (resolution :clauses (.c6124 .c6125) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= c5 (f1 c_0)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6127 (resolution :clauses (.c6121 .c6126) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6128 (resolution :clauses (.c6120 .c6127) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6129 (resolution :clauses (.c6119 .c6128) :conclusion ((= (f2 c4) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6130 (resolution :clauses (.c6118 .c6129) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c4) (f1 c_0)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6131 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6132 (resolution :clauses (.c6130 .c6131) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_0)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6133 (resolution :clauses (.c6132 .c164 .c167 .c166) :conclusion ((= (f2 c4) (f1 c_0)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6134 (resolution :clauses (.c284 .c6097 .c6117 .c6133 .c258 .c6055) :conclusion ((not (= (f2 c5) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c_0 c7)) (= c4 c_1))))
(set .c6135 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c6136 (eq_congruent :conclusion ((not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1))))))
(set .c6137 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6138 (resolution :clauses (.c6136 .c6137) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6139 (resolution :clauses (.c6135 .c6138) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6140 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6141 (resolution :clauses (.c6139 .c6140) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c6142 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c6143 (resolution :clauses (.c6141 .c6142) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c6144 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c6145 (resolution :clauses (.c6143 .c6144) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c6146 (resolution :clauses (.c6145 .c1739 .c166) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c6147 (resolution :clauses (.c6146 .c258 .c5608) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_1)) (not (= c5 c_1)) (not (= c_0 c7)) (= c4 c_1) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)))))
(set .c6148 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_1)))) (not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (not (= (f3 (f3 c_2 c_0) c_1) (f3 c_0 c_1))) (= c_0 (f3 c_0 c_1)))))
(set .c6149 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_0) c_1) (f3 c_0 c_1)))))
(set .c6150 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c6151 (resolution :clauses (.c6149 .c6150) :conclusion ((not (= (f3 c_2 c_0) c_0)) (= (f3 (f3 c_2 c_0) c_1) (f3 c_0 c_1)))))
(set .c6152 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0))))
(set .c6153 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c6154 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c6155 (resolution :clauses (.c6153 .c6154) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c6156 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c6157 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6158 (resolution :clauses (.c6156 .c6157) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)))))
(set .c6159 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6160 (resolution :clauses (.c6158 .c6159) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6161 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c6162 (resolution :clauses (.c6160 .c6161) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)))))
(set .c6163 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c6164 (resolution :clauses (.c6162 .c6163) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6165 (resolution :clauses (.c6155 .c6164) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6166 (resolution :clauses (.c6152 .c6165) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6167 (resolution :clauses (.c6151 .c6166) :conclusion ((= (f3 (f3 c_2 c_0) c_1) (f3 c_0 c_1)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6168 (resolution :clauses (.c6148 .c6167) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_1)))) (not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (= c_0 (f3 c_0 c_1)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6169 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_1))))))
(set .c6170 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6171 (resolution :clauses (.c6169 .c6170) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6172 (resolution :clauses (.c6168 .c6171) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (= c_0 (f3 c_0 c_1)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6173 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c6174 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f1 c_0) (f3 c4 c5)))))
(set .c6175 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6176 (resolution :clauses (.c6174 .c6175) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6177 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6178 (resolution :clauses (.c6176 .c6177) :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c6 c_2)))))
(set .c6179 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6180 (resolution :clauses (.c6178 .c6179) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6181 (resolution :clauses (.c6173 .c6180) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c6 c_2)))))
(set .c6182 (resolution :clauses (.c6172 .c6181) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (= c_0 (f3 c_0 c_1)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f3 c_0 c_1) c_2)))))
(set .c6183 (resolution :clauses (.c6182 .c1739 .c31 .c34 .c164 .c166 .c167) :conclusion ((not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f3 c_0 c_1) c_2)))))
(set .c6184 (resolution :clauses (.c6183 .c228) :conclusion ((not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)) (= c_1 (f3 c_0 c_1)))))
(set .c6185 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_1)))) (not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (not (= (f3 (f3 c_2 c_0) c_1) (f3 c_0 c_1))) (not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c4) c_0))))
(set .c6186 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_0) c_1) (f3 c_0 c_1)))))
(set .c6187 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c6188 (resolution :clauses (.c6186 .c6187) :conclusion ((not (= (f3 c_2 c_0) c_0)) (= (f3 (f3 c_2 c_0) c_1) (f3 c_0 c_1)))))
(set .c6189 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0))))
(set .c6190 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c6191 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c6192 (resolution :clauses (.c6190 .c6191) :conclusion ((not (= (f2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f2 c_0) c_0)))))
(set .c6193 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c6194 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6195 (resolution :clauses (.c6193 .c6194) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)))))
(set .c6196 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6197 (resolution :clauses (.c6195 .c6196) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6198 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c6199 (resolution :clauses (.c6197 .c6198) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)))))
(set .c6200 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c6201 (resolution :clauses (.c6199 .c6200) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6202 (resolution :clauses (.c6192 .c6201) :conclusion ((= (f3 c_2 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6203 (resolution :clauses (.c6189 .c6202) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_2 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6204 (resolution :clauses (.c6188 .c6203) :conclusion ((= (f3 (f3 c_2 c_0) c_1) (f3 c_0 c_1)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6205 (resolution :clauses (.c6185 .c6204) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_1)))) (not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c4) c_0) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6206 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_1))))))
(set .c6207 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6208 (resolution :clauses (.c6206 .c6207) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6209 (resolution :clauses (.c6205 .c6208) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c4) c_0) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6210 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4)))))
(set .c6211 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 c_1))) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= c4 (f3 c4 c5)))))
(set .c6212 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6213 (resolution :clauses (.c6211 .c6212) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 c_1))) (= c4 (f3 c4 c5)) (not (= c5 c_1)))))
(set .c6214 (resolution :clauses (.c6210 .c6213) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 c_1))) (not (= c5 c_1)))))
(set .c6215 (resolution :clauses (.c6209 .c6214) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c4) c_0) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6216 (resolution :clauses (.c6215 .c1739 .c31 .c34 .c164 .c166) :conclusion ((not (= (f3 (f3 c_2 c_0) c_1) (f3 c_2 (f3 c_0 c_1)))) (not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c4) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6217 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_0) (f1 c_2)))))
(set .c6218 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6219 (resolution :clauses (.c6217 .c6218) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c6 c_2)))))
(set .c6220 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6221 (resolution :clauses (.c6219 .c6220) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6222 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c6223 (resolution :clauses (.c6221 .c6222) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)))))
(set .c6224 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c6225 (resolution :clauses (.c6223 .c6224) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6226 (resolution :clauses (.c6225 .c166 .c164 .c1739) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_0) (f1 c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6227 (resolution :clauses (.c6216 .c6184 .c209 .c6226 .c284 .c5935) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_0)) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_0) (f2 c_1))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= (f1 c_1) c_2)))))
(set .c6228 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_0 c5) c_1))))
(set .c6229 (eq_congruent :conclusion ((not (= c6 (f2 c_1))) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c6230 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c6231 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c6232 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c6233 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6234 (resolution :clauses (.c6232 .c6233) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (= c4 (f2 c_1)) (not (= c6 c_2)))))
(set .c6235 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6236 (resolution :clauses (.c6234 .c6235) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (= c4 (f2 c_1)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6237 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c6238 (resolution :clauses (.c6236 .c6237) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (= c4 (f2 c_1)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)))))
(set .c6239 (resolution :clauses (.c6231 .c6238) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6240 (resolution :clauses (.c6230 .c6239) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6241 (resolution :clauses (.c6229 .c6240) :conclusion ((not (= c6 (f2 c_1))) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6242 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (= c6 (f2 c_1)))))
(set .c6243 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6244 (resolution :clauses (.c6242 .c6243) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (= c6 (f2 c_1)))))
(set .c6245 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6246 (resolution :clauses (.c6244 .c6245) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (= c6 (f2 c_1)) (not (= c_0 c7)))))
(set .c6247 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c6248 (resolution :clauses (.c6246 .c6247) :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (= c6 (f2 c_1)) (not (= c_0 c7)) (not (= c5 c_1)))))
(set .c6249 (resolution :clauses (.c6241 .c6248) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6250 (resolution :clauses (.c6228 .c6249) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_0 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6251 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5)))))
(set .c6252 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)))))
(set .c6253 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c6254 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c6255 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c6256 (resolution :clauses (.c6254 .c6255) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (= c4 (f2 c_1)) (not (= c6 c_2)))))
(set .c6257 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c6258 (resolution :clauses (.c6256 .c6257) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (= c4 (f2 c_1)) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6259 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c6260 (resolution :clauses (.c6258 .c6259) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (= c4 (f2 c_1)) (not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)))))
(set .c6261 (resolution :clauses (.c6253 .c6260) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6262 (resolution :clauses (.c6252 .c6261) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6263 (resolution :clauses (.c6251 .c6262) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5)) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)))))
(set .c6264 (resolution :clauses (.c6250 .c6263) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_0 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6265 (resolution :clauses (.c6264 .c32 .c34 .c164 .c166) :conclusion ((= (f3 c_0 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)) (not (= c_0 c7)))))
(set .c6266 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)))))
(set .c6267 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c6268 (resolution :clauses (.c6266 .c6267) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)) (not (= c5 c_1)))))
(set .c6269 (resolution :clauses (.c6268 .c1739) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)) (not (= c5 c_1)))))
(set .c6270 (resolution :clauses (.c6265 .c258 .c6227 .c6269 .c5927 .c276 .c5947 .c6147 .c13 .c603 .c5709 .c5234 .c6032 .c260 .c6134 .c5456 .c256 .c6006 .c5548 .c5474 .c303) :conclusion ((not (= (f1 c_2) c_2)) (not (= c_0 c7)) (= c5 c_0))))
(set .c6271 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1))))
(set .c6272 (eq_congruent :conclusion ((not (= c6 (f2 c_1))) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c6273 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c6274 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c6275 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c6276 (resolution :clauses (.c6274 .c6275) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6277 (resolution :clauses (.c6273 .c6276) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6278 (resolution :clauses (.c6272 .c6277) :conclusion ((not (= c6 (f2 c_1))) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6279 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c6 (f2 c_1)))))
(set .c6280 (resolution :clauses (.c6278 .c6279) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c6 c_2)))))
(set .c6281 (resolution :clauses (.c6271 .c6280) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c6 c_2)))))
(set .c6282 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5)))))
(set .c6283 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)))))
(set .c6284 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c6285 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c6286 (resolution :clauses (.c6284 .c6285) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6287 (resolution :clauses (.c6283 .c6286) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6288 (resolution :clauses (.c6282 .c6287) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5)) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6289 (resolution :clauses (.c6281 .c6288) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c6290 (resolution :clauses (.c6289 .c1739 .c32 .c34) :conclusion ((= (f3 c_1 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c6291 (resolution :clauses (.c6290 .c262 .c1476) :conclusion ((= (f3 c_1 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= c6 c_2)) (= c_0 c7))))
(set .c6292 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c6293 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c6294 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c6295 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c6296 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c6297 (resolution :clauses (.c6295 .c6296) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6298 (resolution :clauses (.c6294 .c6297) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6299 (resolution :clauses (.c6293 .c6298) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6300 (resolution :clauses (.c6292 .c6299) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)) (not (= c_0 c6)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6301 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5)))))
(set .c6302 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)))))
(set .c6303 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c6304 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c6305 (resolution :clauses (.c6303 .c6304) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6306 (resolution :clauses (.c6302 .c6305) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6307 (resolution :clauses (.c6301 .c6306) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5)) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6308 (resolution :clauses (.c6300 .c6307) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c5)) (not (= c_0 c6)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c_1 c7)))))
(set .c6309 (resolution :clauses (.c6308 .c1739 .c32 .c34) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= c_0 (f3 c_1 c5)) (not (= c_0 c6)) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= c_1 c7)))))
(set .c6310 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)))))
(set .c6311 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c6312 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c6313 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c6314 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c6315 (resolution :clauses (.c6313 .c6314) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6316 (resolution :clauses (.c6312 .c6315) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6317 (resolution :clauses (.c6311 .c6316) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6318 (resolution :clauses (.c6310 .c6317) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)) (not (= c_0 c6)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6319 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5)))))
(set .c6320 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)))))
(set .c6321 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c6322 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c6323 (resolution :clauses (.c6321 .c6322) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6324 (resolution :clauses (.c6320 .c6323) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6325 (resolution :clauses (.c6319 .c6324) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5)) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6326 (resolution :clauses (.c6318 .c6325) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_2 c5)) (not (= c_0 c6)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c6327 (resolution :clauses (.c6326 .c1739 .c32 .c34) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= c_0 (f3 c_2 c5)) (not (= c_0 c6)) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= c7 c_2)))))
(set .c6328 (resolution :clauses (.c6327 .c262 .c6309 .c256 .c6291 .c263 .c279 .c4937 .c5709) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= c_0 (f3 c_2 c5)) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (= c_0 c7) (= c6 c_1) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c6329 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c6330 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c6331 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_2) (f3 c4 c5)))))
(set .c6332 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c6333 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6334 (resolution :clauses (.c6332 .c6333) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6335 (resolution :clauses (.c6331 .c6334) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c6336 (resolution :clauses (.c6330 .c6335) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c6337 (resolution :clauses (.c6329 .c6336) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c6338 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c6339 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_0) (f3 c4 c5)))))
(set .c6340 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c6341 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6342 (resolution :clauses (.c6340 .c6341) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6343 (resolution :clauses (.c6339 .c6342) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c6344 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c6345 (resolution :clauses (.c6343 .c6344) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c6346 (resolution :clauses (.c6338 .c6345) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c6347 (resolution :clauses (.c6337 .c6346) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))))))
(set .c6348 (resolution :clauses (.c6347 .c34 .c165 .c167 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= c7 c_2)) (not (= (f1 c_2) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))))))
(set .c6349 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c6350 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c6351 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_1) (f3 c4 c5)))))
(set .c6352 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c6353 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6354 (resolution :clauses (.c6352 .c6353) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6355 (resolution :clauses (.c6351 .c6354) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6356 (resolution :clauses (.c6350 .c6355) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6357 (resolution :clauses (.c6349 .c6356) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6358 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c6359 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_0) (f3 c4 c5)))))
(set .c6360 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c6361 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6362 (resolution :clauses (.c6360 .c6361) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6363 (resolution :clauses (.c6359 .c6362) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c6364 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c6365 (resolution :clauses (.c6363 .c6364) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c6366 (resolution :clauses (.c6358 .c6365) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c6367 (resolution :clauses (.c6357 .c6366) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))))))
(set .c6368 (resolution :clauses (.c6367 .c34 .c165 .c167 .c168 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= c_1 c7)) (not (= (f1 c_1) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))))))
(set .c6369 (resolution :clauses (.c6368 .c262 .c6348) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (= c_0 c7))))
(set .c6370 (resolution :clauses (.c262 .c1612 .c1476 .c256 .c6369) :conclusion ((= c_0 c7) (not (= (f1 c_2) c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c6 c_1) (not (= (f2 c5) (f1 c_0))))))
(set .c6371 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 c5))) (not (= (f3 c_0 c5) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= c6 c_2))))
(set .c6372 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c_1)) (= (f3 c_0 c5) (f3 c_0 c_1)))))
(set .c6373 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c6374 (resolution :clauses (.c6372 .c6373) :conclusion ((not (= c5 c_1)) (= (f3 c_0 c5) (f3 c_0 c_1)))))
(set .c6375 (resolution :clauses (.c6371 .c6374) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 c5))) (not (= (f3 c_0 c_1) c_2)) (= c6 c_2) (not (= c5 c_1)))))
(set .c6376 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 c_1 c5))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c5) c_2))))
(set .c6377 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c6378 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c6379 (resolution :clauses (.c6377 .c6378) :conclusion ((not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c6380 (resolution :clauses (.c6376 .c6379) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c5) c_2) (not (= c5 c_1)))))
(set .c6381 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1))) (= c_0 (f3 c_0 c_1)))))
(set .c6382 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c6383 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c6384 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c6385 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c6386 (resolution :clauses (.c6384 .c6385) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6387 (resolution :clauses (.c6383 .c6386) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6388 (resolution :clauses (.c6382 .c6387) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6389 (resolution :clauses (.c6381 .c6388) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c_1)) (not (= c_0 c6)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6390 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)))))
(set .c6391 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c6392 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c6393 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c6394 (resolution :clauses (.c6392 .c6393) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6395 (resolution :clauses (.c6391 .c6394) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6396 (resolution :clauses (.c6390 .c6395) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6397 (resolution :clauses (.c6389 .c6396) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c_1)) (not (= c_0 c6)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c_1 c7)))))
(set .c6398 (resolution :clauses (.c6397 .c1739 .c32 .c34) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= c_0 (f3 c_0 c_1)) (not (= c_0 c6)) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= c_1 c7)))))
(set .c6399 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= c5 c_2))))
(set .c6400 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c6401 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c6402 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c6403 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c6404 (resolution :clauses (.c6402 .c6403) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6405 (resolution :clauses (.c6401 .c6404) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6406 (resolution :clauses (.c6400 .c6405) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6407 (resolution :clauses (.c6399 .c6406) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (= c5 c_2) (not (= c_0 c6)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6408 (eq_congruent :conclusion ((not (= (f2 c_1) c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c6409 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c6410 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c6411 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c6412 (resolution :clauses (.c6410 .c6411) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6413 (resolution :clauses (.c6409 .c6412) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6414 (resolution :clauses (.c6408 .c6413) :conclusion ((not (= (f2 c_1) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6415 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= c7 c_2)) (= (f2 c_1) c7))))
(set .c6416 (resolution :clauses (.c6414 .c6415) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c6417 (resolution :clauses (.c6407 .c6416) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (= c5 c_2) (not (= c_0 c6)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c6418 (resolution :clauses (.c6417 .c1739 .c32 .c34) :conclusion ((not (= c5 c_1)) (not (= (f3 c_0 c_1) c_2)) (= c5 c_2) (not (= c_0 c6)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= c7 c_2)))))
(set .c6419 (eq_transitive :conclusion ((not (= (f3 c_0 c5) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= (f3 c_0 c5) c_2))))
(set .c6420 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c_1)) (= (f3 c_0 c5) (f3 c_0 c_1)))))
(set .c6421 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c6422 (resolution :clauses (.c6420 .c6421) :conclusion ((not (= c5 c_1)) (= (f3 c_0 c5) (f3 c_0 c_1)))))
(set .c6423 (resolution :clauses (.c6419 .c6422) :conclusion ((not (= (f3 c_0 c_1) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_1)))))
(set .c6424 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)))))
(set .c6425 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c6426 (resolution :clauses (.c6424 .c6425) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c4 c_2)))))
(set .c6427 (resolution :clauses (.c6426 .c165 .c1739) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f1 c_0) (f2 c_1)) (not (= c4 c_2)))))
(set .c6428 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)))))
(set .c6429 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c6430 (resolution :clauses (.c6428 .c6429) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)) (not (= c4 c_2)))))
(set .c6431 (resolution :clauses (.c6430 .c165) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)) (not (= c4 c_2)))))
(set .c6432 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c5) (f1 c_1)))))
(set .c6433 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c6434 (resolution :clauses (.c6432 .c6433) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c5) (f1 c_1)) (not (= c4 c_2)))))
(set .c6435 (resolution :clauses (.c6434 .c165) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c5) (f1 c_1)) (not (= c4 c_2)))))
(set .c6436 (resolution :clauses (.c6418 .c262 .c6398 .c234 .c6380 .c265 .c6423 .c3158 .c228 .c256 .c5927 .c6291 .c276 .c279 .c6328 .c5709 .c260 .c6370 .c179 .c6427 .c6431 .c6435 .c1739) :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (= c_0 c7) (= c6 c_1) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c_0 (f3 c_2 c5)) (= c5 c_0) (not (= (f1 c_2) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c6437 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c6438 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c6439 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f1 c_2) (f3 c4 c5)))))
(set .c6440 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6441 (resolution :clauses (.c6439 .c6440) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6442 (resolution :clauses (.c6438 .c6441) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6443 (resolution :clauses (.c6437 .c6442) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6444 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c6445 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f1 c_0) (f3 c4 c5)))))
(set .c6446 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6447 (resolution :clauses (.c6445 .c6446) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6448 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c6449 (resolution :clauses (.c6447 .c6448) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6450 (resolution :clauses (.c6444 .c6449) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6451 (resolution :clauses (.c6443 .c6450) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c6452 (resolution :clauses (.c6451 .c1739 .c34 .c167 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= c7 c_2)) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) c_2)))))
(set .c6453 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c6454 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c6455 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f1 c_1) (f3 c4 c5)))))
(set .c6456 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6457 (resolution :clauses (.c6455 .c6456) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6458 (resolution :clauses (.c6454 .c6457) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6459 (resolution :clauses (.c6453 .c6458) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6460 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c6461 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f1 c_0) (f3 c4 c5)))))
(set .c6462 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6463 (resolution :clauses (.c6461 .c6462) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6464 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c6465 (resolution :clauses (.c6463 .c6464) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6466 (resolution :clauses (.c6460 .c6465) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6467 (resolution :clauses (.c6459 .c6466) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))))))
(set .c6468 (resolution :clauses (.c6467 .c1739 .c34 .c167 .c168 .c224) :conclusion ((not (= c_0 c6)) (not (= c_1 c7)) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f2 c5) (f1 c_0))))))
(set .c6469 (resolution :clauses (.c6468 .c262 .c6452 .c228 .c5927 .c276 .c5709) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f2 c5) (f1 c_0))) (= c_0 c7) (not (= (f1 c_2) c_2)) (= c_0 (f3 c_0 c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c6470 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c6471 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c6472 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c6473 (resolution :clauses (.c6471 .c6472) :conclusion ((not (= (f1 c_0) (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))))))
(set .c6474 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)))))
(set .c6475 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6476 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6477 (resolution :clauses (.c6475 .c6476) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6478 (resolution :clauses (.c6474 .c6477) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_0) (f3 c_0 c_1)) (not (= c5 c_2)))))
(set .c6479 (resolution :clauses (.c6473 .c6478) :conclusion ((= (f3 c_0 (f3 c_0 c_1)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c5 c_2)))))
(set .c6480 (resolution :clauses (.c6470 .c6479) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c5 c_2)))))
(set .c6481 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_0) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c6482 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c6483 (resolution :clauses (.c6481 .c6482) :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 (f3 c_1 c_0) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c6484 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)))))
(set .c6485 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c6486 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c6487 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6488 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6489 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6490 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6491 (resolution :clauses (.c6489 .c6490) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6492 (resolution :clauses (.c6488 .c6491) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6493 (resolution :clauses (.c6487 .c6492) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6494 (resolution :clauses (.c6486 .c6493) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6495 (resolution :clauses (.c6485 .c6494) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6496 (resolution :clauses (.c6484 .c6495) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6497 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0)))))
(set .c6498 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c6499 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6500 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6501 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6502 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6503 (resolution :clauses (.c6501 .c6502) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6504 (resolution :clauses (.c6500 .c6503) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6505 (resolution :clauses (.c6499 .c6504) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6506 (resolution :clauses (.c6498 .c6505) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6507 (resolution :clauses (.c6497 .c6506) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6508 (resolution :clauses (.c6496 .c6507) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_1 c7)))))
(set .c6509 (resolution :clauses (.c6483 .c6508) :conclusion ((= (f3 (f3 c_1 c_0) c_1) (f3 (f3 c_0 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_1 c7)))))
(set .c6510 (resolution :clauses (.c6480 .c6509) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c5 c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c4 c_0)))))
(set .c6511 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) (f3 c_0 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1))))))
(set .c6512 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c6513 (resolution :clauses (.c6511 .c6512) :conclusion ((not (= (f1 c_1) (f3 c_0 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1))))))
(set .c6514 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_1) (f3 c_0 c_1)))))
(set .c6515 (resolution :clauses (.c6513 .c6514) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)))))
(set .c6516 (resolution :clauses (.c6510 .c6515) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c5 c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c4 c_0)) (not (= (f1 c_1) c_2)))))
(set .c6517 (resolution :clauses (.c6516 .c34 .c91 .c167 .c168 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= c_1 c7)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= (f1 c_1) c_2)))))
(set .c6518 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0))))
(set .c6519 (eq_congruent :conclusion ((not (= (f2 c_0) c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)))))
(set .c6520 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c6521 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6522 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6523 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6524 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6525 (resolution :clauses (.c6523 .c6524) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6526 (resolution :clauses (.c6522 .c6525) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6527 (resolution :clauses (.c6521 .c6526) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6528 (resolution :clauses (.c6520 .c6527) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6529 (resolution :clauses (.c6519 .c6528) :conclusion ((not (= (f2 c_0) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6530 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7))))
(set .c6531 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c6532 (resolution :clauses (.c6530 .c6531) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7) (not (= c4 c_0)))))
(set .c6533 (resolution :clauses (.c6529 .c6532) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= c7 c_2)))))
(set .c6534 (resolution :clauses (.c6518 .c6533) :conclusion ((not (= (f3 c_0 c4) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= c7 c_2)))))
(set .c6535 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c4 (f3 c4 c5))) (= (f3 c_0 c4) (f3 c6 (f3 c4 c5))))))
(set .c6536 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c6537 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6538 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6539 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6540 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6541 (resolution :clauses (.c6539 .c6540) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6542 (resolution :clauses (.c6538 .c6541) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6543 (resolution :clauses (.c6537 .c6542) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6544 (resolution :clauses (.c6536 .c6543) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6545 (resolution :clauses (.c6535 .c6544) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c4) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6546 (resolution :clauses (.c6534 .c6545) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c6547 (resolution :clauses (.c6546 .c31 .c34 .c91 .c167) :conclusion ((= (f3 c_0 c4) c_0) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c6548 (eq_transitive :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2))))
(set .c6549 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c6550 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c6551 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6552 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6553 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6554 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6555 (resolution :clauses (.c6553 .c6554) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6556 (resolution :clauses (.c6552 .c6555) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6557 (resolution :clauses (.c6551 .c6556) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6558 (resolution :clauses (.c6550 .c6557) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6559 (resolution :clauses (.c6549 .c6558) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6560 (resolution :clauses (.c6548 .c6559) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6561 (eq_congruent :conclusion ((not (= c7 (f3 c_0 c_1))) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_0 c_1) c_0)))))
(set .c6562 (eq_transitive :conclusion ((not (= c_1 c7)) (not (= c_1 (f3 c_0 c_1))) (= c7 (f3 c_0 c_1)))))
(set .c6563 (resolution :clauses (.c6561 .c6562) :conclusion ((not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_0 c_1) c_0)) (not (= c_1 c7)) (not (= c_1 (f3 c_0 c_1))))))
(set .c6564 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c6565 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6566 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6567 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6568 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6569 (resolution :clauses (.c6567 .c6568) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6570 (resolution :clauses (.c6566 .c6569) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6571 (resolution :clauses (.c6565 .c6570) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6572 (resolution :clauses (.c6564 .c6571) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6573 (resolution :clauses (.c6563 .c6572) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f3 c_0 c_1) c_0)) (not (= c_1 c7)) (not (= c_1 (f3 c_0 c_1))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6574 (resolution :clauses (.c6560 .c6573) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_1 c7)))))
(set .c6575 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0))))))
(set .c6576 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c6577 (resolution :clauses (.c6575 .c6576) :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0))))))
(set .c6578 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)))))
(set .c6579 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c6580 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c6581 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6582 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6583 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6584 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6585 (resolution :clauses (.c6583 .c6584) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6586 (resolution :clauses (.c6582 .c6585) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6587 (resolution :clauses (.c6581 .c6586) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6588 (resolution :clauses (.c6580 .c6587) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6589 (resolution :clauses (.c6579 .c6588) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6590 (resolution :clauses (.c6578 .c6589) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6591 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0)))))
(set .c6592 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c6593 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6594 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6595 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6596 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6597 (resolution :clauses (.c6595 .c6596) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6598 (resolution :clauses (.c6594 .c6597) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6599 (resolution :clauses (.c6593 .c6598) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6600 (resolution :clauses (.c6592 .c6599) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6601 (resolution :clauses (.c6591 .c6600) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6602 (resolution :clauses (.c6590 .c6601) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_1 c7)))))
(set .c6603 (resolution :clauses (.c6577 .c6602) :conclusion ((= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_1 c7)))))
(set .c6604 (resolution :clauses (.c6574 .c6603) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_1 c7)))))
(set .c6605 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c6606 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c6607 (resolution :clauses (.c6605 .c6606) :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c6608 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)))))
(set .c6609 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c6610 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c6611 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6612 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6613 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6614 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6615 (resolution :clauses (.c6613 .c6614) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6616 (resolution :clauses (.c6612 .c6615) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6617 (resolution :clauses (.c6611 .c6616) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6618 (resolution :clauses (.c6610 .c6617) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6619 (resolution :clauses (.c6609 .c6618) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6620 (resolution :clauses (.c6608 .c6619) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6621 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0)))))
(set .c6622 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c6623 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6624 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6625 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6626 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6627 (resolution :clauses (.c6625 .c6626) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6628 (resolution :clauses (.c6624 .c6627) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6629 (resolution :clauses (.c6623 .c6628) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6630 (resolution :clauses (.c6622 .c6629) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6631 (resolution :clauses (.c6621 .c6630) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6632 (resolution :clauses (.c6620 .c6631) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_1 c7)))))
(set .c6633 (resolution :clauses (.c6607 .c6632) :conclusion ((= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_1 c7)))))
(set .c6634 (resolution :clauses (.c6604 .c6633) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_1 c7)))))
(set .c6635 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_0 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0))))))
(set .c6636 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_2)) (= (f3 c_0 c_0) (f1 c_1)))))
(set .c6637 (resolution :clauses (.c6635 .c6636) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_2)))))
(set .c6638 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c6639 (resolution :clauses (.c6637 .c6638) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_2)))))
(set .c6640 (resolution :clauses (.c6634 .c6639) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_1 c7)) (not (= (f1 c_1) c_2)))))
(set .c6641 (resolution :clauses (.c6640 .c34 .c91 .c167 .c168) :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_1) c_2) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= c_1 c7)) (not (= (f1 c_1) c_2)))))
(set .c6642 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_0) (f1 c_0)))))
(set .c6643 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6644 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6645 (resolution :clauses (.c6643 .c6644) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6646 (resolution :clauses (.c6642 .c6645) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_0) (f1 c_0)) (not (= c5 c_2)))))
(set .c6647 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c6648 (resolution :clauses (.c6646 .c6647) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_0) (f1 c_0)) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c6649 (resolution :clauses (.c6648 .c91) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (= (f2 c_0) (f1 c_0)) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c6650 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)))))
(set .c6651 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6652 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6653 (resolution :clauses (.c6651 .c6652) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6654 (resolution :clauses (.c6650 .c6653) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_0) (f2 c_1)) (not (= c5 c_2)))))
(set .c6655 (resolution :clauses (.c6654 .c91 .c1739) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f1 c_0) (f2 c_1)) (not (= c5 c_2)))))
(set .c6656 (resolution :clauses (.c6641 .c226 .c5788 .c228 .c6517 .c262 .c6547 .c189 .c173 .c171 .c191 .c177 .c6649 .c6655 .c260 .c6469) :conclusion ((not (= c_0 c6)) (not (= c4 c_0)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) c_2)) (= (f3 c_0 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (= c_0 (f3 c_0 c_1)) (= c_0 c7) (= (f3 c_0 c4) c_0) (not (= (f2 c_0) (f1 c_1))) (= c5 c_0) (not (= (f2 c4) (f1 c_2))))))
(set .c6657 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)))))
(set .c6658 (eq_congruent :conclusion ((not (= (f2 c_0) c6)) (not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))))))
(set .c6659 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= c6 c_2)) (= (f2 c_0) c6))))
(set .c6660 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c6661 (resolution :clauses (.c6659 .c6660) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= c6 c_2)) (= (f2 c_0) c6) (not (= c4 c_0)))))
(set .c6662 (resolution :clauses (.c6658 .c6661) :conclusion ((not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= c6 c_2)) (not (= c4 c_0)))))
(set .c6663 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c6664 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6665 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6666 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6667 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6668 (resolution :clauses (.c6666 .c6667) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6669 (resolution :clauses (.c6665 .c6668) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6670 (resolution :clauses (.c6664 .c6669) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6671 (resolution :clauses (.c6663 .c6670) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6672 (resolution :clauses (.c6662 .c6671) :conclusion ((= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6673 (resolution :clauses (.c6657 .c6672) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6674 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)))))
(set .c6675 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c6676 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6677 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6678 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6679 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6680 (resolution :clauses (.c6678 .c6679) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6681 (resolution :clauses (.c6677 .c6680) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6682 (resolution :clauses (.c6676 .c6681) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6683 (resolution :clauses (.c6675 .c6682) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6684 (resolution :clauses (.c6674 .c6683) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6685 (resolution :clauses (.c6673 .c6684) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= c_1 c7)))))
(set .c6686 (resolution :clauses (.c6685 .c167 .c34 .c91 .c31) :conclusion ((= c_0 (f3 c_1 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= c_1 c7)))))
(set .c6687 (eq_transitive :conclusion ((not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (= (f2 c5) (f1 c_2)))))
(set .c6688 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6689 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6690 (resolution :clauses (.c6688 .c6689) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6691 (resolution :clauses (.c6687 .c6690) :conclusion ((not (= (f2 (f1 c_2)) (f1 c_2))) (= (f2 c5) (f1 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6692 (resolution :clauses (.c6691 .c91) :conclusion ((= (f2 c5) (f1 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6693 (resolution :clauses (.c290 .c6686 .c6692) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= c_0 (f3 c_2 c4))) (not (= (f1 c_1) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= c_1 c7)))))
(set .c6694 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c5 c_2))))
(set .c6695 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c6696 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f1 c_2) (f3 c4 c5)))))
(set .c6697 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6698 (resolution :clauses (.c6696 .c6697) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6699 (resolution :clauses (.c6695 .c6698) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6700 (resolution :clauses (.c6694 .c6699) :conclusion ((not (= c5 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c5 c_2) (not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)))))
(set .c6701 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c6702 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f1 c_1) (f3 c4 c5)))))
(set .c6703 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6704 (resolution :clauses (.c6702 .c6703) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6705 (resolution :clauses (.c6701 .c6704) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6706 (resolution :clauses (.c6700 .c6705) :conclusion ((not (= c5 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c5 c_2) (not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= (f1 c_1) c_2)))))
(set .c6707 (resolution :clauses (.c6706 .c34 .c168 .c169) :conclusion ((not (= c5 c_1)) (= c5 c_2) (not (= c6 c_2)) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= (f1 c_1) c_2)))))
(set .c6708 (resolution :clauses (.c6707 .c228 .c5927 .c276 .c5709 .c260 .c6693 .c262 .c1476 .c256 .c6656) :conclusion ((not (= (f1 c_2) c_2)) (not (= c4 c_0)) (not (= (f1 c_1) c_2)) (= c_0 (f3 c_0 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 c_0) (not (= (f2 c4) (f1 c_1))) (not (= c_0 (f3 c_2 c4))) (= c_0 c7) (= c6 c_1) (= (f3 c_0 c_0) c_0) (= (f3 c_0 c4) c_0) (not (= (f2 c_0) (f1 c_1))))))
(set .c6709 (eq_transitive :conclusion ((not (= (f3 c_1 c5) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 c_0) (f3 c_0 (f3 c_0 c_1)))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1))))
(set .c6710 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 c_0 (f3 c_0 c_1))))))
(set .c6711 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c6712 (resolution :clauses (.c6710 .c6711) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 c_0 (f3 c_0 c_1))))))
(set .c6713 (resolution :clauses (.c6709 .c6712) :conclusion ((not (= (f3 c_1 c5) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_0 c_1))))))
(set .c6714 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c5 c_1)) (= (f3 c_1 c5) (f3 (f3 c_0 c_0) c_1)))))
(set .c6715 (resolution :clauses (.c6713 .c6714) :conclusion ((not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_0 c_1))) (not (= c5 c_1)))))
(set .c6716 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_0) (f1 c_0)))))
(set .c6717 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c6718 (resolution :clauses (.c6716 .c6717) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_0) (f1 c_0)) (not (= c5 c_1)))))
(set .c6719 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c6720 (resolution :clauses (.c6718 .c6719) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_0) (f1 c_0)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6721 (resolution :clauses (.c6720 .c1739) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_0) (f1 c_0)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c6722 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (= (f1 c_0) (f2 c_1)))))
(set .c6723 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c6724 (resolution :clauses (.c6722 .c6723) :conclusion ((not (= (f2 c5) (f1 c_0))) (= (f1 c_0) (f2 c_1)) (not (= c5 c_1)))))
(set .c6725 (eq_transitive :conclusion ((not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)))))
(set .c6726 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c6727 (resolution :clauses (.c6725 .c6726) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)) (not (= c5 c_1)))))
(set .c6728 (resolution :clauses (.c6727 .c1739) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_2)) (not (= c5 c_1)))))
(set .c6729 (resolution :clauses (.c6715 .c226 .c4333 .c173 .c273 .c6721 .c6724 .c6728 .c5709) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c5 c_1)) (= (f3 c_0 c_0) c_0) (not (= (f1 c_1) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= c4 c_0)) (not (= (f1 c_2) c_2)))))
(set .c6730 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)))))
(set .c6731 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c6732 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c6733 (resolution :clauses (.c6731 .c6732) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c6734 (resolution :clauses (.c6730 .c6733) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)) (not (= (f3 c_0 c_0) c_1)))))
(set .c6735 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c4 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 c_1 c4)))))
(set .c6736 (resolution :clauses (.c6734 .c6735) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c_0 (f3 c_1 c4)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_0)))))
(set .c6737 (resolution :clauses (.c6736 .c226 .c4333 .c290 .c173 .c171 .c6692 .c6655 .c6649 .c260 .c6729 .c6708 .c5758 .c293 .c5935 .c5946 .c258 .c6436 .c1165 .c5947 .c5234) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (= c5 c_0) (= c_0 c7) (= c6 c_1) (= c4 c_1))))
(set .c6738 (eq_transitive :conclusion ((not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_1 c_2))))
(set .c6739 (eq_congruent :conclusion ((not (= c4 (f3 c4 c5))) (= (f2 c4) (f2 (f3 c4 c5))))))
(set .c6740 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c6741 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c6742 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6743 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6744 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6745 (resolution :clauses (.c6743 .c6744) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6746 (resolution :clauses (.c6742 .c6745) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6747 (resolution :clauses (.c6741 .c6746) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6748 (resolution :clauses (.c6740 .c6747) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6749 (resolution :clauses (.c6739 .c6748) :conclusion ((= (f2 c4) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6750 (resolution :clauses (.c6738 .c6749) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_1 c_2) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)))))
(set .c6751 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c6752 (resolution :clauses (.c6750 .c6751) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_1 c_2) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c6753 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6754 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6755 (resolution :clauses (.c6753 .c6754) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6756 (resolution :clauses (.c6752 .c6755) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c_1 c_2) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c6757 (resolution :clauses (.c6756 .c9 .c91 .c164 .c167) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c6758 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c5)))))
(set .c6759 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 (f1 c_0))) (= (f3 c_0 c5) (f3 c_0 (f1 c_0))))))
(set .c6760 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c6761 (resolution :clauses (.c6759 .c6760) :conclusion ((not (= c5 (f1 c_0))) (= (f3 c_0 c5) (f3 c_0 (f1 c_0))))))
(set .c6762 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6763 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6764 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6765 (resolution :clauses (.c6763 .c6764) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6766 (resolution :clauses (.c6762 .c6765) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c6767 (resolution :clauses (.c6761 .c6766) :conclusion ((= (f3 c_0 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6768 (resolution :clauses (.c6758 .c6767) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c6769 (resolution :clauses (.c6768 .c91 .c167) :conclusion ((= c_0 (f3 c_0 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))))))
(set .c6770 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_0) c_2))))
(set .c6771 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c6772 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6773 (resolution :clauses (.c6771 .c6772) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6774 (resolution :clauses (.c6770 .c6773) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_0) c_2) (not (= c5 c_2)))))
(set .c6775 (resolution :clauses (.c6774 .c91) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (= (f1 c_0) c_2) (not (= c5 c_2)))))
(set .c6776 (eq_transitive :conclusion ((not (= (f3 c_2 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c5) c_2))))
(set .c6777 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 (f1 c_2))) (= (f3 c_2 c5) (f3 c_2 (f1 c_2))))))
(set .c6778 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c6779 (resolution :clauses (.c6777 .c6778) :conclusion ((not (= c5 (f1 c_2))) (= (f3 c_2 c5) (f3 c_2 (f1 c_2))))))
(set .c6780 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c6781 (resolution :clauses (.c6779 .c6780) :conclusion ((= (f3 c_2 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6782 (resolution :clauses (.c6776 .c6781) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c5) c_2) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6783 (resolution :clauses (.c6782 .c169) :conclusion ((= (f3 c_2 c5) c_2) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c6784 (resolution :clauses (.c6757 .c256 .c252 .c6018 .c1326 .c6769 .c6775 .c6783 .c1160) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (= c6 c_1) (= (f1 c_1) c_2) (= c5 c_0))))
(set .c6785 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c6786 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_1 c5) (f3 c_1 (f3 c_0 c_0)))) (= c_0 (f3 c_1 c5)))))
(set .c6787 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c6788 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c6789 (resolution :clauses (.c6787 .c6788) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c6790 (resolution :clauses (.c6786 .c6789) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_1 c5) (f3 c_1 (f3 c_0 c_0)))) (= c_0 (f3 c_1 c5)) (not (= (f3 c_0 c_0) c_1)))))
(set .c6791 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c6792 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c6793 (resolution :clauses (.c6791 .c6792) :conclusion ((not (= (f3 c_1 c_0) (f3 c_0 c_0))) (= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c6794 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)))))
(set .c6795 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c6796 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= c_0 (f3 c4 c5)))))
(set .c6797 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6798 (resolution :clauses (.c6796 .c6797) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6799 (resolution :clauses (.c6795 .c6798) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6800 (resolution :clauses (.c6794 .c6799) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6801 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0)))))
(set .c6802 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= c_0 (f3 c4 c5)))))
(set .c6803 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6804 (resolution :clauses (.c6802 .c6803) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6805 (resolution :clauses (.c6801 .c6804) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_0)) (not (= c_0 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6806 (resolution :clauses (.c6800 .c6805) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_0) (f3 c_0 c_0)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c6807 (resolution :clauses (.c6793 .c6806) :conclusion ((= (f3 (f3 c_1 c_0) c_0) (f3 (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c6808 (resolution :clauses (.c6790 .c6807) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_1 c5) (f3 c_1 (f3 c_0 c_0)))) (= c_0 (f3 c_1 c5)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c6809 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 (f3 c_0 c_0))) (= (f3 c_1 c5) (f3 c_1 (f3 c_0 c_0))))))
(set .c6810 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f3 c_0 c_0) c_1)) (= c5 (f3 c_0 c_0)))))
(set .c6811 (resolution :clauses (.c6809 .c6810) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 c5) (f3 c_1 (f3 c_0 c_0))) (not (= c5 c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c6812 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c6813 (resolution :clauses (.c6811 .c6812) :conclusion ((= (f3 c_1 c5) (f3 c_1 (f3 c_0 c_0))) (not (= c5 c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c6814 (resolution :clauses (.c6808 .c6813) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (= c_0 (f3 c_1 c5)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c6815 (resolution :clauses (.c6814 .c34) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (= c_0 (f3 c_1 c5)) (not (= (f3 c_0 c_0) c_1)) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c6816 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c6817 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f1 (f3 c_0 c_0)) (f1 c_2)))))
(set .c6818 (resolution :clauses (.c6816 .c6817) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= (f3 c_0 c_0) c_2)))))
(set .c6819 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c6820 (resolution :clauses (.c6818 .c6819) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c5 c_1)))))
(set .c6821 (resolution :clauses (.c6820 .c1739) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c5 c_1)))))
(set .c6822 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c6823 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c6824 (resolution :clauses (.c6822 .c6823) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_0)))))
(set .c6825 (eq_congruent :conclusion ((not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1))))))
(set .c6826 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6827 (resolution :clauses (.c6825 .c6826) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6828 (resolution :clauses (.c6824 .c6827) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6829 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c6830 (resolution :clauses (.c6828 .c6829) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c7 c_2)))))
(set .c6831 (resolution :clauses (.c6830 .c166) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c7 c_2)))))
(set .c6832 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)))))
(set .c6833 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c6834 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= c_0 (f3 c4 c5)))))
(set .c6835 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6836 (resolution :clauses (.c6834 .c6835) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6837 (resolution :clauses (.c6833 .c6836) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6838 (resolution :clauses (.c6832 .c6837) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6839 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)))))
(set .c6840 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 c_1))) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= c4 (f3 c4 c5)))))
(set .c6841 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6842 (resolution :clauses (.c6840 .c6841) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 c_1))) (= c4 (f3 c4 c5)) (not (= c5 c_1)))))
(set .c6843 (resolution :clauses (.c6839 .c6842) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 c_1))) (not (= c5 c_1)))))
(set .c6844 (resolution :clauses (.c6838 .c6843) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c4)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c6845 (resolution :clauses (.c6844 .c34) :conclusion ((not (= (f3 c_0 c_0) c_0)) (= c_0 (f3 c_1 c4)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c6846 (resolution :clauses (.c6845 .c287 .c5758 .c226 .c6815 .c269 .c4937) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= (f3 c_0 c_0) c_2) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))))))
(set .c6847 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c5))) (not (= (f3 c_0 c5) (f3 c_0 c_1))) (= c_0 (f3 c_0 c_1)))))
(set .c6848 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c_1)) (= (f3 c_0 c5) (f3 c_0 c_1)))))
(set .c6849 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c6850 (resolution :clauses (.c6848 .c6849) :conclusion ((not (= c5 c_1)) (= (f3 c_0 c5) (f3 c_0 c_1)))))
(set .c6851 (resolution :clauses (.c6847 .c6850) :conclusion ((not (= c_0 (f3 c_0 c5))) (= c_0 (f3 c_0 c_1)) (not (= c5 c_1)))))
(set .c6852 (eq_transitive :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 c5))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_1)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1))))
(set .c6853 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c6854 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c6855 (resolution :clauses (.c6853 .c6854) :conclusion ((not (= (f3 c_0 c_0) (f2 c_1))) (= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)))))
(set .c6856 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_0 c_0) (f2 c_1)))))
(set .c6857 (resolution :clauses (.c6855 .c6856) :conclusion ((= (f3 (f2 c_1) c_1) (f3 (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6858 (resolution :clauses (.c6852 .c6857) :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 c5))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_1)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= (f3 c_0 c_0) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c6859 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_1))))))
(set .c6860 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6861 (resolution :clauses (.c6859 .c6860) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6862 (resolution :clauses (.c6858 .c6861) :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 c5))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= (f3 c_0 c_0) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6863 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_1))))))
(set .c6864 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c6865 (resolution :clauses (.c6863 .c6864) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c6866 (resolution :clauses (.c6862 .c6865) :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 c5))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= (f3 c_0 c_0) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c6867 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_1)) (not (= c5 c_1)) (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 c5)))))
(set .c6868 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_0) c_1))))
(set .c6869 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0)))))
(set .c6870 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c6871 (resolution :clauses (.c6869 .c6870) :conclusion ((not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0)))))
(set .c6872 (resolution :clauses (.c6868 .c6871) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_0) c_1) (not (= (f1 c_1) c_0)))))
(set .c6873 (resolution :clauses (.c6867 .c6872) :conclusion ((not (= c5 c_1)) (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 c5)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f1 c_1) c_0)))))
(set .c6874 (resolution :clauses (.c6866 .c6873) :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= (f3 c_0 c_0) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_1 c7)) (not (= (f3 c_1 (f1 c_1)) c_1)))))
(set .c6875 (resolution :clauses (.c6874 .c1739 .c32 .c34 .c168) :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (= (f3 c_1 c5) c_1) (not (= (f3 c_0 c_0) c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c6876 (resolution :clauses (.c6875 .c270 .c5984 .c252 .c5993 .c287 .c5758) :conclusion ((not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 c_0) c_0)) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= (f1 c_1) c_2))))
(set .c6877 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f1 (f3 c_0 c_1)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c6878 (eq_congruent :conclusion ((not (= (f3 c_0 c_1) c_2)) (= (f1 (f3 c_0 c_1)) (f1 c_2)))))
(set .c6879 (resolution :clauses (.c6877 .c6878) :conclusion ((not (= (f1 c_1) (f1 (f3 c_0 c_1)))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= (f3 c_0 c_1) c_2)))))
(set .c6880 (resolution :clauses (.c6879 .c228 .c5788 .c226 .c6876 .c6846 .c256 .c3817 .c262 .c6831 .c6821 .c191 .c95 .c13 .c189 .c173 .c171 .c93 .c6724 .c6721 .c260 .c6784 .c5946 .c258 .c6024 .c6737) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= c6 c_1) (= c_0 c7) (= c5 c_0) (= c4 c_1))))
(set .c6881 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c6882 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c6883 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c6884 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c6885 (resolution :clauses (.c6883 .c6884) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_1)))))
(set .c6886 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c6887 (resolution :clauses (.c6885 .c6886) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6888 (resolution :clauses (.c6882 .c6887) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6889 (resolution :clauses (.c6881 .c6888) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6890 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c6891 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c6892 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c6893 (resolution :clauses (.c6891 .c6892) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6894 (resolution :clauses (.c6890 .c6893) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6895 (resolution :clauses (.c6889 .c6894) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6896 (resolution :clauses (.c6895 .c34 .c165 .c167 .c168 .c224) :conclusion ((not (= c_0 c6)) (not (= c_1 c7)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6897 (resolution :clauses (.c6896 .c262 .c1419) :conclusion ((not (= c_0 c6)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)) (= c_0 c7) (not (= (f1 c_2) c_2)))))
(set .c6898 (resolution :clauses (.c262 .c3817 .c1476) :conclusion ((= c_0 c7) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c6 c_2)))))
(set .c6899 (resolution :clauses (.c6897 .c5086) :conclusion ((not (= c_0 c6)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)) (= c_0 c7) (not (= (f1 c_2) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c6900 (eq_transitive :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f2 (f3 c_1 c_1)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c_1 c7))))
(set .c6901 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f2 (f3 c_1 c_1)) (f2 (f3 c4 c5))))))
(set .c6902 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c6903 (resolution :clauses (.c6901 .c6902) :conclusion ((= (f2 (f3 c_1 c_1)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6904 (resolution :clauses (.c6900 .c6903) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c_1 c7) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6905 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c6906 (resolution :clauses (.c6904 .c6905) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c_1 c7) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6907 (resolution :clauses (.c6906 .c1740 .c1739 .c166) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= c_1 c7) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6908 (resolution :clauses (.c6907 .c262) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f1 c_2) c_2)) (= c_1 c7) (not (= c4 c_1)) (not (= c5 c_1)) (= c_0 c7))))
(set .c6909 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c6910 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c6911 (eq_transitive :conclusion ((not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c6912 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c6913 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (= c5 (f1 c_1)))))
(set .c6914 (resolution :clauses (.c6912 .c6913) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c6915 (resolution :clauses (.c6911 .c6914) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6916 (resolution :clauses (.c6910 .c6915) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6917 (resolution :clauses (.c6909 .c6916) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6918 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c6919 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c6920 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c6921 (resolution :clauses (.c6919 .c6920) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_1)))))
(set .c6922 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c6923 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (= c5 (f1 c_1)))))
(set .c6924 (resolution :clauses (.c6922 .c6923) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c6925 (resolution :clauses (.c6921 .c6924) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6926 (resolution :clauses (.c6918 .c6925) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6927 (resolution :clauses (.c6917 .c6926) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))))))
(set .c6928 (resolution :clauses (.c6927 .c34 .c165 .c167 .c168 .c224) :conclusion ((not (= c_0 c6)) (not (= c_1 c7)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 c5) (f1 c_0))))))
(set .c6929 (resolution :clauses (.c6928 .c6908 .c252 .c6899 .c256 .c6898 .c260 .c4932) :conclusion ((not (= c4 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (= c_0 c7) (= (f1 c_1) c_2) (not (= (f2 c4) (f1 c_1))) (= c6 c_1) (= c5 c_0))))
(set .c6930 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c6931 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c6932 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c6933 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c6934 (resolution :clauses (.c6932 .c6933) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_1)))))
(set .c6935 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c6936 (resolution :clauses (.c6934 .c6935) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6937 (resolution :clauses (.c6931 .c6936) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6938 (resolution :clauses (.c6930 .c6937) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6939 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c6940 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c6941 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c6942 (resolution :clauses (.c6940 .c6941) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6943 (resolution :clauses (.c6939 .c6942) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6944 (resolution :clauses (.c6938 .c6943) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6945 (resolution :clauses (.c6944 .c34 .c165 .c167 .c168 .c224) :conclusion ((not (= c_0 c6)) (not (= c_1 c7)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6946 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c6947 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c6948 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c6949 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c6950 (resolution :clauses (.c6948 .c6949) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6951 (resolution :clauses (.c6947 .c6950) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6952 (resolution :clauses (.c6946 .c6951) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6953 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c6954 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c6955 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c6956 (resolution :clauses (.c6954 .c6955) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_1)))))
(set .c6957 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c6958 (resolution :clauses (.c6956 .c6957) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6959 (resolution :clauses (.c6953 .c6958) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6960 (resolution :clauses (.c6952 .c6959) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)))))
(set .c6961 (resolution :clauses (.c6960 .c34 .c165 .c167 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= c7 c_2)) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) c_2)))))
(set .c6962 (resolution :clauses (.c6961 .c262 .c6945) :conclusion ((not (= c_0 c6)) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) c_2)) (= c_0 c7))))
(set .c6963 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c6964 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c6965 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c6966 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c6967 (resolution :clauses (.c6965 .c6966) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6968 (resolution :clauses (.c6964 .c6967) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6969 (resolution :clauses (.c6963 .c6968) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6970 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c6971 (eq_transitive :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c6972 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c6973 (resolution :clauses (.c6971 .c6972) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6974 (resolution :clauses (.c6970 .c6973) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6975 (resolution :clauses (.c6969 .c6974) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_2)))))
(set .c6976 (resolution :clauses (.c6975 .c34 .c168 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= c_1 c7)) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_2)))))
(set .c6977 (resolution :clauses (.c6976 .c262 .c1476 .c256 .c6962) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_2)) (= c_0 c7) (= c6 c_1) (not (= (f2 c5) (f1 c_0))))))
(set .c6978 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= c_0 c_2))))
(set .c6979 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c6980 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c6981 (resolution :clauses (.c6979 .c6980) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c6982 (resolution :clauses (.c6978 .c6981) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= c_0 c_2))))
(set .c6983 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1))))))
(set .c6984 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c6985 (resolution :clauses (.c6983 .c6984) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6986 (resolution :clauses (.c6982 .c6985) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= c_0 c_2) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6987 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c6988 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c6989 (resolution :clauses (.c6987 .c6988) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c6990 (resolution :clauses (.c6986 .c6989) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= c_0 c_2) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_2)))))
(set .c6991 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1)))))
(set .c6992 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c6993 (resolution :clauses (.c6991 .c6992) :conclusion ((not (= (f3 c_2 c_1) c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1)))))
(set .c6994 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c6995 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c6996 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (= (f2 c_1) c_2))))
(set .c6997 (resolution :clauses (.c6995 .c6996) :conclusion ((not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c6998 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c6999 (resolution :clauses (.c6997 .c6998) :conclusion ((= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c7000 (resolution :clauses (.c6994 .c6999) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c7001 (resolution :clauses (.c6993 .c7000) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c7002 (resolution :clauses (.c6990 .c7001) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= c_0 c_2) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c7003 (resolution :clauses (.c7002 .c8 .c1739 .c32 .c34 .c1742) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7004 (resolution :clauses (.c7003 .c262 .c1476) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f1 c_1) c_2)) (= c_0 c7))))
(set .c7005 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_0 c4) c_1))))
(set .c7006 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (= (f3 c_0 c4) (f3 (f3 c_1 c_1) c_1)))))
(set .c7007 (resolution :clauses (.c7005 .c7006) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_0 c4) c_1) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)))))
(set .c7008 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1))))))
(set .c7009 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c7010 (resolution :clauses (.c7008 .c7009) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7011 (resolution :clauses (.c7007 .c7010) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_0 c4) c_1) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c_1 c7)) (not (= c5 c_1)))))
(set .c7012 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_1 c_1) c_0)))))
(set .c7013 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c7014 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c7015 (resolution :clauses (.c7013 .c7014) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= c_0 (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7016 (resolution :clauses (.c7012 .c7015) :conclusion ((not (= (f3 c_1 c_1) c6)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7017 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_0 c6)) (= (f3 c_1 c_1) c6))))
(set .c7018 (resolution :clauses (.c7016 .c7017) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c7019 (resolution :clauses (.c7011 .c7018) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_0 c4) c_1) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c_1 c7)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c7020 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))))))
(set .c7021 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c7022 (resolution :clauses (.c7020 .c7021) :conclusion ((not (= (f3 c_1 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))))))
(set .c7023 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (= (f3 c_1 c_0) (f1 c_1)))))
(set .c7024 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c7025 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c7026 (resolution :clauses (.c7024 .c7025) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c7027 (resolution :clauses (.c7023 .c7026) :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (= (f3 c_1 c_0) (f1 c_1)) (not (= (f3 c_1 c_1) c_0)))))
(set .c7028 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c7029 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c7030 (resolution :clauses (.c7028 .c7029) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c7031 (resolution :clauses (.c7027 .c7030) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (= (f3 c_1 c_0) (f1 c_1)) (not (= (f3 c_1 c_1) c_0)))))
(set .c7032 (resolution :clauses (.c7022 .c7031) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_0)))))
(set .c7033 (resolution :clauses (.c7019 .c7032) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_0 c4) c_1) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c_1 c7)) (not (= c5 c_1)) (not (= c_0 c6)) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)))))
(set .c7034 (resolution :clauses (.c7033 .c34 .c168 .c1742) :conclusion ((not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (= (f3 c_0 c4) c_1) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c_1 c7)) (not (= c5 c_1)) (not (= c_0 c6)) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)))))
(set .c7035 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c5) (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)))))
(set .c7036 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1))))))
(set .c7037 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c7038 (resolution :clauses (.c7036 .c7037) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7039 (resolution :clauses (.c7035 .c7038) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c5) (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)) (not (= c7 c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7040 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_1 c_1) c_0)))))
(set .c7041 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c7042 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c7043 (resolution :clauses (.c7041 .c7042) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= c_0 (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7044 (resolution :clauses (.c7040 .c7043) :conclusion ((not (= (f3 c_1 c_1) c6)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7045 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_0 c6)) (= (f3 c_1 c_1) c6))))
(set .c7046 (resolution :clauses (.c7044 .c7045) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c7047 (resolution :clauses (.c7039 .c7046) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c5) (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)) (not (= c7 c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c7048 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))))))
(set .c7049 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c7050 (resolution :clauses (.c7048 .c7049) :conclusion ((not (= (f3 c_1 c_0) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))))))
(set .c7051 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (= (f3 c_1 c_0) (f1 c_1)))))
(set .c7052 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c7053 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c7054 (resolution :clauses (.c7052 .c7053) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c7055 (resolution :clauses (.c7051 .c7054) :conclusion ((not (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (= (f3 c_1 c_0) (f1 c_1)) (not (= (f3 c_1 c_1) c_0)))))
(set .c7056 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c7057 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c7058 (resolution :clauses (.c7056 .c7057) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 c_1 c_0) (f3 c_1 (f3 c_1 c_1))))))
(set .c7059 (resolution :clauses (.c7055 .c7058) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (= (f3 c_1 c_0) (f1 c_1)) (not (= (f3 c_1 c_1) c_0)))))
(set .c7060 (resolution :clauses (.c7050 .c7059) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_0))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (not (= (f3 c_1 c_1) c_0)))))
(set .c7061 (resolution :clauses (.c7047 .c7060) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c5) (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)) (not (= c7 c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c6)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)))))
(set .c7062 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c5 c_1)) (= (f3 c_2 c5) (f3 (f2 c_1) c_1)))))
(set .c7063 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (= (f2 c_1) c_2))))
(set .c7064 (resolution :clauses (.c7062 .c7063) :conclusion ((not (= c5 c_1)) (= (f3 c_2 c5) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c7065 (resolution :clauses (.c7061 .c7064) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)) (not (= c7 c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c6)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c7066 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1)))))
(set .c7067 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c7068 (resolution :clauses (.c7066 .c7067) :conclusion ((not (= (f3 c_2 c_1) c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1)))))
(set .c7069 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c7070 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c7071 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (= (f2 c_1) c_2))))
(set .c7072 (resolution :clauses (.c7070 .c7071) :conclusion ((not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c7073 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c7074 (resolution :clauses (.c7072 .c7073) :conclusion ((= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c7075 (resolution :clauses (.c7069 .c7074) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c7076 (resolution :clauses (.c7068 .c7075) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c7077 (resolution :clauses (.c7065 .c7076) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 (f3 c_2 c5)) (not (= c7 c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c6)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c7078 (resolution :clauses (.c7077 .c1739 .c32 .c34 .c168 .c1742) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (= c_0 (f3 c_2 c5)) (not (= c7 c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c6)) (not (= (f3 c_0 c_1) c_2)) (not (= (f1 c_1) c_2)))))
(set .c7079 (resolution :clauses (.c7078 .c262 .c7034 .c256 .c7004 .c228 .c195 .c5171 .c5031 .c287 .c5081 .c5120 .c234 .c6977 .c1739) :conclusion ((not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (= c_0 (f3 c_2 c5)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_2)) (= c_0 c7) (= (f3 c_0 c4) c_1) (= c6 c_1) (= c_1 (f3 c_0 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= (f3 c_1 c_1) c_1) (not (= (f1 c_2) c_2)))))
(set .c7080 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= c_1 c_2))))
(set .c7081 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c7082 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c7083 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c7084 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c7085 (resolution :clauses (.c7083 .c7084) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7086 (resolution :clauses (.c7082 .c7085) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7087 (resolution :clauses (.c7081 .c7086) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7088 (resolution :clauses (.c7080 .c7087) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (= c_1 c_2) (not (= c_0 c6)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7089 (eq_congruent :conclusion ((not (= (f2 c_1) c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c7090 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c7091 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c7092 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c7093 (resolution :clauses (.c7091 .c7092) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7094 (resolution :clauses (.c7090 .c7093) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7095 (resolution :clauses (.c7089 .c7094) :conclusion ((not (= (f2 c_1) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7096 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= c7 c_2)) (= (f2 c_1) c7))))
(set .c7097 (resolution :clauses (.c7095 .c7096) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c7098 (resolution :clauses (.c7088 .c7097) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (= c_1 c_2) (not (= c_0 c6)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c7099 (resolution :clauses (.c7098 .c9 .c1739 .c32 .c34 .c168) :conclusion ((not (= (f3 c_0 c_1) c_2)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= c7 c_2)))))
(set .c7100 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= c6 c_2))))
(set .c7101 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c7102 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c7103 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c7104 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c7105 (resolution :clauses (.c7103 .c7104) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7106 (resolution :clauses (.c7102 .c7105) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7107 (resolution :clauses (.c7101 .c7106) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7108 (resolution :clauses (.c7100 .c7107) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (= c6 c_2) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7109 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)))))
(set .c7110 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c7111 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c7112 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c7113 (resolution :clauses (.c7111 .c7112) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7114 (resolution :clauses (.c7110 .c7113) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7115 (resolution :clauses (.c7109 .c7114) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7116 (resolution :clauses (.c7108 .c7115) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_1) c_2)) (= c6 c_2) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= c_1 c7)))))
(set .c7117 (resolution :clauses (.c7116 .c34 .c168) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_0 c_1) c_2)) (= c6 c_2) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= c_1 c7)))))
(set .c7118 (resolution :clauses (.c7117 .c262 .c7099 .c256) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_0 c_1) c_2)) (= c6 c_2) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c_0 c7) (= c6 c_1))))
(set .c7119 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)))))
(set .c7120 (eq_congruent :conclusion ((not (= c6 (f2 c_1))) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c7121 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c7122 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c7123 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c7124 (resolution :clauses (.c7122 .c7123) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7125 (resolution :clauses (.c7121 .c7124) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7126 (resolution :clauses (.c7120 .c7125) :conclusion ((not (= c6 (f2 c_1))) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7127 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c6 (f2 c_1)))))
(set .c7128 (resolution :clauses (.c7126 .c7127) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= c6 c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c7129 (resolution :clauses (.c7119 .c7128) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= c6 c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c7130 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)))))
(set .c7131 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c7132 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c7133 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c7134 (resolution :clauses (.c7132 .c7133) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7135 (resolution :clauses (.c7131 .c7134) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c4 (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7136 (resolution :clauses (.c7130 .c7135) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7137 (resolution :clauses (.c7129 .c7136) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_1 (f3 c_1 c4)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= c6 c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c_1 c7)))))
(set .c7138 (resolution :clauses (.c7137 .c1739 .c32 .c34 .c168) :conclusion ((= c_1 (f3 c_1 c4)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= c6 c_2)) (not (= c_1 c7)))))
(set .c7139 (resolution :clauses (.c7138 .c262 .c1476) :conclusion ((= c_1 (f3 c_1 c4)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= c6 c_2)) (= c_0 c7))))
(set .c7140 (resolution :clauses (.c1991 .c234 .c289 .c7118 .c2110) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c_1) c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f3 c_0 c_1) c_2)) (= c6 c_2) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c_0 c7) (= c6 c_1))))
(set .c7141 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)))))
(set .c7142 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)))))
(set .c7143 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c7144 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c7145 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c7146 (resolution :clauses (.c7144 .c7145) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7147 (resolution :clauses (.c7143 .c7146) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c4 (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7148 (resolution :clauses (.c7142 .c7147) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7149 (resolution :clauses (.c7141 .c7148) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c4)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7150 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c7151 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c7152 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c7153 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c7154 (resolution :clauses (.c7152 .c7153) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7155 (resolution :clauses (.c7151 .c7154) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7156 (resolution :clauses (.c7150 .c7155) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7157 (resolution :clauses (.c7149 .c7156) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c4)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= c_0 c6)))))
(set .c7158 (resolution :clauses (.c7157 .c34 .c168) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= c_0 (f3 c_1 c4)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= c_0 c6)))))
(set .c7159 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 c_1))))
(set .c7160 (eq_congruent :conclusion ((not (= (f2 c_1) c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c7161 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c7162 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c7163 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c7164 (resolution :clauses (.c7162 .c7163) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7165 (resolution :clauses (.c7161 .c7164) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7166 (resolution :clauses (.c7160 .c7165) :conclusion ((not (= (f2 c_1) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7167 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (not (= c7 c_2)) (= (f2 c_1) c7))))
(set .c7168 (resolution :clauses (.c7166 .c7167) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c7169 (resolution :clauses (.c7159 .c7168) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 c_1) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c7170 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)))))
(set .c7171 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c7172 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c7173 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c7174 (resolution :clauses (.c7172 .c7173) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7175 (resolution :clauses (.c7171 .c7174) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7176 (resolution :clauses (.c7170 .c7175) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7177 (resolution :clauses (.c7169 .c7176) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c_0 c_1) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c7178 (resolution :clauses (.c7177 .c7 .c1739 .c32 .c34 .c168) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c7179 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_2) (f2 c_1)))))
(set .c7180 (resolution :clauses (.c7179 .c1739) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f1 c_2) (f2 c_1)))))
(set .c7181 (resolution :clauses (.c7178 .c262 .c7158 .c287 .c5171 .c228 .c7140 .c256 .c7139 .c260 .c7079 .c215 .c7180 .c753 .c716 .c294 .c297 .c1165 .c2126 .c5947 .c5234 .c6929 .c476 .c6880 .c1739) :conclusion ((= c_0 c7) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= c6 c_1) (= c5 c_0) (not (= (f1 c_2) c_2)))))
(set .c7182 (eq_transitive :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)))))
(set .c7183 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c7184 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c7185 (resolution :clauses (.c7183 .c7184) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7186 (resolution :clauses (.c7182 .c7185) :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)) (not (= c5 c_2)))))
(set .c7187 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c7188 (resolution :clauses (.c7186 .c7187) :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c7189 (eq_congruent :conclusion ((not (= c4 (f3 c4 c5))) (= (f2 c4) (f2 (f3 c4 c5))))))
(set .c7190 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c7191 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c7192 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7193 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c7194 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c7195 (resolution :clauses (.c7193 .c7194) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7196 (resolution :clauses (.c7192 .c7195) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7197 (resolution :clauses (.c7191 .c7196) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7198 (resolution :clauses (.c7190 .c7197) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7199 (resolution :clauses (.c7189 .c7198) :conclusion ((= (f2 c4) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7200 (resolution :clauses (.c7188 .c7199) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))))))
(set .c7201 (resolution :clauses (.c7200 .c91 .c164 .c167) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c4 c_0)))))
(set .c7202 (eq_transitive :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)))))
(set .c7203 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c7204 (resolution :clauses (.c7202 .c7203) :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)) (not (= c6 c_2)))))
(set .c7205 (eq_congruent :conclusion ((not (= c4 (f3 c4 c5))) (= (f2 c4) (f2 (f3 c4 c5))))))
(set .c7206 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c7207 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c7208 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7209 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c7210 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c7211 (resolution :clauses (.c7209 .c7210) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7212 (resolution :clauses (.c7208 .c7211) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7213 (resolution :clauses (.c7207 .c7212) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7214 (resolution :clauses (.c7206 .c7213) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7215 (resolution :clauses (.c7205 .c7214) :conclusion ((= (f2 c4) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7216 (resolution :clauses (.c7204 .c7215) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7217 (resolution :clauses (.c7216 .c91 .c164 .c167) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))))))
(set .c7218 (resolution :clauses (.c7217 .c256 .c7201) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (= c6 c_1))))
(set .c7219 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)))))
(set .c7220 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c7221 (resolution :clauses (.c7219 .c7220) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)) (not (= c6 c_2)))))
(set .c7222 (eq_congruent :conclusion ((not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1))))))
(set .c7223 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c7224 (resolution :clauses (.c7222 .c7223) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c7225 (resolution :clauses (.c7221 .c7224) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c7226 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c7227 (resolution :clauses (.c7225 .c7226) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c7228 (resolution :clauses (.c7227 .c164) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c4) (f1 c_1)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c7229 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c7230 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c7231 (resolution :clauses (.c7229 .c7230) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c5 c_1)))))
(set .c7232 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c7233 (resolution :clauses (.c7231 .c7232) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c7234 (eq_congruent :conclusion ((not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1))))))
(set .c7235 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c7236 (resolution :clauses (.c7234 .c7235) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_1))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c7237 (resolution :clauses (.c7233 .c7236) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c5 c_1)) (not (= c_0 c6)) (not (= c4 c_0)))))
(set .c7238 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c7239 (resolution :clauses (.c7237 .c7238) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c5 c_1)) (not (= c_0 c6)) (not (= c4 c_0)))))
(set .c7240 (resolution :clauses (.c7239 .c1739 .c164) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_1)) (not (= c5 c_1)) (not (= c_0 c6)) (not (= c4 c_0)))))
(set .c7241 (resolution :clauses (.c7240 .c256 .c7228 .c13 .c6724 .c260 .c7218 .c258 .c5608) :conclusion ((not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_1)) (= c6 c_1) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= c5 c_0) (= c4 c_1))))
(set .c7242 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c7243 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c7244 (resolution :clauses (.c7242 .c7243) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c5 c_1)))))
(set .c7245 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c7246 (resolution :clauses (.c7244 .c7245) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c5 c_1)) (not (= c4 c_2)))))
(set .c7247 (resolution :clauses (.c7246 .c1739 .c165) :conclusion ((not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c5 c_1)) (not (= c4 c_2)))))
(set .c7248 (resolution :clauses (.c7247 .c258 .c7240 .c13 .c6724) :conclusion ((not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c5 c_1)) (= c4 c_1) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_1)) (not (= c_0 c6)))))
(set .c7249 (eq_transitive :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c7 c_2))))
(set .c7250 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c7251 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c7252 (resolution :clauses (.c7250 .c7251) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7253 (resolution :clauses (.c7249 .c7252) :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c7 c_2) (not (= c5 c_2)))))
(set .c7254 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c7255 (resolution :clauses (.c7253 .c7254) :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c7 c_2) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c7256 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c7257 (resolution :clauses (.c7255 .c7256) :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= c7 c_2) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c7258 (resolution :clauses (.c7257 .c91 .c164 .c166) :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (= c7 c_2) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c7259 (resolution :clauses (.c7258 .c262) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (= c7 c_2) (not (= c5 c_2)) (not (= c_0 c6)) (= c_0 c7))))
(set .c7260 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_2 c4))) (= c_0 (f3 c_2 c4)))))
(set .c7261 (eq_congruent :conclusion ((not (= (f2 c_0) c_2)) (not (= c4 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c4)))))
(set .c7262 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2))))
(set .c7263 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c7264 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c7265 (resolution :clauses (.c7263 .c7264) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7266 (resolution :clauses (.c7262 .c7265) :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c5 c_2)))))
(set .c7267 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c7268 (resolution :clauses (.c7266 .c7267) :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c7269 (eq_congruent :conclusion ((not (= c_0 (f3 c4 c5))) (= (f2 c_0) (f2 (f3 c4 c5))))))
(set .c7270 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c7271 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c7272 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7273 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c7274 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c7275 (resolution :clauses (.c7273 .c7274) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7276 (resolution :clauses (.c7272 .c7275) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7277 (resolution :clauses (.c7271 .c7276) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7278 (resolution :clauses (.c7270 .c7277) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7279 (resolution :clauses (.c7269 .c7278) :conclusion ((= (f2 c_0) (f2 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7280 (resolution :clauses (.c7268 .c7279) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_0) c_2) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)))))
(set .c7281 (resolution :clauses (.c7261 .c7280) :conclusion ((not (= c4 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_2 c4)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))))))
(set .c7282 (resolution :clauses (.c7260 .c7281) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_2 c4)) (not (= c4 c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))))))
(set .c7283 (resolution :clauses (.c7282 .c167 .c91 .c164 .c31) :conclusion ((= c_0 (f3 c_2 c4)) (not (= c4 c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c7284 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0))))
(set .c7285 (eq_congruent :conclusion ((not (= (f2 c_0) c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)))))
(set .c7286 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c7287 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c7288 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7289 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c7290 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c7291 (resolution :clauses (.c7289 .c7290) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7292 (resolution :clauses (.c7288 .c7291) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7293 (resolution :clauses (.c7287 .c7292) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7294 (resolution :clauses (.c7286 .c7293) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7295 (resolution :clauses (.c7285 .c7294) :conclusion ((not (= (f2 c_0) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7296 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7))))
(set .c7297 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c7298 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c7299 (resolution :clauses (.c7297 .c7298) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7300 (resolution :clauses (.c7296 .c7299) :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7) (not (= c5 c_2)))))
(set .c7301 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c7302 (resolution :clauses (.c7300 .c7301) :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c7303 (eq_congruent :conclusion ((not (= c_0 (f3 c4 c5))) (= (f2 c_0) (f2 (f3 c4 c5))))))
(set .c7304 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c7305 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c7306 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7307 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c7308 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c7309 (resolution :clauses (.c7307 .c7308) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7310 (resolution :clauses (.c7306 .c7309) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7311 (resolution :clauses (.c7305 .c7310) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7312 (resolution :clauses (.c7304 .c7311) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7313 (resolution :clauses (.c7303 .c7312) :conclusion ((= (f2 c_0) (f2 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7314 (resolution :clauses (.c7302 .c7313) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)))))
(set .c7315 (resolution :clauses (.c7295 .c7314) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c7316 (resolution :clauses (.c7284 .c7315) :conclusion ((not (= (f3 c_0 c4) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c7317 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c4 (f3 c4 c5))) (= (f3 c_0 c4) (f3 c6 (f3 c4 c5))))))
(set .c7318 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c7319 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c7320 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7321 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c7322 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c7323 (resolution :clauses (.c7321 .c7322) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7324 (resolution :clauses (.c7320 .c7323) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7325 (resolution :clauses (.c7319 .c7324) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7326 (resolution :clauses (.c7318 .c7325) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7327 (resolution :clauses (.c7317 .c7326) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c4) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7328 (resolution :clauses (.c7316 .c7327) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c7329 (resolution :clauses (.c7328 .c167 .c34 .c91 .c164 .c31) :conclusion ((= (f3 c_0 c4) c_0) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c7330 (eq_transitive :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 (f1 c_2)) (f1 c_2))) (= (f2 c4) (f1 c_2)))))
(set .c7331 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c7332 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c7333 (resolution :clauses (.c7331 .c7332) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7334 (resolution :clauses (.c7330 .c7333) :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7335 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c7336 (resolution :clauses (.c7334 .c7335) :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c6)))))
(set .c7337 (eq_congruent :conclusion ((not (= c4 (f3 c4 c5))) (= (f2 c4) (f2 (f3 c4 c5))))))
(set .c7338 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c7339 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c7340 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7341 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c7342 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c7343 (resolution :clauses (.c7341 .c7342) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7344 (resolution :clauses (.c7340 .c7343) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7345 (resolution :clauses (.c7339 .c7344) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7346 (resolution :clauses (.c7338 .c7345) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7347 (resolution :clauses (.c7337 .c7346) :conclusion ((= (f2 c4) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7348 (resolution :clauses (.c7336 .c7347) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_2)) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))))))
(set .c7349 (resolution :clauses (.c7348 .c167 .c164 .c91) :conclusion ((not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_2)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c6)) (not (= c4 c_0)))))
(set .c7350 (resolution :clauses (.c293 .c7283 .c7329 .c7349 .c258 .c6348 .c7259 .c252 .c1326 .c6783 .c6775 .c1160 .c260 .c7248 .c256 .c6898 .c7241 .c2620 .c7181) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_2) c_2)) (= c_0 c7) (= c5 c_0) (= c6 c_1))))
(set .c7351 (resolution :clauses (.c13 .c5588 .c6724 .c260 .c6769 .c5568 .c258 .c2673 .c2620) :conclusion ((= (f2 c4) (f1 c_1)) (not (= c6 c_1)) (not (= (f2 c5) (f1 c_0))) (= c5 c_0) (not (= (f1 c_2) c_2)) (not (= c7 c_2)))))
(set .c7352 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c7353 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c7354 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f1 c_2) (f3 c4 c5)))))
(set .c7355 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c7356 (resolution :clauses (.c7354 .c7355) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c7357 (resolution :clauses (.c7353 .c7356) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c7358 (resolution :clauses (.c7352 .c7357) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c7359 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c7360 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f1 c_1) (f3 c4 c5)))))
(set .c7361 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c7362 (resolution :clauses (.c7360 .c7361) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= (f3 c4 c5) (f3 c_0 c_1))) (= (f1 c_1) (f3 c4 c5)) (not (= c7 c_2)))))
(set .c7363 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (= (f3 c4 c5) (f3 c_0 c_1)))))
(set .c7364 (resolution :clauses (.c7362 .c7363) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c7365 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c7366 (resolution :clauses (.c7364 .c7365) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c6 c_1)))))
(set .c7367 (resolution :clauses (.c7359 .c7366) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c7368 (resolution :clauses (.c7358 .c7367) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c7369 (resolution :clauses (.c7368 .c34 .c164 .c166 .c168 .c169 .c224) :conclusion ((not (= c6 c_1)) (not (= c7 c_2)) (not (= (f1 c_2) c_2)) (not (= (f3 c_0 c_1) c_2)) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c7370 (resolution :clauses (.c7369 .c228 .c6729 .c5758 .c293 .c5935) :conclusion ((not (= c6 c_1)) (not (= c7 c_2)) (not (= (f1 c_2) c_2)) (not (= c4 c_0)) (not (= c5 c_1)) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_2))))))
(set .c7371 (eq_transitive :conclusion ((not (= (f3 c_1 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1))))
(set .c7372 (eq_congruent :conclusion ((not (= (f2 c_1) c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c7373 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c7374 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c7375 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c7376 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c7377 (resolution :clauses (.c7375 .c7376) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)) (not (= c7 c_2)))))
(set .c7378 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c7379 (resolution :clauses (.c7377 .c7378) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7380 (resolution :clauses (.c7374 .c7379) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7381 (resolution :clauses (.c7373 .c7380) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7382 (resolution :clauses (.c7372 .c7381) :conclusion ((not (= (f2 c_1) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7383 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_1) c7))))
(set .c7384 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c7385 (resolution :clauses (.c7383 .c7384) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_1) c7))))
(set .c7386 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c7387 (resolution :clauses (.c7385 .c7386) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_1) c7) (not (= c6 c_1)))))
(set .c7388 (resolution :clauses (.c7382 .c7387) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7389 (resolution :clauses (.c7371 .c7388) :conclusion ((not (= (f3 c_1 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7390 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c5 (f3 c4 c5))) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))))))
(set .c7391 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)))))
(set .c7392 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c7393 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c7394 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c7395 (resolution :clauses (.c7393 .c7394) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)) (not (= c7 c_2)))))
(set .c7396 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c7397 (resolution :clauses (.c7395 .c7396) :conclusion ((not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7398 (resolution :clauses (.c7392 .c7397) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7399 (resolution :clauses (.c7391 .c7398) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7400 (resolution :clauses (.c7390 .c7399) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c7401 (resolution :clauses (.c7389 .c7400) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7402 (resolution :clauses (.c7401 .c1739 .c32 .c34 .c164 .c166) :conclusion ((= (f3 c_1 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7403 (resolution :clauses (.c7402 .c258 .c7370 .c5927 .c276 .c273 .c6728 .c5709) :conclusion ((not (= c5 c_1)) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)) (= c4 c_1) (not (= (f1 c_1) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_2))))))
(set .c7404 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)))))
(set .c7405 (eq_congruent :conclusion ((not (= (f2 c_0) c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)))))
(set .c7406 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c7407 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c7408 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7409 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c7410 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c7411 (resolution :clauses (.c7409 .c7410) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7412 (resolution :clauses (.c7408 .c7411) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7413 (resolution :clauses (.c7407 .c7412) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7414 (resolution :clauses (.c7406 .c7413) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7415 (resolution :clauses (.c7405 .c7414) :conclusion ((not (= (f2 c_0) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7416 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7))))
(set .c7417 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c7418 (resolution :clauses (.c7416 .c7417) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7))))
(set .c7419 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c7420 (resolution :clauses (.c7418 .c7419) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7) (not (= c6 c_1)))))
(set .c7421 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c7422 (resolution :clauses (.c7420 .c7421) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_0) c7) (not (= c6 c_1)) (not (= c4 c_0)))))
(set .c7423 (resolution :clauses (.c7415 .c7422) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7424 (resolution :clauses (.c7404 .c7423) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7425 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c4 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4)))))
(set .c7426 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c7427 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c7428 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f2 (f1 c_2)))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7429 (eq_congruent :conclusion ((not (= c5 (f1 c_2))) (= (f2 c5) (f2 (f1 c_2))))))
(set .c7430 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c7431 (resolution :clauses (.c7429 .c7430) :conclusion ((= (f2 c5) (f2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7432 (resolution :clauses (.c7428 .c7431) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c7433 (resolution :clauses (.c7427 .c7432) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7434 (resolution :clauses (.c7426 .c7433) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7435 (resolution :clauses (.c7425 .c7434) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))))))
(set .c7436 (resolution :clauses (.c7424 .c7435) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_1 c4)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7437 (resolution :clauses (.c7436 .c31 .c34 .c91 .c164 .c166 .c167) :conclusion ((= c_0 (f3 c_1 c4)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7438 (resolution :clauses (.c7437 .c290 .c5935 .c258 .c1676 .c6692 .c260 .c7403) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= c7 c_2)) (not (= c6 c_1)) (not (= (f1 c_1) c_2)) (= c4 c_1) (= c5 c_0) (not (= (f2 c4) (f1 c_2))))))
(set .c7439 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)))))
(set .c7440 (eq_congruent :conclusion ((not (= (f2 c_1) c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c7441 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c7442 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c7443 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= c5 (f1 c_1)))))
(set .c7444 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c7445 (resolution :clauses (.c7443 .c7444) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= c5 (f1 c_1)) (not (= c7 c_2)))))
(set .c7446 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c7447 (resolution :clauses (.c7445 .c7446) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_1)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7448 (resolution :clauses (.c7442 .c7447) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7449 (resolution :clauses (.c7441 .c7448) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7450 (resolution :clauses (.c7440 .c7449) :conclusion ((not (= (f2 c_1) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7451 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_1) c7))))
(set .c7452 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c7453 (resolution :clauses (.c7451 .c7452) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_1) c7))))
(set .c7454 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c7455 (resolution :clauses (.c7453 .c7454) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (= (f2 c_1) c7) (not (= c6 c_1)))))
(set .c7456 (resolution :clauses (.c7450 .c7455) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c6 c_1)) (not (= (f1 c_1) (f2 c_1))))))
(set .c7457 (resolution :clauses (.c7439 .c7456) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c6 c_1)) (not (= (f1 c_1) (f2 c_1))))))
(set .c7458 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c4 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4)))))
(set .c7459 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c7460 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c7461 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= c5 (f1 c_1)))))
(set .c7462 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c7463 (resolution :clauses (.c7461 .c7462) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= c5 (f1 c_1)) (not (= c7 c_2)))))
(set .c7464 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c7465 (resolution :clauses (.c7463 .c7464) :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_1)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7466 (resolution :clauses (.c7460 .c7465) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7467 (resolution :clauses (.c7459 .c7466) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c4 (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7468 (resolution :clauses (.c7458 .c7467) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)))))
(set .c7469 (resolution :clauses (.c7457 .c7468) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_1 (f3 c_1 c4)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c6 c_1)) (not (= (f1 c_1) (f2 c_1))))))
(set .c7470 (resolution :clauses (.c7469 .c1739 .c32 .c34 .c164 .c166 .c168) :conclusion ((= c_1 (f3 c_1 c4)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7471 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1))) (not (= (f3 c_0 c_1) c_2)) (= c_0 c_2))))
(set .c7472 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c7473 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c7474 (resolution :clauses (.c7472 .c7473) :conclusion ((not (= (f3 c_1 c_1) c_0)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_0 c_1)))))
(set .c7475 (resolution :clauses (.c7471 .c7474) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= c_0 c_2))))
(set .c7476 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1))))))
(set .c7477 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c7478 (resolution :clauses (.c7476 .c7477) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7479 (resolution :clauses (.c7475 .c7478) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= c_0 c_2) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7480 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1))))))
(set .c7481 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c7482 (resolution :clauses (.c7480 .c7481) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7483 (resolution :clauses (.c7479 .c7482) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= c_0 c_2) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c7 c_2)))))
(set .c7484 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1)))))
(set .c7485 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c7486 (resolution :clauses (.c7484 .c7485) :conclusion ((not (= (f3 c_2 c_1) c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1)))))
(set .c7487 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c7488 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c7489 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c7490 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c7491 (resolution :clauses (.c7489 .c7490) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c7 c_2)))))
(set .c7492 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c7493 (resolution :clauses (.c7491 .c7492) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7494 (resolution :clauses (.c7488 .c7493) :conclusion ((not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7495 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c7496 (resolution :clauses (.c7494 .c7495) :conclusion ((= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7497 (resolution :clauses (.c7487 .c7496) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7498 (resolution :clauses (.c7486 .c7497) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7499 (resolution :clauses (.c7483 .c7498) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (= c_0 c_2) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c7 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)))))
(set .c7500 (resolution :clauses (.c7499 .c8 .c1739 .c32 .c34 .c164 .c166 .c1742) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c7 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7501 (resolution :clauses (.c7500 .c234 .c6380 .c271 .c6423) :conclusion ((not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_0 c_1) c_2)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c7 c_2)) (not (= (f1 c_2) c_2)) (= (f3 c_1 c_1) c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c7502 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_2)) (= c5 c_2))))
(set .c7503 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_1)) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1)))))
(set .c7504 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c7505 (resolution :clauses (.c7503 .c7504) :conclusion ((not (= (f3 c_2 c_1) c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1)))))
(set .c7506 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1))))
(set .c7507 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)))))
(set .c7508 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2))))
(set .c7509 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c7510 (resolution :clauses (.c7508 .c7509) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c7 c_2)))))
(set .c7511 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c7512 (resolution :clauses (.c7510 .c7511) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f2 c_1) c_2) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7513 (resolution :clauses (.c7507 .c7512) :conclusion ((not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7514 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c7515 (resolution :clauses (.c7513 .c7514) :conclusion ((= (f3 c_2 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7516 (resolution :clauses (.c7506 .c7515) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c_1) c_1) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7517 (resolution :clauses (.c7505 .c7516) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7518 (resolution :clauses (.c7502 .c7517) :conclusion ((not (= c5 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= c5 c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7519 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1))))))
(set .c7520 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c7521 (resolution :clauses (.c7519 .c7520) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7522 (resolution :clauses (.c7518 .c7521) :conclusion ((not (= c5 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= c5 c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)) (not (= c4 c_1)))))
(set .c7523 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c7524 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c7525 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c7526 (resolution :clauses (.c7524 .c7525) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)) (not (= c7 c_2)))))
(set .c7527 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c7528 (resolution :clauses (.c7526 .c7527) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c7 c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7529 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c7530 (resolution :clauses (.c7528 .c7529) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_1) (f3 c4 c5)) (not (= c7 c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_1)))))
(set .c7531 (resolution :clauses (.c7523 .c7530) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c7 c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7532 (resolution :clauses (.c7522 .c7531) :conclusion ((not (= c5 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= c5 c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)) (not (= c4 c_1)))))
(set .c7533 (resolution :clauses (.c7532 .c1739 .c32 .c34 .c164 .c166 .c168) :conclusion ((not (= c5 c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= c5 c_2) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)) (not (= c4 c_1)))))
(set .c7534 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_2) (f2 c_1)))))
(set .c7535 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c7536 (resolution :clauses (.c7534 .c7535) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_2) (f2 c_1)) (not (= c7 c_2)))))
(set .c7537 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c7538 (resolution :clauses (.c7536 .c7537) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_2) (f2 c_1)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7539 (resolution :clauses (.c7538 .c1739 .c164 .c166) :conclusion ((= (f1 c_2) (f2 c_1)) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7540 (eq_transitive :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2))))
(set .c7541 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c7542 (resolution :clauses (.c7540 .c7541) :conclusion ((not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c7 c_2)))))
(set .c7543 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c7544 (resolution :clauses (.c7542 .c7543) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7545 (resolution :clauses (.c7544 .c164 .c166) :conclusion ((not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c7 c_2)) (not (= c6 c_1)))))
(set .c7546 (resolution :clauses (.c7533 .c234 .c5081 .c269 .c4937 .c228 .c7501 .c260 .c7470 .c753 .c716 .c294 .c297 .c2126 .c476 .c7438 .c5947 .c7351 .c215 .c7539 .c7545 .c262 .c1380 .c7350 .c1739) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (= c5 c_0) (= c_0 c7))))
(set .c7547 (resolution :clauses (.c7533 .c260 .c234 .c7470 .c716 .c297 .c2126 .c2019 .c476) :conclusion ((not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f1 c_2) c_2)) (not (= c7 c_2)) (not (= c6 c_1)) (not (= c4 c_1)) (= c5 c_0) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c_1) c_2)) (= (f2 c5) (f1 c_0)))))
(set .c7548 (resolution :clauses (.c273 .c7402 .c5709 .c260 .c1676 .c2677 .c258 .c7547 .c262 .c1380) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_2) c_2)) (not (= c6 c_1)) (not (= (f1 c_1) c_2)) (= c5 c_0) (= c4 c_0) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_0)) (= c_0 c7))))
(set .c7549 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c7550 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c7551 (resolution :clauses (.c7549 .c7550) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)))))
(set .c7552 (eq_congruent :conclusion ((not (= (f3 c4 c5) c_1)) (= (f2 (f3 c4 c5)) (f2 c_1)))))
(set .c7553 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c7554 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c7555 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c7556 (resolution :clauses (.c7554 .c7555) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c7557 (resolution :clauses (.c7553 .c7556) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c7558 (resolution :clauses (.c7552 .c7557) :conclusion ((= (f2 (f3 c4 c5)) (f2 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))))))
(set .c7559 (resolution :clauses (.c7551 .c7558) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)))))
(set .c7560 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c7561 (resolution :clauses (.c7559 .c7560) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c7562 (resolution :clauses (.c7561 .c1739 .c32 .c164 .c165) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c7563 (resolution :clauses (.c7562 .c256 .c6291 .c273 .c5709) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_1)) (= c6 c_1) (= c_0 c7) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))))))
(set .c7564 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f1 c_2)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c7565 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c7566 (resolution :clauses (.c7564 .c7565) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f1 c_2)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)))))
(set .c7567 (eq_congruent :conclusion ((not (= (f1 c_2) (f3 c4 c5))) (= (f2 (f1 c_2)) (f2 (f3 c4 c5))))))
(set .c7568 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= (f1 c_2) (f3 c4 c5)))))
(set .c7569 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c7570 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_2) c_2)) (= c5 (f1 c_2)))))
(set .c7571 (resolution :clauses (.c7569 .c7570) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_2)) (not (= (f1 c_2) c_2)))))
(set .c7572 (resolution :clauses (.c7568 .c7571) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c7573 (resolution :clauses (.c7567 .c7572) :conclusion ((= (f2 (f1 c_2)) (f2 (f3 c4 c5))) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c7574 (resolution :clauses (.c7566 .c7573) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_2)))))
(set .c7575 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c7576 (resolution :clauses (.c7574 .c7575) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c7577 (resolution :clauses (.c7576 .c91 .c164 .c165 .c169) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c7578 (resolution :clauses (.c262 .c1612 .c1476 .c256 .c7577 .c260 .c7563 .c2677) :conclusion ((= c_0 c7) (not (= (f1 c_2) c_2)) (not (= c4 c_2)) (not (= (f1 c_1) c_2)) (= c6 c_1) (= (f2 c5) (f1 c_0)) (= c5 c_0) (not (= (f2 c4) (f1 c_1))))))
(set .c7579 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c7580 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c7581 (resolution :clauses (.c7579 .c7580) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_1)))))
(set .c7582 (eq_congruent :conclusion ((not (= (f3 c4 c5) c_1)) (= (f2 (f3 c4 c5)) (f2 c_1)))))
(set .c7583 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c7584 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c7585 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c5 (f1 c_1)))))
(set .c7586 (resolution :clauses (.c7584 .c7585) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7587 (resolution :clauses (.c7583 .c7586) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7588 (resolution :clauses (.c7582 .c7587) :conclusion ((= (f2 (f3 c4 c5)) (f2 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7589 (resolution :clauses (.c7581 .c7588) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)))))
(set .c7590 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c7591 (resolution :clauses (.c7589 .c7590) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= c_0 c6)))))
(set .c7592 (resolution :clauses (.c7591 .c1739 .c164 .c165 .c168) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (not (= c_0 c6)))))
(set .c7593 (resolution :clauses (.c7592 .c256 .c7139) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_2)) (= c6 c_1) (= c_1 (f3 c_1 c4)) (= c_0 c7))))
(set .c7594 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f1 c_2)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c7595 (eq_congruent :conclusion ((not (= (f1 c_2) (f3 c4 c5))) (= (f2 (f1 c_2)) (f2 (f3 c4 c5))))))
(set .c7596 (eq_transitive :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c7597 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c7598 (resolution :clauses (.c7596 .c7597) :conclusion ((not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7599 (resolution :clauses (.c7595 .c7598) :conclusion ((= (f2 (f1 c_2)) (f2 (f3 c4 c5))) (not (= (f1 c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7600 (resolution :clauses (.c7594 .c7599) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7601 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c7602 (resolution :clauses (.c7600 .c7601) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c7603 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c7604 (resolution :clauses (.c7602 .c7603) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (not (= (f2 (f1 c_2)) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c7605 (resolution :clauses (.c7604 .c91 .c164 .c165) :conclusion ((not (= (f1 c_1) c_2)) (not (= (f1 c_2) c_2)) (= (f2 c5) (f1 c_0)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c7606 (resolution :clauses (.c262 .c6976 .c1476 .c256 .c7605 .c260 .c7593 .c234 .c716 .c297 .c2126 .c2019 .c476 .c258 .c7578 .c7548 .c5947) :conclusion ((= c_0 c7) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= (f2 c5) (f1 c_0)) (= c5 c_0) (= c4 c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))))))
(set .c7607 (resolution :clauses (.c258 .c5608 .c2620 .c7606 .c215 .c7180 .c1739) :conclusion ((= c4 c_0) (not (= (f1 c_2) c_2)) (not (= (f1 c_1) c_2)) (= c_0 c7) (= (f2 c5) (f1 c_0)) (= c5 c_0))))
(set .c7608 (resolution :clauses (.c262 .c7545 .c1380) :conclusion ((= c_0 c7) (not (= (f1 c_2) c_2)) (= (f1 c_1) c_2) (not (= c6 c_1)))))
(set .c7609 (resolution :clauses (.c260 .c7577 .c7247) :conclusion ((= c5 c_0) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f1 c_2) c_2)) (not (= c_0 c6)) (= (f1 c_1) c_2))))
(set .c7610 (resolution :clauses (.c252 .c1419 .c6908 .c262 .c260 .c4132 .c4932 .c4916 .c258 .c7609 .c256 .c7608 .c6898 .c7607 .c3145 .c7546 .c6270 .c4917) :conclusion ((not (= (f1 c_2) c_2)))))
(set .c7611 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f2 (f3 c_1 c_1)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c7612 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c7613 (resolution :clauses (.c7611 .c7612) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f2 (f3 c_1 c_1)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_1)))))
(set .c7614 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f2 (f3 c_1 c_1)) (f2 (f3 c4 c5))))))
(set .c7615 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c7616 (resolution :clauses (.c7614 .c7615) :conclusion ((= (f2 (f3 c_1 c_1)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7617 (resolution :clauses (.c7613 .c7616) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7618 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c7619 (resolution :clauses (.c7617 .c7618) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c7620 (resolution :clauses (.c7619 .c1740 .c1739 .c164 .c165) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c7621 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c7622 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c7623 (eq_transitive :conclusion ((not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c7624 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c7625 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (= c5 (f1 c_1)))))
(set .c7626 (resolution :clauses (.c7624 .c7625) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c7627 (resolution :clauses (.c7623 .c7626) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7628 (resolution :clauses (.c7622 .c7627) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7629 (resolution :clauses (.c7621 .c7628) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7630 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c7631 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_1)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c7632 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c7633 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (= c5 (f1 c_1)))))
(set .c7634 (resolution :clauses (.c7632 .c7633) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c7635 (resolution :clauses (.c7631 .c7634) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_1)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7636 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f2 (f3 c_1 c_1)) (f2 (f3 c4 c5))))))
(set .c7637 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c7638 (resolution :clauses (.c7636 .c7637) :conclusion ((= (f2 (f3 c_1 c_1)) (f2 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7639 (resolution :clauses (.c7635 .c7638) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7640 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c7641 (resolution :clauses (.c7639 .c7640) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_2)))))
(set .c7642 (resolution :clauses (.c7630 .c7641) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7643 (resolution :clauses (.c7629 .c7642) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))))))
(set .c7644 (resolution :clauses (.c7643 .c1740 .c1739 .c34 .c164 .c168 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= c_1 c7)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c7645 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c7646 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c7647 (resolution :clauses (.c7645 .c7646) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_1)))))
(set .c7648 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c7649 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c7650 (resolution :clauses (.c7648 .c7649) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c7651 (resolution :clauses (.c7647 .c7650) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f2 c5) (f1 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_0)))))
(set .c7652 (resolution :clauses (.c7651 .c1739 .c29 .c165) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_0)))))
(set .c7653 (resolution :clauses (.c262 .c7644 .c1476 .c256 .c7620) :conclusion ((= c_0 c7) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (= c6 c_1) (= (f2 c5) (f1 c_0)))))
(set .c7654 (eq_transitive :conclusion ((not (= (f3 c_2 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_2 c5) c_2))))
(set .c7655 (eq_congruent :conclusion ((not (= (f2 c_2) c7)) (not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5))))))
(set .c7656 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= (f2 c_2) c7))))
(set .c7657 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c7658 (resolution :clauses (.c7656 .c7657) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= (f2 c_2) c7) (not (= c4 c_1)))))
(set .c7659 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c7660 (resolution :clauses (.c7658 .c7659) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= (f2 c_2) c7) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c7661 (resolution :clauses (.c7655 .c7660) :conclusion ((not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c7662 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2))))
(set .c7663 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c7664 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c7665 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c7666 (resolution :clauses (.c7664 .c7665) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c7667 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c7668 (resolution :clauses (.c7666 .c7667) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c7669 (resolution :clauses (.c7663 .c7668) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c7670 (resolution :clauses (.c7662 .c7669) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c7671 (resolution :clauses (.c7661 .c7670) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)))))
(set .c7672 (resolution :clauses (.c7654 .c7671) :conclusion ((not (= (f3 c_2 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_2 c5) c_2) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c7673 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= c5 (f3 c4 c5))) (= (f3 c_2 c5) (f3 c6 (f3 c4 c5))))))
(set .c7674 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c7675 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c7676 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c7677 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c7678 (resolution :clauses (.c7676 .c7677) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c7679 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c7680 (resolution :clauses (.c7678 .c7679) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c7681 (resolution :clauses (.c7675 .c7680) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c7682 (resolution :clauses (.c7674 .c7681) :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (= c5 (f3 c4 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c7683 (resolution :clauses (.c7673 .c7682) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c7684 (resolution :clauses (.c7672 .c7683) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_2 c5) c_2) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c7685 (resolution :clauses (.c7684 .c34 .c33 .c165) :conclusion ((= (f3 c_2 c5) c_2) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c7686 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)))))
(set .c7687 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c7688 (resolution :clauses (.c7686 .c7687) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c4 c_1)))))
(set .c7689 (eq_congruent :conclusion ((not (= c5 (f3 c4 c5))) (= (f2 c5) (f2 (f3 c4 c5))))))
(set .c7690 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c7691 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c7692 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c7693 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c7694 (resolution :clauses (.c7692 .c7693) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c7695 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c7696 (resolution :clauses (.c7694 .c7695) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c7697 (resolution :clauses (.c7691 .c7696) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c7698 (resolution :clauses (.c7690 .c7697) :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (= c5 (f3 c4 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c7699 (resolution :clauses (.c7689 .c7698) :conclusion ((= (f2 c5) (f2 (f3 c4 c5))) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c7700 (resolution :clauses (.c7688 .c7699) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f1 c_1) c_1)))))
(set .c7701 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c7702 (resolution :clauses (.c7700 .c7701) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f1 c_1) c_1)) (not (= c6 c_2)))))
(set .c7703 (resolution :clauses (.c7702 .c165 .c164 .c33) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_1)) (not (= c6 c_2)))))
(set .c7704 (resolution :clauses (.c280 .c7685 .c7703 .c262 .c1476) :conclusion ((not (= (f2 c5) (f1 c_1))) (not (= (f3 c_1 c5) c_2)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_1))) (= c_0 c7))))
(set .c7705 (eq_transitive :conclusion ((not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c7706 (eq_congruent :conclusion ((not (= c5 (f3 c4 c5))) (= (f2 c5) (f2 (f3 c4 c5))))))
(set .c7707 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c7708 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c7709 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c7710 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c7711 (resolution :clauses (.c7709 .c7710) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c7712 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c7713 (resolution :clauses (.c7711 .c7712) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c7714 (resolution :clauses (.c7708 .c7713) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c7715 (resolution :clauses (.c7707 .c7714) :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (= c5 (f3 c4 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c7716 (resolution :clauses (.c7706 .c7715) :conclusion ((= (f2 c5) (f2 (f3 c4 c5))) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c7717 (resolution :clauses (.c7705 .c7716) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c7718 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c7719 (resolution :clauses (.c7717 .c7718) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)))))
(set .c7720 (resolution :clauses (.c7719 .c33 .c164 .c165) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c5 c_2)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)))))
(set .c7721 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2))))
(set .c7722 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)))))
(set .c7723 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c7724 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c7725 (resolution :clauses (.c7723 .c7724) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_1)))))
(set .c7726 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c7727 (resolution :clauses (.c7725 .c7726) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c7728 (resolution :clauses (.c7722 .c7727) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c7729 (resolution :clauses (.c7721 .c7728) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c7730 (resolution :clauses (.c7729 .c33 .c165) :conclusion ((= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c7731 (resolution :clauses (.c7720 .c256 .c7704 .c7730 .c260 .c7653 .c252 .c7652 .c476) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c4 c_1)) (= c6 c_1) (not (= (f2 c4) (f1 c_1))) (= c_0 c7) (= c5 c_0) (= (f1 c_1) c_2))))
(set .c7732 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f2 (f3 c_2 c_2)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c7733 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c7734 (resolution :clauses (.c7732 .c7733) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f2 (f3 c_2 c_2)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c5 c_2)))))
(set .c7735 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f2 (f3 c_2 c_2)) (f2 (f3 c4 c5))))))
(set .c7736 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c7737 (resolution :clauses (.c7735 .c7736) :conclusion ((= (f2 (f3 c_2 c_2)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c7738 (resolution :clauses (.c7734 .c7737) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7739 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c7740 (resolution :clauses (.c7738 .c7739) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= c_0 c6)))))
(set .c7741 (resolution :clauses (.c7740 .c164) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (= (f2 c5) (f1 c_0)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= c_0 c6)))))
(set .c7742 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (= (f2 c5) (f1 c_0)))))
(set .c7743 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c7744 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c7745 (resolution :clauses (.c7743 .c7744) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7746 (resolution :clauses (.c7742 .c7745) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_0) (f2 c_1))) (= (f2 c5) (f1 c_0)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7747 (resolution :clauses (.c7746 .c1739) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_0) (f2 c_1))) (= (f2 c5) (f1 c_0)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7748 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c7749 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1)))))
(set .c7750 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c7751 (resolution :clauses (.c7749 .c7750) :conclusion ((not (= (f1 c_1) c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1)))))
(set .c7752 (resolution :clauses (.c7748 .c7751) :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_1)))))
(set .c7753 (resolution :clauses (.c7752 .c168 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= c_1 c7)) (not (= (f1 c_1) c_1)))))
(set .c7754 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c_1 c4))) (not (= c_1 (f3 c_1 c4))) (not (= c_1 c7)) (= c6 c7))))
(set .c7755 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c4 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c4)))))
(set .c7756 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c7757 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c7758 (resolution :clauses (.c7756 .c7757) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c7759 (resolution :clauses (.c7755 .c7758) :conclusion ((not (= c4 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c7760 (resolution :clauses (.c7754 .c7759) :conclusion ((not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c_1 (f3 c_1 c4))) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c7761 (resolution :clauses (.c7760 .c33 .c224) :conclusion ((not (= c6 c_2)) (not (= c_1 (f3 c_1 c4))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c7762 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c7763 (resolution :clauses (.c7762 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)))))
(set .c7764 (eq_transitive :conclusion ((not (= (f3 c_0 c4) c_0)) (not (= (f3 c_0 c4) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c7765 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c4)) (= (f3 c_0 c4) (f3 c_0 c5)))))
(set .c7766 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c7767 (resolution :clauses (.c7765 .c7766) :conclusion ((not (= c5 c4)) (= (f3 c_0 c4) (f3 c_0 c5)))))
(set .c7768 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c7769 (resolution :clauses (.c7767 .c7768) :conclusion ((= (f3 c_0 c4) (f3 c_0 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7770 (resolution :clauses (.c7764 .c7769) :conclusion ((not (= (f3 c_0 c4) c_0)) (= c_0 (f3 c_0 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7771 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (= c_0 c_1))))
(set .c7772 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c7773 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c7774 (resolution :clauses (.c7772 .c7773) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c7775 (resolution :clauses (.c7771 .c7774) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (= c_0 c_1) (not (= (f3 c_0 c_0) c_1)))))
(set .c7776 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_0 c_0))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c7777 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c7778 (resolution :clauses (.c7776 .c7777) :conclusion ((not (= (f2 c_0) (f3 c_0 c_0))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c7779 (eq_transitive :conclusion ((not (= (f2 c_0) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f2 c_0) (f3 c_0 c_0)))))
(set .c7780 (resolution :clauses (.c7778 .c7779) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_0 c_0) c_0)) (not (= (f2 c_0) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7781 (resolution :clauses (.c7775 .c7780) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (= c_0 c_1) (not (= (f3 c_0 c_0) c_1)) (not (= (f2 c_0) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c7782 (resolution :clauses (.c7781 .c7 .c31) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_0 c_0) c_1)) (not (= (f2 c_0) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c7783 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_0 c_0)) (f2 c_1))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 c_0) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c7784 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f2 (f3 c_0 c_0)) (f2 c_1)))))
(set .c7785 (resolution :clauses (.c7783 .c7784) :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 c_0) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7786 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c7787 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c7788 (resolution :clauses (.c7786 .c7787) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7789 (resolution :clauses (.c7785 .c7788) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 c_0) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= (f3 c_0 c_0) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7790 (resolution :clauses (.c7789 .c1739) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 c_0) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= (f3 c_0 c_0) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7791 (resolution :clauses (.c7790 .c11) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= (f3 c_0 c_0) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7792 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c7793 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c7794 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c7795 (resolution :clauses (.c7793 .c7794) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7796 (resolution :clauses (.c7792 .c7795) :conclusion ((not (= (f2 c4) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7797 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 c_1 c5) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c7798 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)))))
(set .c7799 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c7800 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c7801 (resolution :clauses (.c7799 .c7800) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c7802 (resolution :clauses (.c7798 .c7801) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c7803 (resolution :clauses (.c7797 .c7802) :conclusion ((not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c_1 c5) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c7804 (resolution :clauses (.c7803 .c33 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c5) c_1)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c7805 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f2 (f3 c_0 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c_0) (f1 c_1)))))
(set .c7806 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (= (f2 (f3 c_0 c_1)) (f2 c_1)))))
(set .c7807 (resolution :clauses (.c7805 .c7806) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c_0) (f1 c_1)) (not (= c_1 (f3 c_0 c_1))))))
(set .c7808 (resolution :clauses (.c7807 .c1739) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_1)))) (= (f2 c_0) (f1 c_1)) (not (= c_1 (f3 c_0 c_1))))))
(set .c7809 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c_0) (f1 c_1)))))
(set .c7810 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f2 (f3 c_0 c_0)) (f2 c_1)))))
(set .c7811 (resolution :clauses (.c7809 .c7810) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c_0) (f1 c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7812 (resolution :clauses (.c7811 .c1739) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f2 c_0) (f1 c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7813 (eq_transitive :conclusion ((not (= c_0 (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (= c_0 c_1))))
(set .c7814 (resolution :clauses (.c7813 .c7 .c1739) :conclusion ((not (= c_0 (f2 c_1))) (not (= (f1 c_1) c_1)))))
(set .c7815 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 (f3 c_0 c_0)) (f1 c_1))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c7816 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f1 (f3 c_0 c_0)) (f1 c_1)))))
(set .c7817 (resolution :clauses (.c7815 .c7816) :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7818 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c7819 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c7820 (resolution :clauses (.c7818 .c7819) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7821 (resolution :clauses (.c7817 .c7820) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= (f3 c_0 c_0) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7822 (eq_transitive :conclusion ((not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (= (f2 c_0) (f1 c_1)))))
(set .c7823 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c7824 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c7825 (resolution :clauses (.c7823 .c7824) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7826 (resolution :clauses (.c7822 .c7825) :conclusion ((not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (= (f2 c_0) (f1 c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7827 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c7828 (resolution :clauses (.c7826 .c7827) :conclusion ((not (= (f2 c_0) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (= (f2 c_0) (f1 c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7829 (resolution :clauses (.c7828 .c165) :conclusion ((not (= (f2 c_0) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (= (f2 c_0) (f1 c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7830 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c4) c_2)) (not (= (f3 c_0 c4) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c7831 (resolution :clauses (.c7830 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c4) c_2)) (not (= (f3 c_0 c4) c_1)) (not (= c_1 c7)))))
(set .c7832 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c5) c_2)) (not (= (f3 c_0 c4) (f3 c_0 c5))) (not (= (f3 c_0 c4) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c7833 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c4)) (= (f3 c_0 c4) (f3 c_0 c5)))))
(set .c7834 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c7835 (resolution :clauses (.c7833 .c7834) :conclusion ((not (= c5 c4)) (= (f3 c_0 c4) (f3 c_0 c5)))))
(set .c7836 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c7837 (resolution :clauses (.c7835 .c7836) :conclusion ((= (f3 c_0 c4) (f3 c_0 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7838 (resolution :clauses (.c7832 .c7837) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c5) c_2)) (not (= (f3 c_0 c4) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7839 (resolution :clauses (.c7838 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c5) c_2)) (not (= (f3 c_0 c4) c_1)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7840 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c4) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c4) c_1)) (= c_0 c_1))))
(set .c7841 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c4 (f1 c_0))) (= (f3 c_0 c4) (f3 c_0 (f1 c_0))))))
(set .c7842 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f1 c_0) c_2)) (= c4 (f1 c_0)))))
(set .c7843 (resolution :clauses (.c7841 .c7842) :conclusion ((not (= c_0 c_0)) (= (f3 c_0 c4) (f3 c_0 (f1 c_0))) (not (= c4 c_2)) (not (= (f1 c_0) c_2)))))
(set .c7844 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c7845 (resolution :clauses (.c7843 .c7844) :conclusion ((= (f3 c_0 c4) (f3 c_0 (f1 c_0))) (not (= c4 c_2)) (not (= (f1 c_0) c_2)))))
(set .c7846 (resolution :clauses (.c7840 .c7845) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c4) c_1)) (= c_0 c_1) (not (= c4 c_2)) (not (= (f1 c_0) c_2)))))
(set .c7847 (resolution :clauses (.c7846 .c7 .c167) :conclusion ((not (= (f3 c_0 c4) c_1)) (not (= c4 c_2)) (not (= (f1 c_0) c_2)))))
(set .c7848 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 c_2 c_0) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c7849 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)))))
(set .c7850 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c7851 (resolution :clauses (.c7849 .c7850) :conclusion ((not (= (f3 c_2 c_1) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)))))
(set .c7852 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2))))
(set .c7853 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_1)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))))))
(set .c7854 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1))))
(set .c7855 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c7856 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c7857 (resolution :clauses (.c7855 .c7856) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7858 (resolution :clauses (.c7854 .c7857) :conclusion ((not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7859 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c7860 (resolution :clauses (.c7858 .c7859) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7861 (resolution :clauses (.c7853 .c7860) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7862 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c7863 (resolution :clauses (.c7861 .c7862) :conclusion ((= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7864 (resolution :clauses (.c7852 .c7863) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7865 (resolution :clauses (.c7851 .c7864) :conclusion ((= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7866 (resolution :clauses (.c7848 .c7865) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 c_0) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7867 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_1 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_1 c_0)) (f3 c_2 (f1 c_2))))))
(set .c7868 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f3 c_1 c_0) (f1 c_2)))))
(set .c7869 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c7870 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c7871 (resolution :clauses (.c7869 .c7870) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7872 (resolution :clauses (.c7868 .c7871) :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f3 c_1 c_0) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7873 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c7874 (resolution :clauses (.c7872 .c7873) :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (= (f3 c_1 c_0) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7875 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c7876 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c7877 (resolution :clauses (.c7875 .c7876) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c7878 (resolution :clauses (.c7874 .c7877) :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (= (f3 c_1 c_0) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7879 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c7880 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c7881 (resolution :clauses (.c7879 .c7880) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c7882 (resolution :clauses (.c7878 .c7881) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (= (f3 c_1 c_0) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7883 (resolution :clauses (.c7867 .c7882) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_1 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7884 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c7885 (resolution :clauses (.c7883 .c7884) :conclusion ((= (f3 c_2 (f3 c_1 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7886 (resolution :clauses (.c7866 .c7885) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 c_0) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_0 c_0) c_1)))))
(set .c7887 (resolution :clauses (.c7886 .c165 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 c_0) c_1)) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_0 c_0) c_1)))))
(set .c7888 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 c_2))))
(set .c7889 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)))))
(set .c7890 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c7891 (resolution :clauses (.c7889 .c7890) :conclusion ((not (= (f3 c_2 c_1) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)))))
(set .c7892 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2))))
(set .c7893 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_1)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))))))
(set .c7894 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1))))
(set .c7895 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c7896 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c7897 (resolution :clauses (.c7895 .c7896) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7898 (resolution :clauses (.c7894 .c7897) :conclusion ((not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7899 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c7900 (resolution :clauses (.c7898 .c7899) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7901 (resolution :clauses (.c7893 .c7900) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7902 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c7903 (resolution :clauses (.c7901 .c7902) :conclusion ((= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7904 (resolution :clauses (.c7892 .c7903) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7905 (resolution :clauses (.c7891 .c7904) :conclusion ((= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7906 (resolution :clauses (.c7888 .c7905) :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 c_2) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7907 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_1 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_1 c_0)) (f3 c_2 (f1 c_2))))))
(set .c7908 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f3 c_1 c_0) (f1 c_2)))))
(set .c7909 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c7910 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c7911 (resolution :clauses (.c7909 .c7910) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7912 (resolution :clauses (.c7908 .c7911) :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f3 c_1 c_0) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7913 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c7914 (resolution :clauses (.c7912 .c7913) :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (= (f3 c_1 c_0) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7915 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c7916 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c7917 (resolution :clauses (.c7915 .c7916) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c7918 (resolution :clauses (.c7914 .c7917) :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (= (f3 c_1 c_0) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7919 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c7920 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c7921 (resolution :clauses (.c7919 .c7920) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c7922 (resolution :clauses (.c7918 .c7921) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (= (f3 c_1 c_0) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7923 (resolution :clauses (.c7907 .c7922) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_1 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7924 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c7925 (resolution :clauses (.c7923 .c7924) :conclusion ((= (f3 c_2 (f3 c_1 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7926 (resolution :clauses (.c7906 .c7925) :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 c_2) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_0 c_0) c_1)))))
(set .c7927 (resolution :clauses (.c7926 .c8 .c165 .c169) :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_0 c_0) c_1)))))
(set .c7928 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) c_2)) (not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (not (= c_1 c7)) (= c6 c7))))
(set .c7929 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c7930 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c7931 (resolution :clauses (.c7929 .c7930) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c7932 (resolution :clauses (.c7928 .c7931) :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) c_2)) (not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= c_1 c7)) (= c6 c7) (not (= (f3 c_0 c_0) c_1)))))
(set .c7933 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c7934 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c7935 (resolution :clauses (.c7933 .c7934) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c7936 (resolution :clauses (.c7932 .c7935) :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= c_1 c7)) (= c6 c7) (not (= (f3 c_0 c_0) c_1)))))
(set .c7937 (resolution :clauses (.c7936 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= c_1 c7)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7938 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= c_0 c_2))))
(set .c7939 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c7940 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c7941 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c7942 (resolution :clauses (.c7940 .c7941) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c7943 (resolution :clauses (.c7939 .c7942) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c7944 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c7945 (resolution :clauses (.c7943 .c7944) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c7946 (resolution :clauses (.c7938 .c7945) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (= c_0 c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c7947 (resolution :clauses (.c7946 .c8 .c33) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c7948 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f2 c_2) c_2)) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c7949 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c7950 (resolution :clauses (.c7948 .c7949) :conclusion ((not (= c6 c_2)) (not (= (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_2)))))
(set .c7951 (resolution :clauses (.c7950 .c224) :conclusion ((not (= c6 c_2)) (not (= (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_2)))))
(set .c7952 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 c_1 c_2) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c7953 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c7954 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c7955 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c7956 (resolution :clauses (.c7954 .c7955) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c7957 (resolution :clauses (.c7953 .c7956) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c7958 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c7959 (resolution :clauses (.c7957 .c7958) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c7960 (resolution :clauses (.c7952 .c7959) :conclusion ((not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c_1 c_2) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c7961 (resolution :clauses (.c7960 .c33 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_2) c_1)) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c7962 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_0 (f3 c_0 c_2)) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (not (= c_1 c7)) (= c6 c7))))
(set .c7963 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_2) c_1)) (= (f3 c_0 (f3 c_0 c_2)) (f3 c_0 c_1)))))
(set .c7964 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c7965 (resolution :clauses (.c7963 .c7964) :conclusion ((not (= (f3 c_0 c_2) c_1)) (= (f3 c_0 (f3 c_0 c_2)) (f3 c_0 c_1)))))
(set .c7966 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 c_0 c4))) (not (= (f3 c_0 c4) c_1)) (= (f3 c_0 c_2) c_1))))
(set .c7967 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c4 c_2)) (= (f3 c_0 c_2) (f3 c_0 c4)))))
(set .c7968 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c7969 (resolution :clauses (.c7967 .c7968) :conclusion ((not (= c4 c_2)) (= (f3 c_0 c_2) (f3 c_0 c4)))))
(set .c7970 (resolution :clauses (.c7966 .c7969) :conclusion ((not (= (f3 c_0 c4) c_1)) (= (f3 c_0 c_2) c_1) (not (= c4 c_2)))))
(set .c7971 (resolution :clauses (.c7965 .c7970) :conclusion ((= (f3 c_0 (f3 c_0 c_2)) (f3 c_0 c_1)) (not (= (f3 c_0 c4) c_1)) (not (= c4 c_2)))))
(set .c7972 (resolution :clauses (.c7962 .c7971) :conclusion ((not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= c_1 (f3 c_0 c_1))) (not (= c_1 c7)) (= c6 c7) (not (= (f3 c_0 c4) c_1)) (not (= c4 c_2)))))
(set .c7973 (eq_congruent :conclusion ((not (= (f2 c_2) (f3 c_0 c_0))) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2)))))
(set .c7974 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f2 c_2) (f3 c_0 c_0)))))
(set .c7975 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c7976 (resolution :clauses (.c7974 .c7975) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f2 c_2) (f3 c_0 c_0)) (not (= c4 c_2)))))
(set .c7977 (resolution :clauses (.c7973 .c7976) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_2)))))
(set .c7978 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c7979 (resolution :clauses (.c7977 .c7978) :conclusion ((= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_2)))))
(set .c7980 (resolution :clauses (.c7972 .c7979) :conclusion ((not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= c_1 (f3 c_0 c_1))) (not (= c_1 c7)) (= c6 c7) (not (= (f3 c_0 c4) c_1)) (not (= c4 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7981 (resolution :clauses (.c7980 .c33 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= c_1 (f3 c_0 c_1))) (not (= c_1 c7)) (not (= (f3 c_0 c4) c_1)) (not (= c4 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c7982 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) c_0)) (not (= (f3 c_2 c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 c_2))))
(set .c7983 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_1)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))))))
(set .c7984 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1))))
(set .c7985 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c7986 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c7987 (resolution :clauses (.c7985 .c7986) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7988 (resolution :clauses (.c7984 .c7987) :conclusion ((not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7989 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c7990 (resolution :clauses (.c7988 .c7989) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7991 (resolution :clauses (.c7983 .c7990) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7992 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c7993 (resolution :clauses (.c7991 .c7992) :conclusion ((= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7994 (resolution :clauses (.c7982 .c7993) :conclusion ((not (= (f3 c_2 c_1) c_0)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 c_2) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7995 (resolution :clauses (.c7994 .c8 .c165 .c169) :conclusion ((not (= (f3 c_2 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c7996 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 (f3 c_2 c_0)))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= (f2 c5) (f1 c_0)))))
(set .c7997 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c4)) (= (f1 c4) (f1 (f3 c_2 c_0))))))
(set .c7998 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (= (f3 c_2 c_0) c4))))
(set .c7999 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_1 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_1 c_0)) (f3 c_2 (f1 c_2))))))
(set .c8000 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f3 c_1 c_0) (f1 c_2)))))
(set .c8001 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c8002 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c8003 (resolution :clauses (.c8001 .c8002) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8004 (resolution :clauses (.c8000 .c8003) :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f3 c_1 c_0) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8005 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c8006 (resolution :clauses (.c8004 .c8005) :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (= (f3 c_1 c_0) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8007 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c8008 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c8009 (resolution :clauses (.c8007 .c8008) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c8010 (resolution :clauses (.c8006 .c8009) :conclusion ((not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (= (f3 c_1 c_0) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c8011 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c8012 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c8013 (resolution :clauses (.c8011 .c8012) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c8014 (resolution :clauses (.c8010 .c8013) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (= (f3 c_1 c_0) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c8015 (resolution :clauses (.c7999 .c8014) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_1 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c8016 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c8017 (resolution :clauses (.c8015 .c8016) :conclusion ((= (f3 c_2 (f3 c_1 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= c5 c_2)) (not (= c4 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c8018 (resolution :clauses (.c7998 .c8017) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (= (f3 c_2 c_0) c4) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= c5 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c8019 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)))))
(set .c8020 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c8021 (resolution :clauses (.c8019 .c8020) :conclusion ((not (= (f3 c_2 c_1) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)))))
(set .c8022 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2))))
(set .c8023 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_1)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))))))
(set .c8024 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1))))
(set .c8025 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c8026 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c8027 (resolution :clauses (.c8025 .c8026) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8028 (resolution :clauses (.c8024 .c8027) :conclusion ((not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8029 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c8030 (resolution :clauses (.c8028 .c8029) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8031 (resolution :clauses (.c8023 .c8030) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8032 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c8033 (resolution :clauses (.c8031 .c8032) :conclusion ((= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8034 (resolution :clauses (.c8022 .c8033) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8035 (resolution :clauses (.c8021 .c8034) :conclusion ((= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8036 (resolution :clauses (.c8018 .c8035) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (= (f3 c_2 c_0) c4) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= c5 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c8037 (resolution :clauses (.c7997 .c8036) :conclusion ((= (f1 c4) (f1 (f3 c_2 c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= c5 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c8038 (resolution :clauses (.c7996 .c8037) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= (f2 c5) (f1 c_0)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c5 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c8039 (resolution :clauses (.c8038 .c165 .c169) :conclusion ((not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= (f2 c5) (f1 c_0)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= c4 c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c5 c_2)) (not (= (f3 c_0 c_0) c_1)))))
(set .c8040 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c8041 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_0 c_2) (f1 c_1))) (= (f3 c_1 (f3 c_0 c_2)) (f3 c_1 (f1 c_1))))))
(set .c8042 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 c_0 c4))) (not (= (f3 c_0 c4) c_1)) (not (= (f1 c_1) c_1)) (= (f3 c_0 c_2) (f1 c_1)))))
(set .c8043 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c4 c_2)) (= (f3 c_0 c_2) (f3 c_0 c4)))))
(set .c8044 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c8045 (resolution :clauses (.c8043 .c8044) :conclusion ((not (= c4 c_2)) (= (f3 c_0 c_2) (f3 c_0 c4)))))
(set .c8046 (resolution :clauses (.c8042 .c8045) :conclusion ((not (= (f3 c_0 c4) c_1)) (not (= (f1 c_1) c_1)) (= (f3 c_0 c_2) (f1 c_1)) (not (= c4 c_2)))))
(set .c8047 (resolution :clauses (.c8041 .c8046) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f3 c_0 c_2)) (f3 c_1 (f1 c_1))) (not (= (f3 c_0 c4) c_1)) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8048 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c8049 (resolution :clauses (.c8047 .c8048) :conclusion ((= (f3 c_1 (f3 c_0 c_2)) (f3 c_1 (f1 c_1))) (not (= (f3 c_0 c4) c_1)) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8050 (resolution :clauses (.c8040 .c8049) :conclusion ((not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 c_0 c4) c_1)) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8051 (eq_congruent :conclusion ((not (= (f2 c_2) (f3 c_1 c_0))) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 (f3 c_1 c_0) c_2)))))
(set .c8052 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (= (f2 c_2) (f3 c_1 c_0)))))
(set .c8053 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c8054 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c8055 (resolution :clauses (.c8053 .c8054) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 c_1)))))
(set .c8056 (resolution :clauses (.c8052 .c8055) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0))) (= (f2 c_2) (f3 c_1 c_0)) (not (= (f3 c_0 c_0) c_1)))))
(set .c8057 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c8058 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c8059 (resolution :clauses (.c8057 .c8058) :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c8060 (resolution :clauses (.c8056 .c8059) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= (f2 c_2) (f3 c_1 c_0)) (not (= (f3 c_0 c_0) c_1)))))
(set .c8061 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8062 (resolution :clauses (.c8060 .c8061) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= (f2 c_2) (f3 c_1 c_0)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_2)))))
(set .c8063 (resolution :clauses (.c8051 .c8062) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 (f3 c_1 c_0) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_2)))))
(set .c8064 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c8065 (resolution :clauses (.c8063 .c8064) :conclusion ((= (f3 (f2 c_2) c_2) (f3 (f3 c_1 c_0) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_2)))))
(set .c8066 (resolution :clauses (.c8050 .c8065) :conclusion ((not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 c_0 c4) c_1)) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)))))
(set .c8067 (resolution :clauses (.c8066 .c33 .c168 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= c_1 c7)) (not (= (f3 c_0 c4) c_1)) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= c_1 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)))))
(set .c8068 (eq_transitive :conclusion ((not (= (f3 c_2 c5) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 c5) c_1))))
(set .c8069 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c8070 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c8071 (resolution :clauses (.c8069 .c8070) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c8072 (resolution :clauses (.c8068 .c8071) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 c5) c_1) (not (= c5 c_2)))))
(set .c8073 (eq_transitive :conclusion ((not (= (f2 c_2) c_0)) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c_0 c_1))))
(set .c8074 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8075 (resolution :clauses (.c8073 .c8074) :conclusion ((not (= (f2 c_2) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c_0 c_1) (not (= c4 c_2)))))
(set .c8076 (resolution :clauses (.c8075 .c7) :conclusion ((not (= (f2 c_2) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8077 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= (f3 c_2 c_2) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)))))
(set .c8078 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 c_2)) (= (f3 c_2 c_2) (f3 c_2 c4)))))
(set .c8079 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c8080 (resolution :clauses (.c8078 .c8079) :conclusion ((not (= c4 c_2)) (= (f3 c_2 c_2) (f3 c_2 c4)))))
(set .c8081 (resolution :clauses (.c8077 .c8080) :conclusion ((not (= (f3 c_2 c_2) c_2)) (= c_2 (f3 c_2 c4)) (not (= c4 c_2)))))
(set .c8082 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c_0 (f3 c_2 c5)))))
(set .c8083 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c8084 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c8085 (resolution :clauses (.c8083 .c8084) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c8086 (resolution :clauses (.c8082 .c8085) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c_2 c5)) (not (= c5 c_2)))))
(set .c8087 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c8088 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)))))
(set .c8089 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c8090 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c8091 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c8092 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8093 (resolution :clauses (.c8091 .c8092) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c8094 (resolution :clauses (.c8090 .c8093) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8095 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c8096 (resolution :clauses (.c8094 .c8095) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8097 (resolution :clauses (.c8089 .c8096) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8098 (resolution :clauses (.c8088 .c8097) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8099 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c8100 (resolution :clauses (.c8098 .c8099) :conclusion ((= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8101 (resolution :clauses (.c8087 .c8100) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8102 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2))))))
(set .c8103 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c8104 (resolution :clauses (.c8102 .c8103) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8105 (resolution :clauses (.c8101 .c8104) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8106 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c8107 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c8108 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c8109 (resolution :clauses (.c8107 .c8108) :conclusion ((not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8110 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c8111 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c8112 (resolution :clauses (.c8110 .c8111) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8113 (resolution :clauses (.c8109 .c8112) :conclusion ((not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8114 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c8115 (resolution :clauses (.c8113 .c8114) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8116 (resolution :clauses (.c8106 .c8115) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8117 (resolution :clauses (.c8105 .c8116) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c4))))))
(set .c8118 (resolution :clauses (.c8117 .c33 .c34 .c165 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8119 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c8120 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)))))
(set .c8121 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c8122 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c8123 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c8124 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8125 (resolution :clauses (.c8123 .c8124) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c8126 (resolution :clauses (.c8122 .c8125) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8127 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c8128 (resolution :clauses (.c8126 .c8127) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8129 (resolution :clauses (.c8121 .c8128) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8130 (resolution :clauses (.c8120 .c8129) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8131 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c8132 (resolution :clauses (.c8130 .c8131) :conclusion ((= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8133 (resolution :clauses (.c8119 .c8132) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8134 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2))))))
(set .c8135 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c8136 (resolution :clauses (.c8134 .c8135) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8137 (resolution :clauses (.c8133 .c8136) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_2)))))
(set .c8138 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c8139 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c8140 (resolution :clauses (.c8138 .c8139) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8141 (resolution :clauses (.c8137 .c8140) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c8142 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5)))))
(set .c8143 (resolution :clauses (.c8141 .c8142) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_0 (f3 c_0 c5)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c8144 (resolution :clauses (.c8143 .c33 .c34) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_0 (f3 c_0 c5)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c8145 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c_1 c4))) (= c_2 (f3 c_1 c4)))))
(set .c8146 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c4 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c4)))))
(set .c8147 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c8148 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8149 (resolution :clauses (.c8147 .c8148) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c8150 (resolution :clauses (.c8146 .c8149) :conclusion ((not (= c4 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c8151 (resolution :clauses (.c8145 .c8150) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= c_2 (f3 c_1 c4)) (not (= c4 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c8152 (resolution :clauses (.c8151 .c33) :conclusion ((= c_2 (f3 c_1 c4)) (not (= c4 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c8153 (resolution :clauses (.c8144 .c242 .c8118 .c8081 .c298 .c8152) :conclusion ((not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_0 (f3 c_0 c5)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c8154 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c8155 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c8156 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c8157 (resolution :clauses (.c8155 .c8156) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8158 (resolution :clauses (.c8154 .c8157) :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f2 c5) (f1 c_0)) (not (= (f1 c_1) c_0)))))
(set .c8159 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c8160 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c8161 (resolution :clauses (.c8159 .c8160) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8162 (resolution :clauses (.c8158 .c8161) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f2 c5) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8163 (resolution :clauses (.c8162 .c1739 .c29) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8164 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 (f3 c_2 c_2)) (f1 c_2))) (not (= (f1 (f3 c_2 c_2)) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c8165 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c8166 (resolution :clauses (.c8164 .c8165) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 (f3 c_2 c_2)) (f1 c_2))) (not (= (f1 (f3 c_2 c_2)) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)))))
(set .c8167 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f1 (f3 c_2 c_2)) (f1 c_0)))))
(set .c8168 (resolution :clauses (.c8166 .c8167) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 (f3 c_2 c_2)) (f1 c_2))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c8169 (resolution :clauses (.c8168 .c165) :conclusion ((not (= (f1 (f3 c_2 c_2)) (f1 c_2))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c8170 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c_2) (f1 c_2)))))
(set .c8171 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c8172 (resolution :clauses (.c8170 .c8171) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c_2) (f1 c_2)) (not (= c5 c_2)))))
(set .c8173 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c8174 (resolution :clauses (.c8172 .c8173) :conclusion ((not (= (f2 c5) (f1 c4))) (= (f2 c_2) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8175 (resolution :clauses (.c8174 .c165) :conclusion ((= (f2 c_2) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8176 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c4) (f1 c_2)))))
(set .c8177 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c8178 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c8179 (resolution :clauses (.c8177 .c8178) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8180 (resolution :clauses (.c8176 .c8179) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c4) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8181 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c8182 (resolution :clauses (.c8180 .c8181) :conclusion ((not (= (f2 c5) (f1 c4))) (= (f2 c4) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8183 (resolution :clauses (.c8182 .c165) :conclusion ((= (f2 c4) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8184 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_1)))))
(set .c8185 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c8186 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c8187 (resolution :clauses (.c8185 .c8186) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8188 (resolution :clauses (.c8184 .c8187) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8189 (resolution :clauses (.c8169 .c242 .c8081 .c298 .c8152 .c8118 .c252 .c8163 .c262 .c1476 .c256 .c7741 .c205 .c109 .c27 .c8175 .c8183 .c8188) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= c5 c_2)) (= (f1 c_1) c_2) (= c_0 c7) (= c6 c_1) (not (= (f2 c_2) (f1 c_1))))))
(set .c8190 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))) (= c_0 c_1))))
(set .c8191 (resolution :clauses (.c8190 .c7) :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_1 (f3 c_0 c_1))))))
(set .c8192 (eq_transitive :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_1 c_2) c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)))))
(set .c8193 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= (f1 c_2) c_1)) (= (f3 (f3 c_1 c_2) c_1) (f3 c_2 (f1 c_2))))))
(set .c8194 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c8195 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c8196 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c8197 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8198 (resolution :clauses (.c8196 .c8197) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c8199 (resolution :clauses (.c8195 .c8198) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8200 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c8201 (resolution :clauses (.c8199 .c8200) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8202 (resolution :clauses (.c8194 .c8201) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8203 (resolution :clauses (.c8193 .c8202) :conclusion ((not (= (f1 c_2) c_1)) (= (f3 (f3 c_1 c_2) c_1) (f3 c_2 (f1 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8204 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1))))
(set .c8205 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c8206 (resolution :clauses (.c8204 .c8205) :conclusion ((not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c5 c_1)))))
(set .c8207 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c8208 (resolution :clauses (.c8206 .c8207) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c5 c_1)) (not (= c4 c_2)))))
(set .c8209 (resolution :clauses (.c8203 .c8208) :conclusion ((= (f3 (f3 c_1 c_2) c_1) (f3 c_2 (f1 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= c5 c_1)))))
(set .c8210 (resolution :clauses (.c8192 .c8209) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= c5 c_1)))))
(set .c8211 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))))))
(set .c8212 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c8213 (resolution :clauses (.c8211 .c8212) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c8214 (resolution :clauses (.c8210 .c8213) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c8215 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= c4 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)))))
(set .c8216 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= c4 (f3 c4 c5)))))
(set .c8217 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c8218 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= c5 (f1 c_2)))))
(set .c8219 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c8220 (resolution :clauses (.c8218 .c8219) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= c5 (f1 c_2)))))
(set .c8221 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c8222 (resolution :clauses (.c8220 .c8221) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (= c5 (f1 c_2)) (not (= c4 c_2)))))
(set .c8223 (resolution :clauses (.c8217 .c8222) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))))))
(set .c8224 (resolution :clauses (.c8216 .c8223) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))))))
(set .c8225 (resolution :clauses (.c8215 .c8224) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))))))
(set .c8226 (resolution :clauses (.c8214 .c8225) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_2 (f3 c_2 c4)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= c5 c_1)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c8227 (resolution :clauses (.c8226 .c1739 .c33 .c34 .c165 .c169) :conclusion ((not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= c_2 (f3 c_2 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c8228 (resolution :clauses (.c8227 .c298 .c8152) :conclusion ((not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c_1 c7)) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c8229 (eq_transitive :conclusion ((not (= (f2 c5) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c8230 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c8231 (resolution :clauses (.c8229 .c8230) :conclusion ((not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c5 c_1)))))
(set .c8232 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c8233 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c8234 (resolution :clauses (.c8232 .c8233) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8235 (resolution :clauses (.c8231 .c8234) :conclusion ((not (= (f1 (f2 c_1)) (f2 c_1))) (= (f2 c5) (f1 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8236 (resolution :clauses (.c8235 .c1739 .c29) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_0)))))
(set .c8237 (resolution :clauses (.c262 .c8228 .c1476) :conclusion ((= c_0 c7) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c8238 (eq_transitive :conclusion ((not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c8239 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8240 (resolution :clauses (.c8238 .c8239) :conclusion ((not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)))))
(set .c8241 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5))))))
(set .c8242 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c8243 (resolution :clauses (.c8241 .c8242) :conclusion ((= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c8244 (resolution :clauses (.c8240 .c8243) :conclusion ((not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c8245 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c8246 (resolution :clauses (.c8244 .c8245) :conclusion ((not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c8247 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c8248 (resolution :clauses (.c8246 .c8247) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c8249 (resolution :clauses (.c8248 .c1739 .c164) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c8250 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 c_1))) (= (f1 c_2) (f2 c_1)))))
(set .c8251 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c8252 (resolution :clauses (.c8250 .c8251) :conclusion ((not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (= (f1 c_2) (f2 c_1)) (not (= c5 c_1)))))
(set .c8253 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c8254 (resolution :clauses (.c8252 .c8253) :conclusion ((not (= (f2 c5) (f1 c4))) (= (f1 c_2) (f2 c_1)) (not (= c5 c_1)) (not (= c4 c_2)))))
(set .c8255 (resolution :clauses (.c8254 .c165) :conclusion ((= (f1 c_2) (f2 c_1)) (not (= c5 c_1)) (not (= c4 c_2)))))
(set .c8256 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c4) (f1 c_2)))))
(set .c8257 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c8258 (resolution :clauses (.c8256 .c8257) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c4) (f1 c_2)) (not (= c5 c_1)))))
(set .c8259 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c8260 (resolution :clauses (.c8258 .c8259) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (= (f2 c4) (f1 c_2)) (not (= c5 c_1)) (not (= c4 c_2)))))
(set .c8261 (resolution :clauses (.c8260 .c1739 .c165) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= c5 c_1)) (not (= c4 c_2)))))
(set .c8262 (eq_transitive :conclusion ((not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c5) (f1 c_1)))))
(set .c8263 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c8264 (resolution :clauses (.c8262 .c8263) :conclusion ((not (= (f1 c_1) (f2 c_1))) (= (f2 c5) (f1 c_1)) (not (= c5 c_1)))))
(set .c8265 (resolution :clauses (.c8264 .c1739) :conclusion ((= (f2 c5) (f1 c_1)) (not (= c5 c_1)))))
(set .c8266 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (= (f2 c_2) (f1 c_1)))))
(set .c8267 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8268 (resolution :clauses (.c8266 .c8267) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c_2) (f1 c_1)) (not (= c4 c_2)))))
(set .c8269 (resolution :clauses (.c8249 .c256 .c8237 .c252 .c8236 .c203 .c25 .c8255 .c8261 .c8265 .c260 .c8189 .c8268 .c258 .c7731) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_0)) (= c6 c_1) (= c_0 c7) (= (f1 c_1) c_2) (= c5 c_0) (= c4 c_0))))
(set .c8270 (eq_transitive :conclusion ((not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c8271 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c8272 (resolution :clauses (.c8270 .c8271) :conclusion ((not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c_1 c7)))))
(set .c8273 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c8274 (resolution :clauses (.c8272 .c8273) :conclusion ((not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c8275 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c8276 (resolution :clauses (.c8274 .c8275) :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_1)))))
(set .c8277 (resolution :clauses (.c8276 .c1739 .c164 .c166) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_1)))))
(set .c8278 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c8279 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c8280 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c7 c_2)) (= c4 c7))))
(set .c8281 (resolution :clauses (.c8279 .c8280) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8282 (resolution :clauses (.c8278 .c8281) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8283 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c8284 (resolution :clauses (.c8282 .c8283) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c8285 (resolution :clauses (.c8284 .c164 .c165 .c166) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c8286 (resolution :clauses (.c8285 .c262 .c8277) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (= c_0 c7) (not (= c5 c_1)))))
(set .c8287 (eq_transitive :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c4) (f1 c6))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c8288 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c8289 (resolution :clauses (.c8287 .c8288) :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c4) (f1 c6))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c5 c_1)))))
(set .c8290 (eq_congruent :conclusion ((not (= c4 c6)) (= (f1 c4) (f1 c6)))))
(set .c8291 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c6 c_2)) (= c4 c6))))
(set .c8292 (resolution :clauses (.c8290 .c8291) :conclusion ((= (f1 c4) (f1 c6)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c8293 (resolution :clauses (.c8289 .c8292) :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c5 c_1)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c8294 (eq_congruent :conclusion ((not (= c4 (f3 c4 c5))) (= (f2 c4) (f2 (f3 c4 c5))))))
(set .c8295 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= c4 (f3 c4 c5)))))
(set .c8296 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c8297 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= c5 (f1 c_2)))))
(set .c8298 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c8299 (resolution :clauses (.c8297 .c8298) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= c5 (f1 c_2)))))
(set .c8300 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c8301 (resolution :clauses (.c8299 .c8300) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (= c5 (f1 c_2)) (not (= c4 c_2)))))
(set .c8302 (resolution :clauses (.c8296 .c8301) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))))))
(set .c8303 (resolution :clauses (.c8295 .c8302) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))))))
(set .c8304 (resolution :clauses (.c8294 .c8303) :conclusion ((= (f2 c4) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))))))
(set .c8305 (resolution :clauses (.c8293 .c8304) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c5 c_1)) (not (= c4 c_2)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_1) c_1)))))
(set .c8306 (resolution :clauses (.c8305 .c1739 .c164 .c165 .c169) :conclusion ((= (f2 c4) (f1 c_1)) (not (= c5 c_1)) (not (= c4 c_2)) (not (= c6 c_2)) (not (= (f1 c_1) c_1)))))
(set .c8307 (resolution :clauses (.c8306 .c256 .c8286 .c252 .c8236) :conclusion ((= (f2 c4) (f1 c_1)) (not (= c5 c_1)) (not (= c4 c_2)) (= c6 c_1) (= (f2 c5) (f1 c_0)) (= c_0 c7) (= (f1 c_1) c_2))))
(set .c8308 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f2 (f3 c_2 c_2)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c8309 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8310 (resolution :clauses (.c8308 .c8309) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f2 (f3 c_2 c_2)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)))))
(set .c8311 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f2 (f3 c_2 c_2)) (f2 (f3 c4 c5))))))
(set .c8312 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c8313 (resolution :clauses (.c8311 .c8312) :conclusion ((= (f2 (f3 c_2 c_2)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8314 (resolution :clauses (.c8310 .c8313) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8315 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c8316 (resolution :clauses (.c8314 .c8315) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_1 c7)))))
(set .c8317 (resolution :clauses (.c8316 .c166) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_1 c7)))))
(set .c8318 (resolution :clauses (.c8317 .c262 .c1476 .c256 .c7741 .c27 .c8175 .c260 .c8307 .c258 .c2620 .c8269) :conclusion ((= c_0 c7) (= c6 c_1) (= (f2 c5) (f1 c_0)) (= c5 c_0) (= (f1 c_1) c_2) (= c4 c_0))))
(set .c8319 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)))))
(set .c8320 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c8321 (resolution :clauses (.c8319 .c8320) :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c6 c_1)))))
(set .c8322 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c8323 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c7 c_2)) (= c4 c7))))
(set .c8324 (resolution :clauses (.c8322 .c8323) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8325 (resolution :clauses (.c8321 .c8324) :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8326 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c8327 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c8328 (resolution :clauses (.c8326 .c8327) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c8329 (resolution :clauses (.c8325 .c8328) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c5 c_2)))))
(set .c8330 (resolution :clauses (.c8329 .c164 .c165 .c166) :conclusion ((= (f2 c4) (f1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c5 c_2)))))
(set .c8331 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)))))
(set .c8332 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c8333 (resolution :clauses (.c8331 .c8332) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c6 c_1)))))
(set .c8334 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5))))))
(set .c8335 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c8336 (resolution :clauses (.c8334 .c8335) :conclusion ((= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c8337 (resolution :clauses (.c8333 .c8336) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c8338 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8339 (resolution :clauses (.c8337 .c8338) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c8340 (resolution :clauses (.c8339 .c164) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (= (f2 c4) (f1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c8341 (resolution :clauses (.c8340 .c260 .c8330 .c258 .c2620) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (= (f2 c4) (f1 c_1)) (not (= c6 c_1)) (= c5 c_0) (not (= c7 c_2)) (= c4 c_0))))
(set .c8342 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)))))
(set .c8343 (eq_congruent :conclusion ((not (= (f2 c_2) c6)) (not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))))))
(set .c8344 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c8345 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c8346 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c8347 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c8348 (resolution :clauses (.c8346 .c8347) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= c5 (f1 c_2)) (not (= c6 c_1)))))
(set .c8349 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c8350 (resolution :clauses (.c8348 .c8349) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= c5 (f1 c_2)) (not (= c6 c_1)) (not (= c7 c_2)))))
(set .c8351 (resolution :clauses (.c8345 .c8350) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c7 c_2)))))
(set .c8352 (resolution :clauses (.c8344 .c8351) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c7 c_2)))))
(set .c8353 (resolution :clauses (.c8343 .c8352) :conclusion ((not (= (f2 c_2) c6)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c7 c_2)))))
(set .c8354 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_2) c6))))
(set .c8355 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8356 (resolution :clauses (.c8354 .c8355) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_2) c6) (not (= c4 c_2)))))
(set .c8357 (resolution :clauses (.c8353 .c8356) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c8358 (resolution :clauses (.c8342 .c8357) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c8359 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4)))))
(set .c8360 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= c4 (f3 c4 c5)))))
(set .c8361 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c8362 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c8363 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c8364 (resolution :clauses (.c8362 .c8363) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= c5 (f1 c_2)) (not (= c6 c_1)))))
(set .c8365 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c8366 (resolution :clauses (.c8364 .c8365) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= c5 (f1 c_2)) (not (= c6 c_1)) (not (= c7 c_2)))))
(set .c8367 (resolution :clauses (.c8361 .c8366) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c7 c_2)))))
(set .c8368 (resolution :clauses (.c8360 .c8367) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c7 c_2)))))
(set .c8369 (resolution :clauses (.c8359 .c8368) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)))))
(set .c8370 (resolution :clauses (.c8358 .c8369) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_2 (f3 c_2 c4)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c8371 (resolution :clauses (.c8370 .c33 .c34 .c164 .c166 .c169) :conclusion ((= c_2 (f3 c_2 c4)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c8372 (resolution :clauses (.c8371 .c298 .c8152) :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c8373 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c8374 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c8375 (eq_transitive :conclusion ((not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c8376 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c8377 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (= c5 (f1 c_1)))))
(set .c8378 (resolution :clauses (.c8376 .c8377) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c8379 (resolution :clauses (.c8375 .c8378) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c8380 (resolution :clauses (.c8374 .c8379) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c8381 (resolution :clauses (.c8373 .c8380) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c8382 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c8383 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c8384 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c8385 (resolution :clauses (.c8383 .c8384) :conclusion ((not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c6 c_1)))))
(set .c8386 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c8387 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (= c5 (f1 c_1)))))
(set .c8388 (resolution :clauses (.c8386 .c8387) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c8389 (resolution :clauses (.c8385 .c8388) :conclusion ((not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c8390 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c8391 (resolution :clauses (.c8389 .c8390) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c7 c_2)))))
(set .c8392 (resolution :clauses (.c8382 .c8391) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c8393 (resolution :clauses (.c8381 .c8392) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c8394 (resolution :clauses (.c8393 .c34 .c164 .c166 .c168 .c169 .c224) :conclusion ((not (= c6 c_1)) (not (= c7 c_2)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c8395 (resolution :clauses (.c8394 .c258 .c8372 .c252 .c8265 .c8236) :conclusion ((not (= c6 c_1)) (not (= c7 c_2)) (not (= c5 c_1)) (= c4 c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f1 c_1) c_2) (= (f2 c5) (f1 c_0)))))
(set .c8396 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_2 c5) c_2))))
(set .c8397 (eq_congruent :conclusion ((not (= (f2 c_2) c6)) (not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))))))
(set .c8398 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2))))
(set .c8399 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c8400 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c8401 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c8402 (resolution :clauses (.c8400 .c8401) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c8403 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c8404 (resolution :clauses (.c8402 .c8403) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c8405 (resolution :clauses (.c8399 .c8404) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c8406 (resolution :clauses (.c8398 .c8405) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c8407 (resolution :clauses (.c8397 .c8406) :conclusion ((not (= (f2 c_2) c6)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c8408 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_2) c6))))
(set .c8409 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c8410 (resolution :clauses (.c8408 .c8409) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_2) c6) (not (= c4 c_1)))))
(set .c8411 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c8412 (resolution :clauses (.c8410 .c8411) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_2) c6) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c8413 (resolution :clauses (.c8407 .c8412) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c6 c_1)))))
(set .c8414 (resolution :clauses (.c8396 .c8413) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_2 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c6 c_1)))))
(set .c8415 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5)))))
(set .c8416 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c8417 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c8418 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c8419 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c8420 (resolution :clauses (.c8418 .c8419) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c8421 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c8422 (resolution :clauses (.c8420 .c8421) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c8423 (resolution :clauses (.c8417 .c8422) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c8424 (resolution :clauses (.c8416 .c8423) :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (= c5 (f3 c4 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c8425 (resolution :clauses (.c8415 .c8424) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c8426 (resolution :clauses (.c8414 .c8425) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_2 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c7 c_2)))))
(set .c8427 (resolution :clauses (.c8426 .c33 .c34 .c165) :conclusion ((= (f3 c_2 c5) c_2) (not (= c5 c_2)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c7 c_2)))))
(set .c8428 (resolution :clauses (.c8427 .c280 .c7730 .c252 .c7652 .c476) :conclusion ((not (= c5 c_2)) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (= (f1 c_1) c_2) (= (f2 c5) (f1 c_0)))))
(set .c8429 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1))))
(set .c8430 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)))))
(set .c8431 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c8432 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c8433 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c8434 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c8435 (resolution :clauses (.c8433 .c8434) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c6 c_1)))))
(set .c8436 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c8437 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c7 c_2)) (= c4 c7))))
(set .c8438 (resolution :clauses (.c8436 .c8437) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8439 (resolution :clauses (.c8435 .c8438) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8440 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c8441 (resolution :clauses (.c8439 .c8440) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c5 c_2)))))
(set .c8442 (resolution :clauses (.c8432 .c8441) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c5 c_2)))))
(set .c8443 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c8444 (resolution :clauses (.c8442 .c8443) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c5 c_2)))))
(set .c8445 (resolution :clauses (.c8431 .c8444) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c5 c_2)))))
(set .c8446 (resolution :clauses (.c8430 .c8445) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c5 c_2)))))
(set .c8447 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c8448 (resolution :clauses (.c8446 .c8447) :conclusion ((= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c5 c_2)))))
(set .c8449 (resolution :clauses (.c8429 .c8448) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c7 c_2)) (not (= c5 c_2)))))
(set .c8450 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c8451 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c8452 (resolution :clauses (.c8450 .c8451) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8453 (resolution :clauses (.c8449 .c8452) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c7 c_2)) (not (= c5 c_2)))))
(set .c8454 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c8455 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c8456 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c8457 (resolution :clauses (.c8455 .c8456) :conclusion ((not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c6 c_1)))))
(set .c8458 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c8459 (resolution :clauses (.c8457 .c8458) :conclusion ((not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8460 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c8461 (resolution :clauses (.c8459 .c8460) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c8462 (resolution :clauses (.c8454 .c8461) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8463 (resolution :clauses (.c8453 .c8462) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c7 c_2)) (not (= c5 c_2)))))
(set .c8464 (resolution :clauses (.c8463 .c33 .c34 .c164 .c165 .c166 .c169) :conclusion ((not (= c4 c_2)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c7 c_2)) (not (= c5 c_2)))))
(set .c8465 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)))))
(set .c8466 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c8467 (resolution :clauses (.c8465 .c8466) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c6 c_1)))))
(set .c8468 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c8469 (resolution :clauses (.c8467 .c8468) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_2)) (not (= c6 c_1)) (not (= c7 c_2)))))
(set .c8470 (resolution :clauses (.c8469 .c164 .c166) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= c6 c_1)) (not (= c7 c_2)))))
(set .c8471 (resolution :clauses (.c8464 .c242 .c8081 .c298 .c8152 .c8169 .c252 .c205 .c109 .c8188 .c8163 .c8175 .c8268 .c258 .c8428 .c260 .c8395 .c8470 .c8341 .c25 .c7539 .c262 .c1380 .c8318) :conclusion ((= (f2 c5) (f1 c_0)) (= (f1 c_1) c_2) (= c4 c_0) (= c5 c_0) (= c_0 c7))))
(set .c8472 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)))))
(set .c8473 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))))))
(set .c8474 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8475 (resolution :clauses (.c8473 .c8474) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8476 (resolution :clauses (.c8472 .c8475) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8477 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c5 c_0)) (= (f3 (f3 c_1 c_2) c_0) (f3 c_2 c5)))))
(set .c8478 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c8479 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c8480 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c8481 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8482 (resolution :clauses (.c8480 .c8481) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c8483 (resolution :clauses (.c8479 .c8482) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8484 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c8485 (resolution :clauses (.c8483 .c8484) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8486 (resolution :clauses (.c8478 .c8485) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8487 (resolution :clauses (.c8477 .c8486) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_1 c_2) c_0) (f3 c_2 c5)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8488 (resolution :clauses (.c8476 .c8487) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c8489 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))))))
(set .c8490 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8491 (resolution :clauses (.c8489 .c8490) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8492 (resolution :clauses (.c8488 .c8491) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)))))
(set .c8493 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c8494 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c8495 (resolution :clauses (.c8493 .c8494) :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c8496 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)))))
(set .c8497 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c8498 (resolution :clauses (.c8496 .c8497) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c6 c_1)))))
(set .c8499 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c8500 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c7 c_2)) (= c4 c7))))
(set .c8501 (resolution :clauses (.c8499 .c8500) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8502 (resolution :clauses (.c8498 .c8501) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8503 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c8504 (resolution :clauses (.c8502 .c8503) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c5 c_0)))))
(set .c8505 (resolution :clauses (.c8495 .c8504) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c5 c_0)))))
(set .c8506 (resolution :clauses (.c8492 .c8505) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f3 c_2 c_2) c_1)))))
(set .c8507 (resolution :clauses (.c8506 .c34 .c31 .c33 .c165 .c166 .c164) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c8508 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c8509 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)))))
(set .c8510 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c8511 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c8512 (resolution :clauses (.c8510 .c8511) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c6 c_1)))))
(set .c8513 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c8514 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c7 c_2)) (= c4 c7))))
(set .c8515 (resolution :clauses (.c8513 .c8514) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8516 (resolution :clauses (.c8512 .c8515) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8517 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c8518 (resolution :clauses (.c8516 .c8517) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c5 c_0)))))
(set .c8519 (resolution :clauses (.c8509 .c8518) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8520 (resolution :clauses (.c8508 .c8519) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8521 (resolution :clauses (.c8520 .c165 .c31 .c164 .c166) :conclusion ((= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8522 (resolution :clauses (.c272 .c8507 .c8521 .c242 .c8081 .c298 .c8152) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (= c_0 (f3 c_2 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c8523 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c8524 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c8525 (resolution :clauses (.c8523 .c8524) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c6 c_1)))))
(set .c8526 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c8527 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c8528 (resolution :clauses (.c8526 .c8527) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8529 (resolution :clauses (.c8525 .c8528) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f2 c5) (f1 c_0)) (not (= c6 c_1)) (not (= (f1 c_1) c_0)))))
(set .c8530 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c8531 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c7 c_2)) (= c4 c7))))
(set .c8532 (resolution :clauses (.c8530 .c8531) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8533 (resolution :clauses (.c8529 .c8532) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f2 c5) (f1 c_0)) (not (= c6 c_1)) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8534 (resolution :clauses (.c8533 .c1739 .c29 .c164 .c165 .c166) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c6 c_1)) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8535 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c_2) (f1 c_2)))))
(set .c8536 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c8537 (resolution :clauses (.c8535 .c8536) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c_2) (f1 c_2)) (not (= c6 c_1)))))
(set .c8538 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c8539 (resolution :clauses (.c8537 .c8538) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_2) (f1 c_2)) (not (= c6 c_1)) (not (= c7 c_2)))))
(set .c8540 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8541 (resolution :clauses (.c8539 .c8540) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_2) (f1 c_2)) (not (= c6 c_1)) (not (= c7 c_2)) (not (= c4 c_2)))))
(set .c8542 (resolution :clauses (.c8541 .c166 .c164) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c_2) (f1 c_2)) (not (= c6 c_1)) (not (= c7 c_2)) (not (= c4 c_2)))))
(set .c8543 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c5) (f1 c_1)))))
(set .c8544 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c8545 (resolution :clauses (.c8543 .c8544) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_1)) (not (= c6 c_1)))))
(set .c8546 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c8547 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c7 c_2)) (= c4 c7))))
(set .c8548 (resolution :clauses (.c8546 .c8547) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8549 (resolution :clauses (.c8545 .c8548) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8550 (resolution :clauses (.c8549 .c166 .c164 .c165) :conclusion ((= (f2 c5) (f1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8551 (resolution :clauses (.c8534 .c252 .c8522 .c8169 .c219 .c109 .c8542 .c8550 .c201 .c402 .c8268 .c2677) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c7 c_2)) (= (f1 c_1) c_2) (not (= (f2 c4) (f1 c_1))) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_2))))))
(set .c8552 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)))))
(set .c8553 (eq_congruent :conclusion ((not (= (f2 c_0) c6)) (not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))))))
(set .c8554 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_0) c6))))
(set .c8555 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c8556 (resolution :clauses (.c8554 .c8555) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_0) c6) (not (= c4 c_1)))))
(set .c8557 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c8558 (resolution :clauses (.c8556 .c8557) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_0) c6) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c8559 (resolution :clauses (.c8553 .c8558) :conclusion ((not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c8560 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c8561 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c8562 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c8563 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c8564 (resolution :clauses (.c8562 .c8563) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c8565 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c8566 (resolution :clauses (.c8564 .c8565) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c8567 (resolution :clauses (.c8561 .c8566) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c8568 (resolution :clauses (.c8560 .c8567) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c8569 (resolution :clauses (.c8559 .c8568) :conclusion ((= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c8570 (resolution :clauses (.c8552 .c8569) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c8571 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5)))))
(set .c8572 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c8573 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c8574 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c8575 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c8576 (resolution :clauses (.c8574 .c8575) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c8577 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c8578 (resolution :clauses (.c8576 .c8577) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c8579 (resolution :clauses (.c8573 .c8578) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c8580 (resolution :clauses (.c8572 .c8579) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c8581 (resolution :clauses (.c8571 .c8580) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c8582 (resolution :clauses (.c8570 .c8581) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_2 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c8583 (resolution :clauses (.c8582 .c31 .c34 .c165) :conclusion ((= c_0 (f3 c_2 c5)) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c8584 (resolution :clauses (.c8583 .c272 .c2399 .c2173 .c17 .c252 .c343 .c7652 .c258 .c8551 .c8470 .c262 .c1380) :conclusion ((not (= c6 c_1)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_1))) (= (f1 c_1) c_2) (= (f2 c5) (f1 c_0)) (= c4 c_0) (= c_0 c7))))
(set .c8585 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c5) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_2 c5)))))
(set .c8586 (eq_congruent :conclusion ((not (= (f2 c_0) c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)))))
(set .c8587 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c8588 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c8589 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c8590 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c8591 (resolution :clauses (.c8589 .c8590) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c8592 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c8593 (resolution :clauses (.c8591 .c8592) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c8594 (resolution :clauses (.c8588 .c8593) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c8595 (resolution :clauses (.c8587 .c8594) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c8596 (resolution :clauses (.c8586 .c8595) :conclusion ((not (= (f2 c_0) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c8597 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= (f2 c_0) c7))))
(set .c8598 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c8599 (resolution :clauses (.c8597 .c8598) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= (f2 c_0) c7) (not (= c4 c_1)))))
(set .c8600 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c8601 (resolution :clauses (.c8599 .c8600) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= (f2 c_0) c7) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c8602 (resolution :clauses (.c8596 .c8601) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= c_1 c7)))))
(set .c8603 (resolution :clauses (.c8585 .c8602) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c5) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= c_1 c7)))))
(set .c8604 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= c5 (f3 c4 c5))) (= (f3 c_2 c5) (f3 c6 (f3 c4 c5))))))
(set .c8605 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c8606 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c8607 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c8608 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c8609 (resolution :clauses (.c8607 .c8608) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c8610 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c8611 (resolution :clauses (.c8609 .c8610) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c8612 (resolution :clauses (.c8606 .c8611) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c8613 (resolution :clauses (.c8605 .c8612) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c8614 (resolution :clauses (.c8604 .c8613) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c8615 (resolution :clauses (.c8603 .c8614) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c8616 (resolution :clauses (.c8615 .c31 .c34 .c165) :conclusion ((= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c8617 (resolution :clauses (.c8616 .c278 .c262 .c2041 .c1476 .c256 .c2476 .c2173 .c17 .c252 .c343 .c7652 .c476) :conclusion ((not (= c5 c_0)) (not (= c4 c_1)) (= c_0 c7) (= c6 c_1) (= (f2 c5) (f1 c_0)) (= (f1 c_1) c_2))))
(set .c8618 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)))))
(set .c8619 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))))))
(set .c8620 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8621 (resolution :clauses (.c8619 .c8620) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8622 (resolution :clauses (.c8618 .c8621) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8623 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c5 c_0)) (= (f3 (f3 c_1 c_2) c_0) (f3 c_2 c5)))))
(set .c8624 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c8625 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c8626 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c8627 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8628 (resolution :clauses (.c8626 .c8627) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c8629 (resolution :clauses (.c8625 .c8628) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8630 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c8631 (resolution :clauses (.c8629 .c8630) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8632 (resolution :clauses (.c8624 .c8631) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8633 (resolution :clauses (.c8623 .c8632) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_1 c_2) c_0) (f3 c_2 c5)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c8634 (resolution :clauses (.c8622 .c8633) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c8635 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c8636 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8637 (resolution :clauses (.c8635 .c8636) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8638 (resolution :clauses (.c8634 .c8637) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_2)))))
(set .c8639 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c8640 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c8641 (resolution :clauses (.c8639 .c8640) :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c8642 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)))))
(set .c8643 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8644 (resolution :clauses (.c8642 .c8643) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c4 c_2)))))
(set .c8645 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c8646 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8647 (resolution :clauses (.c8645 .c8646) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8648 (resolution :clauses (.c8644 .c8647) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8649 (eq_congruent :conclusion ((not (= c4 c6)) (= (f1 c4) (f1 c6)))))
(set .c8650 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c6 c_2)) (= c4 c6))))
(set .c8651 (resolution :clauses (.c8649 .c8650) :conclusion ((= (f1 c4) (f1 c6)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c8652 (resolution :clauses (.c8648 .c8651) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c8653 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c8654 (resolution :clauses (.c8652 .c8653) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c8655 (resolution :clauses (.c8641 .c8654) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c8656 (resolution :clauses (.c8638 .c8655) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f3 c_2 c_2) c_1)))))
(set .c8657 (resolution :clauses (.c8656 .c164 .c34 .c33 .c31 .c165) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_2)) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f3 c_2 c_2) c_1)))))
(set .c8658 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c8659 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)))))
(set .c8660 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c8661 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8662 (resolution :clauses (.c8660 .c8661) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_2)))))
(set .c8663 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c8664 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8665 (resolution :clauses (.c8663 .c8664) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8666 (resolution :clauses (.c8662 .c8665) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8667 (eq_congruent :conclusion ((not (= c4 c6)) (= (f1 c4) (f1 c6)))))
(set .c8668 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c6 c_2)) (= c4 c6))))
(set .c8669 (resolution :clauses (.c8667 .c8668) :conclusion ((= (f1 c4) (f1 c6)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c8670 (resolution :clauses (.c8666 .c8669) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c8671 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c8672 (resolution :clauses (.c8670 .c8671) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c8673 (resolution :clauses (.c8659 .c8672) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c8674 (resolution :clauses (.c8658 .c8673) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c8675 (resolution :clauses (.c8674 .c165 .c164 .c31) :conclusion ((= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c8676 (resolution :clauses (.c272 .c8657 .c8675 .c242 .c8081 .c298 .c8152) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_1)) (not (= c6 c_2)) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c8677 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c8678 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c8679 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c8680 (resolution :clauses (.c8678 .c8679) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8681 (resolution :clauses (.c8677 .c8680) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f2 c5) (f1 c_0)) (not (= (f1 c_1) c_0)))))
(set .c8682 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8683 (resolution :clauses (.c8681 .c8682) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f2 c5) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c8684 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c8685 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8686 (resolution :clauses (.c8684 .c8685) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8687 (resolution :clauses (.c8683 .c8686) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f2 c5) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8688 (eq_congruent :conclusion ((not (= c4 c6)) (= (f1 c4) (f1 c6)))))
(set .c8689 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c6 c_2)) (= c4 c6))))
(set .c8690 (resolution :clauses (.c8688 .c8689) :conclusion ((= (f1 c4) (f1 c6)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c8691 (resolution :clauses (.c8687 .c8690) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f2 c5) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c8692 (resolution :clauses (.c8691 .c1739 .c29 .c164 .c165) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c8693 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_2) (f1 c_2)))))
(set .c8694 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c8695 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8696 (resolution :clauses (.c8694 .c8695) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8697 (resolution :clauses (.c8693 .c8696) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8698 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c8699 (resolution :clauses (.c8697 .c8698) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c8700 (resolution :clauses (.c8699 .c164) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (= (f2 c_2) (f1 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c8701 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)))))
(set .c8702 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8703 (resolution :clauses (.c8701 .c8702) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c4 c_2)))))
(set .c8704 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c8705 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8706 (resolution :clauses (.c8704 .c8705) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8707 (resolution :clauses (.c8703 .c8706) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8708 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c8709 (resolution :clauses (.c8707 .c8708) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c8710 (resolution :clauses (.c8709 .c164) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (= (f2 c4) (f1 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c8711 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_1)))))
(set .c8712 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8713 (resolution :clauses (.c8711 .c8712) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_1)) (not (= c4 c_2)))))
(set .c8714 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c8715 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8716 (resolution :clauses (.c8714 .c8715) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8717 (resolution :clauses (.c8713 .c8716) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8718 (eq_congruent :conclusion ((not (= c4 c6)) (= (f1 c4) (f1 c6)))))
(set .c8719 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c6 c_2)) (= c4 c6))))
(set .c8720 (resolution :clauses (.c8718 .c8719) :conclusion ((= (f1 c4) (f1 c6)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c8721 (resolution :clauses (.c8717 .c8720) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c8722 (resolution :clauses (.c8721 .c165 .c164) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c8723 (resolution :clauses (.c8692 .c252 .c8676 .c8169 .c219 .c109 .c8700 .c8710 .c8722) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)) (= (f1 c_1) c_2) (not (= (f2 c5) (f1 c_2))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= c_1 c7)) (not (= (f2 c_0) (f1 c_2))))))
(set .c8724 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c8725 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8726 (resolution :clauses (.c8724 .c8725) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)))))
(set .c8727 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c8728 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8729 (resolution :clauses (.c8727 .c8728) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8730 (resolution :clauses (.c8726 .c8729) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8731 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c8732 (resolution :clauses (.c8730 .c8731) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c8733 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c8734 (resolution :clauses (.c8732 .c8733) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c8735 (resolution :clauses (.c8734 .c164 .c165) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c8736 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c8737 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8738 (resolution :clauses (.c8736 .c8737) :conclusion ((not (= (f2 c5) (f1 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)))))
(set .c8739 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c8740 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8741 (resolution :clauses (.c8739 .c8740) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8742 (resolution :clauses (.c8738 .c8741) :conclusion ((not (= (f2 c5) (f1 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8743 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c8744 (resolution :clauses (.c8742 .c8743) :conclusion ((not (= (f2 c5) (f1 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c8745 (resolution :clauses (.c8744 .c164) :conclusion ((not (= (f2 c5) (f1 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c8746 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c8747 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8748 (resolution :clauses (.c8746 .c8747) :conclusion ((not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)))))
(set .c8749 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c8750 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8751 (resolution :clauses (.c8749 .c8750) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8752 (resolution :clauses (.c8748 .c8751) :conclusion ((not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8753 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c8754 (resolution :clauses (.c8752 .c8753) :conclusion ((not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c8755 (eq_congruent :conclusion ((not (= c5 (f1 c_1))) (= (f2 (f1 c_1)) (f2 c5)))))
(set .c8756 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c8757 (resolution :clauses (.c8755 .c8756) :conclusion ((= (f2 (f1 c_1)) (f2 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c8758 (resolution :clauses (.c8754 .c8757) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f1 c_1) c_0)))))
(set .c8759 (resolution :clauses (.c8758 .c90 .c164) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f1 c_1) c_0)))))
(set .c8760 (eq_transitive :conclusion ((not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c8761 (eq_congruent :conclusion ((not (= c5 (f3 c4 c5))) (= (f2 c5) (f2 (f3 c4 c5))))))
(set .c8762 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c8763 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c5)) (= (f3 c_2 c5) (f3 c4 c5)))))
(set .c8764 (eq_reflexive :conclusion ((= c5 c5))))
(set .c8765 (resolution :clauses (.c8763 .c8764) :conclusion ((not (= c4 c_2)) (= (f3 c_2 c5) (f3 c4 c5)))))
(set .c8766 (resolution :clauses (.c8762 .c8765) :conclusion ((not (= c5 c_0)) (not (= c_0 (f3 c_2 c5))) (= c5 (f3 c4 c5)) (not (= c4 c_2)))))
(set .c8767 (resolution :clauses (.c8761 .c8766) :conclusion ((= (f2 c5) (f2 (f3 c4 c5))) (not (= c5 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= c4 c_2)))))
(set .c8768 (resolution :clauses (.c8760 .c8767) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c5 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= c4 c_2)))))
(set .c8769 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c8770 (resolution :clauses (.c8768 .c8769) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c5 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= c4 c_2)) (not (= c_0 c6)))))
(set .c8771 (resolution :clauses (.c8770 .c164) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c5 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= c4 c_2)) (not (= c_0 c6)))))
(set .c8772 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)))))
(set .c8773 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8774 (resolution :clauses (.c8772 .c8773) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)))))
(set .c8775 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c8776 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8777 (resolution :clauses (.c8775 .c8776) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8778 (resolution :clauses (.c8774 .c8777) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8779 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c8780 (resolution :clauses (.c8778 .c8779) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f1 c_2) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c8781 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c8782 (resolution :clauses (.c8780 .c8781) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c8783 (resolution :clauses (.c8782 .c164 .c165) :conclusion ((not (= (f1 c_2) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c8784 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f1 c_2))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c8785 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8786 (resolution :clauses (.c8784 .c8785) :conclusion ((not (= c_0 c6)) (not (= c_0 (f1 c_2))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_2)))))
(set .c8787 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c8788 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8789 (resolution :clauses (.c8787 .c8788) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8790 (resolution :clauses (.c8786 .c8789) :conclusion ((not (= c_0 c6)) (not (= c_0 (f1 c_2))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f1 (f2 c_0)) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8791 (eq_congruent :conclusion ((not (= (f2 c_0) c6)) (= (f1 (f2 c_0)) (f1 c6)))))
(set .c8792 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= c_0 (f1 c_2))) (not (= c_0 c6)) (= (f2 c_0) c6))))
(set .c8793 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c8794 (resolution :clauses (.c8792 .c8793) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= c_0 (f1 c_2))) (not (= c_0 c6)) (= (f2 c_0) c6) (not (= c5 c_0)))))
(set .c8795 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c8796 (resolution :clauses (.c8794 .c8795) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= c_0 (f1 c_2))) (not (= c_0 c6)) (= (f2 c_0) c6) (not (= c5 c_0)) (not (= c4 c_2)))))
(set .c8797 (resolution :clauses (.c8791 .c8796) :conclusion ((= (f1 (f2 c_0)) (f1 c6)) (not (= (f2 c5) (f1 c4))) (not (= c_0 (f1 c_2))) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c4 c_2)))))
(set .c8798 (resolution :clauses (.c8790 .c8797) :conclusion ((not (= c_0 c6)) (not (= c_0 (f1 c_2))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8799 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c8800 (resolution :clauses (.c8798 .c8799) :conclusion ((not (= c_0 c6)) (not (= c_0 (f1 c_2))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8801 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c8802 (resolution :clauses (.c8800 .c8801) :conclusion ((not (= c_0 c6)) (not (= c_0 (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f1 (f2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8803 (resolution :clauses (.c8802 .c28 .c164 .c165 .c224) :conclusion ((not (= c_0 c6)) (not (= c_0 (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8804 (resolution :clauses (.c8803 .c254 .c8783 .c252 .c8759 .c256 .c8723 .c7610) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (= (f2 c5) (f1 c_0)) (= (f1 c_1) c_2) (= c6 c_1) (not (= (f2 c5) (f1 c_2))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f2 c_0) (f1 c_2))))))
(set .c8805 (resolution :clauses (.c256 .c8285 .c1476 .c262 .c8804 .c201 .c23 .c402 .c8268 .c2677 .c258 .c8617 .c8584) :conclusion ((= (f2 c5) (f1 c_0)) (= c_0 c7) (not (= (f2 c4) (f1 c_1))) (not (= c5 c_0)) (= (f1 c_1) c_2) (= c4 c_0))))
(set .c8806 (resolution :clauses (.c256 .c8285 .c1476) :conclusion ((= c6 c_1) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c8807 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c8808 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c8809 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8810 (resolution :clauses (.c8808 .c8809) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8811 (resolution :clauses (.c8807 .c8810) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8812 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c8813 (resolution :clauses (.c8811 .c8812) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c8814 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8815 (resolution :clauses (.c8813 .c8814) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c8816 (resolution :clauses (.c8815 .c166) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c8817 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)))))
(set .c8818 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c8819 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c8820 (resolution :clauses (.c8818 .c8819) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8821 (resolution :clauses (.c8817 .c8820) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c8822 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c8823 (resolution :clauses (.c8821 .c8822) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c8824 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c8825 (resolution :clauses (.c8823 .c8824) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c8826 (resolution :clauses (.c8825 .c164) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c8827 (resolution :clauses (.c8826 .c8806 .c262 .c8816 .c23 .c402 .c258 .c2620 .c8805 .c8471) :conclusion ((= (f2 c5) (f1 c_0)) (= c_0 c7) (= c4 c_0) (= (f1 c_1) c_2))))
(set .c8828 (resolution :clauses (.c23 .c8826 .c402) :conclusion ((= (f2 c4) (f1 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c8829 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f2 (f3 c_2 c_2)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c8830 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f2 (f3 c_2 c_2)) (f2 (f3 c4 c5))))))
(set .c8831 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c8832 (resolution :clauses (.c8830 .c8831) :conclusion ((= (f2 (f3 c_2 c_2)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8833 (resolution :clauses (.c8829 .c8832) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c8834 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c8835 (resolution :clauses (.c8833 .c8834) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c8836 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c8837 (resolution :clauses (.c8835 .c8836) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c8838 (resolution :clauses (.c8837 .c166) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (= (f2 c5) (f1 c_0)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c8839 (resolution :clauses (.c8838 .c27 .c8175 .c260 .c8828 .c5533 .c256 .c5482 .c258 .c2620) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c_0 c7)) (= (f2 c4) (f1 c_1)) (= c_0 c6) (= c4 c_0))))
(set .c8840 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c_0) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c8841 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c8842 (resolution :clauses (.c8840 .c8841) :conclusion ((not (= (f2 c_0) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c5 c_0)))))
(set .c8843 (resolution :clauses (.c8842 .c403 .c260 .c7747 .c258 .c4916 .c5533 .c4675) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c_0 c7)) (= c_0 c6) (not (= (f2 c4) (f1 c_1))) (= c4 c_0) (not (= c6 c_1)))))
(set .c8844 (eq_transitive :conclusion ((not (= (f2 c5) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c8845 (eq_congruent :conclusion ((not (= c5 (f3 c4 c5))) (= (f2 c5) (f2 (f3 c4 c5))))))
(set .c8846 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c8847 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c8848 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c8849 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c8850 (resolution :clauses (.c8848 .c8849) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c8851 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c8852 (resolution :clauses (.c8850 .c8851) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c8853 (resolution :clauses (.c8847 .c8852) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c8854 (resolution :clauses (.c8846 .c8853) :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (= c5 (f3 c4 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c8855 (resolution :clauses (.c8845 .c8854) :conclusion ((= (f2 c5) (f2 (f3 c4 c5))) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c8856 (resolution :clauses (.c8844 .c8855) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c8857 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c8858 (resolution :clauses (.c8856 .c8857) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_0)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c8859 (resolution :clauses (.c8858 .c33 .c165 .c166) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c5 c_2)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c8860 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)))))
(set .c8861 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c8862 (resolution :clauses (.c8860 .c8861) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 (f3 c4 c5)) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_1)))))
(set .c8863 (eq_congruent :conclusion ((not (= (f3 c4 c5) c_1)) (= (f2 (f3 c4 c5)) (f2 c_1)))))
(set .c8864 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c8865 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c8866 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (= c5 (f1 c_1)))))
(set .c8867 (resolution :clauses (.c8865 .c8866) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c8868 (resolution :clauses (.c8864 .c8867) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c8869 (resolution :clauses (.c8863 .c8868) :conclusion ((= (f2 (f3 c4 c5)) (f2 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c8870 (resolution :clauses (.c8862 .c8869) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c5) (f1 c_0)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c8871 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c8872 (resolution :clauses (.c8870 .c8871) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_0)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= c_0 c7)))))
(set .c8873 (resolution :clauses (.c8872 .c1739 .c165 .c166 .c168) :conclusion ((= (f2 c5) (f1 c_0)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= c_0 c7)))))
(set .c8874 (resolution :clauses (.c8873 .c260 .c8859 .c252 .c344 .c7652 .c4916 .c258 .c5482 .c256 .c8843 .c8839 .c303 .c8827) :conclusion ((= (f2 c5) (f1 c_0)) (= (f1 c_1) c_2) (= c4 c_0))))
(set .c8875 (eq_transitive :conclusion ((not (= (f1 (f2 c_1)) (f1 c_2))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (= (f1 c_2) c_2))))
(set .c8876 (eq_congruent :conclusion ((not (= (f2 c_1) c_2)) (= (f1 (f2 c_1)) (f1 c_2)))))
(set .c8877 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (= (f2 c_1) c_2))))
(set .c8878 (resolution :clauses (.c8876 .c8877) :conclusion ((= (f1 (f2 c_1)) (f1 c_2)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)))))
(set .c8879 (resolution :clauses (.c8875 .c8878) :conclusion ((not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_2)) (= (f1 c_2) c_2))))
(set .c8880 (resolution :clauses (.c8879 .c1739 .c29 .c7610) :conclusion ((not (= (f1 c_1) c_2)))))
(set .c8881 (resolution :clauses (.c8874 .c3145 .c8880) :conclusion ((= (f2 c5) (f1 c_0)))))
(set .c8882 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c5))) (not (= c_0 (f3 c_1 c5))) (not (= c_0 c7)) (= c6 c7))))
(set .c8883 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c5 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c5)))))
(set .c8884 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c8885 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c8886 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c8887 (resolution :clauses (.c8885 .c8886) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c8888 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c8889 (resolution :clauses (.c8887 .c8888) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8890 (resolution :clauses (.c8884 .c8889) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8891 (resolution :clauses (.c8883 .c8890) :conclusion ((not (= c5 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c5)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8892 (resolution :clauses (.c8882 .c8891) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_0 (f3 c_1 c5))) (not (= c_0 c7)) (= c6 c7) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8893 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))))))
(set .c8894 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c8895 (resolution :clauses (.c8893 .c8894) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c8896 (resolution :clauses (.c8892 .c8895) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_0 (f3 c_1 c5))) (not (= c_0 c7)) (= c6 c7) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)))))
(set .c8897 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c8898 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c5))) (not (= (f3 c_1 c5) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c8899 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c8900 (resolution :clauses (.c8898 .c8899) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c5))) (not (= (f3 c_1 c5) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)))))
(set .c8901 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c5)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c8902 (eq_reflexive :conclusion ((= c5 c5))))
(set .c8903 (resolution :clauses (.c8901 .c8902) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c8904 (resolution :clauses (.c8900 .c8903) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)))))
(set .c8905 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c8906 (resolution :clauses (.c8904 .c8905) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c8907 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c8908 (resolution :clauses (.c8906 .c8907) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c8909 (resolution :clauses (.c8897 .c8908) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c8910 (resolution :clauses (.c8896 .c8909) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_0 (f3 c_1 c5))) (not (= c_0 c7)) (= c6 c7) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))))))
(set .c8911 (resolution :clauses (.c8910 .c1739 .c32 .c34 .c8881 .c164 .c165 .c166 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_0 (f3 c_1 c5))) (not (= c_0 c7)) (not (= c5 c_1)) (not (= (f1 c_1) c_0)) (not (= c4 c_1)))))
(set .c8912 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 (f3 c_1 c_1)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_0) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f2 c_2) c_2))))
(set .c8913 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_0)) (= (f3 c_0 c_0) (f3 c_0 (f1 c_0))))))
(set .c8914 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c8915 (resolution :clauses (.c8913 .c8914) :conclusion ((not (= (f1 c_0) c_0)) (= (f3 c_0 c_0) (f3 c_0 (f1 c_0))))))
(set .c8916 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0))))
(set .c8917 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c8918 (resolution :clauses (.c8916 .c8917) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c4 c_1)))))
(set .c8919 (resolution :clauses (.c8915 .c8918) :conclusion ((= (f3 c_0 c_0) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c4 c_1)))))
(set .c8920 (resolution :clauses (.c8912 .c8919) :conclusion ((not (= (f2 c_2) (f2 (f3 c_1 c_1)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f2 c_2) c_2) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c4 c_1)))))
(set .c8921 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) (f2 (f3 c_1 c_1))))))
(set .c8922 (resolution :clauses (.c8920 .c8921) :conclusion ((not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f2 c_2) c_2) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= c4 c_1)) (not (= (f3 c_1 c_1) c_2)))))
(set .c8923 (resolution :clauses (.c8922 .c1740 .c1739 .c8881 .c165 .c167) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_0 c_0) c_2)) (= (f2 c_2) c_2) (not (= c4 c_1)) (not (= (f3 c_1 c_1) c_2)))))
(set .c8924 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 (f3 c_1 c_1)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) c_2))))
(set .c8925 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c8926 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 c4 c5))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c4 c5) c_2))))
(set .c8927 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c8928 (resolution :clauses (.c8926 .c8927) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c8929 (resolution :clauses (.c8925 .c8928) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c8930 (resolution :clauses (.c8924 .c8929) :conclusion ((not (= (f2 c_2) (f2 (f3 c_1 c_1)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) c_2) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c8931 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))))))
(set .c8932 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c8933 (resolution :clauses (.c8931 .c8932) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c8934 (resolution :clauses (.c8930 .c8933) :conclusion ((not (= (f2 c_2) (f2 (f3 c_1 c_1)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) c_2) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c8935 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c8936 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c8937 (resolution :clauses (.c8935 .c8936) :conclusion ((not (= c_1 (f3 c_0 c_1))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c8938 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c8939 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c8940 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c8941 (resolution :clauses (.c8939 .c8940) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c8942 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c8943 (resolution :clauses (.c8941 .c8942) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8944 (resolution :clauses (.c8938 .c8943) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8945 (resolution :clauses (.c8937 .c8944) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8946 (resolution :clauses (.c8934 .c8945) :conclusion ((not (= (f2 c_2) (f2 (f3 c_1 c_1)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) c_2) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c_1 (f3 (f2 c_1) c_1))))))
(set .c8947 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) (f2 (f3 c_1 c_1))))))
(set .c8948 (resolution :clauses (.c8946 .c8947) :conclusion ((not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) c_2) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c_1 (f3 (f2 c_1) c_1))))))
(set .c8949 (resolution :clauses (.c8948 .c1740 .c1739 .c32 .c34) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) c_2) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c8950 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_2)) (= c4 c_2))))
(set .c8951 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c8952 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 c4 c5))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c4 c5) c_2))))
(set .c8953 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c8954 (resolution :clauses (.c8952 .c8953) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c8955 (resolution :clauses (.c8951 .c8954) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c8956 (resolution :clauses (.c8950 .c8955) :conclusion ((not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_2)) (= c4 c_2) (not (= c6 c_2)) (not (= c5 c_1)))))
(set .c8957 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))))))
(set .c8958 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c8959 (resolution :clauses (.c8957 .c8958) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c8960 (resolution :clauses (.c8956 .c8959) :conclusion ((not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_2)) (= c4 c_2) (not (= c6 c_2)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c8961 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c8962 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c8963 (resolution :clauses (.c8961 .c8962) :conclusion ((not (= c_1 (f3 c_0 c_1))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c8964 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c8965 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c8966 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c8967 (resolution :clauses (.c8965 .c8966) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c8968 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c8969 (resolution :clauses (.c8967 .c8968) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8970 (resolution :clauses (.c8964 .c8969) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8971 (resolution :clauses (.c8963 .c8970) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8972 (resolution :clauses (.c8960 .c8971) :conclusion ((not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= c4 c_2) (not (= c6 c_2)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c8973 (resolution :clauses (.c8972 .c1739 .c32 .c34) :conclusion ((not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= c4 c_2) (not (= c6 c_2)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= (f1 c_1) c_0)))))
(set .c8974 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 (f3 c_1 c_1)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c4))) (not (= (f3 c_1 c_1) (f3 c_1 c4))) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) c_2))))
(set .c8975 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_1)) (= (f3 c_1 c_1) (f3 c_1 c4)))))
(set .c8976 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c8977 (resolution :clauses (.c8975 .c8976) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c_1) (f3 c_1 c4)))))
(set .c8978 (resolution :clauses (.c8974 .c8977) :conclusion ((not (= (f2 c_2) (f2 (f3 c_1 c_1)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c4))) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) c_2) (not (= c4 c_1)))))
(set .c8979 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) (f2 (f3 c_1 c_1))))))
(set .c8980 (resolution :clauses (.c8978 .c8979) :conclusion ((not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c4))) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) c_2) (not (= c4 c_1)))))
(set .c8981 (resolution :clauses (.c8980 .c1740 .c1739) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c4))) (not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) c_2) (not (= c4 c_1)))))
(set .c8982 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 (f3 c_1 c_1)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f2 c_1) c_2)) (= (f2 c_2) c_2))))
(set .c8983 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) (f2 (f3 c_1 c_1))))))
(set .c8984 (resolution :clauses (.c8982 .c8983) :conclusion ((not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f2 c_1) c_2)) (= (f2 c_2) c_2) (not (= (f3 c_1 c_1) c_2)))))
(set .c8985 (resolution :clauses (.c8984 .c1740) :conclusion ((not (= (f2 c_1) c_2)) (= (f2 c_2) c_2) (not (= (f3 c_1 c_1) c_2)))))
(set .c8986 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_2) c_1)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_0)) (= c5 c_0))))
(set .c8987 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c8988 (resolution :clauses (.c8986 .c8987) :conclusion ((not (= c5 c_1)) (not (= (f1 c_2) c_1)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (= c5 c_0) (not (= c4 c_1)))))
(set .c8989 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c8990 (resolution :clauses (.c8988 .c8989) :conclusion ((not (= c5 c_1)) (not (= (f1 c_2) c_1)) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (= c5 c_0) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c8991 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c8992 (resolution :clauses (.c8990 .c8991) :conclusion ((not (= c5 c_1)) (not (= (f1 c_2) c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (= c5 c_0) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c8993 (resolution :clauses (.c8992 .c8881 .c164 .c165 .c166) :conclusion ((not (= c5 c_1)) (not (= (f1 c_2) c_1)) (not (= (f1 c_1) c_0)) (= c5 c_0) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c8994 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (= c5 c_0))))
(set .c8995 (resolution :clauses (.c8994 .c1739) :conclusion ((not (= c5 c_1)) (not (= c_1 (f2 c_1))) (not (= (f1 c_1) c_0)) (= c5 c_0))))
(set .c8996 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 c_2))))
(set .c8997 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f1 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f1 c_2))))))
(set .c8998 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)))))
(set .c8999 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9000 (resolution :clauses (.c8998 .c8999) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)) (not (= c4 c_1)))))
(set .c9001 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9002 (resolution :clauses (.c9000 .c9001) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c9003 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9004 (resolution :clauses (.c9002 .c9003) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c_0 (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9005 (resolution :clauses (.c8997 .c9004) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_0) (f3 c_2 (f1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9006 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9007 (resolution :clauses (.c9005 .c9006) :conclusion ((= (f3 c_2 c_0) (f3 c_2 (f1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9008 (resolution :clauses (.c8996 .c9007) :conclusion ((not (= c4 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 c_2) (not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9009 (resolution :clauses (.c9008 .c8881 .c164 .c165 .c166 .c169) :conclusion ((not (= c4 c_1)) (not (= (f3 c_2 c_0) c_1)) (= c4 c_2) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9010 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 (f3 c_1 c_1)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 c_0) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f2 c_2) c_2))))
(set .c9011 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f1 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f1 c_2))))))
(set .c9012 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)))))
(set .c9013 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9014 (resolution :clauses (.c9012 .c9013) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)) (not (= c4 c_1)))))
(set .c9015 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9016 (resolution :clauses (.c9014 .c9015) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c9017 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9018 (resolution :clauses (.c9016 .c9017) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c_0 (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9019 (resolution :clauses (.c9011 .c9018) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_0) (f3 c_2 (f1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9020 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9021 (resolution :clauses (.c9019 .c9020) :conclusion ((= (f3 c_2 c_0) (f3 c_2 (f1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9022 (resolution :clauses (.c9010 .c9021) :conclusion ((not (= (f2 c_2) (f2 (f3 c_1 c_1)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f2 c_2) c_2) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9023 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) (f2 (f3 c_1 c_1))))))
(set .c9024 (resolution :clauses (.c9022 .c9023) :conclusion ((not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f2 c_2) c_2) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c9025 (resolution :clauses (.c9024 .c1740 .c1739 .c8881 .c164 .c165 .c166 .c169) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_2 c_0) c_0)) (= (f2 c_2) c_2) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c9026 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0))) (not (= (f3 c_1 c_0) c_2)) (= c4 c_2))))
(set .c9027 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0)))))
(set .c9028 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9029 (resolution :clauses (.c9027 .c9028) :conclusion ((not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0)))))
(set .c9030 (resolution :clauses (.c9026 .c9029) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 c_0) c_2)) (= c4 c_2) (not (= (f1 c_1) c_0)))))
(set .c9031 (resolution :clauses (.c9030 .c168) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 c_0) c_2)) (= c4 c_2) (not (= (f1 c_1) c_0)))))
(set .c9032 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)))))
(set .c9033 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c4)))))
(set .c9034 (resolution :clauses (.c9032 .c9033) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_1 (f3 c_2 c4)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)))))
(set .c9035 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c9036 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9037 (resolution :clauses (.c9035 .c9036) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c9038 (resolution :clauses (.c9034 .c9037) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_1 (f3 c_2 c4)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)))))
(set .c9039 (resolution :clauses (.c9038 .c1742) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= c_1 (f3 c_2 c4)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)))))
(set .c9040 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)))))
(set .c9041 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c9042 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9043 (resolution :clauses (.c9041 .c9042) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c9044 (resolution :clauses (.c9040 .c9043) :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= (f3 c_1 c_1) c_2)))))
(set .c9045 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c4)))))
(set .c9046 (resolution :clauses (.c9044 .c9045) :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_2 (f3 c_2 c4)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)))))
(set .c9047 (resolution :clauses (.c9046 .c1742) :conclusion ((not (= (f3 c_1 c_2) c_2)) (= c_2 (f3 c_2 c4)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)))))
(set .c9048 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)) (= c6 c7))))
(set .c9049 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c9050 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9051 (resolution :clauses (.c9049 .c9050) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c9052 (resolution :clauses (.c9048 .c9051) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)) (= c6 c7) (not (= (f3 c_1 c_1) c_2)))))
(set .c9053 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) (f3 c_2 c_2))) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 (f3 c_2 c_2) c_1)))))
(set .c9054 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_1) (f3 c_2 c_2)))))
(set .c9055 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c9056 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9057 (resolution :clauses (.c9055 .c9056) :conclusion ((not (= c_1 (f3 c_0 c_1))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c9058 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c9059 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c9060 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9061 (resolution :clauses (.c9059 .c9060) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c9062 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c9063 (resolution :clauses (.c9061 .c9062) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9064 (resolution :clauses (.c9058 .c9063) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9065 (resolution :clauses (.c9057 .c9064) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9066 (resolution :clauses (.c9054 .c9065) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_1) (f3 c_2 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9067 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))))))
(set .c9068 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c9069 (resolution :clauses (.c9067 .c9068) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c9070 (resolution :clauses (.c9066 .c9069) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_1) (f3 c_2 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c9071 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c9072 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 c4 c5))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c4 c5) c_2))))
(set .c9073 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c9074 (resolution :clauses (.c9072 .c9073) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c9075 (resolution :clauses (.c9071 .c9074) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c9076 (resolution :clauses (.c9070 .c9075) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_1) (f3 c_2 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c9077 (resolution :clauses (.c9053 .c9076) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c9078 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9079 (resolution :clauses (.c9077 .c9078) :conclusion ((= (f3 (f3 c_1 c_1) c_1) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c9080 (resolution :clauses (.c9052 .c9079) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)) (= c6 c7) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c9081 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c9082 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9083 (resolution :clauses (.c9081 .c9082) :conclusion ((not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c9084 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)))))
(set .c9085 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9086 (resolution :clauses (.c9084 .c9085) :conclusion ((not (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c4 c_1)))))
(set .c9087 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9088 (resolution :clauses (.c9086 .c9087) :conclusion ((not (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c9089 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9090 (resolution :clauses (.c9088 .c9089) :conclusion ((not (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9091 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c9092 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9093 (resolution :clauses (.c9091 .c9092) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c9094 (resolution :clauses (.c9090 .c9093) :conclusion ((not (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c9095 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c9096 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9097 (resolution :clauses (.c9095 .c9096) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c9098 (resolution :clauses (.c9094 .c9097) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c9099 (resolution :clauses (.c9083 .c9098) :conclusion ((= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c9100 (resolution :clauses (.c9080 .c9099) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)) (= c6 c7) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c9101 (resolution :clauses (.c9100 .c1739 .c32 .c34 .c8881 .c164 .c165 .c166 .c169 .c1742 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c9102 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 (f3 c_1 c_1)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_2) (f1 c_2)))))
(set .c9103 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9104 (resolution :clauses (.c9102 .c9103) :conclusion ((not (= (f2 c_2) (f2 (f3 c_1 c_1)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c4 c_1)))))
(set .c9105 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9106 (resolution :clauses (.c9104 .c9105) :conclusion ((not (= (f2 c_2) (f2 (f3 c_1 c_1)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c9107 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9108 (resolution :clauses (.c9106 .c9107) :conclusion ((not (= (f2 c_2) (f2 (f3 c_1 c_1)))) (not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9109 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f2 c_2) (f2 (f3 c_1 c_1))))))
(set .c9110 (resolution :clauses (.c9108 .c9109) :conclusion ((not (= (f2 (f3 c_1 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c9111 (resolution :clauses (.c9110 .c166 .c165 .c1739 .c8881 .c164 .c1740) :conclusion ((= (f2 c_2) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c9112 (resolution :clauses (.c9101 .c236 .c9047 .c9039 .c221 .c9111 .c292 .c1991 .c234 .c5081 .c8911 .c716 .c294 .c288 .c2436 .c8881) :conclusion ((not (= c6 c_2)) (not (= c_0 c7)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c_2) (f2 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c4) (f1 c_2))))))
(set .c9113 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c9114 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= (f1 c_0) c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f1 c_0))))))
(set .c9115 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c9116 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c9117 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c9118 (resolution :clauses (.c9116 .c9117) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c9119 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c9120 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9121 (resolution :clauses (.c9119 .c9120) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c4 c_1)))))
(set .c9122 (resolution :clauses (.c9118 .c9121) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c9123 (resolution :clauses (.c9115 .c9122) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c9124 (resolution :clauses (.c9114 .c9123) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f1 c_0))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c9125 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c9126 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9127 (resolution :clauses (.c9125 .c9126) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c4 c_1)))))
(set .c9128 (resolution :clauses (.c9124 .c9127) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f1 c_0))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c9129 (resolution :clauses (.c9113 .c9128) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c9130 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))))))
(set .c9131 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c9132 (resolution :clauses (.c9130 .c9131) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c9133 (resolution :clauses (.c9129 .c9132) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c9134 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c9135 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c9136 (resolution :clauses (.c9134 .c9135) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c9137 (resolution :clauses (.c9133 .c9136) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c9138 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_2)) (not (= (f1 c_2) c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f1 c_2))))))
(set .c9139 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2))))
(set .c9140 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_1)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))))))
(set .c9141 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1))))
(set .c9142 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9143 (resolution :clauses (.c9141 .c9142) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)))))
(set .c9144 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9145 (resolution :clauses (.c9143 .c9144) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c9146 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9147 (resolution :clauses (.c9145 .c9146) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9148 (resolution :clauses (.c9140 .c9147) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9149 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9150 (resolution :clauses (.c9148 .c9149) :conclusion ((= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9151 (resolution :clauses (.c9139 .c9150) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9152 (resolution :clauses (.c9138 .c9151) :conclusion ((not (= (f1 c_2) c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9153 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1))))
(set .c9154 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9155 (resolution :clauses (.c9153 .c9154) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)))))
(set .c9156 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9157 (resolution :clauses (.c9155 .c9156) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c9158 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9159 (resolution :clauses (.c9157 .c9158) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9160 (resolution :clauses (.c9152 .c9159) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9161 (resolution :clauses (.c9137 .c9160) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c9162 (resolution :clauses (.c9161 .c34 .c8881 .c164 .c165 .c166 .c167 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_0 c7)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c9163 (resolution :clauses (.c9162 .c252 .c9112 .c8880) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c_2) (f2 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c4) (f1 c_2))))))
(set .c9164 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c9165 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))))))
(set .c9166 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c9167 (resolution :clauses (.c9165 .c9166) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c9168 (resolution :clauses (.c9164 .c9167) :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c9169 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c5 c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 c5)))))
(set .c9170 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c9171 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c9172 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c9173 (resolution :clauses (.c9171 .c9172) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c9174 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c9175 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9176 (resolution :clauses (.c9174 .c9175) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c4 c_1)))))
(set .c9177 (resolution :clauses (.c9173 .c9176) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c9178 (resolution :clauses (.c9170 .c9177) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c9179 (resolution :clauses (.c9169 .c9178) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 c5)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c9180 (resolution :clauses (.c9168 .c9179) :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)))))
(set .c9181 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c_2 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c9182 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c9183 (resolution :clauses (.c9181 .c9182) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c9184 (resolution :clauses (.c9180 .c9183) :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c6 c_2)))))
(set .c9185 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 (f3 c_2 c_1) c_2)))))
(set .c9186 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2))))
(set .c9187 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_1)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))))))
(set .c9188 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1))))
(set .c9189 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9190 (resolution :clauses (.c9188 .c9189) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)))))
(set .c9191 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9192 (resolution :clauses (.c9190 .c9191) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c9193 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9194 (resolution :clauses (.c9192 .c9193) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9195 (resolution :clauses (.c9187 .c9194) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9196 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9197 (resolution :clauses (.c9195 .c9196) :conclusion ((= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9198 (resolution :clauses (.c9186 .c9197) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9199 (resolution :clauses (.c9185 .c9198) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 (f3 c_2 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9200 (resolution :clauses (.c9184 .c9199) :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c9201 (resolution :clauses (.c9200 .c34 .c8881 .c164 .c165 .c166 .c167 .c169) :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_1)) (not (= c6 c_2)))))
(set .c9202 (resolution :clauses (.c9201 .c266) :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_1)) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))))))
(set .c9203 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 c5) c_1)) (not (= (f3 (f2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= c4 c_2))))
(set .c9204 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)))))
(set .c9205 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c9206 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9207 (resolution :clauses (.c9205 .c9206) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_1)))))
(set .c9208 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c9209 (resolution :clauses (.c9207 .c9208) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c9210 (resolution :clauses (.c9204 .c9209) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c9211 (resolution :clauses (.c9203 .c9210) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 c5) c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (= c4 c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)))))
(set .c9212 (resolution :clauses (.c9211 .c33 .c165) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 c5) c_1)) (= c4 c_2) (not (= c5 c_2)) (not (= (f1 c_1) c_1)))))
(set .c9213 (eq_transitive :conclusion ((not (= (f3 c_2 c5) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_2 c5) c_2))))
(set .c9214 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9215 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9216 (resolution :clauses (.c9214 .c9215) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9217 (resolution :clauses (.c9213 .c9216) :conclusion ((not (= (f3 c_2 c_2) c_2)) (= (f3 c_2 c5) c_2) (not (= c5 c_2)))))
(set .c9218 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c9219 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))))))
(set .c9220 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c_2 c_2)))))
(set .c9221 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9222 (resolution :clauses (.c9220 .c9221) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c_2 c_2)) (not (= c4 c_1)))))
(set .c9223 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9224 (resolution :clauses (.c9222 .c9223) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c_2 c_2)) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c9225 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9226 (resolution :clauses (.c9224 .c9225) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c_2 c_2)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9227 (resolution :clauses (.c9219 .c9226) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9228 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9229 (resolution :clauses (.c9227 .c9228) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9230 (resolution :clauses (.c9218 .c9229) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)))))
(set .c9231 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)))))
(set .c9232 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_0 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 c_2) (f3 (f3 c_2 c_1) c_2))) (= (f3 c_0 c_2) (f3 c_2 c_2)))))
(set .c9233 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_2)) (not (= c_2 c_2)) (= (f3 c_2 c_2) (f3 (f3 c_2 c_1) c_2)))))
(set .c9234 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2))))
(set .c9235 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_1)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))))))
(set .c9236 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1))))
(set .c9237 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9238 (resolution :clauses (.c9236 .c9237) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)))))
(set .c9239 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9240 (resolution :clauses (.c9238 .c9239) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c9241 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9242 (resolution :clauses (.c9240 .c9241) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9243 (resolution :clauses (.c9235 .c9242) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9244 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9245 (resolution :clauses (.c9243 .c9244) :conclusion ((= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9246 (resolution :clauses (.c9234 .c9245) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9247 (resolution :clauses (.c9233 .c9246) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_2) (f3 (f3 c_2 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9248 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9249 (resolution :clauses (.c9247 .c9248) :conclusion ((= (f3 c_2 c_2) (f3 (f3 c_2 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9250 (resolution :clauses (.c9232 .c9249) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_0 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9251 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c_2 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c9252 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c9253 (resolution :clauses (.c9251 .c9252) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c9254 (resolution :clauses (.c9250 .c9253) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_0 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_2)))))
(set .c9255 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))))))
(set .c9256 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c9257 (resolution :clauses (.c9255 .c9256) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c9258 (resolution :clauses (.c9254 .c9257) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_0 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_2)))))
(set .c9259 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_0 c_1) c_2)))))
(set .c9260 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c9261 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c9262 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c9263 (resolution :clauses (.c9261 .c9262) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c9264 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c9265 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9266 (resolution :clauses (.c9264 .c9265) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c4 c_1)))))
(set .c9267 (resolution :clauses (.c9263 .c9266) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c9268 (resolution :clauses (.c9260 .c9267) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c9269 (resolution :clauses (.c9259 .c9268) :conclusion ((not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c9270 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9271 (resolution :clauses (.c9269 .c9270) :conclusion ((= (f3 c_0 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c9272 (resolution :clauses (.c9258 .c9271) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))))))
(set .c9273 (resolution :clauses (.c9231 .c9272) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))))))
(set .c9274 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9275 (resolution :clauses (.c9273 .c9274) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))))))
(set .c9276 (resolution :clauses (.c9230 .c9275) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= c5 c_2)))))
(set .c9277 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_2 c_2))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0))))))
(set .c9278 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c9279 (resolution :clauses (.c9277 .c9278) :conclusion ((not (= (f1 c_0) (f3 c_2 c_2))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0))))))
(set .c9280 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c_2 c_2)))))
(set .c9281 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9282 (resolution :clauses (.c9280 .c9281) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c_2 c_2)) (not (= c4 c_1)))))
(set .c9283 (resolution :clauses (.c9279 .c9282) :conclusion ((= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)))))
(set .c9284 (resolution :clauses (.c9276 .c9283) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= c5 c_2)))))
(set .c9285 (resolution :clauses (.c9284 .c34 .c8881 .c164 .c165 .c166 .c167 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= c_0 c7)) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= c5 c_2)))))
(set .c9286 (resolution :clauses (.c9285 .c242 .c9217 .c8086 .c9202 .c280 .c7730) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= c_0 c7)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c9287 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_1 c5))) (not (= c_0 (f3 c_1 c5))) (= c5 c_0))))
(set .c9288 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c5 c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_1 c5)))))
(set .c9289 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c9290 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c9291 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9292 (resolution :clauses (.c9290 .c9291) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c9293 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c9294 (resolution :clauses (.c9292 .c9293) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9295 (resolution :clauses (.c9289 .c9294) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9296 (resolution :clauses (.c9288 .c9295) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_1 c5)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9297 (resolution :clauses (.c9287 .c9296) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= c_0 (f3 c_1 c5))) (= c5 c_0) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9298 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))))))
(set .c9299 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c9300 (resolution :clauses (.c9298 .c9299) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c9301 (resolution :clauses (.c9297 .c9300) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= c_0 (f3 c_1 c5))) (= c5 c_0) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c9302 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c9303 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c5))) (not (= (f3 c_1 c5) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c9304 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9305 (resolution :clauses (.c9303 .c9304) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c5))) (not (= (f3 c_1 c5) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)))))
(set .c9306 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c5)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c9307 (eq_reflexive :conclusion ((= c5 c5))))
(set .c9308 (resolution :clauses (.c9306 .c9307) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c9309 (resolution :clauses (.c9305 .c9308) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)))))
(set .c9310 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9311 (resolution :clauses (.c9309 .c9310) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c9312 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9313 (resolution :clauses (.c9311 .c9312) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9314 (resolution :clauses (.c9302 .c9313) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_1 c5))) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c9315 (resolution :clauses (.c9301 .c9314) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= c_0 (f3 c_1 c5))) (= c5 c_0) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))))))
(set .c9316 (resolution :clauses (.c9315 .c1739 .c32 .c34 .c8881 .c164 .c165 .c166 .c169) :conclusion ((not (= c5 c_2)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= c_0 (f3 c_1 c5))) (= c5 c_0) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_2)))))
(set .c9317 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c9318 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c5 c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_1 c5)))))
(set .c9319 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c9320 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c9321 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9322 (resolution :clauses (.c9320 .c9321) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c9323 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c9324 (resolution :clauses (.c9322 .c9323) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9325 (resolution :clauses (.c9319 .c9324) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9326 (resolution :clauses (.c9318 .c9325) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_1 c5)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9327 (resolution :clauses (.c9317 .c9326) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9328 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))))))
(set .c9329 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c9330 (resolution :clauses (.c9328 .c9329) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c9331 (resolution :clauses (.c9327 .c9330) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c9332 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))))))
(set .c9333 (eq_transitive :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c9334 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c9335 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)) (= c4 (f3 c_2 c_2)))))
(set .c9336 (resolution :clauses (.c9334 .c9335) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c9337 (resolution :clauses (.c9333 .c9336) :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_1) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c9338 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c9339 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9340 (resolution :clauses (.c9338 .c9339) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c9341 (resolution :clauses (.c9337 .c9340) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_1) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c9342 (resolution :clauses (.c9332 .c9341) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c5 c_2)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c9343 (resolution :clauses (.c9331 .c9342) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)))))
(set .c9344 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1)))))
(set .c9345 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9346 (resolution :clauses (.c9344 .c9345) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1)))))
(set .c9347 (resolution :clauses (.c9343 .c9346) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)))))
(set .c9348 (resolution :clauses (.c9347 .c1739 .c32 .c34) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_0 (f3 c_1 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)))))
(set .c9349 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_1 c5))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c5) c_2))))
(set .c9350 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c5 c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_1 c5)))))
(set .c9351 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c9352 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c9353 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9354 (resolution :clauses (.c9352 .c9353) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c9355 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c9356 (resolution :clauses (.c9354 .c9355) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9357 (resolution :clauses (.c9351 .c9356) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9358 (resolution :clauses (.c9350 .c9357) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_1 c5)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9359 (resolution :clauses (.c9349 .c9358) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9360 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))))))
(set .c9361 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c9362 (resolution :clauses (.c9360 .c9361) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c9363 (resolution :clauses (.c9359 .c9362) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c9364 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))))))
(set .c9365 (eq_transitive :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c9366 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c9367 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)) (= c4 (f3 c_2 c_2)))))
(set .c9368 (resolution :clauses (.c9366 .c9367) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c9369 (resolution :clauses (.c9365 .c9368) :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_1) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c9370 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c9371 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9372 (resolution :clauses (.c9370 .c9371) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c9373 (resolution :clauses (.c9369 .c9372) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_1) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c9374 (resolution :clauses (.c9364 .c9373) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c5 c_2)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c9375 (resolution :clauses (.c9363 .c9374) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)))))
(set .c9376 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1)))))
(set .c9377 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9378 (resolution :clauses (.c9376 .c9377) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1)))))
(set .c9379 (resolution :clauses (.c9375 .c9378) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)))))
(set .c9380 (resolution :clauses (.c9379 .c1739 .c32 .c34) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)))))
(set .c9381 (resolution :clauses (.c9380 .c234 .c9348) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_1) c_1) (= c_0 (f3 c_1 c5)))))
(set .c9382 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)))))
(set .c9383 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= (f3 c_1 c_1) c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c9384 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c9385 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c9386 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9387 (resolution :clauses (.c9385 .c9386) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c9388 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c9389 (resolution :clauses (.c9387 .c9388) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9390 (resolution :clauses (.c9384 .c9389) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9391 (resolution :clauses (.c9383 .c9390) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_1 (f3 c_1 c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9392 (resolution :clauses (.c9382 .c9391) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)) (not (= (f3 c_1 c_1) c_2)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9393 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c4)))))
(set .c9394 (resolution :clauses (.c9392 .c9393) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_1 (f3 c_2 c4)) (not (= (f3 c_1 c_1) c_2)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)))))
(set .c9395 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))))))
(set .c9396 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c9397 (resolution :clauses (.c9395 .c9396) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c9398 (resolution :clauses (.c9394 .c9397) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_1 (f3 c_2 c4)) (not (= (f3 c_1 c_1) c_2)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_2)))))
(set .c9399 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))))))
(set .c9400 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c4 c5) (f3 c_1 (f3 c_1 c_1)))) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c9401 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f3 c_1 c_1))) (= (f3 c4 c5) (f3 c_1 (f3 c_1 c_1))))))
(set .c9402 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_1 c_1) c_2)) (= c5 (f3 c_1 c_1)))))
(set .c9403 (resolution :clauses (.c9401 .c9402) :conclusion ((not (= c4 c_1)) (= (f3 c4 c5) (f3 c_1 (f3 c_1 c_1))) (not (= c5 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c9404 (resolution :clauses (.c9400 .c9403) :conclusion ((not (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= (f3 c_2 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c9405 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c9406 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9407 (resolution :clauses (.c9405 .c9406) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c9408 (resolution :clauses (.c9404 .c9407) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= (f3 c_2 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c9409 (resolution :clauses (.c9399 .c9408) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c9410 (resolution :clauses (.c9398 .c9409) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_1 (f3 c_2 c4)) (not (= (f3 c_1 c_1) c_2)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9411 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c9412 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_2) (f2 c_1)))))
(set .c9413 (resolution :clauses (.c9411 .c9412) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9414 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9415 (resolution :clauses (.c9413 .c9414) :conclusion ((= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9416 (resolution :clauses (.c9410 .c9415) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_1 (f3 c_2 c4)) (not (= (f3 c_1 c_1) c_2)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_2)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c9417 (resolution :clauses (.c9416 .c1739 .c32 .c34 .c1742) :conclusion ((not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_1 (f3 c_2 c4)) (not (= (f3 c_1 c_1) c_2)) (not (= (f1 c_1) c_0)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_2)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c9418 (eq_transitive :conclusion ((not (= (f3 c_1 c5) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_1 c5))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)))))
(set .c9419 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c5 c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_1 c5)))))
(set .c9420 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c9421 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c9422 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9423 (resolution :clauses (.c9421 .c9422) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c9424 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c9425 (resolution :clauses (.c9423 .c9424) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9426 (resolution :clauses (.c9420 .c9425) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9427 (resolution :clauses (.c9419 .c9426) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_1 c5)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9428 (resolution :clauses (.c9418 .c9427) :conclusion ((not (= (f3 c_1 c5) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)) (not (= c5 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9429 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))))))
(set .c9430 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c9431 (resolution :clauses (.c9429 .c9430) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c9432 (resolution :clauses (.c9428 .c9431) :conclusion ((not (= (f3 c_1 c5) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)) (not (= c5 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)))))
(set .c9433 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= c4 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)))))
(set .c9434 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 c5) c_1)) (not (= (f3 c_1 c5) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c9435 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c5)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c9436 (eq_reflexive :conclusion ((= c5 c5))))
(set .c9437 (resolution :clauses (.c9435 .c9436) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c9438 (resolution :clauses (.c9434 .c9437) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 c5) c_1)) (= c4 (f3 c4 c5)))))
(set .c9439 (resolution :clauses (.c9433 .c9438) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f3 c_1 c5) c_1)))))
(set .c9440 (resolution :clauses (.c9432 .c9439) :conclusion ((not (= (f3 c_1 c5) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_1 (f3 c_2 c4)) (not (= c5 c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_2)))))
(set .c9441 (resolution :clauses (.c9440 .c1739 .c32 .c34) :conclusion ((not (= (f3 c_1 c5) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_1 (f3 c_2 c4)) (not (= c5 c_2)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_2)))))
(set .c9442 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_1)) (= c_0 c_1))))
(set .c9443 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9444 (resolution :clauses (.c9442 .c9443) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_1)) (= c_0 c_1) (not (= c4 c_1)))))
(set .c9445 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9446 (resolution :clauses (.c9444 .c9445) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (not (= (f1 c_2) c_1)) (= c_0 c_1) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c9447 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9448 (resolution :clauses (.c9446 .c9447) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) c_1)) (= c_0 c_1) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9449 (resolution :clauses (.c9448 .c7 .c8881 .c164 .c165 .c166) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_2) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9450 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c_1 c5))) (not (= (f3 c_1 c_2) c_1)) (= (f3 c_1 c5) c_1))))
(set .c9451 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c_1 c5)))))
(set .c9452 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9453 (resolution :clauses (.c9451 .c9452) :conclusion ((not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c_1 c5)))))
(set .c9454 (resolution :clauses (.c9450 .c9453) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= c5 c_2)))))
(set .c9455 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c9456 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c_1 c5)))))
(set .c9457 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9458 (resolution :clauses (.c9456 .c9457) :conclusion ((not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c_1 c5)))))
(set .c9459 (resolution :clauses (.c9455 .c9458) :conclusion ((not (= (f3 c_1 c_2) c_0)) (= c_0 (f3 c_1 c5)) (not (= c5 c_2)))))
(set .c9460 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c_1 c5))) (not (= (f3 c_1 c_2) c_2)) (= (f3 c_1 c5) c_2))))
(set .c9461 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c_1 c5)))))
(set .c9462 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9463 (resolution :clauses (.c9461 .c9462) :conclusion ((not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c_1 c5)))))
(set .c9464 (resolution :clauses (.c9460 .c9463) :conclusion ((not (= (f3 c_1 c_2) c_2)) (= (f3 c_1 c5) c_2) (not (= c5 c_2)))))
(set .c9465 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2))))
(set .c9466 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c5)))))
(set .c9467 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c9468 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9469 (resolution :clauses (.c9467 .c9468) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_1)))))
(set .c9470 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c9471 (resolution :clauses (.c9469 .c9470) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c9472 (resolution :clauses (.c9466 .c9471) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c4 c_1)))))
(set .c9473 (resolution :clauses (.c9465 .c9472) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_0)) (not (= c4 c_1)))))
(set .c9474 (resolution :clauses (.c9473 .c33 .c165) :conclusion ((= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f1 c_1) c_0)) (not (= c4 c_1)))))
(set .c9475 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_2) (f1 c_0)))))
(set .c9476 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c9477 (resolution :clauses (.c9475 .c9476) :conclusion ((not (= (f2 c5) (f1 c_0))) (= (f2 c_2) (f1 c_0)) (not (= c5 c_2)))))
(set .c9478 (resolution :clauses (.c9477 .c8881) :conclusion ((= (f2 c_2) (f1 c_0)) (not (= c5 c_2)))))
(set .c9479 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (= (f2 c_2) (f1 c_1)))))
(set .c9480 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9481 (resolution :clauses (.c9479 .c9480) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (= (f2 c_2) (f1 c_1)) (not (= c4 c_1)))))
(set .c9482 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c9483 (resolution :clauses (.c9481 .c9482) :conclusion ((not (= (f2 c5) (f1 c4))) (= (f2 c_2) (f1 c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c9484 (resolution :clauses (.c9483 .c165) :conclusion ((= (f2 c_2) (f1 c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c9485 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_2) (f1 c_2)))))
(set .c9486 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c9487 (resolution :clauses (.c9485 .c9486) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c5 c_2)))))
(set .c9488 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9489 (resolution :clauses (.c9487 .c9488) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c9490 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9491 (resolution :clauses (.c9489 .c9490) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9492 (resolution :clauses (.c9491 .c166 .c8881 .c164) :conclusion ((= (f2 c_2) (f1 c_2)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9493 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_2) (f2 c_1)))))
(set .c9494 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c9495 (resolution :clauses (.c9493 .c9494) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_2) (f2 c_1)) (not (= c4 c_1)))))
(set .c9496 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9497 (resolution :clauses (.c9495 .c9496) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_2) (f2 c_1)) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c9498 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9499 (resolution :clauses (.c9497 .c9498) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_2) (f2 c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9500 (resolution :clauses (.c9499 .c166 .c165 .c8881 .c164 .c1739) :conclusion ((= (f1 c_2) (f2 c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9501 (resolution :clauses (.c9464 .c236 .c9459 .c9454 .c9441 .c9316 .c271 .c9474 .c294 .c2436 .c252 .c9286 .c187 .c217 .c181 .c223 .c9478 .c9484 .c9492 .c260 .c9163 .c215 .c9500 .c472 .c179 .c5450 .c5460 .c476 .c8881 .c8880 .c1739) :conclusion ((not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_2)) (= c5 c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))))))
(set .c9502 (eq_transitive :conclusion ((not (= (f3 c_2 c5) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_2 c5) c_2))))
(set .c9503 (eq_congruent :conclusion ((not (= (f2 c_2) (f3 c_0 c_0))) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2)))))
(set .c9504 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_0) (f3 c_0 (f1 c_0)))) (= (f2 c_2) (f3 c_0 c_0)))))
(set .c9505 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c9506 (resolution :clauses (.c9504 .c9505) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_0) (f3 c_0 (f1 c_0)))) (= (f2 c_2) (f3 c_0 c_0)) (not (= c5 c_2)))))
(set .c9507 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9508 (resolution :clauses (.c9506 .c9507) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_0) (f3 c_0 (f1 c_0)))) (= (f2 c_2) (f3 c_0 c_0)) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c9509 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c9510 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c9511 (resolution :clauses (.c9509 .c9510) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9512 (resolution :clauses (.c9508 .c9511) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_0) (f3 c_0 (f1 c_0)))) (= (f2 c_2) (f3 c_0 c_0)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9513 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c9514 (resolution :clauses (.c9512 .c9513) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_0) (f3 c_0 (f1 c_0)))) (= (f2 c_2) (f3 c_0 c_0)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9515 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_0)) (= (f3 c_0 c_0) (f3 c_0 (f1 c_0))))))
(set .c9516 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c9517 (resolution :clauses (.c9515 .c9516) :conclusion ((not (= (f1 c_0) c_0)) (= (f3 c_0 c_0) (f3 c_0 (f1 c_0))))))
(set .c9518 (eq_transitive :conclusion ((not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0))))
(set .c9519 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9520 (resolution :clauses (.c9518 .c9519) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c_0 c7)))))
(set .c9521 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c9522 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c9523 (resolution :clauses (.c9521 .c9522) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9524 (resolution :clauses (.c9520 .c9523) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9525 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c9526 (resolution :clauses (.c9524 .c9525) :conclusion ((not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9527 (resolution :clauses (.c9517 .c9526) :conclusion ((= (f3 c_0 c_0) (f3 c_0 (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9528 (resolution :clauses (.c9514 .c9527) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f2 c_2) (f3 c_0 c_0)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9529 (resolution :clauses (.c9503 .c9528) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9530 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9531 (resolution :clauses (.c9529 .c9530) :conclusion ((= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9532 (resolution :clauses (.c9502 .c9531) :conclusion ((not (= (f3 c_2 c5) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_2 c5) c_2) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9533 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))))))
(set .c9534 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c9535 (resolution :clauses (.c9533 .c9534) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9536 (resolution :clauses (.c9532 .c9535) :conclusion ((not (= (f3 c_2 c5) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_2 c5) c_2) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9537 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c_2 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c9538 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c9539 (resolution :clauses (.c9537 .c9538) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9540 (resolution :clauses (.c9536 .c9539) :conclusion ((not (= (f3 c_2 c5) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_2 c5) c_2) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c6 c_2)))))
(set .c9541 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 (f3 c_2 c_0) c_2)))))
(set .c9542 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_0) c_2))))
(set .c9543 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f1 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f1 c_2))))))
(set .c9544 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)))))
(set .c9545 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c9546 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c9547 (resolution :clauses (.c9545 .c9546) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9548 (resolution :clauses (.c9544 .c9547) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9549 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9550 (resolution :clauses (.c9548 .c9549) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c_0 (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9551 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c9552 (resolution :clauses (.c9550 .c9551) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c_0 (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9553 (resolution :clauses (.c9543 .c9552) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_0) (f3 c_2 (f1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9554 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9555 (resolution :clauses (.c9553 .c9554) :conclusion ((= (f3 c_2 c_0) (f3 c_2 (f1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9556 (resolution :clauses (.c9542 .c9555) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_0) c_2) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9557 (resolution :clauses (.c9541 .c9556) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 (f3 c_2 c_0) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_0)) (not (= c6 c_2)))))
(set .c9558 (resolution :clauses (.c9540 .c9557) :conclusion ((not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_2 c5) c_2) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c9559 (resolution :clauses (.c9558 .c166 .c164 .c33 .c8881 .c34 .c169 .c167) :conclusion ((not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (= (f3 c_2 c5) c_2) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c6 c_2)))))
(set .c9560 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2))))
(set .c9561 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c5)))))
(set .c9562 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c9563 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c9564 (resolution :clauses (.c9562 .c9563) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c5 c_2)))))
(set .c9565 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9566 (resolution :clauses (.c9564 .c9565) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c9567 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c9568 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c9569 (resolution :clauses (.c9567 .c9568) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9570 (resolution :clauses (.c9566 .c9569) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9571 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c9572 (resolution :clauses (.c9570 .c9571) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9573 (resolution :clauses (.c9561 .c9572) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9574 (resolution :clauses (.c9560 .c9573) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9575 (resolution :clauses (.c9574 .c166 .c8881 .c33) :conclusion ((= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9576 (resolution :clauses (.c277 .c9559 .c9575 .c8881) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c6 c_2)))))
(set .c9577 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 c_1))))
(set .c9578 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1)))))
(set .c9579 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9580 (resolution :clauses (.c9578 .c9579) :conclusion ((not (= (f1 c_1) c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1)))))
(set .c9581 (resolution :clauses (.c9577 .c9580) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c_0 c_1) (not (= (f1 c_1) c_1)))))
(set .c9582 (resolution :clauses (.c9581 .c7 .c168) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_1)))))
(set .c9583 (eq_transitive :conclusion ((not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c5))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2))))
(set .c9584 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c9585 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c9586 (resolution :clauses (.c9584 .c9585) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c9587 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c_0 (f3 c_2 c_2)))))
(set .c9588 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9589 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9590 (resolution :clauses (.c9588 .c9589) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9591 (resolution :clauses (.c9587 .c9590) :conclusion ((not (= c_0 (f3 c_2 c5))) (= c_0 (f3 c_2 c_2)) (not (= c5 c_2)))))
(set .c9592 (resolution :clauses (.c9586 .c9591) :conclusion ((= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9593 (resolution :clauses (.c9583 .c9592) :conclusion ((not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c5))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9594 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c9595 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c9596 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c9597 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c_0 (f3 c_2 c_2)))))
(set .c9598 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9599 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9600 (resolution :clauses (.c9598 .c9599) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9601 (resolution :clauses (.c9597 .c9600) :conclusion ((not (= c_0 (f3 c_2 c5))) (= c_0 (f3 c_2 c_2)) (not (= c5 c_2)))))
(set .c9602 (resolution :clauses (.c9596 .c9601) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9603 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9604 (resolution :clauses (.c9602 .c9603) :conclusion ((= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9605 (resolution :clauses (.c9595 .c9604) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9606 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c9607 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c9608 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9609 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9610 (resolution :clauses (.c9608 .c9609) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9611 (resolution :clauses (.c9607 .c9610) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))) (= c4 (f3 c_2 c_2)) (not (= c5 c_2)))))
(set .c9612 (resolution :clauses (.c9606 .c9611) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))))))
(set .c9613 (resolution :clauses (.c9605 .c9612) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c9614 (resolution :clauses (.c9594 .c9613) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c9615 (resolution :clauses (.c9593 .c9614) :conclusion ((not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c5))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)))))
(set .c9616 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c9617 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c9618 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c9619 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c_0 (f3 c_2 c_2)))))
(set .c9620 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9621 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9622 (resolution :clauses (.c9620 .c9621) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9623 (resolution :clauses (.c9619 .c9622) :conclusion ((not (= c_0 (f3 c_2 c5))) (= c_0 (f3 c_2 c_2)) (not (= c5 c_2)))))
(set .c9624 (resolution :clauses (.c9618 .c9623) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9625 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9626 (resolution :clauses (.c9624 .c9625) :conclusion ((= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9627 (resolution :clauses (.c9617 .c9626) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9628 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c9629 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c9630 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9631 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9632 (resolution :clauses (.c9630 .c9631) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9633 (resolution :clauses (.c9629 .c9632) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))) (= c4 (f3 c_2 c_2)) (not (= c5 c_2)))))
(set .c9634 (resolution :clauses (.c9628 .c9633) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))))))
(set .c9635 (resolution :clauses (.c9627 .c9634) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c9636 (resolution :clauses (.c9616 .c9635) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c9637 (resolution :clauses (.c9615 .c9636) :conclusion ((not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c5))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c9638 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c9639 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c9640 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c9641 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c_0 (f3 c_2 c_2)))))
(set .c9642 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9643 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9644 (resolution :clauses (.c9642 .c9643) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9645 (resolution :clauses (.c9641 .c9644) :conclusion ((not (= c_0 (f3 c_2 c5))) (= c_0 (f3 c_2 c_2)) (not (= c5 c_2)))))
(set .c9646 (resolution :clauses (.c9640 .c9645) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9647 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9648 (resolution :clauses (.c9646 .c9647) :conclusion ((= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9649 (resolution :clauses (.c9639 .c9648) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9650 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c9651 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c_0 (f3 c_2 c_2)))))
(set .c9652 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9653 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9654 (resolution :clauses (.c9652 .c9653) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9655 (resolution :clauses (.c9651 .c9654) :conclusion ((not (= c_0 (f3 c_2 c5))) (= c_0 (f3 c_2 c_2)) (not (= c5 c_2)))))
(set .c9656 (resolution :clauses (.c9650 .c9655) :conclusion ((not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9657 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9658 (resolution :clauses (.c9656 .c9657) :conclusion ((= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9659 (resolution :clauses (.c9649 .c9658) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9660 (resolution :clauses (.c9638 .c9659) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9661 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c9662 (resolution :clauses (.c9660 .c9661) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9663 (resolution :clauses (.c9637 .c9662) :conclusion ((not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c5))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c9664 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 (f3 c_0 c_0))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c5)))))
(set .c9665 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)) (= c5 (f3 c_0 c_0)))))
(set .c9666 (resolution :clauses (.c9664 .c9665) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c5)) (not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c9667 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9668 (resolution :clauses (.c9666 .c9667) :conclusion ((= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c5)) (not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c9669 (resolution :clauses (.c9663 .c9668) :conclusion ((not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c9670 (resolution :clauses (.c9669 .c34) :conclusion ((not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c9671 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c_0) c_2))))
(set .c9672 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c9673 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c9674 (resolution :clauses (.c9672 .c9673) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c9675 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c_0 (f3 c_2 c_2)))))
(set .c9676 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9677 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9678 (resolution :clauses (.c9676 .c9677) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9679 (resolution :clauses (.c9675 .c9678) :conclusion ((not (= c_0 (f3 c_2 c5))) (= c_0 (f3 c_2 c_2)) (not (= c5 c_2)))))
(set .c9680 (resolution :clauses (.c9674 .c9679) :conclusion ((= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9681 (resolution :clauses (.c9671 .c9680) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c_0) c_2) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9682 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c9683 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c9684 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c9685 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c_0 (f3 c_2 c_2)))))
(set .c9686 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9687 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9688 (resolution :clauses (.c9686 .c9687) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9689 (resolution :clauses (.c9685 .c9688) :conclusion ((not (= c_0 (f3 c_2 c5))) (= c_0 (f3 c_2 c_2)) (not (= c5 c_2)))))
(set .c9690 (resolution :clauses (.c9684 .c9689) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9691 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9692 (resolution :clauses (.c9690 .c9691) :conclusion ((= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9693 (resolution :clauses (.c9683 .c9692) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9694 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c9695 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c9696 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9697 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9698 (resolution :clauses (.c9696 .c9697) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9699 (resolution :clauses (.c9695 .c9698) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))) (= c4 (f3 c_2 c_2)) (not (= c5 c_2)))))
(set .c9700 (resolution :clauses (.c9694 .c9699) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))))))
(set .c9701 (resolution :clauses (.c9693 .c9700) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c9702 (resolution :clauses (.c9682 .c9701) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c9703 (resolution :clauses (.c9681 .c9702) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c_0) c_2) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)))))
(set .c9704 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c9705 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c9706 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c9707 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c_0 (f3 c_2 c_2)))))
(set .c9708 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9709 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9710 (resolution :clauses (.c9708 .c9709) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9711 (resolution :clauses (.c9707 .c9710) :conclusion ((not (= c_0 (f3 c_2 c5))) (= c_0 (f3 c_2 c_2)) (not (= c5 c_2)))))
(set .c9712 (resolution :clauses (.c9706 .c9711) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9713 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9714 (resolution :clauses (.c9712 .c9713) :conclusion ((= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9715 (resolution :clauses (.c9705 .c9714) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9716 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c9717 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c9718 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9719 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9720 (resolution :clauses (.c9718 .c9719) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9721 (resolution :clauses (.c9717 .c9720) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))) (= c4 (f3 c_2 c_2)) (not (= c5 c_2)))))
(set .c9722 (resolution :clauses (.c9716 .c9721) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c5))))))
(set .c9723 (resolution :clauses (.c9715 .c9722) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c9724 (resolution :clauses (.c9704 .c9723) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c9725 (resolution :clauses (.c9703 .c9724) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c_0) c_2) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c9726 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c9727 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c9728 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c9729 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c_0 (f3 c_2 c_2)))))
(set .c9730 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9731 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9732 (resolution :clauses (.c9730 .c9731) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9733 (resolution :clauses (.c9729 .c9732) :conclusion ((not (= c_0 (f3 c_2 c5))) (= c_0 (f3 c_2 c_2)) (not (= c5 c_2)))))
(set .c9734 (resolution :clauses (.c9728 .c9733) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9735 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9736 (resolution :clauses (.c9734 .c9735) :conclusion ((= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9737 (resolution :clauses (.c9727 .c9736) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9738 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c9739 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c_0 (f3 c_2 c_2)))))
(set .c9740 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9741 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9742 (resolution :clauses (.c9740 .c9741) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c9743 (resolution :clauses (.c9739 .c9742) :conclusion ((not (= c_0 (f3 c_2 c5))) (= c_0 (f3 c_2 c_2)) (not (= c5 c_2)))))
(set .c9744 (resolution :clauses (.c9738 .c9743) :conclusion ((not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9745 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9746 (resolution :clauses (.c9744 .c9745) :conclusion ((= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9747 (resolution :clauses (.c9737 .c9746) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9748 (resolution :clauses (.c9726 .c9747) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9749 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c9750 (resolution :clauses (.c9748 .c9749) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)))))
(set .c9751 (resolution :clauses (.c9725 .c9750) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c_0) c_2) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c9752 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))))))
(set .c9753 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)))))
(set .c9754 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c9755 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c9756 (resolution :clauses (.c9754 .c9755) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9757 (resolution :clauses (.c9753 .c9756) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9758 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9759 (resolution :clauses (.c9757 .c9758) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9760 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c9761 (resolution :clauses (.c9759 .c9760) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9762 (resolution :clauses (.c9752 .c9761) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9763 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9764 (resolution :clauses (.c9762 .c9763) :conclusion ((= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9765 (resolution :clauses (.c9751 .c9764) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c_0) c_2) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c9766 (resolution :clauses (.c9765 .c34 .c164 .c169) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= (f3 c_0 c_0) c_2) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))))))
(set .c9767 (resolution :clauses (.c9766 .c226 .c9670) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 (f3 c_2 c5))) (not (= c5 c_2)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)) (not (= c_0 c7)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (= (f3 c_0 c_0) c_0) (= (f3 c_2 c5) c_2))))
(set .c9768 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c5 c_1))))
(set .c9769 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1)))))
(set .c9770 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c9771 (resolution :clauses (.c9769 .c9770) :conclusion ((not (= (f1 c_1) c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1)))))
(set .c9772 (resolution :clauses (.c9768 .c9771) :conclusion ((not (= c5 c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c5 c_1) (not (= (f1 c_1) c_1)))))
(set .c9773 (resolution :clauses (.c9772 .c168) :conclusion ((not (= c5 c_2)) (not (= (f3 c_1 c_1) c_2)) (= c5 c_1) (not (= (f1 c_1) c_1)))))
(set .c9774 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) c_1)) (= c5 c_1))))
(set .c9775 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c4 c_1))))
(set .c9776 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c9777 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c9778 (resolution :clauses (.c9776 .c9777) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9779 (resolution :clauses (.c9775 .c9778) :conclusion ((not (= c4 c_0)) (not (= c_0 (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c4 c_1) (not (= c5 c_2)))))
(set .c9780 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c9781 (resolution :clauses (.c9779 .c9780) :conclusion ((not (= c4 c_0)) (not (= c_0 (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c4 c_1) (not (= c5 c_2)))))
(set .c9782 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9783 (resolution :clauses (.c9781 .c9782) :conclusion ((not (= c4 c_0)) (not (= c_0 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c4 c_1) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9784 (resolution :clauses (.c9783 .c164) :conclusion ((not (= c4 c_0)) (not (= c_0 (f1 c_2))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c4 c_1) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9785 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_0 c4) c_2)) (not (= (f3 c_0 c4) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_1)) (= c5 c_1))))
(set .c9786 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c4 c_0)) (= (f3 c_0 c4) (f3 c_0 c_0)))))
(set .c9787 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c9788 (resolution :clauses (.c9786 .c9787) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c4) (f3 c_0 c_0)))))
(set .c9789 (resolution :clauses (.c9785 .c9788) :conclusion ((not (= c5 c_2)) (not (= (f3 c_0 c4) c_2)) (not (= (f3 c_0 c_0) c_1)) (= c5 c_1) (not (= c4 c_0)))))
(set .c9790 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f1 c_0) c_2)) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c5 c_1))))
(set .c9791 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9792 (resolution :clauses (.c9790 .c9791) :conclusion ((not (= c5 c_2)) (not (= (f1 c_0) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c5 c_1) (not (= c_0 c7)))))
(set .c9793 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c9794 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c9795 (resolution :clauses (.c9793 .c9794) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9796 (resolution :clauses (.c9792 .c9795) :conclusion ((not (= c5 c_2)) (not (= (f1 c_0) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c5 c_1) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9797 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c9798 (resolution :clauses (.c9796 .c9797) :conclusion ((not (= c5 c_2)) (not (= (f1 c_0) c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c5 c_1) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9799 (resolution :clauses (.c9798 .c166) :conclusion ((not (= c5 c_2)) (not (= (f1 c_0) c_2)) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c5 c_1) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9800 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= (f3 c_2 c_0) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)))))
(set .c9801 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 c_0)) (= (f3 c_2 c_0) (f3 c_2 c4)))))
(set .c9802 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9803 (resolution :clauses (.c9801 .c9802) :conclusion ((not (= c4 c_0)) (= (f3 c_2 c_0) (f3 c_2 c4)))))
(set .c9804 (resolution :clauses (.c9800 .c9803) :conclusion ((not (= (f3 c_2 c_0) c_2)) (= c_2 (f3 c_2 c4)) (not (= c4 c_0)))))
(set .c9805 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 c_0) (f3 c_2 c4))) (= c_0 (f3 c_2 c4)))))
(set .c9806 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 c_0)) (= (f3 c_2 c_0) (f3 c_2 c4)))))
(set .c9807 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9808 (resolution :clauses (.c9806 .c9807) :conclusion ((not (= c4 c_0)) (= (f3 c_2 c_0) (f3 c_2 c4)))))
(set .c9809 (resolution :clauses (.c9805 .c9808) :conclusion ((not (= (f3 c_2 c_0) c_0)) (= c_0 (f3 c_2 c4)) (not (= c4 c_0)))))
(set .c9810 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)))))
(set .c9811 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 c_0)) (= (f3 c_2 c_0) (f3 c_2 c4)))))
(set .c9812 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9813 (resolution :clauses (.c9811 .c9812) :conclusion ((not (= c4 c_0)) (= (f3 c_2 c_0) (f3 c_2 c4)))))
(set .c9814 (resolution :clauses (.c9810 .c9813) :conclusion ((not (= (f3 c_2 c_0) c_1)) (= c_1 (f3 c_2 c4)) (not (= c4 c_0)))))
(set .c9815 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1))))
(set .c9816 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)))))
(set .c9817 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9818 (resolution :clauses (.c9816 .c9817) :conclusion ((not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)))))
(set .c9819 (resolution :clauses (.c9815 .c9818) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= (f3 c_2 c_0) c_2)))))
(set .c9820 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c9821 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c9822 (resolution :clauses (.c9820 .c9821) :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c9823 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)))))
(set .c9824 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c9825 (resolution :clauses (.c9823 .c9824) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c4 c_0)))))
(set .c9826 (resolution :clauses (.c9822 .c9825) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_0)))))
(set .c9827 (resolution :clauses (.c9819 .c9826) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= (f3 c_2 c_0) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c9828 (resolution :clauses (.c9827 .c31) :conclusion ((not (= c4 c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= (f3 c_2 c_0) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c9829 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 c_0))))
(set .c9830 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))))))
(set .c9831 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)))))
(set .c9832 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c9833 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c9834 (resolution :clauses (.c9832 .c9833) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9835 (resolution :clauses (.c9831 .c9834) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9836 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9837 (resolution :clauses (.c9835 .c9836) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9838 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c9839 (resolution :clauses (.c9837 .c9838) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9840 (resolution :clauses (.c9830 .c9839) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9841 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9842 (resolution :clauses (.c9840 .c9841) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9843 (resolution :clauses (.c9829 .c9842) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 c_0) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_0)) (not (= c6 c_2)))))
(set .c9844 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c9845 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c9846 (resolution :clauses (.c9844 .c9845) :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c9847 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)))))
(set .c9848 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c9849 (resolution :clauses (.c9847 .c9848) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c4 c_0)))))
(set .c9850 (resolution :clauses (.c9846 .c9849) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_0)))))
(set .c9851 (resolution :clauses (.c9843 .c9850) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 c_0) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_0)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c9852 (resolution :clauses (.c9851 .c31 .c164 .c169) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (= c5 c_0) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= c4 c_0)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c9853 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2))))
(set .c9854 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)))))
(set .c9855 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c9856 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c9857 (resolution :clauses (.c9855 .c9856) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c5 c_2)))))
(set .c9858 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9859 (resolution :clauses (.c9857 .c9858) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c9860 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c9861 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c9862 (resolution :clauses (.c9860 .c9861) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9863 (resolution :clauses (.c9859 .c9862) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9864 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c9865 (resolution :clauses (.c9863 .c9864) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9866 (resolution :clauses (.c9854 .c9865) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9867 (resolution :clauses (.c9853 .c9866) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9868 (resolution :clauses (.c9867 .c166 .c8881 .c33) :conclusion ((= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_0 c7)) (not (= c4 c_0)))))
(set .c9869 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_0) (f1 c_0)))))
(set .c9870 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9871 (resolution :clauses (.c9869 .c9870) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)))))
(set .c9872 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c9873 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c9874 (resolution :clauses (.c9872 .c9873) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9875 (resolution :clauses (.c9871 .c9874) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9876 (resolution :clauses (.c9875 .c166) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9877 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_0) (f1 c_2)))))
(set .c9878 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c9879 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c9880 (resolution :clauses (.c9878 .c9879) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9881 (resolution :clauses (.c9877 .c9880) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9882 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9883 (resolution :clauses (.c9881 .c9882) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9884 (resolution :clauses (.c9883 .c164) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (= (f2 c_0) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9885 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)))))
(set .c9886 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c9887 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c9888 (resolution :clauses (.c9886 .c9887) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9889 (resolution :clauses (.c9885 .c9888) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9890 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9891 (resolution :clauses (.c9889 .c9890) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9892 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c9893 (resolution :clauses (.c9891 .c9892) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9894 (resolution :clauses (.c9893 .c164) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (= (f2 c4) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c9895 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_1)))))
(set .c9896 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9897 (resolution :clauses (.c9895 .c9896) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_1)) (not (= c_0 c7)))))
(set .c9898 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c9899 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c9900 (resolution :clauses (.c9898 .c9899) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9901 (resolution :clauses (.c9897 .c9900) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_1)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9902 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c9903 (resolution :clauses (.c9901 .c9902) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_1)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9904 (resolution :clauses (.c9903 .c166 .c8881) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_1)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c9905 (resolution :clauses (.c9852 .c238 .c9828 .c9809 .c242 .c8086 .c9767 .c9217 .c280 .c9868 .c5758 .c296 .c287 .c5993 .c252 .c9576 .c175 .c207 .c183 .c211 .c219 .c9876 .c9884 .c9894 .c9904 .c223 .c15 .c9492 .c9478 .c8881 .c8880) :conclusion ((not (= c5 c_2)) (= c5 c_0) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)) (not (= c6 c_2)) (= c4 c_1) (not (= c_0 c7)))))
(set .c9906 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)))))
(set .c9907 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c9908 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c9909 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c9910 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c9911 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c9912 (resolution :clauses (.c9910 .c9911) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c9913 (resolution :clauses (.c9909 .c9912) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c9914 (resolution :clauses (.c9908 .c9913) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c9915 (resolution :clauses (.c9907 .c9914) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c9916 (resolution :clauses (.c9906 .c9915) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c9917 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= c4 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)))))
(set .c9918 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c9919 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c9920 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c9921 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c9922 (resolution :clauses (.c9920 .c9921) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c9923 (resolution :clauses (.c9919 .c9922) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c9924 (resolution :clauses (.c9918 .c9923) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c9925 (resolution :clauses (.c9917 .c9924) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c9926 (resolution :clauses (.c9916 .c9925) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_2 (f3 c_2 c4)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)))))
(set .c9927 (resolution :clauses (.c9926 .c1739 .c34 .c8881 .c167) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= c_2 (f3 c_2 c4)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= c6 c_2)))))
(set .c9928 (resolution :clauses (.c9927 .c295 .c2949 .c8881) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_2))))))
(set .c9929 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 c7)) (= c6 c7))))
(set .c9930 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))))))
(set .c9931 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)))))
(set .c9932 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c9933 (resolution :clauses (.c9931 .c9932) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c5 c_1)))))
(set .c9934 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9935 (resolution :clauses (.c9933 .c9934) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c9936 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9937 (resolution :clauses (.c9935 .c9936) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9938 (resolution :clauses (.c9930 .c9937) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9939 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c9940 (resolution :clauses (.c9938 .c9939) :conclusion ((= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9941 (resolution :clauses (.c9929 .c9940) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 c7)) (= c6 c7) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c5 c_1)))))
(set .c9942 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0)))))
(set .c9943 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (= (f3 c_2 c_0) (f2 c_0)))))
(set .c9944 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c9945 (resolution :clauses (.c9943 .c9944) :conclusion ((not (= (f3 c_2 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (= (f3 c_2 c_0) (f2 c_0)) (not (= c4 c_0)))))
(set .c9946 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c9947 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c9948 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c9949 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c9950 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c9951 (resolution :clauses (.c9949 .c9950) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c9952 (resolution :clauses (.c9948 .c9951) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c9953 (resolution :clauses (.c9947 .c9952) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c9954 (resolution :clauses (.c9946 .c9953) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c9955 (resolution :clauses (.c9945 .c9954) :conclusion ((not (= (f3 c_2 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (= (f3 c_2 c_0) (f2 c_0)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c9956 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= c_0 (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c6 (f3 c4 c5))))))
(set .c9957 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c9958 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c9959 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c9960 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c9961 (resolution :clauses (.c9959 .c9960) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c9962 (resolution :clauses (.c9958 .c9961) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c9963 (resolution :clauses (.c9957 .c9962) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c9964 (resolution :clauses (.c9956 .c9963) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c9965 (resolution :clauses (.c9955 .c9964) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (= (f3 c_2 c_0) (f2 c_0)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)))))
(set .c9966 (resolution :clauses (.c9942 .c9965) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)))))
(set .c9967 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c9968 (resolution :clauses (.c9966 .c9967) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)))))
(set .c9969 (resolution :clauses (.c9941 .c9968) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 c7)) (= c6 c7) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c5 c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))))))
(set .c9970 (resolution :clauses (.c9969 .c1739 .c31 .c34 .c8881 .c164 .c166 .c167 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)))))
(set .c9971 (resolution :clauses (.c9970 .c226 .c9928 .c5758 .c287 .c5993 .c8881) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 c7)) (not (= (f1 c_1) c_1)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)) (not (= (f2 c4) (f1 c_2))))))
(set .c9972 (eq_transitive :conclusion ((not (= (f3 c_2 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1))))
(set .c9973 (eq_congruent :conclusion ((not (= (f2 c_1) c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c9974 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c9975 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c9976 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c9977 (resolution :clauses (.c9975 .c9976) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9978 (resolution :clauses (.c9974 .c9977) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9979 (resolution :clauses (.c9973 .c9978) :conclusion ((not (= (f2 c_1) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9980 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_1) c7))))
(set .c9981 (resolution :clauses (.c9979 .c9980) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)))))
(set .c9982 (resolution :clauses (.c9972 .c9981) :conclusion ((not (= (f3 c_2 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)))))
(set .c9983 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= c5 (f3 c4 c5))) (= (f3 c_2 c5) (f3 c6 (f3 c4 c5))))))
(set .c9984 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)))))
(set .c9985 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c9986 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c9987 (resolution :clauses (.c9985 .c9986) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9988 (resolution :clauses (.c9984 .c9987) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9989 (resolution :clauses (.c9983 .c9988) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c9990 (resolution :clauses (.c9982 .c9989) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9991 (resolution :clauses (.c9990 .c1739 .c32 .c34) :conclusion ((= (f3 c_2 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9992 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)))))
(set .c9993 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c9994 (resolution :clauses (.c9992 .c9993) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c5 c_1)))))
(set .c9995 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c9996 (resolution :clauses (.c9994 .c9995) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c9997 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c9998 (resolution :clauses (.c9996 .c9997) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c9999 (resolution :clauses (.c9998 .c164 .c8881 .c1739 .c166) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10000 (resolution :clauses (.c9991 .c276 .c5984 .c252 .c9971 .c9999 .c207 .c6226 .c6721 .c260 .c9905 .c8881 .c8880) :conclusion ((not (= c4 c_0)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_1))) (= c5 c_0) (= c4 c_1))))
(set .c10001 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 c_1 c5))) (not (= (f3 c_1 c_1) c_1)) (= (f3 c_1 c5) c_1))))
(set .c10002 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c10003 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c10004 (resolution :clauses (.c10002 .c10003) :conclusion ((not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c10005 (resolution :clauses (.c10001 .c10004) :conclusion ((not (= (f3 c_1 c_1) c_1)) (= (f3 c_1 c5) c_1) (not (= c5 c_1)))))
(set .c10006 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c4) (f3 c_1 (f3 c_1 c_1)))) (= c_2 (f3 c_1 c4)))))
(set .c10007 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))))))
(set .c10008 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c10009 (resolution :clauses (.c10007 .c10008) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c10010 (resolution :clauses (.c10006 .c10009) :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c4) (f3 c_1 (f3 c_1 c_1)))) (= c_2 (f3 c_1 c4)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c10011 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_1 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c10012 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_0 c_2) (f3 c_1 c_1)))))
(set .c10013 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c10014 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c10015 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c10016 (resolution :clauses (.c10014 .c10015) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c10017 (resolution :clauses (.c10013 .c10016) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10018 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10019 (resolution :clauses (.c10017 .c10018) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10020 (resolution :clauses (.c10012 .c10019) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_0 c_2) (f3 c_1 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10021 (resolution :clauses (.c10011 .c10020) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 (f3 c_1 c_1) c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10022 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c10023 (resolution :clauses (.c10021 .c10022) :conclusion ((= (f3 (f3 c_0 c_2) c_1) (f3 (f3 c_1 c_1) c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c_1 c_1) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10024 (resolution :clauses (.c10010 .c10023) :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c4) (f3 c_1 (f3 c_1 c_1)))) (= c_2 (f3 c_1 c4)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c10025 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 (f3 c_1 c_1))) (= (f3 c_1 c4) (f3 c_1 (f3 c_1 c_1))))))
(set .c10026 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c10027 (resolution :clauses (.c10025 .c10026) :conclusion ((not (= c4 (f3 c_1 c_1))) (= (f3 c_1 c4) (f3 c_1 (f3 c_1 c_1))))))
(set .c10028 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_1 c_1) c_2)) (= c4 (f3 c_1 c_1)))))
(set .c10029 (resolution :clauses (.c10027 .c10028) :conclusion ((= (f3 c_1 c4) (f3 c_1 (f3 c_1 c_1))) (not (= c4 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c10030 (resolution :clauses (.c10024 .c10029) :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_2 (f3 c_1 c4)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c10031 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))))))
(set .c10032 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c10033 (resolution :clauses (.c10031 .c10032) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c10034 (resolution :clauses (.c10030 .c10033) :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_2 (f3 c_1 c4)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c6 c_2)))))
(set .c10035 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1)))))
(set .c10036 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c10037 (resolution :clauses (.c10035 .c10036) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1)))))
(set .c10038 (resolution :clauses (.c10034 .c10037) :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= c_2 (f3 c_1 c4)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c10039 (resolution :clauses (.c10038 .c33 .c34 .c1742) :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (= c_2 (f3 c_1 c4)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c10040 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1))))
(set .c10041 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))))))
(set .c10042 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c10043 (resolution :clauses (.c10041 .c10042) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c10044 (resolution :clauses (.c10040 .c10043) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c10045 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))))))
(set .c10046 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c10047 (resolution :clauses (.c10045 .c10046) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c10048 (resolution :clauses (.c10044 .c10047) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)))))
(set .c10049 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c10050 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_2) (f2 c_1)))))
(set .c10051 (resolution :clauses (.c10049 .c10050) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c10052 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c10053 (resolution :clauses (.c10051 .c10052) :conclusion ((= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c10054 (resolution :clauses (.c10048 .c10053) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c10055 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c5 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c5)))))
(set .c10056 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c10057 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c10058 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c10059 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c10060 (resolution :clauses (.c10058 .c10059) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c10061 (resolution :clauses (.c10057 .c10060) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10062 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10063 (resolution :clauses (.c10061 .c10062) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10064 (resolution :clauses (.c10056 .c10063) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10065 (resolution :clauses (.c10055 .c10064) :conclusion ((not (= c5 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c5)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10066 (resolution :clauses (.c10054 .c10065) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c10067 (resolution :clauses (.c10066 .c1739 .c32 .c33 .c34) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= (f3 c_2 c5) c_1) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))))))
(set .c10068 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c_1 c_1) c_0)) (= c4 c_0))))
(set .c10069 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c10070 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10071 (resolution :clauses (.c10069 .c10070) :conclusion ((not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c10072 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)))))
(set .c10073 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))))))
(set .c10074 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c10075 (resolution :clauses (.c10073 .c10074) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c10076 (resolution :clauses (.c10072 .c10075) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c10077 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))))))
(set .c10078 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c10079 (resolution :clauses (.c10077 .c10078) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c10080 (resolution :clauses (.c10076 .c10079) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)))))
(set .c10081 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1)))))
(set .c10082 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c10083 (resolution :clauses (.c10081 .c10082) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1)))))
(set .c10084 (resolution :clauses (.c10080 .c10083) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c10085 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10086 (resolution :clauses (.c10084 .c10085) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c10087 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10088 (resolution :clauses (.c10086 .c10087) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c10089 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10090 (resolution :clauses (.c10088 .c10089) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c10091 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)))))
(set .c10092 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c10093 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c10094 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c10095 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c10096 (resolution :clauses (.c10094 .c10095) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c10097 (resolution :clauses (.c10093 .c10096) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10098 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10099 (resolution :clauses (.c10097 .c10098) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10100 (resolution :clauses (.c10092 .c10099) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10101 (resolution :clauses (.c10091 .c10100) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10102 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c10103 (resolution :clauses (.c10101 .c10102) :conclusion ((= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10104 (resolution :clauses (.c10090 .c10103) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c10105 (resolution :clauses (.c10071 .c10104) :conclusion ((= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c10106 (resolution :clauses (.c10068 .c10105) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c_1 c_1) c_0)) (= c4 c_0) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c10107 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1)))))
(set .c10108 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c10109 (resolution :clauses (.c10107 .c10108) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_1) (f3 (f3 c_2 c_2) c_1)))))
(set .c10110 (resolution :clauses (.c10106 .c10109) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) c_0)) (= c4 c_0) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c10111 (resolution :clauses (.c10110 .c1739 .c33 .c34 .c8881 .c164 .c166 .c169) :conclusion ((not (= c4 c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_1) c_0)) (= c4 c_0) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)) (not (= (f2 c4) (f1 c_1))))))
(set .c10112 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c4) c_2))))
(set .c10113 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c4 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c4)))))
(set .c10114 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c10115 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c10116 (resolution :clauses (.c10114 .c10115) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c10117 (resolution :clauses (.c10113 .c10116) :conclusion ((not (= c4 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c10118 (resolution :clauses (.c10112 .c10117) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c4) c_2) (not (= c4 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c10119 (resolution :clauses (.c10118 .c33) :conclusion ((= (f3 c_0 c4) c_2) (not (= c4 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c10120 (resolution :clauses (.c10111 .c234 .c10039 .c242 .c10067 .c10005 .c8081 .c295 .c289 .c10119 .c276 .c270 .c5984 .c8881) :conclusion ((not (= c4 c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= c4 c_0) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c10121 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) c_0)) (not (= c_0 c7)) (= c6 c7))))
(set .c10122 (resolution :clauses (.c10121 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) c_0)) (not (= c_0 c7)))))
(set .c10123 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_0 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1))))
(set .c10124 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c10125 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c10126 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c10127 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10128 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10129 (resolution :clauses (.c10127 .c10128) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10130 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10131 (resolution :clauses (.c10129 .c10130) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)))))
(set .c10132 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10133 (resolution :clauses (.c10131 .c10132) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10134 (resolution :clauses (.c10126 .c10133) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10135 (resolution :clauses (.c10125 .c10134) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10136 (resolution :clauses (.c10124 .c10135) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10137 (resolution :clauses (.c10123 .c10136) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_0 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= c6 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10138 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c7)) (not (= (f3 c4 c5) c_2)) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_0 c_0) c_2)))))
(set .c10139 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= c_0 c7)) (= (f3 c_0 c_0) c7))))
(set .c10140 (resolution :clauses (.c10138 .c10139) :conclusion ((not (= (f3 c4 c5) c_2)) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) c_0)) (not (= c_0 c7)))))
(set .c10141 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c10142 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c10143 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10144 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10145 (resolution :clauses (.c10143 .c10144) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10146 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10147 (resolution :clauses (.c10145 .c10146) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)))))
(set .c10148 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10149 (resolution :clauses (.c10147 .c10148) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10150 (resolution :clauses (.c10142 .c10149) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10151 (resolution :clauses (.c10141 .c10150) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10152 (resolution :clauses (.c10140 .c10151) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) c_0)) (not (= c_0 c7)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c10153 (resolution :clauses (.c10137 .c10152) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= c6 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_0)))))
(set .c10154 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_2) (f3 c_2 c_2))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f3 c_0 c_2))))))
(set .c10155 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10156 (resolution :clauses (.c10154 .c10155) :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_2))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f3 c_0 c_2))))))
(set .c10157 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_2 c_2)))))
(set .c10158 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c10159 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c10160 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c10161 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10162 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10163 (resolution :clauses (.c10161 .c10162) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10164 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10165 (resolution :clauses (.c10163 .c10164) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)))))
(set .c10166 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10167 (resolution :clauses (.c10165 .c10166) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10168 (resolution :clauses (.c10160 .c10167) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10169 (resolution :clauses (.c10159 .c10168) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10170 (resolution :clauses (.c10158 .c10169) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10171 (resolution :clauses (.c10157 .c10170) :conclusion ((not (= (f3 c_0 c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10172 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c4 c5) c_2)) (= (f3 c_0 c_2) (f3 c7 (f3 c4 c5))))))
(set .c10173 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c10174 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c10175 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10176 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10177 (resolution :clauses (.c10175 .c10176) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10178 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10179 (resolution :clauses (.c10177 .c10178) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)))))
(set .c10180 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10181 (resolution :clauses (.c10179 .c10180) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10182 (resolution :clauses (.c10174 .c10181) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10183 (resolution :clauses (.c10173 .c10182) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10184 (resolution :clauses (.c10172 .c10183) :conclusion ((not (= c_0 c7)) (= (f3 c_0 c_2) (f3 c7 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c10185 (resolution :clauses (.c10171 .c10184) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10186 (resolution :clauses (.c10156 .c10185) :conclusion ((= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f3 c_0 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10187 (resolution :clauses (.c10153 .c10186) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= c6 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_0)))))
(set .c10188 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)))))
(set .c10189 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_2 c_2)))))
(set .c10190 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c10191 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c10192 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c10193 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10194 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10195 (resolution :clauses (.c10193 .c10194) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10196 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10197 (resolution :clauses (.c10195 .c10196) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)))))
(set .c10198 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10199 (resolution :clauses (.c10197 .c10198) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10200 (resolution :clauses (.c10192 .c10199) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10201 (resolution :clauses (.c10191 .c10200) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10202 (resolution :clauses (.c10190 .c10201) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10203 (resolution :clauses (.c10189 .c10202) :conclusion ((not (= (f3 c_0 c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10204 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c4 c5) c_2)) (= (f3 c_0 c_2) (f3 c7 (f3 c4 c5))))))
(set .c10205 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c10206 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c10207 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10208 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10209 (resolution :clauses (.c10207 .c10208) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10210 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10211 (resolution :clauses (.c10209 .c10210) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)))))
(set .c10212 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10213 (resolution :clauses (.c10211 .c10212) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10214 (resolution :clauses (.c10206 .c10213) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10215 (resolution :clauses (.c10205 .c10214) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10216 (resolution :clauses (.c10204 .c10215) :conclusion ((not (= c_0 c7)) (= (f3 c_0 c_2) (f3 c7 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c10217 (resolution :clauses (.c10203 .c10216) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10218 (resolution :clauses (.c10188 .c10217) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10219 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10220 (resolution :clauses (.c10218 .c10219) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10221 (resolution :clauses (.c10187 .c10220) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= c6 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_0)))))
(set .c10222 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))))))
(set .c10223 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c_2 c_2)))))
(set .c10224 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10225 (resolution :clauses (.c10223 .c10224) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c_2 c_2)) (not (= c5 c_1)))))
(set .c10226 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10227 (resolution :clauses (.c10225 .c10226) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c_2 c_2)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c10228 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10229 (resolution :clauses (.c10227 .c10228) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c_2 c_2)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10230 (resolution :clauses (.c10222 .c10229) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10231 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10232 (resolution :clauses (.c10230 .c10231) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10233 (resolution :clauses (.c10221 .c10232) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= c6 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_0)))))
(set .c10234 (resolution :clauses (.c10233 .c1739 .c34 .c8881 .c164 .c166 .c169) :conclusion ((not (= c4 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= c6 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_0)))))
(set .c10235 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0))))
(set .c10236 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c10237 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c10238 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c10239 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10240 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10241 (resolution :clauses (.c10239 .c10240) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10242 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10243 (resolution :clauses (.c10241 .c10242) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)))))
(set .c10244 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10245 (resolution :clauses (.c10243 .c10244) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10246 (resolution :clauses (.c10238 .c10245) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10247 (resolution :clauses (.c10237 .c10246) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10248 (resolution :clauses (.c10236 .c10247) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10249 (resolution :clauses (.c10235 .c10248) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10250 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4)))))
(set .c10251 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= c4 (f3 c4 c5)))))
(set .c10252 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c10253 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10254 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10255 (resolution :clauses (.c10253 .c10254) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10256 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10257 (resolution :clauses (.c10255 .c10256) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)))))
(set .c10258 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10259 (resolution :clauses (.c10257 .c10258) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10260 (resolution :clauses (.c10252 .c10259) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10261 (resolution :clauses (.c10251 .c10260) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10262 (resolution :clauses (.c10250 .c10261) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c10263 (resolution :clauses (.c10249 .c10262) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10264 (resolution :clauses (.c10263 .c169 .c34 .c8881 .c164 .c166 .c1739) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= c_0 c7)))))
(set .c10265 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c_2 c4))) (= c_0 (f3 c_2 c4)))))
(set .c10266 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 c_2)) (= (f3 c_2 c_2) (f3 c_2 c4)))))
(set .c10267 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10268 (resolution :clauses (.c10266 .c10267) :conclusion ((not (= c4 c_2)) (= (f3 c_2 c_2) (f3 c_2 c4)))))
(set .c10269 (resolution :clauses (.c10265 .c10268) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c_2 c4)) (not (= c4 c_2)))))
(set .c10270 (resolution :clauses (.c293 .c10264 .c10269 .c8881) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= c_0 c7)))))
(set .c10271 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c10272 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))))))
(set .c10273 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c_2 c_2)))))
(set .c10274 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10275 (resolution :clauses (.c10273 .c10274) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c_2 c_2)) (not (= c5 c_1)))))
(set .c10276 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10277 (resolution :clauses (.c10275 .c10276) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c_2 c_2)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c10278 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10279 (resolution :clauses (.c10277 .c10278) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c_2 c_2)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10280 (resolution :clauses (.c10272 .c10279) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10281 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10282 (resolution :clauses (.c10280 .c10281) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10283 (resolution :clauses (.c10271 .c10282) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_1)))))
(set .c10284 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)))))
(set .c10285 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_2 c_2)))))
(set .c10286 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c10287 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c10288 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c10289 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10290 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10291 (resolution :clauses (.c10289 .c10290) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10292 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10293 (resolution :clauses (.c10291 .c10292) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)))))
(set .c10294 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10295 (resolution :clauses (.c10293 .c10294) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10296 (resolution :clauses (.c10288 .c10295) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10297 (resolution :clauses (.c10287 .c10296) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10298 (resolution :clauses (.c10286 .c10297) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10299 (resolution :clauses (.c10285 .c10298) :conclusion ((not (= (f3 c_0 c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10300 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c4 c5) c_2)) (= (f3 c_0 c_2) (f3 c7 (f3 c4 c5))))))
(set .c10301 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c10302 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c10303 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10304 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10305 (resolution :clauses (.c10303 .c10304) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10306 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10307 (resolution :clauses (.c10305 .c10306) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)))))
(set .c10308 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10309 (resolution :clauses (.c10307 .c10308) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10310 (resolution :clauses (.c10302 .c10309) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10311 (resolution :clauses (.c10301 .c10310) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10312 (resolution :clauses (.c10300 .c10311) :conclusion ((not (= c_0 c7)) (= (f3 c_0 c_2) (f3 c7 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c10313 (resolution :clauses (.c10299 .c10312) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10314 (resolution :clauses (.c10284 .c10313) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10315 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10316 (resolution :clauses (.c10314 .c10315) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)))))
(set .c10317 (resolution :clauses (.c10283 .c10316) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c4 c_2)))))
(set .c10318 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_2 c_2))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0))))))
(set .c10319 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10320 (resolution :clauses (.c10318 .c10319) :conclusion ((not (= (f1 c_0) (f3 c_2 c_2))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0))))))
(set .c10321 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c_2 c_2)))))
(set .c10322 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10323 (resolution :clauses (.c10321 .c10322) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c_2 c_2)) (not (= c5 c_1)))))
(set .c10324 (resolution :clauses (.c10320 .c10323) :conclusion ((= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_1)))))
(set .c10325 (resolution :clauses (.c10317 .c10324) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c4 c_2)))))
(set .c10326 (resolution :clauses (.c10325 .c1739 .c34 .c8881 .c164 .c166 .c167 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= c_0 c7)) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_1)) (not (= c4 c_2)))))
(set .c10327 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_2) (f1 c_2)))))
(set .c10328 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10329 (resolution :clauses (.c10327 .c10328) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c5 c_1)))))
(set .c10330 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10331 (resolution :clauses (.c10329 .c10330) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c10332 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10333 (resolution :clauses (.c10331 .c10332) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10334 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c10335 (resolution :clauses (.c10333 .c10334) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c4 c_2)))))
(set .c10336 (resolution :clauses (.c10335 .c166 .c8881 .c164 .c1739) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c_2) (f1 c_2)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c4 c_2)))))
(set .c10337 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_2) (f1 c_0)))))
(set .c10338 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c10339 (resolution :clauses (.c10337 .c10338) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_2) (f1 c_0)) (not (= c5 c_1)))))
(set .c10340 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c10341 (resolution :clauses (.c10339 .c10340) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_2) (f1 c_0)) (not (= c5 c_1)) (not (= c4 c_2)))))
(set .c10342 (resolution :clauses (.c10341 .c1739 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c_2) (f1 c_0)) (not (= c5 c_1)) (not (= c4 c_2)))))
(set .c10343 (resolution :clauses (.c10326 .c242 .c10270 .c8081 .c292 .c8152 .c252 .c10120 .c221 .c223 .c185 .c187 .c10336 .c10342 .c8255 .c9999 .c8880) :conclusion ((not (= c6 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c4 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (= c4 c_0))))
(set .c10344 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c10345 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c10346 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c10347 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c10348 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c10349 (resolution :clauses (.c10347 .c10348) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10350 (resolution :clauses (.c10346 .c10349) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10351 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c10352 (resolution :clauses (.c10350 .c10351) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10353 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10354 (resolution :clauses (.c10352 .c10353) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= c_0 c7)))))
(set .c10355 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10356 (resolution :clauses (.c10354 .c10355) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10357 (resolution :clauses (.c10345 .c10356) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= c_0 c7)))))
(set .c10358 (resolution :clauses (.c10344 .c10357) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10359 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c10360 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c10361 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c10362 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c10363 (resolution :clauses (.c10361 .c10362) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10364 (resolution :clauses (.c10360 .c10363) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10365 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c10366 (resolution :clauses (.c10364 .c10365) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10367 (resolution :clauses (.c10359 .c10366) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10368 (resolution :clauses (.c10358 .c10367) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10369 (resolution :clauses (.c10368 .c34 .c8881 .c164 .c166 .c167 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= c_0 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10370 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2))))
(set .c10371 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c10372 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c10373 (resolution :clauses (.c10371 .c10372) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10374 (resolution :clauses (.c10370 .c10373) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10375 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c10376 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c10377 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c10378 (resolution :clauses (.c10376 .c10377) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10379 (resolution :clauses (.c10375 .c10378) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10380 (resolution :clauses (.c10374 .c10379) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c_0 (f3 c_2 c_2))))))
(set .c10381 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4)))))
(set .c10382 (resolution :clauses (.c10380 .c10381) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c_0 (f3 c_2 c_2))))))
(set .c10383 (resolution :clauses (.c10382 .c34) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c_0 (f3 c_2 c_2))))))
(set .c10384 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2))))
(set .c10385 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_2))))))
(set .c10386 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c10387 (resolution :clauses (.c10385 .c10386) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10388 (resolution :clauses (.c10384 .c10387) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10389 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2)))))
(set .c10390 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c10391 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c10392 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10393 (resolution :clauses (.c10391 .c10392) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c10394 (resolution :clauses (.c10390 .c10393) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c10395 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c10396 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10397 (resolution :clauses (.c10395 .c10396) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c10398 (resolution :clauses (.c10394 .c10397) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c10399 (resolution :clauses (.c10389 .c10398) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c10400 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10401 (resolution :clauses (.c10399 .c10400) :conclusion ((= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c10402 (resolution :clauses (.c10388 .c10401) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c10403 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_2) (f1 c_2))) (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 (f1 c_2))))))
(set .c10404 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_0 c_2) (f1 c_2)))))
(set .c10405 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c10406 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c10407 (resolution :clauses (.c10405 .c10406) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10408 (resolution :clauses (.c10404 .c10407) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_0 c_2) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10409 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10410 (resolution :clauses (.c10408 .c10409) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_0 c_2) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= c_0 c7)))))
(set .c10411 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10412 (resolution :clauses (.c10410 .c10411) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_0 c_2) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10413 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c10414 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c10415 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c10416 (resolution :clauses (.c10414 .c10415) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10417 (resolution :clauses (.c10413 .c10416) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10418 (resolution :clauses (.c10412 .c10417) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_0 c_2) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c10419 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c10420 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c10421 (resolution :clauses (.c10419 .c10420) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10422 (resolution :clauses (.c10418 .c10421) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_0 c_2) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c10423 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c10424 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10425 (resolution :clauses (.c10423 .c10424) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c10426 (resolution :clauses (.c10422 .c10425) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_0 c_2) (f1 c_2)) (not (= c5 c_2)) (not (= c4 c_2)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c10427 (resolution :clauses (.c10403 .c10426) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 (f1 c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c5 c_2)) (not (= c4 c_2)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c10428 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10429 (resolution :clauses (.c10427 .c10428) :conclusion ((= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 (f1 c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c5 c_2)) (not (= c4 c_2)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c10430 (resolution :clauses (.c10402 .c10429) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c10431 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c10432 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c10433 (resolution :clauses (.c10431 .c10432) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10434 (resolution :clauses (.c10430 .c10433) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c10435 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4)))))
(set .c10436 (resolution :clauses (.c10434 .c10435) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c10437 (resolution :clauses (.c10436 .c34 .c8881 .c164 .c166 .c169) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (= (f3 c_0 c4) c_2) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c6 c_2)))))
(set .c10438 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c10439 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c10440 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c10441 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c10442 (resolution :clauses (.c10440 .c10441) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10443 (resolution :clauses (.c10439 .c10442) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10444 (resolution :clauses (.c10438 .c10443) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10445 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c10446 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c10447 (resolution :clauses (.c10445 .c10446) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10448 (resolution :clauses (.c10444 .c10447) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c10449 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5)))))
(set .c10450 (resolution :clauses (.c10448 .c10449) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c10451 (resolution :clauses (.c10450 .c34) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_0 (f3 c_0 c5)) (not (= c_0 c7)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c10452 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_0) (f1 c_2)))))
(set .c10453 (eq_congruent :conclusion ((not (= c_0 (f3 c4 c5))) (= (f2 c_0) (f2 (f3 c4 c5))))))
(set .c10454 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c10455 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c10456 (resolution :clauses (.c10454 .c10455) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10457 (resolution :clauses (.c10453 .c10456) :conclusion ((= (f2 c_0) (f2 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10458 (resolution :clauses (.c10452 .c10457) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10459 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10460 (resolution :clauses (.c10458 .c10459) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c10461 (resolution :clauses (.c10460 .c164) :conclusion ((= (f2 c_0) (f1 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c10462 (resolution :clauses (.c10451 .c226 .c10437 .c10383 .c211 .c10461 .c266 .c8086 .c242 .c10369 .c8081 .c289 .c292 .c8152 .c8881) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c6 c_2)) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f1 c_0))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))))))
(set .c10463 (resolution :clauses (.c279 .c8072 .c9454 .c242 .c236 .c10451 .c9459 .c266 .c272) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= c5 c_2)) (= (f3 c_2 c_2) c_2) (= (f3 c_1 c_2) c_2) (not (= (f3 c_0 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_2 c5))) (not (= (f2 c4) (f1 c_1))))))
(set .c10464 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1))))
(set .c10465 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_2))))))
(set .c10466 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c10467 (resolution :clauses (.c10465 .c10466) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10468 (resolution :clauses (.c10464 .c10467) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10469 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)))))
(set .c10470 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c10471 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c10472 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c10473 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c10474 (resolution :clauses (.c10472 .c10473) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c10475 (resolution :clauses (.c10471 .c10474) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10476 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10477 (resolution :clauses (.c10475 .c10476) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10478 (resolution :clauses (.c10470 .c10477) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10479 (resolution :clauses (.c10469 .c10478) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10480 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10481 (resolution :clauses (.c10479 .c10480) :conclusion ((= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10482 (resolution :clauses (.c10468 .c10481) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c10483 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c10484 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c10485 (resolution :clauses (.c10483 .c10484) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c10486 (resolution :clauses (.c10482 .c10485) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c6 c_2)))))
(set .c10487 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_1 c5)))))
(set .c10488 (resolution :clauses (.c10486 .c10487) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c6 c_2)))))
(set .c10489 (resolution :clauses (.c10488 .c33 .c34) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c6 c_2)))))
(set .c10490 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 c_0 c_0) c_0))))
(set .c10491 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_0)) (= (f3 c_0 c_0) (f3 c_0 (f1 c_0))))))
(set .c10492 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10493 (resolution :clauses (.c10491 .c10492) :conclusion ((not (= (f1 c_0) c_0)) (= (f3 c_0 c_0) (f3 c_0 (f1 c_0))))))
(set .c10494 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0))))
(set .c10495 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c10496 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c10497 (resolution :clauses (.c10495 .c10496) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10498 (resolution :clauses (.c10494 .c10497) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f1 c_0) c_0) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10499 (resolution :clauses (.c10493 .c10498) :conclusion ((= (f3 c_0 c_0) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10500 (resolution :clauses (.c10490 .c10499) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= (f3 c_0 c_0) c_0) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10501 (resolution :clauses (.c10500 .c167 .c8881) :conclusion ((= (f3 c_0 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10502 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2))))
(set .c10503 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c5)))))
(set .c10504 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c10505 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c10506 (resolution :clauses (.c10504 .c10505) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c10507 (resolution :clauses (.c10503 .c10506) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c5)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10508 (resolution :clauses (.c10502 .c10507) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10509 (resolution :clauses (.c10508 .c33) :conclusion ((= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c10510 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)))))
(set .c10511 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c10512 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= c4 c_2)) (= c5 c4))))
(set .c10513 (resolution :clauses (.c10511 .c10512) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10514 (resolution :clauses (.c10510 .c10513) :conclusion ((not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10515 (resolution :clauses (.c10514 .c8881) :conclusion ((= (f2 c4) (f1 c_0)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c10516 (resolution :clauses (.c10489 .c273 .c8072 .c242 .c8086 .c10463 .c9464 .c271 .c10501 .c10509 .c8081 .c295 .c10119 .c252 .c10462 .c10515 .c223 .c187 .c8188 .c8183 .c9492 .c9478 .c260 .c10343 .c258 .c10000 .c9501 .c8881 .c8880) :conclusion ((not (= c_0 c7)) (not (= (f2 c4) (f1 c_1))) (not (= c6 c_2)) (not (= (f2 c5) (f1 c_2))) (= c5 c_0))))
(set .c10517 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)))))
(set .c10518 (eq_congruent :conclusion ((not (= (f2 c_2) c7)) (not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5))))))
(set .c10519 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_2) c7))))
(set .c10520 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c10521 (resolution :clauses (.c10519 .c10520) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_2) c7) (not (= c4 c_2)))))
(set .c10522 (resolution :clauses (.c10518 .c10521) :conclusion ((not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_2)))))
(set .c10523 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c10524 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c10525 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10526 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c10527 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c10528 (resolution :clauses (.c10526 .c10527) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10529 (resolution :clauses (.c10525 .c10528) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c4 c_2)))))
(set .c10530 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10531 (resolution :clauses (.c10529 .c10530) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c10532 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c10533 (resolution :clauses (.c10531 .c10532) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c10534 (resolution :clauses (.c10524 .c10533) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c10535 (resolution :clauses (.c10523 .c10534) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c10536 (resolution :clauses (.c10522 .c10535) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_0)) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c10537 (resolution :clauses (.c10517 .c10536) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_0)) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c10538 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= c4 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)))))
(set .c10539 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= c4 (f3 c4 c5)))))
(set .c10540 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c10541 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c10542 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c10543 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c10544 (resolution :clauses (.c10542 .c10543) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10545 (resolution :clauses (.c10541 .c10544) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c4 c_2)))))
(set .c10546 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10547 (resolution :clauses (.c10545 .c10546) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c10548 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c10549 (resolution :clauses (.c10547 .c10548) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c10550 (resolution :clauses (.c10540 .c10549) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c10551 (resolution :clauses (.c10539 .c10550) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c10552 (resolution :clauses (.c10538 .c10551) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c10553 (resolution :clauses (.c10537 .c10552) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_2 (f3 c_2 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_0)) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c10554 (resolution :clauses (.c10553 .c33 .c34 .c164 .c169) :conclusion ((= c_2 (f3 c_2 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= c6 c_2)))))
(set .c10555 (resolution :clauses (.c10554 .c295 .c10119 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_2))))))
(set .c10556 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (= c_0 (f3 c_2 c_2)))))
(set .c10557 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c10558 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10559 (resolution :clauses (.c10557 .c10558) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c10560 (resolution :clauses (.c10556 .c10559) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_2 c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c10561 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c10562 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c10563 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_2) (f3 c_0 (f3 c_0 c_0))))))
(set .c10564 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10565 (resolution :clauses (.c10563 .c10564) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_2) (f3 c_0 (f3 c_0 c_0))))))
(set .c10566 (resolution :clauses (.c10562 .c10565) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= (f3 c_0 c_0) c_2)))))
(set .c10567 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c10568 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10569 (resolution :clauses (.c10567 .c10568) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c10570 (resolution :clauses (.c10566 .c10569) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= (f3 c_0 c_0) c_2)))))
(set .c10571 (resolution :clauses (.c10561 .c10570) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)))))
(set .c10572 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10573 (resolution :clauses (.c10571 .c10572) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)))))
(set .c10574 (resolution :clauses (.c10560 .c10573) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))))))
(set .c10575 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c10576 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c10577 (resolution :clauses (.c10575 .c10576) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10578 (resolution :clauses (.c10574 .c10577) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10579 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c10580 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c10581 (resolution :clauses (.c10579 .c10580) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10582 (resolution :clauses (.c10578 .c10581) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c10583 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c10584 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10585 (resolution :clauses (.c10583 .c10584) :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c10586 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)))))
(set .c10587 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c10588 (resolution :clauses (.c10586 .c10587) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c5 c_0)))))
(set .c10589 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10590 (resolution :clauses (.c10588 .c10589) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c10591 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c10592 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c10593 (resolution :clauses (.c10591 .c10592) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10594 (resolution :clauses (.c10590 .c10593) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= c4 c_2)))))
(set .c10595 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c10596 (resolution :clauses (.c10594 .c10595) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= c4 c_2)))))
(set .c10597 (resolution :clauses (.c10585 .c10596) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= c4 c_2)))))
(set .c10598 (resolution :clauses (.c10582 .c10597) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c10599 (resolution :clauses (.c10598 .c31 .c34 .c8881 .c166) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c10600 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (= c_0 c_1))))
(set .c10601 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)))))
(set .c10602 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 c5))) (not (= (f3 c_2 c5) c_2)) (= (f3 c_2 c_0) c_2))))
(set .c10603 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c_2 c5)))))
(set .c10604 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10605 (resolution :clauses (.c10603 .c10604) :conclusion ((not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c_2 c5)))))
(set .c10606 (resolution :clauses (.c10602 .c10605) :conclusion ((not (= (f3 c_2 c5) c_2)) (= (f3 c_2 c_0) c_2) (not (= c5 c_0)))))
(set .c10607 (resolution :clauses (.c10601 .c10606) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)) (not (= (f3 c_2 c5) c_2)) (not (= c5 c_0)))))
(set .c10608 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10609 (resolution :clauses (.c10607 .c10608) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)) (not (= (f3 c_2 c5) c_2)) (not (= c5 c_0)))))
(set .c10610 (resolution :clauses (.c10600 .c10609) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_2) c_1)) (= c_0 c_1) (not (= (f3 c_2 c5) c_2)) (not (= c5 c_0)))))
(set .c10611 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c10612 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10613 (resolution :clauses (.c10611 .c10612) :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c10614 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)))))
(set .c10615 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c10616 (resolution :clauses (.c10614 .c10615) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c5 c_0)))))
(set .c10617 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10618 (resolution :clauses (.c10616 .c10617) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c10619 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c10620 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c10621 (resolution :clauses (.c10619 .c10620) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10622 (resolution :clauses (.c10618 .c10621) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= c4 c_2)))))
(set .c10623 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c10624 (resolution :clauses (.c10622 .c10623) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= c4 c_2)))))
(set .c10625 (resolution :clauses (.c10613 .c10624) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= c4 c_2)))))
(set .c10626 (resolution :clauses (.c10610 .c10625) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_2) c_1)) (= c_0 c_1) (not (= (f3 c_2 c5) c_2)) (not (= c5 c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_0 c7)) (not (= c4 c_2)))))
(set .c10627 (resolution :clauses (.c10626 .c7 .c31 .c8881 .c166) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c5) c_2)) (not (= c5 c_0)) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_0 c7)) (not (= c4 c_2)))))
(set .c10628 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c4))) (not (= (f3 c_2 c_2) (f3 c_2 c4))) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c10629 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c10630 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10631 (resolution :clauses (.c10629 .c10630) :conclusion ((not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c10632 (resolution :clauses (.c10628 .c10631) :conclusion ((not (= c_0 (f3 c_2 c4))) (not (= (f3 c_2 c_2) (f3 c_2 c4))) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_0 c_0) c_1)) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)))))
(set .c10633 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 c_2)) (= (f3 c_2 c_2) (f3 c_2 c4)))))
(set .c10634 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10635 (resolution :clauses (.c10633 .c10634) :conclusion ((not (= c4 c_2)) (= (f3 c_2 c_2) (f3 c_2 c4)))))
(set .c10636 (resolution :clauses (.c10632 .c10635) :conclusion ((not (= c_0 (f3 c_2 c4))) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_0 c_0) c_1)) (= c_0 (f3 c_0 c5)) (not (= c5 c_0)) (not (= c4 c_2)))))
(set .c10637 (eq_transitive :conclusion ((not (= c_0 (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c_0 c_1))))
(set .c10638 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c10639 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c10640 (resolution :clauses (.c10638 .c10639) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10641 (resolution :clauses (.c10637 .c10640) :conclusion ((not (= c_0 (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c_0 c_1) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10642 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c10643 (resolution :clauses (.c10641 .c10642) :conclusion ((not (= c_0 (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c_0 c_1) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10644 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10645 (resolution :clauses (.c10643 .c10644) :conclusion ((not (= c_0 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= c_0 c_1) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c10646 (resolution :clauses (.c10645 .c7 .c164) :conclusion ((not (= c_0 (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c10647 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 c5))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 c5) c_2))))
(set .c10648 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c_2 c5)))))
(set .c10649 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10650 (resolution :clauses (.c10648 .c10649) :conclusion ((not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c_2 c5)))))
(set .c10651 (resolution :clauses (.c10647 .c10650) :conclusion ((not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= c5 c_0)))))
(set .c10652 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 c5))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_2 c5) c_1))))
(set .c10653 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c_2 c5)))))
(set .c10654 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10655 (resolution :clauses (.c10653 .c10654) :conclusion ((not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c_2 c5)))))
(set .c10656 (resolution :clauses (.c10652 .c10655) :conclusion ((not (= (f3 c_2 c_0) c_1)) (= (f3 c_2 c5) c_1) (not (= c5 c_0)))))
(set .c10657 (resolution :clauses (.c10656 .c238 .c10651 .c276 .c3308 .c226 .c10627 .c10599 .c242 .c8881) :conclusion ((not (= c5 c_0)) (= (f3 c_2 c_0) c_0) (not (= (f2 c4) (f1 c_2))) (= (f3 c_0 c_0) c_0) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_2 c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c6 c_2)) (= (f3 c_2 c_2) c_2))))
(set .c10658 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (= c_0 c_1))))
(set .c10659 (resolution :clauses (.c10658 .c7) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)))))
(set .c10660 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7))))
(set .c10661 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c10662 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10663 (resolution :clauses (.c10661 .c10662) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c10664 (resolution :clauses (.c10660 .c10663) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7))))
(set .c10665 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c10666 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c10667 (resolution :clauses (.c10665 .c10666) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10668 (resolution :clauses (.c10664 .c10667) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10669 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c10670 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c10671 (resolution :clauses (.c10669 .c10670) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10672 (resolution :clauses (.c10668 .c10671) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10673 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c10674 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c10675 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c10676 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10677 (resolution :clauses (.c10675 .c10676) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c10678 (resolution :clauses (.c10674 .c10677) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c10679 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c10680 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10681 (resolution :clauses (.c10679 .c10680) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c10682 (resolution :clauses (.c10678 .c10681) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c10683 (resolution :clauses (.c10673 .c10682) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c10684 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10685 (resolution :clauses (.c10683 .c10684) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c10686 (resolution :clauses (.c10672 .c10685) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c10687 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c10688 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10689 (resolution :clauses (.c10687 .c10688) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c10690 (resolution :clauses (.c10686 .c10689) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c10691 (resolution :clauses (.c10690 .c34 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c10692 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1))))
(set .c10693 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c10694 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10695 (resolution :clauses (.c10693 .c10694) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c10696 (resolution :clauses (.c10692 .c10695) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= c_0 (f3 c_2 c_2))))))
(set .c10697 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c10698 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c10699 (resolution :clauses (.c10697 .c10698) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10700 (resolution :clauses (.c10696 .c10699) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c5 c_0)))))
(set .c10701 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c10702 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c10703 (resolution :clauses (.c10701 .c10702) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10704 (resolution :clauses (.c10700 .c10703) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c10705 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c10706 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c10707 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c10708 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10709 (resolution :clauses (.c10707 .c10708) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c10710 (resolution :clauses (.c10706 .c10709) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c10711 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c10712 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10713 (resolution :clauses (.c10711 .c10712) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c10714 (resolution :clauses (.c10710 .c10713) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c10715 (resolution :clauses (.c10705 .c10714) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c10716 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10717 (resolution :clauses (.c10715 .c10716) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c10718 (resolution :clauses (.c10704 .c10717) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c10719 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))))))
(set .c10720 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)))))
(set .c10721 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c10722 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c10723 (resolution :clauses (.c10721 .c10722) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10724 (resolution :clauses (.c10720 .c10723) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10725 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10726 (resolution :clauses (.c10724 .c10725) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c10727 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c10728 (resolution :clauses (.c10726 .c10727) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c10729 (resolution :clauses (.c10719 .c10728) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c10730 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10731 (resolution :clauses (.c10729 .c10730) :conclusion ((= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c10732 (resolution :clauses (.c10718 .c10731) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c10733 (resolution :clauses (.c10732 .c34 .c164 .c169) :conclusion ((not (= c4 c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))))))
(set .c10734 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_2) (f1 c_0)))))
(set .c10735 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10736 (resolution :clauses (.c10734 .c10735) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_2) (f1 c_0)) (not (= c_0 c7)))))
(set .c10737 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c10738 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c10739 (resolution :clauses (.c10737 .c10738) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10740 (resolution :clauses (.c10736 .c10739) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_2) (f1 c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10741 (resolution :clauses (.c10740 .c166) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (= (f2 c_2) (f1 c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c10742 (resolution :clauses (.c10733 .c226 .c10691 .c10657 .c1344 .c2954 .c8081 .c272 .c269 .c292 .c8675 .c8152 .c252 .c10555 .c183 .c10741 .c219 .c223 .c8710 .c8700 .c8881 .c8880) :conclusion ((not (= c4 c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c4 c_1) (not (= c6 c_2)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c_0) (f1 c_2))))))
(set .c10743 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 c_2 c_0) c_1)) (= c4 c_1))))
(set .c10744 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c10745 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10746 (resolution :clauses (.c10744 .c10745) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c10747 (resolution :clauses (.c10743 .c10746) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= c4 c_1) (not (= (f3 c_0 c_0) c_2)))))
(set .c10748 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))))))
(set .c10749 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c10750 (resolution :clauses (.c10748 .c10749) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c10751 (resolution :clauses (.c10747 .c10750) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= c4 c_1) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c10752 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c10753 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c10754 (resolution :clauses (.c10752 .c10753) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c10755 (resolution :clauses (.c10751 .c10754) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= c4 c_1) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c10756 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0)))))
(set .c10757 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (= (f3 c_2 c_0) (f2 c_0)))))
(set .c10758 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c10759 (resolution :clauses (.c10757 .c10758) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (= (f3 c_2 c_0) (f2 c_0)) (not (= c4 c_0)))))
(set .c10760 (resolution :clauses (.c10756 .c10759) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0)) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)))))
(set .c10761 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10762 (resolution :clauses (.c10760 .c10761) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0)) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)))))
(set .c10763 (resolution :clauses (.c10755 .c10762) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= c4 c_1) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))))))
(set .c10764 (resolution :clauses (.c10763 .c31 .c34) :conclusion ((not (= c4 c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= c4 c_1) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))))))
(set .c10765 (resolution :clauses (.c10764 .c226 .c3308 .c267 .c10656) :conclusion ((not (= c4 c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= c4 c_1) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (= (f3 c_0 c_0) c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))))))
(set .c10766 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= (f3 c_2 c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c10767 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c10768 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10769 (resolution :clauses (.c10767 .c10768) :conclusion ((not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c10770 (resolution :clauses (.c10766 .c10769) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c10771 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c10772 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c10773 (resolution :clauses (.c10771 .c10772) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c10774 (resolution :clauses (.c10770 .c10773) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c10775 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c10776 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c10777 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c10778 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c4 c_0)) (= c5 c4))))
(set .c10779 (resolution :clauses (.c10777 .c10778) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10780 (resolution :clauses (.c10776 .c10779) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10781 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c10782 (resolution :clauses (.c10780 .c10781) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10783 (resolution :clauses (.c10775 .c10782) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10784 (resolution :clauses (.c10774 .c10783) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c10785 (resolution :clauses (.c10784 .c34 .c8881 .c167 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c10786 (resolution :clauses (.c10785 .c226 .c2949 .c286 .c9804 .c238 .c10765 .c9809 .c5758 .c296 .c287 .c5993 .c8881) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c4 c_1) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c10787 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c10788 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c10789 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)))))
(set .c10790 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c10791 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c4 c_0)) (= c5 c4))))
(set .c10792 (resolution :clauses (.c10790 .c10791) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10793 (resolution :clauses (.c10789 .c10792) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10794 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c10795 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c10796 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c10797 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c4 c_0)) (= c5 c4))))
(set .c10798 (resolution :clauses (.c10796 .c10797) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10799 (resolution :clauses (.c10795 .c10798) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)) (not (= c4 c_0)))))
(set .c10800 (resolution :clauses (.c10794 .c10799) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c10801 (resolution :clauses (.c10793 .c10800) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10802 (resolution :clauses (.c10788 .c10801) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10803 (resolution :clauses (.c10787 .c10802) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10804 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c10805 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= (f1 c_2) (f3 c4 c5)))))
(set .c10806 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c10807 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c4 c_0)) (= c5 c4))))
(set .c10808 (resolution :clauses (.c10806 .c10807) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10809 (resolution :clauses (.c10805 .c10808) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= (f1 c_2) (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10810 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c10811 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c10812 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c10813 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c4 c_0)) (= c5 c4))))
(set .c10814 (resolution :clauses (.c10812 .c10813) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10815 (resolution :clauses (.c10811 .c10814) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)) (not (= c4 c_0)))))
(set .c10816 (resolution :clauses (.c10810 .c10815) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c10817 (resolution :clauses (.c10809 .c10816) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f1 c_2) (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10818 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10819 (resolution :clauses (.c10817 .c10818) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f1 c_2) (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c10820 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10821 (resolution :clauses (.c10819 .c10820) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f1 c_2) (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_0)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10822 (resolution :clauses (.c10804 .c10821) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_0)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c10823 (resolution :clauses (.c10803 .c10822) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_0)) (not (= c4 c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c10824 (resolution :clauses (.c10823 .c34 .c8881 .c164 .c166 .c167 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= c_0 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10825 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_1)))))
(set .c10826 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c10827 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c4 c_0)) (= c5 c4))))
(set .c10828 (resolution :clauses (.c10826 .c10827) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10829 (resolution :clauses (.c10825 .c10828) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_1)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c10830 (resolution :clauses (.c10824 .c252 .c10786 .c10829 .c3839 .c3141 .c258 .c10742 .c8880) :conclusion ((not (= c6 c_2)) (not (= c_0 c7)) (not (= (f2 c4) (f1 c_1))) (not (= c5 c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c4 c_1) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_0) (f1 c_2))))))
(set .c10831 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)))))
(set .c10832 (eq_congruent :conclusion ((not (= (f2 c_1) c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c10833 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c10834 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c10835 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c10836 (resolution :clauses (.c10834 .c10835) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c10837 (resolution :clauses (.c10833 .c10836) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c10838 (resolution :clauses (.c10832 .c10837) :conclusion ((not (= (f2 c_1) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c10839 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_1) c7))))
(set .c10840 (resolution :clauses (.c10838 .c10839) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)))))
(set .c10841 (resolution :clauses (.c10831 .c10840) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)))))
(set .c10842 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= c4 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)))))
(set .c10843 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c10844 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c10845 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c10846 (resolution :clauses (.c10844 .c10845) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c10847 (resolution :clauses (.c10843 .c10846) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c4 (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c10848 (resolution :clauses (.c10842 .c10847) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c10849 (resolution :clauses (.c10841 .c10848) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_1 (f3 c_2 c4)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10850 (resolution :clauses (.c10849 .c1739 .c32 .c34 .c168) :conclusion ((= c_1 (f3 c_2 c4)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10851 (resolution :clauses (.c10850 .c294 .c2436 .c8881) :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_2))))))
(set .c10852 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c6 c_1))))
(set .c10853 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c10854 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10855 (resolution :clauses (.c10853 .c10854) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c10856 (resolution :clauses (.c10852 .c10855) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c6 c_1) (not (= c_0 (f3 c_2 c_2))))))
(set .c10857 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))))))
(set .c10858 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)))))
(set .c10859 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10860 (resolution :clauses (.c10858 .c10859) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c_0 c7)))))
(set .c10861 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10862 (resolution :clauses (.c10860 .c10861) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10863 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c10864 (resolution :clauses (.c10862 .c10863) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c4 c_1)))))
(set .c10865 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c10866 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10867 (resolution :clauses (.c10865 .c10866) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c10868 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c10869 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c10870 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10871 (resolution :clauses (.c10869 .c10870) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c10872 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c10873 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c10874 (resolution :clauses (.c10872 .c10873) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c4 c_1)))))
(set .c10875 (resolution :clauses (.c10871 .c10874) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c10876 (resolution :clauses (.c10868 .c10875) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c10877 (resolution :clauses (.c10867 .c10876) :conclusion ((= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c10878 (resolution :clauses (.c10864 .c10877) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c_0 (f3 c_0 (f1 c_0)))))))
(set .c10879 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c10880 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c10881 (resolution :clauses (.c10879 .c10880) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c10882 (resolution :clauses (.c10878 .c10881) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_0)))))
(set .c10883 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c10884 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c10885 (resolution :clauses (.c10883 .c10884) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c10886 (resolution :clauses (.c10882 .c10885) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_0)))))
(set .c10887 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)))))
(set .c10888 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10889 (resolution :clauses (.c10887 .c10888) :conclusion ((not (= (f3 c_2 c_1) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)))))
(set .c10890 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2))))
(set .c10891 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_1)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))))))
(set .c10892 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1))))
(set .c10893 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c10894 (resolution :clauses (.c10892 .c10893) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)))))
(set .c10895 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10896 (resolution :clauses (.c10894 .c10895) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c10897 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10898 (resolution :clauses (.c10896 .c10897) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10899 (resolution :clauses (.c10891 .c10898) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10900 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10901 (resolution :clauses (.c10899 .c10900) :conclusion ((= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10902 (resolution :clauses (.c10890 .c10901) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10903 (resolution :clauses (.c10889 .c10902) :conclusion ((= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10904 (resolution :clauses (.c10886 .c10903) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_0)) (not (= (f3 c_2 (f1 c_2)) c_2)))))
(set .c10905 (resolution :clauses (.c10857 .c10904) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_0)) (not (= (f3 c_2 (f1 c_2)) c_2)))))
(set .c10906 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10907 (resolution :clauses (.c10905 .c10906) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c4 c_1)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_0)) (not (= (f3 c_2 (f1 c_2)) c_2)))))
(set .c10908 (resolution :clauses (.c10856 .c10907) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c6 c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_0)))))
(set .c10909 (resolution :clauses (.c10908 .c34 .c8881 .c164 .c165 .c166 .c167 .c169) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c6 c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f1 c_1) c_1)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c10910 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7))))
(set .c10911 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c10912 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10913 (resolution :clauses (.c10911 .c10912) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c10914 (resolution :clauses (.c10910 .c10913) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7))))
(set .c10915 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)))))
(set .c10916 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) c_2))))
(set .c10917 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c10918 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10919 (resolution :clauses (.c10917 .c10918) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c10920 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c10921 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c10922 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10923 (resolution :clauses (.c10921 .c10922) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c10924 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c10925 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c10926 (resolution :clauses (.c10924 .c10925) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c4 c_1)))))
(set .c10927 (resolution :clauses (.c10923 .c10926) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c10928 (resolution :clauses (.c10920 .c10927) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c10929 (resolution :clauses (.c10919 .c10928) :conclusion ((= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c10930 (resolution :clauses (.c10916 .c10929) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c10931 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c10932 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c10933 (resolution :clauses (.c10931 .c10932) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c10934 (resolution :clauses (.c10930 .c10933) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c10935 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c10936 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c10937 (resolution :clauses (.c10935 .c10936) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c10938 (resolution :clauses (.c10934 .c10937) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c10939 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)))))
(set .c10940 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10941 (resolution :clauses (.c10939 .c10940) :conclusion ((not (= (f3 c_2 c_1) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)))))
(set .c10942 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2))))
(set .c10943 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_1)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))))))
(set .c10944 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1))))
(set .c10945 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c10946 (resolution :clauses (.c10944 .c10945) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)))))
(set .c10947 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10948 (resolution :clauses (.c10946 .c10947) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c10949 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10950 (resolution :clauses (.c10948 .c10949) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10951 (resolution :clauses (.c10943 .c10950) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10952 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10953 (resolution :clauses (.c10951 .c10952) :conclusion ((= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10954 (resolution :clauses (.c10942 .c10953) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10955 (resolution :clauses (.c10941 .c10954) :conclusion ((= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10956 (resolution :clauses (.c10938 .c10955) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c10957 (resolution :clauses (.c10915 .c10956) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c10958 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10959 (resolution :clauses (.c10957 .c10958) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c10960 (resolution :clauses (.c10914 .c10959) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c10961 (resolution :clauses (.c10960 .c34 .c8881 .c164 .c165 .c166 .c167 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c10962 (resolution :clauses (.c10961 .c226 .c10909) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_0 c_0) c_0) (= c6 c_1))))
(set .c10963 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 c5))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2))))
(set .c10964 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c10965 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10966 (resolution :clauses (.c10964 .c10965) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c10967 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c10968 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c10969 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c10970 (resolution :clauses (.c10968 .c10969) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c10971 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c10972 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c10973 (resolution :clauses (.c10971 .c10972) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c4 c_1)))))
(set .c10974 (resolution :clauses (.c10970 .c10973) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c10975 (resolution :clauses (.c10967 .c10974) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c10976 (resolution :clauses (.c10966 .c10975) :conclusion ((= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c10977 (resolution :clauses (.c10963 .c10976) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 c5))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c10978 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c10979 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c10980 (resolution :clauses (.c10978 .c10979) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c10981 (resolution :clauses (.c10977 .c10980) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 c5))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c10982 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c10983 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c10984 (resolution :clauses (.c10982 .c10983) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c10985 (resolution :clauses (.c10981 .c10984) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 c5))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c10986 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_2)) (not (= c5 c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 c5)))))
(set .c10987 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2))))
(set .c10988 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_1)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))))))
(set .c10989 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1))))
(set .c10990 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c10991 (resolution :clauses (.c10989 .c10990) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)))))
(set .c10992 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c10993 (resolution :clauses (.c10991 .c10992) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c10994 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c10995 (resolution :clauses (.c10993 .c10994) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10996 (resolution :clauses (.c10988 .c10995) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10997 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c10998 (resolution :clauses (.c10996 .c10997) :conclusion ((= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c10999 (resolution :clauses (.c10987 .c10998) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c11000 (resolution :clauses (.c10986 .c10999) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 c5)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c11001 (resolution :clauses (.c10985 .c11000) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c11002 (resolution :clauses (.c11001 .c166 .c164 .c165 .c34 .c167 .c169 .c8881) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c11003 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c_0 c5))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c5) c_2))))
(set .c11004 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c11005 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11006 (resolution :clauses (.c11004 .c11005) :conclusion ((not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c11007 (resolution :clauses (.c11003 .c11006) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_0)))))
(set .c11008 (resolution :clauses (.c277 .c11002 .c11007 .c8881) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c11009 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c11010 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))))))
(set .c11011 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)))))
(set .c11012 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c11013 (resolution :clauses (.c11011 .c11012) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c_0 c7)))))
(set .c11014 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11015 (resolution :clauses (.c11013 .c11014) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c11016 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c11017 (resolution :clauses (.c11015 .c11016) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c4 c_1)))))
(set .c11018 (resolution :clauses (.c11010 .c11017) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c4 c_1)))))
(set .c11019 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11020 (resolution :clauses (.c11018 .c11019) :conclusion ((= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c4 c_1)))))
(set .c11021 (resolution :clauses (.c11009 .c11020) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_1)))))
(set .c11022 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c_0 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c11023 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (= (f3 c_2 c_0) (f3 c_0 c_0)))))
(set .c11024 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c11025 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11026 (resolution :clauses (.c11024 .c11025) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c11027 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c11028 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c11029 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11030 (resolution :clauses (.c11028 .c11029) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c11031 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c11032 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c11033 (resolution :clauses (.c11031 .c11032) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c4 c_1)))))
(set .c11034 (resolution :clauses (.c11030 .c11033) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c11035 (resolution :clauses (.c11027 .c11034) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c11036 (resolution :clauses (.c11026 .c11035) :conclusion ((= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c11037 (resolution :clauses (.c11023 .c11036) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= (f3 c_2 c_0) (f3 c_0 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c11038 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c11039 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c11040 (resolution :clauses (.c11038 .c11039) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c11041 (resolution :clauses (.c11037 .c11040) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= (f3 c_2 c_0) (f3 c_0 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c11042 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c11043 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c11044 (resolution :clauses (.c11042 .c11043) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_1 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c11045 (resolution :clauses (.c11041 .c11044) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0))) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= (f3 c_2 c_0) (f3 c_0 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c11046 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)))))
(set .c11047 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11048 (resolution :clauses (.c11046 .c11047) :conclusion ((not (= (f3 c_2 c_1) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)))))
(set .c11049 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2))))
(set .c11050 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_1)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))))))
(set .c11051 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1))))
(set .c11052 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c11053 (resolution :clauses (.c11051 .c11052) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)))))
(set .c11054 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c11055 (resolution :clauses (.c11053 .c11054) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)))))
(set .c11056 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11057 (resolution :clauses (.c11055 .c11056) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c11058 (resolution :clauses (.c11050 .c11057) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c11059 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11060 (resolution :clauses (.c11058 .c11059) :conclusion ((= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c11061 (resolution :clauses (.c11049 .c11060) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c11062 (resolution :clauses (.c11048 .c11061) :conclusion ((= (f3 c_2 c_0) (f3 (f3 c_2 c_1) c_0)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c11063 (resolution :clauses (.c11045 .c11062) :conclusion ((not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= (f3 c_2 c_0) (f3 c_0 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c11064 (resolution :clauses (.c11022 .c11063) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_0 c_0) c_0)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c11065 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11066 (resolution :clauses (.c11064 .c11065) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_0 c_0) c_0)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c11067 (resolution :clauses (.c11021 .c11066) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_1)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c5 c_0)))))
(set .c11068 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0))))))
(set .c11069 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_0) (f3 c_0 c_0)))))
(set .c11070 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c11071 (resolution :clauses (.c11069 .c11070) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_0) (f3 c_0 c_0)) (not (= c4 c_1)))))
(set .c11072 (resolution :clauses (.c11068 .c11071) :conclusion ((not (= c_0 c_0)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_1)))))
(set .c11073 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11074 (resolution :clauses (.c11072 .c11073) :conclusion ((= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_1)))))
(set .c11075 (resolution :clauses (.c11067 .c11074) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c4 c_1)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c5 c_0)))))
(set .c11076 (resolution :clauses (.c11075 .c34 .c8881 .c164 .c165 .c166 .c167 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= (f3 (f3 c_2 c_1) c_0) (f3 c_2 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c5 c_0)))))
(set .c11077 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_0) (f1 c_0)))))
(set .c11078 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c11079 (resolution :clauses (.c11077 .c11078) :conclusion ((not (= (f2 c5) (f1 c_0))) (= (f2 c_0) (f1 c_0)) (not (= c5 c_0)))))
(set .c11080 (resolution :clauses (.c11079 .c8881) :conclusion ((= (f2 c_0) (f1 c_0)) (not (= c5 c_0)))))
(set .c11081 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_0) (f1 c_2)))))
(set .c11082 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c11083 (resolution :clauses (.c11081 .c11082) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c5 c_0)))))
(set .c11084 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c11085 (resolution :clauses (.c11083 .c11084) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c11086 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11087 (resolution :clauses (.c11085 .c11086) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c11088 (resolution :clauses (.c11087 .c166 .c8881 .c164) :conclusion ((= (f2 c_0) (f1 c_2)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c11089 (resolution :clauses (.c11076 .c226 .c11008 .c2954 .c269 .c2173 .c252 .c10851 .c213 .c177 .c343 .c472 .c9500 .c5460 .c10830 .c207 .c171 .c11 .c23 .c11080 .c11088 .c10516 .c5456 .c256 .c303 .c8881 .c8880) :conclusion ((not (= c_0 c7)) (not (= (f2 c4) (f1 c_1))) (= c6 c_1))))
(set .c11090 (resolution :clauses (.c272 .c8616 .c2173) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= c5 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11091 (eq_transitive :conclusion ((not (= c_2 (f3 c_2 c4))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_2 (f3 c_1 c4)))))
(set .c11092 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)))))
(set .c11093 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c11094 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c11095 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c11096 (resolution :clauses (.c11094 .c11095) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11097 (resolution :clauses (.c11093 .c11096) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c4 (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11098 (resolution :clauses (.c11092 .c11097) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11099 (resolution :clauses (.c11091 .c11098) :conclusion ((not (= c_2 (f3 c_2 c4))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_2 (f3 c_1 c4)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11100 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= c4 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)))))
(set .c11101 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c11102 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c11103 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c11104 (resolution :clauses (.c11102 .c11103) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11105 (resolution :clauses (.c11101 .c11104) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c4 (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11106 (resolution :clauses (.c11100 .c11105) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11107 (resolution :clauses (.c11099 .c11106) :conclusion ((not (= c_2 (f3 c_2 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_2 (f3 c_1 c4)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c6 c_2)))))
(set .c11108 (resolution :clauses (.c11107 .c34 .c168) :conclusion ((not (= c_2 (f3 c_2 c4))) (= c_2 (f3 c_1 c4)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c6 c_2)))))
(set .c11109 (resolution :clauses (.c11108 .c298) :conclusion ((not (= c_2 (f3 c_2 c4))) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c11110 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c_2) c_2)) (= c_0 (f3 c_2 c_2)))))
(set .c11111 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)))))
(set .c11112 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c11113 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c11114 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c11115 (resolution :clauses (.c11113 .c11114) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11116 (resolution :clauses (.c11112 .c11115) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11117 (resolution :clauses (.c11111 .c11116) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11118 (resolution :clauses (.c11110 .c11117) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c_2) c_2)) (= c_0 (f3 c_2 c_2)) (not (= c_1 c7)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11119 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c6)) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)))))
(set .c11120 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c11121 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c11122 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c11123 (resolution :clauses (.c11121 .c11122) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11124 (resolution :clauses (.c11120 .c11123) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11125 (resolution :clauses (.c11119 .c11124) :conclusion ((not (= (f3 c_2 c_2) c6)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11126 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= c6 c_2)) (= (f3 c_2 c_2) c6))))
(set .c11127 (resolution :clauses (.c11125 .c11126) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f3 c_2 c_2) c_2)) (not (= c6 c_2)))))
(set .c11128 (resolution :clauses (.c11118 .c11127) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c_2) c_2)) (= c_0 (f3 c_2 c_2)) (not (= c_1 c7)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c6 c_2)))))
(set .c11129 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c11130 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11131 (resolution :clauses (.c11129 .c11130) :conclusion ((not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c11132 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)))))
(set .c11133 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11134 (resolution :clauses (.c11132 .c11133) :conclusion ((not (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_1 c7)))))
(set .c11135 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11136 (resolution :clauses (.c11134 .c11135) :conclusion ((not (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11137 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)))))
(set .c11138 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c11139 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c11140 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c11141 (resolution :clauses (.c11139 .c11140) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11142 (resolution :clauses (.c11138 .c11141) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11143 (resolution :clauses (.c11137 .c11142) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11144 (resolution :clauses (.c11136 .c11143) :conclusion ((not (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c11145 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_1)) (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5))))))
(set .c11146 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c11147 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c11148 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c11149 (resolution :clauses (.c11147 .c11148) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11150 (resolution :clauses (.c11146 .c11149) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11151 (resolution :clauses (.c11145 .c11150) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11152 (resolution :clauses (.c11144 .c11151) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c11153 (resolution :clauses (.c11131 .c11152) :conclusion ((= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c11154 (resolution :clauses (.c11128 .c11153) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c_2) c_2)) (= c_0 (f3 c_2 c_2)) (not (= c_1 c7)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c6 c_2)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c11155 (resolution :clauses (.c11154 .c34 .c164 .c166 .c168 .c169) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 c_2) c_2)) (= c_0 (f3 c_2 c_2)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c6 c_2)))))
(set .c11156 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)))))
(set .c11157 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)))))
(set .c11158 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c11159 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c11160 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c11161 (resolution :clauses (.c11159 .c11160) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11162 (resolution :clauses (.c11158 .c11161) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11163 (resolution :clauses (.c11157 .c11162) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11164 (resolution :clauses (.c11156 .c11163) :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= c_1 c7)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11165 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= c4 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)))))
(set .c11166 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c11167 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c11168 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c11169 (resolution :clauses (.c11167 .c11168) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11170 (resolution :clauses (.c11166 .c11169) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c4 (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11171 (resolution :clauses (.c11165 .c11170) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11172 (resolution :clauses (.c11164 .c11171) :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_2 (f3 c_2 c4)) (not (= c_1 c7)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c6 c_2)))))
(set .c11173 (resolution :clauses (.c11172 .c34 .c168) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= c_2 (f3 c_2 c4)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c6 c_2)))))
(set .c11174 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (= c6 c7))))
(set .c11175 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_1 c_1) (f1 c_2))) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2))))))
(set .c11176 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_1 c_1) (f1 c_2)))))
(set .c11177 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11178 (resolution :clauses (.c11176 .c11177) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_1 c_1) (f1 c_2)) (not (= c_1 c7)))))
(set .c11179 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11180 (resolution :clauses (.c11178 .c11179) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_1 c_1) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11181 (resolution :clauses (.c11175 .c11180) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11182 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11183 (resolution :clauses (.c11181 .c11182) :conclusion ((= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11184 (resolution :clauses (.c11174 .c11183) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c11185 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c11186 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_1) (f2 c_1)))))
(set .c11187 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)))))
(set .c11188 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c11189 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c11190 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c11191 (resolution :clauses (.c11189 .c11190) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11192 (resolution :clauses (.c11188 .c11191) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11193 (resolution :clauses (.c11187 .c11192) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11194 (resolution :clauses (.c11186 .c11193) :conclusion ((not (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_1) (f2 c_1)) (not (= c_1 c7)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c11195 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_1)) (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5))))))
(set .c11196 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c11197 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c11198 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c11199 (resolution :clauses (.c11197 .c11198) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11200 (resolution :clauses (.c11196 .c11199) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11201 (resolution :clauses (.c11195 .c11200) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c11202 (resolution :clauses (.c11194 .c11201) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_1) (f2 c_1)) (not (= c_1 c7)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c11203 (resolution :clauses (.c11185 .c11202) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_1 c7)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c11204 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11205 (resolution :clauses (.c11203 .c11204) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_1 c7)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c11206 (resolution :clauses (.c11184 .c11205) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c11207 (resolution :clauses (.c11206 .c1739 .c32 .c34 .c164 .c166 .c168 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_1 c7)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c11208 (resolution :clauses (.c11207 .c234 .c11173 .c11109 .c716 .c288 .c2436 .c252 .c11090 .c2051 .c17 .c343 .c476 .c8881 .c8880) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c11209 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_1 (f1 c_1)) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c11210 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_1)) (not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 (f3 c_1 c_0) c_0)))))
(set .c11211 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_0) c_1))))
(set .c11212 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0)))))
(set .c11213 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11214 (resolution :clauses (.c11212 .c11213) :conclusion ((not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0)))))
(set .c11215 (resolution :clauses (.c11211 .c11214) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_0) c_1) (not (= (f1 c_1) c_0)))))
(set .c11216 (resolution :clauses (.c11210 .c11215) :conclusion ((not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 (f3 c_1 c_0) c_0)) (not (= (f3 c_1 (f1 c_1)) c_1)))))
(set .c11217 (resolution :clauses (.c11209 .c11216) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_0)))))
(set .c11218 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c11219 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c11220 (resolution :clauses (.c11218 .c11219) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c11221 (resolution :clauses (.c11217 .c11220) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c11222 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c11223 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c11224 (resolution :clauses (.c11222 .c11223) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c11225 (resolution :clauses (.c11221 .c11224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c11226 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= c_0 (f1 c_2))) (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f1 c_2))))))
(set .c11227 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)))))
(set .c11228 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11229 (resolution :clauses (.c11227 .c11228) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)) (not (= c_1 c7)))))
(set .c11230 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11231 (resolution :clauses (.c11229 .c11230) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c_0 (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11232 (resolution :clauses (.c11226 .c11231) :conclusion ((not (= (f3 c_2 c_0) c_2)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11233 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_0) c_2))))
(set .c11234 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f1 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f1 c_2))))))
(set .c11235 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)))))
(set .c11236 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11237 (resolution :clauses (.c11235 .c11236) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)) (not (= c_1 c7)))))
(set .c11238 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11239 (resolution :clauses (.c11237 .c11238) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c_0 (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11240 (resolution :clauses (.c11234 .c11239) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_0) (f3 c_2 (f1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11241 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11242 (resolution :clauses (.c11240 .c11241) :conclusion ((= (f3 c_2 c_0) (f3 c_2 (f1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11243 (resolution :clauses (.c11233 .c11242) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_0) c_2) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11244 (resolution :clauses (.c11232 .c11243) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)))))
(set .c11245 (resolution :clauses (.c11225 .c11244) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c11246 (resolution :clauses (.c11245 .c34 .c164 .c166 .c168 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= c_1 c7)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c11247 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c11248 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c11249 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11250 (resolution :clauses (.c11248 .c11249) :conclusion ((not (= (f3 c_1 c_0) c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c11251 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c11252 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c11253 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11254 (resolution :clauses (.c11252 .c11253) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c11255 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c11256 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c11257 (resolution :clauses (.c11255 .c11256) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c11258 (resolution :clauses (.c11254 .c11257) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c11259 (resolution :clauses (.c11251 .c11258) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c11260 (resolution :clauses (.c11250 .c11259) :conclusion ((= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c11261 (resolution :clauses (.c11247 .c11260) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c11262 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c11263 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c11264 (resolution :clauses (.c11262 .c11263) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c11265 (resolution :clauses (.c11261 .c11264) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c11266 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c11267 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c11268 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11269 (resolution :clauses (.c11267 .c11268) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)))))
(set .c11270 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c11271 (resolution :clauses (.c11269 .c11270) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c11272 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11273 (resolution :clauses (.c11271 .c11272) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c11274 (resolution :clauses (.c11266 .c11273) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c11275 (resolution :clauses (.c11265 .c11274) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c11276 (resolution :clauses (.c11275 .c31 .c34 .c164 .c166 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c11277 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (= c4 c_2))))
(set .c11278 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c11279 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11280 (resolution :clauses (.c11278 .c11279) :conclusion ((not (= (f3 c_1 c_0) c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c11281 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c11282 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c11283 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11284 (resolution :clauses (.c11282 .c11283) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c11285 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c11286 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c11287 (resolution :clauses (.c11285 .c11286) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c11288 (resolution :clauses (.c11284 .c11287) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c11289 (resolution :clauses (.c11281 .c11288) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c11290 (resolution :clauses (.c11280 .c11289) :conclusion ((= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c11291 (resolution :clauses (.c11277 .c11290) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= c4 c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c11292 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c11293 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c11294 (resolution :clauses (.c11292 .c11293) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c11295 (resolution :clauses (.c11291 .c11294) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= c4 c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c5 c_0)))))
(set .c11296 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c11297 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c11298 (resolution :clauses (.c11296 .c11297) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c11299 (resolution :clauses (.c11295 .c11298) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= c4 c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c11300 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0)))))
(set .c11301 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (= (f3 c_2 c_0) (f2 c_0)))))
(set .c11302 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c11303 (resolution :clauses (.c11301 .c11302) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (= (f3 c_2 c_0) (f2 c_0)) (not (= c4 c_0)))))
(set .c11304 (resolution :clauses (.c11300 .c11303) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0)) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)))))
(set .c11305 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11306 (resolution :clauses (.c11304 .c11305) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0)) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)))))
(set .c11307 (resolution :clauses (.c11299 .c11306) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= c4 c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 c_2 c_0) c_1)))))
(set .c11308 (resolution :clauses (.c11307 .c31 .c34) :conclusion ((not (= c4 c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= c4 c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 c_2 c_0) c_1)))))
(set .c11309 (resolution :clauses (.c11308 .c238 .c9804 .c295 .c2949 .c226 .c11276 .c9809 .c5758 .c296 .c287 .c5993 .c252 .c11246 .c207 .c189 .c3847 .c10829 .c5946 .c258 .c8881 .c8880) :conclusion ((= c4 c_2) (not (= (f2 c4) (f1 c_1))) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c_0) (f1 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= c4 c_1))))
(set .c11310 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_1 c_2) c_0))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2))))
(set .c11311 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_1 c_2) c_0)))))
(set .c11312 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c11313 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c11314 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c11315 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c11316 (resolution :clauses (.c11314 .c11315) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c11317 (resolution :clauses (.c11313 .c11316) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c11318 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11319 (resolution :clauses (.c11317 .c11318) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c11320 (resolution :clauses (.c11312 .c11319) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c11321 (resolution :clauses (.c11311 .c11320) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_1 c_2) c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c11322 (resolution :clauses (.c11310 .c11321) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c11323 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))))))
(set .c11324 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c11325 (resolution :clauses (.c11323 .c11324) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c11326 (resolution :clauses (.c11322 .c11325) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)))))
(set .c11327 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c11328 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c11329 (resolution :clauses (.c11327 .c11328) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c11330 (resolution :clauses (.c11326 .c11329) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c11331 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c11332 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11333 (resolution :clauses (.c11331 .c11332) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c11334 (resolution :clauses (.c11330 .c11333) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c11335 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4)))))
(set .c11336 (resolution :clauses (.c11334 .c11335) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c11337 (resolution :clauses (.c11336 .c33 .c34) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c11338 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1))))
(set .c11339 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))))))
(set .c11340 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_1 c_2) c_0))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)))))
(set .c11341 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_1 c_2) c_0)))))
(set .c11342 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c11343 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c11344 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c11345 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c11346 (resolution :clauses (.c11344 .c11345) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c11347 (resolution :clauses (.c11343 .c11346) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c11348 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11349 (resolution :clauses (.c11347 .c11348) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c11350 (resolution :clauses (.c11342 .c11349) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c11351 (resolution :clauses (.c11341 .c11350) :conclusion ((not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_1 c_2) c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c11352 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11353 (resolution :clauses (.c11351 .c11352) :conclusion ((= (f3 c_2 c_0) (f3 (f3 c_1 c_2) c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c11354 (resolution :clauses (.c11340 .c11353) :conclusion ((not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_2)))))
(set .c11355 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))))))
(set .c11356 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c11357 (resolution :clauses (.c11355 .c11356) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c11358 (resolution :clauses (.c11354 .c11357) :conclusion ((not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)))))
(set .c11359 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c11360 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c11361 (resolution :clauses (.c11359 .c11360) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c11362 (resolution :clauses (.c11358 .c11361) :conclusion ((not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c11363 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c11364 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11365 (resolution :clauses (.c11363 .c11364) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c11366 (resolution :clauses (.c11362 .c11365) :conclusion ((not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11367 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11368 (resolution :clauses (.c11366 .c11367) :conclusion ((not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11369 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11370 (resolution :clauses (.c11368 .c11369) :conclusion ((not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_0) (f1 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11371 (resolution :clauses (.c11339 .c11370) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11372 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11373 (resolution :clauses (.c11371 .c11372) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11374 (resolution :clauses (.c11338 .c11373) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11375 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c11376 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11377 (resolution :clauses (.c11375 .c11376) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c11378 (resolution :clauses (.c11374 .c11377) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11379 (resolution :clauses (.c11378 .c33 .c34 .c164 .c166 .c169) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11380 (resolution :clauses (.c11379 .c226 .c11337 .c2954 .c269 .c289 .c8675 .c8676 .c8152 .c8881) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (= c4 c_1) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c11381 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c11382 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))))))
(set .c11383 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_2) (f3 c_2 c_2)))))
(set .c11384 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11385 (resolution :clauses (.c11383 .c11384) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_2) (f3 c_2 c_2)) (not (= c_1 c7)))))
(set .c11386 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11387 (resolution :clauses (.c11385 .c11386) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_2) (f3 c_2 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11388 (resolution :clauses (.c11382 .c11387) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11389 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11390 (resolution :clauses (.c11388 .c11389) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11391 (resolution :clauses (.c11381 .c11390) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11392 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2)))))
(set .c11393 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_2) (f3 c_2 c_2)))))
(set .c11394 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c11395 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c11396 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c11397 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c11398 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11399 (resolution :clauses (.c11397 .c11398) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c_1 c7)))))
(set .c11400 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11401 (resolution :clauses (.c11399 .c11400) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11402 (resolution :clauses (.c11396 .c11401) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11403 (resolution :clauses (.c11395 .c11402) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11404 (resolution :clauses (.c11394 .c11403) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)))))
(set .c11405 (resolution :clauses (.c11393 .c11404) :conclusion ((not (= (f3 c_1 c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_2) (f3 c_2 c_2)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)))))
(set .c11406 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c4 c5) c_2)) (= (f3 c_1 c_2) (f3 c7 (f3 c4 c5))))))
(set .c11407 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c11408 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c11409 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c11410 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11411 (resolution :clauses (.c11409 .c11410) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c_1 c7)))))
(set .c11412 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11413 (resolution :clauses (.c11411 .c11412) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11414 (resolution :clauses (.c11408 .c11413) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11415 (resolution :clauses (.c11407 .c11414) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11416 (resolution :clauses (.c11406 .c11415) :conclusion ((not (= c_1 c7)) (= (f3 c_1 c_2) (f3 c7 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c11417 (resolution :clauses (.c11405 .c11416) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_2) (f3 c_2 c_2)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)))))
(set .c11418 (resolution :clauses (.c11392 .c11417) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)))))
(set .c11419 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11420 (resolution :clauses (.c11418 .c11419) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)))))
(set .c11421 (resolution :clauses (.c11391 .c11420) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c11422 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) (f3 c_2 c_2))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2))))))
(set .c11423 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_1) (f3 c_2 c_2)))))
(set .c11424 (resolution :clauses (.c11422 .c11423) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11425 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11426 (resolution :clauses (.c11424 .c11425) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11427 (resolution :clauses (.c11421 .c11426) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c11428 (resolution :clauses (.c11427 .c34 .c164 .c166 .c168 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_1 c7)) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c11429 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)))))
(set .c11430 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c11431 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c11432 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c11433 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c11434 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11435 (resolution :clauses (.c11433 .c11434) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c_1 c7)))))
(set .c11436 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11437 (resolution :clauses (.c11435 .c11436) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11438 (resolution :clauses (.c11432 .c11437) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11439 (resolution :clauses (.c11431 .c11438) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11440 (resolution :clauses (.c11430 .c11439) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)))))
(set .c11441 (resolution :clauses (.c11429 .c11440) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)))))
(set .c11442 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)))))
(set .c11443 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= c4 (f3 c4 c5)))))
(set .c11444 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c11445 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)))))
(set .c11446 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11447 (resolution :clauses (.c11445 .c11446) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c5 (f1 c_2)) (not (= c_1 c7)))))
(set .c11448 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11449 (resolution :clauses (.c11447 .c11448) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11450 (resolution :clauses (.c11444 .c11449) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11451 (resolution :clauses (.c11443 .c11450) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11452 (resolution :clauses (.c11442 .c11451) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c6 c_2)))))
(set .c11453 (resolution :clauses (.c11441 .c11452) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_1 (f3 c_1 c4)) (not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)))))
(set .c11454 (resolution :clauses (.c11453 .c34 .c166 .c164 .c169) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= c_1 (f3 c_1 c4)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_1 c7)))))
(set .c11455 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)))))
(set .c11456 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 c_2)) (= (f3 c_2 c_2) (f3 c_2 c4)))))
(set .c11457 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11458 (resolution :clauses (.c11456 .c11457) :conclusion ((not (= c4 c_2)) (= (f3 c_2 c_2) (f3 c_2 c4)))))
(set .c11459 (resolution :clauses (.c11455 .c11458) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= c_1 (f3 c_2 c4)) (not (= c4 c_2)))))
(set .c11460 (resolution :clauses (.c297 .c11454 .c11459 .c242 .c11428 .c8081 .c295 .c10119 .c252 .c11380 .c219 .c205 .c223 .c8700 .c8722 .c23 .c201 .c402 .c8268 .c2677 .c11309 .c11208 .c11 .c11080 .c8881 .c8880) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= c6 c_2)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))))))
(set .c11461 (eq_transitive :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_1 c4))) (= c_2 (f3 c_1 c4)))))
(set .c11462 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_1 c4)))))
(set .c11463 (resolution :clauses (.c11461 .c11462) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_2 (f3 c_1 c4)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)))))
(set .c11464 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c11465 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c11466 (resolution :clauses (.c11464 .c11465) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c11467 (resolution :clauses (.c11463 .c11466) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_2 (f3 c_1 c4)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c6 c_2)) (not (= c5 c_2)))))
(set .c11468 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)))))
(set .c11469 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= (f3 c_2 c_2) c7))))
(set .c11470 (resolution :clauses (.c11468 .c11469) :conclusion ((not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)))))
(set .c11471 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) (f3 c4 c5))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c11472 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c11473 (resolution :clauses (.c11471 .c11472) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c11474 (resolution :clauses (.c11470 .c11473) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c11475 (resolution :clauses (.c11467 .c11474) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_2 (f3 c_1 c4)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c_1 c7)))))
(set .c11476 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c11477 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11478 (resolution :clauses (.c11476 .c11477) :conclusion ((not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c11479 (eq_transitive :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)))))
(set .c11480 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11481 (resolution :clauses (.c11479 .c11480) :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_1 c7)))))
(set .c11482 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11483 (resolution :clauses (.c11481 .c11482) :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11484 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c11485 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11486 (resolution :clauses (.c11484 .c11485) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c11487 (resolution :clauses (.c11483 .c11486) :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c11488 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c11489 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11490 (resolution :clauses (.c11488 .c11489) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c11491 (resolution :clauses (.c11487 .c11490) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c11492 (resolution :clauses (.c11478 .c11491) :conclusion ((= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c11493 (resolution :clauses (.c11475 .c11492) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_2 (f3 c_1 c4)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c11494 (resolution :clauses (.c11493 .c34 .c164 .c166 .c169) :conclusion ((not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_2 (f3 c_1 c4)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)))))
(set .c11495 (resolution :clauses (.c11494 .c236 .c9454 .c273 .c8072) :conclusion ((not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_2 (f3 c_1 c4)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c_1 c7)) (not (= (f1 c_1) c_0)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))))))
(set .c11496 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c11497 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c11498 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c11499 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11500 (resolution :clauses (.c11498 .c11499) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)))))
(set .c11501 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c11502 (resolution :clauses (.c11500 .c11501) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c11503 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11504 (resolution :clauses (.c11502 .c11503) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c11505 (resolution :clauses (.c11497 .c11504) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c11506 (resolution :clauses (.c11496 .c11505) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c11507 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c11508 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c11509 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c11510 (resolution :clauses (.c11508 .c11509) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c11511 (resolution :clauses (.c11507 .c11510) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c11512 (resolution :clauses (.c11506 .c11511) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c11513 (resolution :clauses (.c11512 .c34 .c164 .c166 .c168 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= c_1 c7)) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c11514 (resolution :clauses (.c11513 .c242 .c11495 .c9464 .c271 .c10509 .c8881) :conclusion ((not (= c6 c_2)) (not (= c_1 c7)) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) c_2) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_2 (f3 c_1 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))))))
(set .c11515 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c4 c_1))))
(set .c11516 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c11517 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_2) (f2 c_1)))))
(set .c11518 (resolution :clauses (.c11516 .c11517) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11519 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11520 (resolution :clauses (.c11518 .c11519) :conclusion ((= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11521 (resolution :clauses (.c11515 .c11520) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c4 c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11522 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c11523 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11524 (resolution :clauses (.c11522 .c11523) :conclusion ((not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c11525 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 c5))) (not (= c_0 (f3 c_2 c5))) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)))))
(set .c11526 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11527 (resolution :clauses (.c11525 .c11526) :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 c5))) (not (= c_0 (f3 c_2 c5))) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_1 c7)))))
(set .c11528 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11529 (resolution :clauses (.c11527 .c11528) :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 c5))) (not (= c_0 (f3 c_2 c5))) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11530 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c_2 c5)))))
(set .c11531 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11532 (resolution :clauses (.c11530 .c11531) :conclusion ((not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c_2 c5)))))
(set .c11533 (resolution :clauses (.c11529 .c11532) :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)) (not (= c5 c_1)))))
(set .c11534 (resolution :clauses (.c11524 .c11533) :conclusion ((= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))) (not (= c_0 (f3 c_2 c5))) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)) (not (= c5 c_1)))))
(set .c11535 (resolution :clauses (.c11521 .c11534) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c4 c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 (f3 c_2 c5))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)) (not (= c5 c_1)))))
(set .c11536 (resolution :clauses (.c11535 .c1739 .c32 .c164 .c166 .c169) :conclusion ((not (= c4 c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= c4 c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c5))) (not (= c_1 c7)) (not (= c6 c_2)) (not (= c5 c_1)))))
(set .c11537 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0))))
(set .c11538 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 c_2)))))
(set .c11539 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11540 (resolution :clauses (.c11538 .c11539) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 c_2)))))
(set .c11541 (resolution :clauses (.c11537 .c11540) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= (f3 c_1 c_1) c_2)))))
(set .c11542 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) (f3 c_2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_2) c_1)))))
(set .c11543 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1))) (= (f3 c_1 c_2) (f3 c_2 c_1)))))
(set .c11544 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c11545 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11546 (resolution :clauses (.c11544 .c11545) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c11547 (resolution :clauses (.c11543 .c11546) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1))) (= (f3 c_1 c_2) (f3 c_2 c_1)) (not (= (f3 c_1 c_1) c_2)))))
(set .c11548 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c11549 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11550 (resolution :clauses (.c11548 .c11549) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c11551 (resolution :clauses (.c11547 .c11550) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (= (f3 c_1 c_2) (f3 c_2 c_1)) (not (= (f3 c_1 c_1) c_2)))))
(set .c11552 (resolution :clauses (.c11542 .c11551) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)))))
(set .c11553 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11554 (resolution :clauses (.c11552 .c11553) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)))))
(set .c11555 (resolution :clauses (.c11541 .c11554) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))))))
(set .c11556 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))))))
(set .c11557 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c11558 (resolution :clauses (.c11556 .c11557) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c11559 (resolution :clauses (.c11555 .c11558) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= c_1 c7)) (not (= c4 c_2)))))
(set .c11560 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))))))
(set .c11561 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c11562 (resolution :clauses (.c11560 .c11561) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c11563 (resolution :clauses (.c11559 .c11562) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c11564 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c11565 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_2) (f2 c_1)))))
(set .c11566 (resolution :clauses (.c11564 .c11565) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11567 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11568 (resolution :clauses (.c11566 .c11567) :conclusion ((= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11569 (resolution :clauses (.c11563 .c11568) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= (f3 c_1 c_1) c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c6 c_2)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11570 (resolution :clauses (.c11569 .c1739 .c32 .c34 .c1742) :conclusion ((not (= c5 c_1)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= (f3 c_1 c_1) c_2)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c6 c_2)) (not (= (f1 c_1) c_0)))))
(set .c11571 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c_1 c5))) (not (= (f3 c_1 c5) c_2)) (= c_0 c_2))))
(set .c11572 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c11573 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11574 (resolution :clauses (.c11572 .c11573) :conclusion ((not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c_1 c5)))))
(set .c11575 (resolution :clauses (.c11571 .c11574) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c5) c_2)) (= c_0 c_2) (not (= c5 c_1)))))
(set .c11576 (resolution :clauses (.c11575 .c8) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c5) c_2)) (not (= c5 c_1)))))
(set .c11577 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 c_2 c4))) (not (= (f3 c_2 c_2) (f3 c_2 c4))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0))))
(set .c11578 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 c_2)) (= (f3 c_2 c_2) (f3 c_2 c4)))))
(set .c11579 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11580 (resolution :clauses (.c11578 .c11579) :conclusion ((not (= c4 c_2)) (= (f3 c_2 c_2) (f3 c_2 c4)))))
(set .c11581 (resolution :clauses (.c11577 .c11580) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 c_2 c4))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= c4 c_2)))))
(set .c11582 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c5 c_2))))
(set .c11583 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f1 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f1 c_2))))))
(set .c11584 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)))))
(set .c11585 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11586 (resolution :clauses (.c11584 .c11585) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)) (not (= c_1 c7)))))
(set .c11587 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11588 (resolution :clauses (.c11586 .c11587) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c_0 (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11589 (resolution :clauses (.c11583 .c11588) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_0) (f3 c_2 (f1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11590 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11591 (resolution :clauses (.c11589 .c11590) :conclusion ((= (f3 c_2 c_0) (f3 c_2 (f1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11592 (resolution :clauses (.c11582 .c11591) :conclusion ((not (= c5 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c5 c_2) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11593 (resolution :clauses (.c11592 .c164 .c166 .c169) :conclusion ((not (= c5 c_1)) (not (= (f3 c_2 c_0) c_1)) (= c5 c_2) (not (= (f1 c_1) c_0)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11594 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 c_0) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 c_2))))
(set .c11595 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f1 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f1 c_2))))))
(set .c11596 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)))))
(set .c11597 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11598 (resolution :clauses (.c11596 .c11597) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= c_0 (f1 c_2)) (not (= c_1 c7)))))
(set .c11599 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11600 (resolution :clauses (.c11598 .c11599) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c_0 (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11601 (resolution :clauses (.c11595 .c11600) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_0) (f3 c_2 (f1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11602 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11603 (resolution :clauses (.c11601 .c11602) :conclusion ((= (f3 c_2 c_0) (f3 c_2 (f1 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11604 (resolution :clauses (.c11594 .c11603) :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 c_2) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11605 (resolution :clauses (.c11604 .c8 .c164 .c166 .c169) :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f1 c_1) c_0)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11606 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 c_1 c_2) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)))))
(set .c11607 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_2)) (= (f3 c_1 c_2) (f3 c_1 c4)))))
(set .c11608 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11609 (resolution :clauses (.c11607 .c11608) :conclusion ((not (= c4 c_2)) (= (f3 c_1 c_2) (f3 c_1 c4)))))
(set .c11610 (resolution :clauses (.c11606 .c11609) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= c_1 (f3 c_1 c4)) (not (= c4 c_2)))))
(set .c11611 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)))))
(set .c11612 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_2)) (= (f3 c_1 c_2) (f3 c_1 c4)))))
(set .c11613 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11614 (resolution :clauses (.c11612 .c11613) :conclusion ((not (= c4 c_2)) (= (f3 c_1 c_2) (f3 c_1 c4)))))
(set .c11615 (resolution :clauses (.c11611 .c11614) :conclusion ((not (= (f3 c_1 c_2) c_0)) (= c_0 (f3 c_1 c4)) (not (= c4 c_2)))))
(set .c11616 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= (f3 c_1 c_2) (f3 c_1 c4))) (= c_2 (f3 c_1 c4)))))
(set .c11617 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_2)) (= (f3 c_1 c_2) (f3 c_1 c4)))))
(set .c11618 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11619 (resolution :clauses (.c11617 .c11618) :conclusion ((not (= c4 c_2)) (= (f3 c_1 c_2) (f3 c_1 c4)))))
(set .c11620 (resolution :clauses (.c11616 .c11619) :conclusion ((not (= (f3 c_1 c_2) c_2)) (= c_2 (f3 c_1 c4)) (not (= c4 c_2)))))
(set .c11621 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_1 c_2) c_1)) (not (= (f3 c_1 c_2) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)))))
(set .c11622 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1)))))
(set .c11623 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11624 (resolution :clauses (.c11622 .c11623) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1)))))
(set .c11625 (resolution :clauses (.c11621 .c11624) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_1 c_2) c_1)) (not (= (f3 c_1 c_2) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)))))
(set .c11626 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))))))
(set .c11627 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c11628 (resolution :clauses (.c11626 .c11627) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c11629 (resolution :clauses (.c11625 .c11628) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_1 c_2) c_1)) (not (= (f3 c_1 c_2) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c11630 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))))))
(set .c11631 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c11632 (resolution :clauses (.c11630 .c11631) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c11633 (resolution :clauses (.c11629 .c11632) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_1 c_2) c_1)) (not (= (f3 c_1 c_2) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)))))
(set .c11634 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c11635 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_2) (f2 c_1)))))
(set .c11636 (resolution :clauses (.c11634 .c11635) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11637 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11638 (resolution :clauses (.c11636 .c11637) :conclusion ((= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11639 (resolution :clauses (.c11633 .c11638) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_1 c_2) c_1)) (not (= (f3 c_1 c_2) (f3 c_1 c4))) (= c_0 (f3 c_1 c4)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11640 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_2)) (= (f3 c_1 c_2) (f3 c_1 c4)))))
(set .c11641 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11642 (resolution :clauses (.c11640 .c11641) :conclusion ((not (= c4 c_2)) (= (f3 c_1 c_2) (f3 c_1 c4)))))
(set .c11643 (resolution :clauses (.c11639 .c11642) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_1 c_2) c_1)) (= c_0 (f3 c_1 c4)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11644 (resolution :clauses (.c11643 .c1739 .c32 .c34) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_1 c_2) c_1)) (= c_0 (f3 c_1 c4)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)))))
(set .c11645 (resolution :clauses (.c11644 .c236 .c11615 .c234 .c290 .c11570 .c10269) :conclusion ((not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (= (f3 c_1 c_2) c_2) (= (f3 c_1 c_1) c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (= c5 c_0))))
(set .c11646 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c4 c_1))))
(set .c11647 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c11648 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c11649 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11650 (resolution :clauses (.c11648 .c11649) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)))))
(set .c11651 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c11652 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11653 (resolution :clauses (.c11651 .c11652) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c11654 (resolution :clauses (.c11650 .c11653) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)) (not (= (f3 c_2 c_2) c_1)))))
(set .c11655 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c4 c5)))))
(set .c11656 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f3 c_2 c_2) c_1)) (= c5 (f3 c_2 c_2)))))
(set .c11657 (resolution :clauses (.c11655 .c11656) :conclusion ((not (= c4 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c4 c5)) (not (= c5 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c11658 (resolution :clauses (.c11654 .c11657) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c11659 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11660 (resolution :clauses (.c11658 .c11659) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_2)))))
(set .c11661 (resolution :clauses (.c11647 .c11660) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_1 c7)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c11662 (resolution :clauses (.c11646 .c11661) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c4 c_1) (not (= c6 c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_1 c7)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_1)))))
(set .c11663 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))))))
(set .c11664 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c11665 (resolution :clauses (.c11663 .c11664) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c11666 (resolution :clauses (.c11662 .c11665) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c4 c_1) (not (= c6 c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_1 c7)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_1)))))
(set .c11667 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c11668 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11669 (resolution :clauses (.c11667 .c11668) :conclusion ((not (= (f3 c_1 c_2) (f2 c_1))) (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c11670 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_1 c_2) (f2 c_1)))))
(set .c11671 (resolution :clauses (.c11669 .c11670) :conclusion ((= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11672 (resolution :clauses (.c11666 .c11671) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c4 c_1) (not (= c6 c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_1 c7)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11673 (resolution :clauses (.c11672 .c1739 .c32 .c34 .c164 .c166 .c169) :conclusion ((not (= c4 c_2)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= c4 c_1) (not (= c6 c_2)) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_1 c7)) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_1)))))
(set .c11674 (resolution :clauses (.c11673 .c236 .c11610 .c297 .c11459 .c242 .c11645 .c11620 .c10005 .c270 .c5984 .c260 .c11514 .c8081 .c295 .c289 .c10119 .c8881) :conclusion ((not (= c4 c_2)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= c4 c_1) (not (= c6 c_2)) (not (= (f1 c_1) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (= c5 c_0))))
(set .c11675 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_2) (f1 c_2)))))
(set .c11676 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11677 (resolution :clauses (.c11675 .c11676) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c_1 c7)))))
(set .c11678 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11679 (resolution :clauses (.c11677 .c11678) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11680 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c11681 (resolution :clauses (.c11679 .c11680) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_2) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)) (not (= c4 c_2)))))
(set .c11682 (resolution :clauses (.c11681 .c166 .c164) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c_2) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)) (not (= c4 c_2)))))
(set .c11683 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c4) (f1 c6))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)))))
(set .c11684 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11685 (resolution :clauses (.c11683 .c11684) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c4) (f1 c6))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)) (not (= c_1 c7)))))
(set .c11686 (eq_congruent :conclusion ((not (= c4 c6)) (= (f1 c4) (f1 c6)))))
(set .c11687 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c6 c_2)) (= c4 c6))))
(set .c11688 (resolution :clauses (.c11686 .c11687) :conclusion ((= (f1 c4) (f1 c6)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c11689 (resolution :clauses (.c11685 .c11688) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c11690 (resolution :clauses (.c11689 .c165 .c166 .c8881 .c164) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_0)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c11691 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c5) (f1 c_1)))))
(set .c11692 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11693 (resolution :clauses (.c11691 .c11692) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c4) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_1)) (not (= c_1 c7)))))
(set .c11694 (eq_congruent :conclusion ((not (= c4 c6)) (= (f1 c4) (f1 c6)))))
(set .c11695 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c6 c_2)) (= c4 c6))))
(set .c11696 (resolution :clauses (.c11694 .c11695) :conclusion ((= (f1 c4) (f1 c6)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c11697 (resolution :clauses (.c11693 .c11696) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c11698 (resolution :clauses (.c11697 .c166 .c164 .c165) :conclusion ((= (f2 c5) (f1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c6 c_2)))))
(set .c11699 (resolution :clauses (.c266 .c8144 .c8086 .c242 .c8118 .c260 .c8227 .c8081 .c292 .c8152 .c252 .c11674 .c221 .c205 .c223 .c11682 .c11690 .c11698 .c203 .c8268 .c2677 .c8880) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c6 c_2)) (= c5 c_0) (= c4 c_1) (not (= (f2 c4) (f1 c_2))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f1 c_2) (f2 c_1))))))
(set .c11700 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (= c5 c_1))))
(set .c11701 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_0) c_2)))))
(set .c11702 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11703 (resolution :clauses (.c11701 .c11702) :conclusion ((not (= (f3 c_1 c_0) (f3 c_2 c_2))) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_0) c_2)))))
(set .c11704 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_1 c_0) (f3 c_2 c_2)))))
(set .c11705 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c11706 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c11707 (resolution :clauses (.c11705 .c11706) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c11708 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c11709 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c11710 (resolution :clauses (.c11708 .c11709) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c11711 (resolution :clauses (.c11707 .c11710) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c11712 (resolution :clauses (.c11704 .c11711) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_1 c_0) (f3 c_2 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c11713 (resolution :clauses (.c11703 .c11712) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_0) c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c11714 (resolution :clauses (.c11700 .c11713) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (= c5 c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c11715 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c11716 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11717 (resolution :clauses (.c11715 .c11716) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c11718 (resolution :clauses (.c11714 .c11717) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (= c5 c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c11719 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2))))))
(set .c11720 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c11721 (resolution :clauses (.c11719 .c11720) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c11722 (resolution :clauses (.c11718 .c11721) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (= c5 c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)))))
(set .c11723 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c11724 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c11725 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c11726 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c11727 (resolution :clauses (.c11725 .c11726) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11728 (resolution :clauses (.c11724 .c11727) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f1 c_2) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11729 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c11730 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11731 (resolution :clauses (.c11729 .c11730) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c11732 (resolution :clauses (.c11728 .c11731) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f1 c_2) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11733 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11734 (resolution :clauses (.c11732 .c11733) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f1 c_2) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c_1 c7)))))
(set .c11735 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11736 (resolution :clauses (.c11734 .c11735) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f1 c_2) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11737 (resolution :clauses (.c11723 .c11736) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c_1 c7)))))
(set .c11738 (resolution :clauses (.c11722 .c11737) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (= c5 c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c6 c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c11739 (resolution :clauses (.c11738 .c31 .c34 .c164 .c166 .c169) :conclusion ((not (= c5 c_2)) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (= c5 c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11740 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c5) c_2))))
(set .c11741 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5)))))
(set .c11742 (resolution :clauses (.c11740 .c11741) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c5) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)))))
(set .c11743 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c11744 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11745 (resolution :clauses (.c11743 .c11744) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c11746 (resolution :clauses (.c11742 .c11745) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c5) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)))))
(set .c11747 (resolution :clauses (.c11746 .c238 .c11739) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c5) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 c_2 c_0) c_0) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (= c5 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11748 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2))))
(set .c11749 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)))))
(set .c11750 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c11751 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11752 (resolution :clauses (.c11750 .c11751) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c_1 c7)))))
(set .c11753 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11754 (resolution :clauses (.c11752 .c11753) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11755 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c11756 (resolution :clauses (.c11754 .c11755) :conclusion ((not (= (f2 c5) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c_1 c7)) (not (= c6 c_2)) (not (= c5 c_2)))))
(set .c11757 (resolution :clauses (.c11749 .c11756) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)) (not (= (f2 c5) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11758 (resolution :clauses (.c11748 .c11757) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11759 (resolution :clauses (.c11758 .c166 .c164 .c33) :conclusion ((= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_2))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11760 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_2))) (= (f2 c_2) (f1 c_2)))))
(set .c11761 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c11762 (resolution :clauses (.c11760 .c11761) :conclusion ((not (= (f2 c5) (f1 c_2))) (= (f2 c_2) (f1 c_2)) (not (= c5 c_2)))))
(set .c11763 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c5) (f1 c_1)))))
(set .c11764 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11765 (resolution :clauses (.c11763 .c11764) :conclusion ((not (= (f2 c5) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_1)) (not (= c_1 c7)))))
(set .c11766 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11767 (resolution :clauses (.c11765 .c11766) :conclusion ((not (= (f2 c5) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_1)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11768 (resolution :clauses (.c11767 .c164 .c166) :conclusion ((not (= (f2 c5) (f1 c_2))) (= (f2 c5) (f1 c_1)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11769 (resolution :clauses (.c238 .c9852 .c9828 .c242 .c11747 .c9217 .c271 .c280 .c219 .c223 .c11759 .c11762 .c11768 .c9809 .c290 .c8881) :conclusion ((not (= c5 c_2)) (= c5 c_0) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= c4 c_0)) (not (= c6 c_2)) (= c4 c_1) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (= c5 c_1) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c_0) (f1 c_2))) (not (= (f2 c5) (f1 c_2))) (not (= c_0 (f3 c_1 c4))))))
(set .c11770 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_1))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c5) (f1 c_2)))))
(set .c11771 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11772 (resolution :clauses (.c11770 .c11771) :conclusion ((not (= (f2 c5) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= c_1 c7)))))
(set .c11773 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11774 (resolution :clauses (.c11772 .c11773) :conclusion ((not (= (f2 c5) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11775 (resolution :clauses (.c11774 .c164 .c166) :conclusion ((not (= (f2 c5) (f1 c_1))) (= (f2 c5) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11776 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c_2) (f1 (f3 c_2 c_0)))) (= (f2 c5) (f1 c_2)))))
(set .c11777 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_2)) (= (f1 c_2) (f1 (f3 c_2 c_0))))))
(set .c11778 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (= (f3 c_2 c_0) c_2))))
(set .c11779 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 c_0)) (= (f3 c_2 c_0) (f3 c_2 c4)))))
(set .c11780 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11781 (resolution :clauses (.c11779 .c11780) :conclusion ((not (= c4 c_0)) (= (f3 c_2 c_0) (f3 c_2 c4)))))
(set .c11782 (resolution :clauses (.c11778 .c11781) :conclusion ((not (= c_2 (f3 c_2 c4))) (= (f3 c_2 c_0) c_2) (not (= c4 c_0)))))
(set .c11783 (resolution :clauses (.c11777 .c11782) :conclusion ((= (f1 c_2) (f1 (f3 c_2 c_0))) (not (= c_2 (f3 c_2 c4))) (not (= c4 c_0)))))
(set .c11784 (resolution :clauses (.c11776 .c11783) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= (f2 c5) (f1 c_2)) (not (= c_2 (f3 c_2 c4))) (not (= c4 c_0)))))
(set .c11785 (resolution :clauses (.c11784 .c8881) :conclusion ((not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= (f2 c5) (f1 c_2)) (not (= c_2 (f3 c_2 c4))) (not (= c4 c_0)))))
(set .c11786 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c5))) (not (= (f3 c_2 c5) (f3 c_2 c_2))) (= c_0 (f3 c_2 c_2)))))
(set .c11787 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c11788 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11789 (resolution :clauses (.c11787 .c11788) :conclusion ((not (= c5 c_2)) (= (f3 c_2 c5) (f3 c_2 c_2)))))
(set .c11790 (resolution :clauses (.c11786 .c11789) :conclusion ((not (= c_0 (f3 c_2 c5))) (= c_0 (f3 c_2 c_2)) (not (= c5 c_2)))))
(set .c11791 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c5) (f1 c_2)))))
(set .c11792 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11793 (resolution :clauses (.c11791 .c11792) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= c_1 c7)))))
(set .c11794 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11795 (resolution :clauses (.c11793 .c11794) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11796 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c4)) (= (f2 c4) (f2 (f3 c_2 c_0))))))
(set .c11797 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= c4 c_0)) (= (f3 c_2 c_0) c4))))
(set .c11798 (resolution :clauses (.c11796 .c11797) :conclusion ((= (f2 c4) (f2 (f3 c_2 c_0))) (not (= (f3 c_2 c_0) c_0)) (not (= c4 c_0)))))
(set .c11799 (resolution :clauses (.c11795 .c11798) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)) (not (= (f3 c_2 c_0) c_0)) (not (= c4 c_0)))))
(set .c11800 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c11801 (resolution :clauses (.c11799 .c11800) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)) (not (= (f3 c_2 c_0) c_0)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c11802 (resolution :clauses (.c11801 .c164 .c166) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (= (f2 c5) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)) (not (= (f3 c_2 c_0) c_0)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c11803 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c7) (f1 (f3 c_2 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c5) (f1 c_2)))))
(set .c11804 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c7)) (= (f1 c7) (f1 (f3 c_2 c_0))))))
(set .c11805 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= c_1 c7)) (= (f3 c_2 c_0) c7))))
(set .c11806 (resolution :clauses (.c11804 .c11805) :conclusion ((= (f1 c7) (f1 (f3 c_2 c_0))) (not (= (f3 c_2 c_0) c_1)) (not (= c_1 c7)))))
(set .c11807 (resolution :clauses (.c11803 .c11806) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= (f3 c_2 c_0) c_1)) (not (= c_1 c7)))))
(set .c11808 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11809 (resolution :clauses (.c11807 .c11808) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c5) (f1 c_2)) (not (= (f3 c_2 c_0) c_1)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11810 (resolution :clauses (.c11809 .c8881 .c164 .c166) :conclusion ((not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= (f2 c5) (f1 c_2)) (not (= (f3 c_2 c_0) c_1)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11811 (resolution :clauses (.c11810 .c238 .c11802 .c9804 .c11785 .c11769 .c193 .c15 .c9478 .c260) :conclusion ((not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= c_1 c7)) (not (= c6 c_2)) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)) (= c5 c_0) (not (= (f1 c_1) c_1)) (= c4 c_1) (= c5 c_1) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c_0) (f1 c_2))) (not (= c_0 (f3 c_1 c4))) (not (= (f2 c_0) (f1 c_1))))))
(set .c11812 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_0 (f3 c_2 c4)))))
(set .c11813 (eq_congruent :conclusion ((not (= (f2 c_0) c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)))))
(set .c11814 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c11815 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c11816 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c11817 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c11818 (resolution :clauses (.c11816 .c11817) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c11819 (resolution :clauses (.c11815 .c11818) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c11820 (resolution :clauses (.c11814 .c11819) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c11821 (resolution :clauses (.c11813 .c11820) :conclusion ((not (= (f2 c_0) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c11822 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= (f2 c_0) c7))))
(set .c11823 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c11824 (resolution :clauses (.c11822 .c11823) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= (f2 c_0) c7) (not (= c4 c_0)))))
(set .c11825 (resolution :clauses (.c11821 .c11824) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= c_1 c7)))))
(set .c11826 (resolution :clauses (.c11812 .c11825) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4))) (= c_0 (f3 c_2 c4)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= c_1 c7)))))
(set .c11827 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= c4 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)))))
(set .c11828 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c11829 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c11830 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c11831 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c11832 (resolution :clauses (.c11830 .c11831) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c11833 (resolution :clauses (.c11829 .c11832) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c11834 (resolution :clauses (.c11828 .c11833) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c11835 (resolution :clauses (.c11827 .c11834) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c11836 (resolution :clauses (.c11826 .c11835) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_2 c4)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11837 (resolution :clauses (.c11836 .c1739 .c31 .c34 .c8881 .c167) :conclusion ((= c_0 (f3 c_2 c4)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11838 (resolution :clauses (.c11837 .c296 .c8265 .c11811 .c5993) :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c_1 c7)) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (= c5 c_0) (= c4 c_1) (not (= (f2 c_0) (f1 c_2))) (not (= (f2 c_0) (f1 c_1))))))
(set .c11839 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= c5 c_2)) (not (= c5 c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c11840 (resolution :clauses (.c11839 .c224) :conclusion ((not (= c6 c_2)) (not (= c5 c_2)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c11841 (eq_transitive :conclusion ((not (= (f3 c_2 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2))))
(set .c11842 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= c5 (f3 c4 c5))) (= (f3 c_2 c5) (f3 c6 (f3 c4 c5))))))
(set .c11843 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)))))
(set .c11844 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c11845 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c11846 (resolution :clauses (.c11844 .c11845) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11847 (resolution :clauses (.c11843 .c11846) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11848 (resolution :clauses (.c11842 .c11847) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11849 (resolution :clauses (.c11841 .c11848) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2) (not (= c6 c_2)) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11850 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)))))
(set .c11851 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c11852 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c11853 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c11854 (resolution :clauses (.c11852 .c11853) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11855 (resolution :clauses (.c11851 .c11854) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11856 (resolution :clauses (.c11850 .c11855) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11857 (resolution :clauses (.c11849 .c11856) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2) (not (= c6 c_2)) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_1 c7)))))
(set .c11858 (resolution :clauses (.c11857 .c1739 .c32 .c34) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2) (not (= c6 c_2)) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= c_1 c7)))))
(set .c11859 (resolution :clauses (.c11858 .c280 .c6380) :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= c6 c_2)) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c11860 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (= c6 c7))))
(set .c11861 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_1 c_1) (f1 c_2))) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2))))))
(set .c11862 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_1 c_1) (f1 c_2)))))
(set .c11863 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11864 (resolution :clauses (.c11862 .c11863) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f3 c_1 c_1) (f1 c_2)) (not (= c_1 c7)))))
(set .c11865 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11866 (resolution :clauses (.c11864 .c11865) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f3 c_1 c_1) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11867 (resolution :clauses (.c11861 .c11866) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11868 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11869 (resolution :clauses (.c11867 .c11868) :conclusion ((= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11870 (resolution :clauses (.c11860 .c11869) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c11871 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c11872 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_1) (f2 c_1)))))
(set .c11873 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)))))
(set .c11874 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c11875 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c11876 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c11877 (resolution :clauses (.c11875 .c11876) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11878 (resolution :clauses (.c11874 .c11877) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11879 (resolution :clauses (.c11873 .c11878) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11880 (resolution :clauses (.c11872 .c11879) :conclusion ((not (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_1) (f2 c_1)) (not (= c_1 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c11881 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_1)) (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5))))))
(set .c11882 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c11883 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c11884 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c11885 (resolution :clauses (.c11883 .c11884) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11886 (resolution :clauses (.c11882 .c11885) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11887 (resolution :clauses (.c11881 .c11886) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11888 (resolution :clauses (.c11880 .c11887) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_1) (f2 c_1)) (not (= c_1 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= c6 c_2)))))
(set .c11889 (resolution :clauses (.c11871 .c11888) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_1 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= c6 c_2)))))
(set .c11890 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11891 (resolution :clauses (.c11889 .c11890) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_1 c7)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= c6 c_2)))))
(set .c11892 (resolution :clauses (.c11870 .c11891) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c_1 c7)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f1 c_1) (f2 c_1))) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c11893 (resolution :clauses (.c11892 .c1739 .c32 .c34 .c164 .c166 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_1 c7)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c11894 (resolution :clauses (.c11893 .c234 .c11859 .c10005 .c270 .c5984 .c8881) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_1 c7)) (not (= (f1 c_1) c_0)) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f2 c4) (f1 c_1))))))
(set .c11895 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1))))
(set .c11896 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5)))))
(set .c11897 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c11898 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c11899 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c11900 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c11901 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c11902 (resolution :clauses (.c11900 .c11901) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11903 (resolution :clauses (.c11899 .c11902) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c11904 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c11905 (resolution :clauses (.c11903 .c11904) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c11906 (resolution :clauses (.c11898 .c11905) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c11907 (resolution :clauses (.c11897 .c11906) :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (= c5 (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c11908 (resolution :clauses (.c11896 .c11907) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c11909 (resolution :clauses (.c11895 .c11908) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= c_1 c7)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c11910 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c11911 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2))))
(set .c11912 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c11913 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c11914 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c11915 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c11916 (resolution :clauses (.c11914 .c11915) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11917 (resolution :clauses (.c11913 .c11916) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c11918 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c11919 (resolution :clauses (.c11917 .c11918) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c11920 (resolution :clauses (.c11912 .c11919) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c11921 (resolution :clauses (.c11911 .c11920) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c11922 (resolution :clauses (.c11910 .c11921) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c11923 (resolution :clauses (.c11909 .c11922) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= c_1 c7)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c6 c_2)))))
(set .c11924 (resolution :clauses (.c11923 .c1739 .c29 .c33 .c34 .c8881) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= c_1 c7)) (not (= c5 c_2)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c6 c_2)))))
(set .c11925 (resolution :clauses (.c11924 .c279 .c8072) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c11926 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c11927 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))))))
(set .c11928 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_2) (f3 c_2 c_2)))))
(set .c11929 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c11930 (resolution :clauses (.c11928 .c11929) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_2) (f3 c_2 c_2)) (not (= c_1 c7)))))
(set .c11931 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c11932 (resolution :clauses (.c11930 .c11931) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_2) (f3 c_2 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11933 (resolution :clauses (.c11927 .c11932) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11934 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11935 (resolution :clauses (.c11933 .c11934) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c11936 (resolution :clauses (.c11926 .c11935) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11937 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2)))))
(set .c11938 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_2) (f3 c_2 c_2)))))
(set .c11939 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c11940 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2))))
(set .c11941 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c11942 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c11943 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c11944 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c11945 (resolution :clauses (.c11943 .c11944) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11946 (resolution :clauses (.c11942 .c11945) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c11947 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c11948 (resolution :clauses (.c11946 .c11947) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c11949 (resolution :clauses (.c11941 .c11948) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c11950 (resolution :clauses (.c11940 .c11949) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c11951 (resolution :clauses (.c11939 .c11950) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c11952 (resolution :clauses (.c11938 .c11951) :conclusion ((not (= (f3 c_1 c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_2) (f3 c_2 c_2)) (not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c11953 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c4 c5) c_2)) (= (f3 c_1 c_2) (f3 c7 (f3 c4 c5))))))
(set .c11954 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2))))
(set .c11955 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c11956 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c11957 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c11958 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c11959 (resolution :clauses (.c11957 .c11958) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11960 (resolution :clauses (.c11956 .c11959) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c11961 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c11962 (resolution :clauses (.c11960 .c11961) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c11963 (resolution :clauses (.c11955 .c11962) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c11964 (resolution :clauses (.c11954 .c11963) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c11965 (resolution :clauses (.c11953 .c11964) :conclusion ((not (= c_1 c7)) (= (f3 c_1 c_2) (f3 c7 (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c11966 (resolution :clauses (.c11952 .c11965) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_2) (f3 c_2 c_2)) (not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_1 c7)))))
(set .c11967 (resolution :clauses (.c11937 .c11966) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_1 c7)))))
(set .c11968 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c11969 (resolution :clauses (.c11967 .c11968) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_1 c7)))))
(set .c11970 (resolution :clauses (.c11936 .c11969) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_0)))))
(set .c11971 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) (f3 c_2 c_2))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2))))))
(set .c11972 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_1) (f3 c_2 c_2)))))
(set .c11973 (resolution :clauses (.c11971 .c11972) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11974 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c11975 (resolution :clauses (.c11973 .c11974) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c11976 (resolution :clauses (.c11970 .c11975) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_0)))))
(set .c11977 (resolution :clauses (.c11976 .c1739 .c29 .c33 .c34 .c8881 .c164 .c166 .c168 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_1 c7)) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c11978 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2))))
(set .c11979 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c5)))))
(set .c11980 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c11981 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c11982 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c11983 (resolution :clauses (.c11981 .c11982) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11984 (resolution :clauses (.c11980 .c11983) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c11985 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c11986 (resolution :clauses (.c11984 .c11985) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c5 c_2)))))
(set .c11987 (resolution :clauses (.c11979 .c11986) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)))))
(set .c11988 (resolution :clauses (.c11978 .c11987) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)))))
(set .c11989 (resolution :clauses (.c11988 .c1739 .c8881 .c29 .c33) :conclusion ((= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f1 c_1) c_0)))))
(set .c11990 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c_2) (f1 c_1)))))
(set .c11991 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c11992 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c11993 (resolution :clauses (.c11991 .c11992) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c11994 (resolution :clauses (.c11990 .c11993) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c_2) (f1 c_1)) (not (= (f1 c_1) c_0)))))
(set .c11995 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c11996 (resolution :clauses (.c11994 .c11995) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c_2) (f1 c_1)) (not (= (f1 c_1) c_0)) (not (= c5 c_2)))))
(set .c11997 (resolution :clauses (.c11996 .c1739 .c29 .c8881) :conclusion ((= (f2 c_2) (f1 c_1)) (not (= (f1 c_1) c_0)) (not (= c5 c_2)))))
(set .c11998 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_0) (f1 c_2)))))
(set .c11999 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c12000 (resolution :clauses (.c11998 .c11999) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c_1 c7)))))
(set .c12001 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c12002 (resolution :clauses (.c12000 .c12001) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c12003 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c12004 (resolution :clauses (.c12002 .c12003) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)) (not (= c4 c_0)))))
(set .c12005 (resolution :clauses (.c12004 .c166 .c164) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c_0) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)) (not (= c4 c_0)))))
(set .c12006 (resolution :clauses (.c11977 .c242 .c11925 .c9217 .c277 .c205 .c11989 .c11997 .c223 .c11762 .c260 .c11894 .c11775 .c1506 .c252 .c11838 .c105 .c23 .c12005 .c5946 .c258 .c11699 .c8881 .c8880) :conclusion ((not (= c6 c_2)) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_2))) (= c5 c_0) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f2 c4) (f1 c_1))) (= c4 c_1) (not (= (f1 c_2) (f2 c_1))))))
(set .c12007 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)))))
(set .c12008 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c12009 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_2) (f2 c_1)))))
(set .c12010 (resolution :clauses (.c12008 .c12009) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12011 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12012 (resolution :clauses (.c12010 .c12011) :conclusion ((= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12013 (resolution :clauses (.c12007 .c12012) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12014 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) (f3 c_1 c_1))) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1))))))
(set .c12015 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)))))
(set .c12016 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)))))
(set .c12017 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c12018 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12019 (resolution :clauses (.c12017 .c12018) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12020 (resolution :clauses (.c12016 .c12019) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12021 (resolution :clauses (.c12015 .c12020) :conclusion ((not (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12022 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_1)) (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5))))))
(set .c12023 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c12024 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12025 (resolution :clauses (.c12023 .c12024) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12026 (resolution :clauses (.c12022 .c12025) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12027 (resolution :clauses (.c12021 .c12026) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c12028 (resolution :clauses (.c12014 .c12027) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c12029 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12030 (resolution :clauses (.c12028 .c12029) :conclusion ((= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c12031 (resolution :clauses (.c12013 .c12030) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c12032 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f3 c_1 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c12033 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)))))
(set .c12034 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)))))
(set .c12035 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c12036 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12037 (resolution :clauses (.c12035 .c12036) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12038 (resolution :clauses (.c12034 .c12037) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12039 (resolution :clauses (.c12033 .c12038) :conclusion ((not (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12040 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_1)) (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5))))))
(set .c12041 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c12042 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12043 (resolution :clauses (.c12041 .c12042) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12044 (resolution :clauses (.c12040 .c12043) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12045 (resolution :clauses (.c12039 .c12044) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c12046 (resolution :clauses (.c12032 .c12045) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c12047 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12048 (resolution :clauses (.c12046 .c12047) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c12049 (resolution :clauses (.c12031 .c12048) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c12050 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_2 c_1) (f3 c_1 c_1))) (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1))))))
(set .c12051 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)))))
(set .c12052 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)))))
(set .c12053 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c12054 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12055 (resolution :clauses (.c12053 .c12054) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12056 (resolution :clauses (.c12052 .c12055) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12057 (resolution :clauses (.c12051 .c12056) :conclusion ((not (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12058 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_1)) (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5))))))
(set .c12059 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c12060 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12061 (resolution :clauses (.c12059 .c12060) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12062 (resolution :clauses (.c12058 .c12061) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12063 (resolution :clauses (.c12057 .c12062) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c12064 (resolution :clauses (.c12050 .c12063) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c12065 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12066 (resolution :clauses (.c12064 .c12065) :conclusion ((= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c12067 (resolution :clauses (.c12049 .c12066) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c12068 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c4)))))
(set .c12069 (resolution :clauses (.c12067 .c12068) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= c_1 (f3 c_1 c4)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c12070 (resolution :clauses (.c12069 .c1739 .c32 .c34 .c1742) :conclusion ((not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= c_1 (f3 c_1 c4)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= c_1 c7)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c12071 (resolution :clauses (.c12070 .c236 .c9459 .c278 .c8086) :conclusion ((not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= c_1 (f3 c_1 c4)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c12072 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 c_1))))
(set .c12073 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c12074 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c12075 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c12076 (resolution :clauses (.c12074 .c12075) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)))))
(set .c12077 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12078 (resolution :clauses (.c12076 .c12077) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12079 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c12080 (resolution :clauses (.c12078 .c12079) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c12081 (resolution :clauses (.c12073 .c12080) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12082 (resolution :clauses (.c12072 .c12081) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 c_1) (not (= c6 c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= c_1 c7)) (not (= c4 c_1)))))
(set .c12083 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))))))
(set .c12084 (eq_transitive :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c12085 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c12086 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)) (= c4 (f3 c_2 c_2)))))
(set .c12087 (resolution :clauses (.c12085 .c12086) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c12088 (resolution :clauses (.c12084 .c12087) :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_1) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c12089 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c12090 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12091 (resolution :clauses (.c12089 .c12090) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c12092 (resolution :clauses (.c12088 .c12091) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_1) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c12093 (resolution :clauses (.c12083 .c12092) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c5 c_2)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c12094 (resolution :clauses (.c12082 .c12093) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 c_1) (not (= c6 c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)))))
(set .c12095 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c12096 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12097 (resolution :clauses (.c12095 .c12096) :conclusion ((not (= (f3 c_1 c_2) (f2 c_1))) (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c12098 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_1 c_2) (f2 c_1)))))
(set .c12099 (resolution :clauses (.c12097 .c12098) :conclusion ((= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12100 (resolution :clauses (.c12094 .c12099) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 c_1) (not (= c6 c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12101 (resolution :clauses (.c12100 .c1739 .c32 .c34 .c164 .c166 .c169) :conclusion ((not (= c5 c_2)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= c5 c_1) (not (= c6 c_2)) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)))))
(set .c12102 (resolution :clauses (.c12101 .c236 .c9454 .c279 .c8072 .c242 .c12071 .c9217 .c9464 .c203 .c277 .c271 .c221 .c223 .c9484 .c9474 .c11762 .c260 .c8881) :conclusion ((= c5 c_1) (not (= c6 c_2)) (not (= (f1 c_1) c_0)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (= c_1 (f3 c_1 c4)) (not (= (f1 c_2) (f2 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (= c5 c_0))))
(set .c12103 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= c_2 (f3 c_2 c4))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 c4))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c12104 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_2)) (not (= c4 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 c4)))))
(set .c12105 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (= (f3 c_2 c_1) c_2))))
(set .c12106 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 c_1)) (= (f3 c_2 c_1) (f3 c_2 c4)))))
(set .c12107 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12108 (resolution :clauses (.c12106 .c12107) :conclusion ((not (= c4 c_1)) (= (f3 c_2 c_1) (f3 c_2 c4)))))
(set .c12109 (resolution :clauses (.c12105 .c12108) :conclusion ((not (= c_2 (f3 c_2 c4))) (= (f3 c_2 c_1) c_2) (not (= c4 c_1)))))
(set .c12110 (resolution :clauses (.c12104 .c12109) :conclusion ((not (= c4 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 c4)) (not (= c_2 (f3 c_2 c4))))))
(set .c12111 (resolution :clauses (.c12103 .c12110) :conclusion ((not (= c6 c_2)) (not (= c_2 (f3 c_2 c4))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_1)))))
(set .c12112 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c12113 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c12114 (resolution :clauses (.c12112 .c12113) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12115 (resolution :clauses (.c12111 .c12114) :conclusion ((not (= c6 c_2)) (not (= c_2 (f3 c_2 c4))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12116 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c12117 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c12118 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c12119 (resolution :clauses (.c12117 .c12118) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12120 (resolution :clauses (.c12116 .c12119) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12121 (resolution :clauses (.c12115 .c12120) :conclusion ((not (= c6 c_2)) (not (= c_2 (f3 c_2 c4))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c12122 (resolution :clauses (.c12121 .c34 .c168 .c224) :conclusion ((not (= c6 c_2)) (not (= c_2 (f3 c_2 c4))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c12123 (resolution :clauses (.c12122 .c234 .c1991 .c298) :conclusion ((not (= c6 c_2)) (not (= c_2 (f3 c_2 c4))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_0)) (= (f3 c_1 c_1) c_1) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c12124 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_2) c_2)) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c12125 (resolution :clauses (.c12124 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_2) c_2)) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)))))
(set .c12126 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c12127 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c12128 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c12129 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c12130 (resolution :clauses (.c12128 .c12129) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12131 (resolution :clauses (.c12127 .c12130) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12132 (resolution :clauses (.c12126 .c12131) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12133 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c12134 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c12135 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c12136 (resolution :clauses (.c12134 .c12135) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)))))
(set .c12137 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c12138 (resolution :clauses (.c12136 .c12137) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12139 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c12140 (resolution :clauses (.c12138 .c12139) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_2) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_2)))))
(set .c12141 (resolution :clauses (.c12133 .c12140) :conclusion ((not (= c6 c_2)) (= (f3 c6 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12142 (resolution :clauses (.c12132 .c12141) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c12143 (resolution :clauses (.c12142 .c34 .c164 .c166 .c168 .c169 .c224) :conclusion ((not (= c6 c_2)) (not (= c_1 c7)) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12144 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 c_1 c_2) c_0)) (= c5 c_0))))
(set .c12145 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c4 c5) c_2)) (= (f3 c_1 c_2) (f3 c7 (f3 c4 c5))))))
(set .c12146 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 c4 c5))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c4 c5) c_2))))
(set .c12147 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c12148 (resolution :clauses (.c12146 .c12147) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12149 (resolution :clauses (.c12145 .c12148) :conclusion ((not (= c_1 c7)) (= (f3 c_1 c_2) (f3 c7 (f3 c4 c5))) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12150 (resolution :clauses (.c12144 .c12149) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_2) c_0)) (= c5 c_0) (not (= c_1 c7)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)))))
(set .c12151 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c12152 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c12153 (resolution :clauses (.c12151 .c12152) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12154 (resolution :clauses (.c12150 .c12153) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_2) c_0)) (= c5 c_0) (not (= c_1 c7)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c6 c_2)))))
(set .c12155 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c12156 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_1) (f2 c_1)))))
(set .c12157 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c12158 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12159 (resolution :clauses (.c12157 .c12158) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c12160 (resolution :clauses (.c12156 .c12159) :conclusion ((not (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_1) (f2 c_1)) (not (= (f3 c_1 c_1) c_2)))))
(set .c12161 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c12162 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12163 (resolution :clauses (.c12161 .c12162) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c12164 (resolution :clauses (.c12160 .c12163) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_1) (f2 c_1)) (not (= (f3 c_1 c_1) c_2)))))
(set .c12165 (resolution :clauses (.c12155 .c12164) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c_1 c_1) c_2)))))
(set .c12166 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12167 (resolution :clauses (.c12165 .c12166) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c_1 c_1) c_2)))))
(set .c12168 (resolution :clauses (.c12154 .c12167) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_2) c_0)) (= c5 c_0) (not (= c_1 c7)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c6 c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12169 (resolution :clauses (.c12168 .c1739 .c32 .c34 .c1742) :conclusion ((not (= c5 c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (= c5 c_0) (not (= c_1 c7)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c6 c_2)) (not (= (f1 c_1) c_0)))))
(set .c12170 (resolution :clauses (.c12169 .c236 .c9039 .c9047 .c234 .c12143 .c12123 .c12102 .c716 .c294 .c288 .c2436 .c8881) :conclusion ((not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (= c5 c_0) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c6 c_2)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f1 c_2) (f2 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))))))
(set .c12171 (eq_transitive :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_2) (f2 c_1)))))
(set .c12172 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c12173 (resolution :clauses (.c12171 .c12172) :conclusion ((not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_2) (f2 c_1)) (not (= c_1 c7)))))
(set .c12174 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c12175 (resolution :clauses (.c12173 .c12174) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_2) (f2 c_1)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c12176 (resolution :clauses (.c12175 .c1739 .c164 .c166) :conclusion ((= (f1 c_2) (f2 c_1)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c12177 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)))))
(set .c12178 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c12179 (resolution :clauses (.c12177 .c12178) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)))))
(set .c12180 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c12181 (resolution :clauses (.c12179 .c12180) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c12182 (resolution :clauses (.c12181 .c164 .c166) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)) (not (= c6 c_2)))))
(set .c12183 (resolution :clauses (.c280 .c7685 .c11759 .c260 .c7644 .c252 .c12170 .c11775 .c476 .c12006 .c11460 .c215 .c12176 .c12182 .c262 .c1476 .c8880 .c1739) :conclusion ((not (= c6 c_2)) (not (= (f2 c4) (f1 c_1))) (= c_0 c7))))
(set .c12184 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 c5))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_2)))) (not (= (f3 (f3 c_1 c_1) c_2) (f3 c_1 (f3 c_1 c_2)))) (not (= (f3 (f2 c_2) c_2) (f3 (f3 c_1 c_1) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2))))
(set .c12185 (eq_congruent :conclusion ((not (= (f2 c_2) (f3 c_1 c_1))) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 (f3 c_1 c_1) c_2)))))
(set .c12186 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1))) (= (f2 c_2) (f3 c_1 c_1)))))
(set .c12187 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12188 (resolution :clauses (.c12186 .c12187) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1))) (= (f2 c_2) (f3 c_1 c_1)) (not (= c4 c_1)))))
(set .c12189 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1)))))
(set .c12190 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12191 (resolution :clauses (.c12189 .c12190) :conclusion ((not (= (f1 c_1) c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_1)))))
(set .c12192 (resolution :clauses (.c12188 .c12191) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f2 c_2) (f3 c_1 c_1)) (not (= c4 c_1)))))
(set .c12193 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c12194 (resolution :clauses (.c12192 .c12193) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f2 c_2) (f3 c_1 c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12195 (resolution :clauses (.c12185 .c12194) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 (f3 c_1 c_1) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12196 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12197 (resolution :clauses (.c12195 .c12196) :conclusion ((= (f3 (f2 c_2) c_2) (f3 (f3 c_1 c_1) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12198 (resolution :clauses (.c12184 .c12197) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 c5))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_2)))) (not (= (f3 (f3 c_1 c_1) c_2) (f3 c_1 (f3 c_1 c_2)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12199 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_2))))))
(set .c12200 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12201 (resolution :clauses (.c12199 .c12200) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_2))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12202 (resolution :clauses (.c12198 .c12201) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 c5))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_2) (f3 c_1 (f3 c_1 c_2)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c_1 c7)))))
(set .c12203 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c12204 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12205 (resolution :clauses (.c12203 .c12204) :conclusion ((not (= c_0 c6)) (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12206 (resolution :clauses (.c12202 .c12205) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 c5))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_2) (f3 c_1 (f3 c_1 c_2)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c12207 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c5 c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 c5)))))
(set .c12208 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c12209 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c12210 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12211 (resolution :clauses (.c12209 .c12210) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c12212 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c12213 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12214 (resolution :clauses (.c12212 .c12213) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c4 c_1)))))
(set .c12215 (resolution :clauses (.c12211 .c12214) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12216 (resolution :clauses (.c12208 .c12215) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12217 (resolution :clauses (.c12207 .c12216) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 c5)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12218 (resolution :clauses (.c12206 .c12217) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_1) c_2) (f3 c_1 (f3 c_1 c_2)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))))))
(set .c12219 (resolution :clauses (.c12218 .c33 .c34 .c8881 .c165 .c167 .c168) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_1 c_1) c_2) (f3 c_1 (f3 c_1 c_2)))) (= (f3 c_0 c5) c_2) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c12220 (resolution :clauses (.c12219 .c271 .c7730 .c8881) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_1 c_1) c_2) (f3 c_1 (f3 c_1 c_2)))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f2 c4) (f1 c_1))))))
(set .c12221 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)))))
(set .c12222 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)))))
(set .c12223 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c12224 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12225 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12226 (resolution :clauses (.c12224 .c12225) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12227 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c12228 (resolution :clauses (.c12226 .c12227) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12229 (resolution :clauses (.c12223 .c12228) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12230 (resolution :clauses (.c12222 .c12229) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12231 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12232 (resolution :clauses (.c12230 .c12231) :conclusion ((= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12233 (resolution :clauses (.c12221 .c12232) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12234 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c12235 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12236 (resolution :clauses (.c12234 .c12235) :conclusion ((not (= c_0 c6)) (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12237 (resolution :clauses (.c12233 .c12236) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12238 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)))))
(set .c12239 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c12240 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12241 (resolution :clauses (.c12239 .c12240) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 c_2) c_1)) (= c4 (f3 c4 c5)) (not (= c5 c_2)))))
(set .c12242 (resolution :clauses (.c12238 .c12241) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)) (not (= c4 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c5 c_2)))))
(set .c12243 (resolution :clauses (.c12237 .c12242) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_1 (f3 c_1 c4)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c_1 c7)))))
(set .c12244 (resolution :clauses (.c12243 .c1739 .c32 .c34) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_1 (f3 c_1 c4)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c_1 c7)))))
(set .c12245 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c12246 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)))))
(set .c12247 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c12248 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12249 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12250 (resolution :clauses (.c12248 .c12249) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12251 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c12252 (resolution :clauses (.c12250 .c12251) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12253 (resolution :clauses (.c12247 .c12252) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12254 (resolution :clauses (.c12246 .c12253) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12255 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12256 (resolution :clauses (.c12254 .c12255) :conclusion ((= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12257 (resolution :clauses (.c12245 .c12256) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12258 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c12259 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12260 (resolution :clauses (.c12258 .c12259) :conclusion ((not (= c_0 c6)) (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12261 (resolution :clauses (.c12257 .c12260) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12262 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c12263 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c12264 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12265 (resolution :clauses (.c12263 .c12264) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12266 (resolution :clauses (.c12262 .c12265) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12267 (resolution :clauses (.c12261 .c12266) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12268 (resolution :clauses (.c12267 .c1739 .c32 .c34 .c168 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= c_1 c7)) (not (= (f1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12269 (resolution :clauses (.c12268 .c236 .c12244 .c9464 .c271 .c288 .c9474 .c2436 .c252 .c12220 .c8881 .c8880) :conclusion ((not (= c_0 c6)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= c_1 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f3 (f3 c_1 c_1) c_2) (f3 c_1 (f3 c_1 c_2)))))))
(set .c12270 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c12271 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)))))
(set .c12272 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c12273 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12274 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12275 (resolution :clauses (.c12273 .c12274) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12276 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c12277 (resolution :clauses (.c12275 .c12276) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12278 (resolution :clauses (.c12272 .c12277) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12279 (resolution :clauses (.c12271 .c12278) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12280 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12281 (resolution :clauses (.c12279 .c12280) :conclusion ((= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12282 (resolution :clauses (.c12270 .c12281) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12283 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c12284 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12285 (resolution :clauses (.c12283 .c12284) :conclusion ((not (= c_0 c6)) (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12286 (resolution :clauses (.c12282 .c12285) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12287 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c12288 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c12289 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12290 (resolution :clauses (.c12288 .c12289) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12291 (resolution :clauses (.c12287 .c12290) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12292 (resolution :clauses (.c12286 .c12291) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c12293 (resolution :clauses (.c12292 .c1739 .c32 .c34 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= c7 c_2)) (not (= (f1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c12294 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)))))
(set .c12295 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)))))
(set .c12296 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c12297 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12298 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12299 (resolution :clauses (.c12297 .c12298) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12300 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c12301 (resolution :clauses (.c12299 .c12300) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12302 (resolution :clauses (.c12296 .c12301) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12303 (resolution :clauses (.c12295 .c12302) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12304 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12305 (resolution :clauses (.c12303 .c12304) :conclusion ((= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12306 (resolution :clauses (.c12294 .c12305) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12307 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c12308 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12309 (resolution :clauses (.c12307 .c12308) :conclusion ((not (= c_0 c6)) (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12310 (resolution :clauses (.c12306 .c12309) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12311 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4)))))
(set .c12312 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c12313 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12314 (resolution :clauses (.c12312 .c12313) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 c_2) c_1)) (= c4 (f3 c4 c5)) (not (= c5 c_2)))))
(set .c12315 (resolution :clauses (.c12311 .c12314) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c5 c_2)))))
(set .c12316 (resolution :clauses (.c12310 .c12315) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_1 (f3 c_2 c4)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c12317 (resolution :clauses (.c12316 .c1739 .c32 .c34) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_1 (f3 c_2 c4)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c12318 (resolution :clauses (.c12317 .c236 .c12293 .c9464 .c271 .c294 .c9474 .c2436 .c8881) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c12319 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c12320 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c5 c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 c5)))))
(set .c12321 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c12322 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c12323 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12324 (resolution :clauses (.c12322 .c12323) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c12325 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c12326 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12327 (resolution :clauses (.c12325 .c12326) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c4 c_1)))))
(set .c12328 (resolution :clauses (.c12324 .c12327) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12329 (resolution :clauses (.c12321 .c12328) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12330 (resolution :clauses (.c12320 .c12329) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 c5)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12331 (resolution :clauses (.c12319 .c12330) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12332 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c12333 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12334 (resolution :clauses (.c12332 .c12333) :conclusion ((not (= c_0 c6)) (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12335 (resolution :clauses (.c12331 .c12334) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)))))
(set .c12336 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_2))))))
(set .c12337 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12338 (resolution :clauses (.c12336 .c12337) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_2))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12339 (resolution :clauses (.c12335 .c12338) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c12340 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_2)) (not (= c_2 c_2)) (= (f3 c_2 c_2) (f3 (f3 c_2 c_1) c_2)))))
(set .c12341 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2))))
(set .c12342 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_1)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))))))
(set .c12343 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1))))
(set .c12344 (resolution :clauses (.c12342 .c12343) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c12345 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12346 (resolution :clauses (.c12344 .c12345) :conclusion ((= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c12347 (resolution :clauses (.c12341 .c12346) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c12348 (resolution :clauses (.c12340 .c12347) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_2) (f3 (f3 c_2 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c12349 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12350 (resolution :clauses (.c12348 .c12349) :conclusion ((= (f3 c_2 c_2) (f3 (f3 c_2 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c12351 (resolution :clauses (.c12339 .c12350) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c7 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c12352 (resolution :clauses (.c12351 .c34 .c8881 .c165 .c167 .c169) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_2)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c12353 (resolution :clauses (.c12352 .c275 .c8086 .c8881) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= c5 c_2)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c12354 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c12355 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))))))
(set .c12356 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c_2 c_2)))))
(set .c12357 (resolution :clauses (.c12355 .c12356) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c12358 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12359 (resolution :clauses (.c12357 .c12358) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c12360 (resolution :clauses (.c12354 .c12359) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c12361 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)))))
(set .c12362 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_0 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_2)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 c_2) (f3 (f3 c_2 c_1) c_2))) (= (f3 c_0 c_2) (f3 c_2 c_2)))))
(set .c12363 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_2)) (not (= c_2 c_2)) (= (f3 c_2 c_2) (f3 (f3 c_2 c_1) c_2)))))
(set .c12364 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2))))
(set .c12365 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) c_1)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))))))
(set .c12366 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_2) c_1))))
(set .c12367 (resolution :clauses (.c12365 .c12366) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c12368 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12369 (resolution :clauses (.c12367 .c12368) :conclusion ((= (f3 c_2 c_1) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c12370 (resolution :clauses (.c12364 .c12369) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_2 c_1) c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c12371 (resolution :clauses (.c12363 .c12370) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_2) (f3 (f3 c_2 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c12372 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12373 (resolution :clauses (.c12371 .c12372) :conclusion ((= (f3 c_2 c_2) (f3 (f3 c_2 c_1) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c12374 (resolution :clauses (.c12362 .c12373) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_0 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_2)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c12375 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_2))))))
(set .c12376 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12377 (resolution :clauses (.c12375 .c12376) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_2))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12378 (resolution :clauses (.c12374 .c12377) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_0 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12379 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c12380 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c12381 (resolution :clauses (.c12379 .c12380) :conclusion ((not (= c_0 c6)) (= (f3 c_0 (f3 c_1 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12382 (resolution :clauses (.c12378 .c12381) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_0 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c12383 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_0 c_1) c_2)))))
(set .c12384 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c12385 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c12386 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12387 (resolution :clauses (.c12385 .c12386) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c12388 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c12389 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12390 (resolution :clauses (.c12388 .c12389) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c4 c_1)))))
(set .c12391 (resolution :clauses (.c12387 .c12390) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12392 (resolution :clauses (.c12384 .c12391) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12393 (resolution :clauses (.c12383 .c12392) :conclusion ((not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12394 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12395 (resolution :clauses (.c12393 .c12394) :conclusion ((= (f3 c_0 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12396 (resolution :clauses (.c12382 .c12395) :conclusion ((not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))))))
(set .c12397 (resolution :clauses (.c12361 .c12396) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))))))
(set .c12398 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12399 (resolution :clauses (.c12397 .c12398) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))))))
(set .c12400 (resolution :clauses (.c12360 .c12399) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))))))
(set .c12401 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_2 c_2))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0))))))
(set .c12402 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12403 (resolution :clauses (.c12401 .c12402) :conclusion ((not (= (f1 c_0) (f3 c_2 c_2))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0))))))
(set .c12404 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c_2 c_2)))))
(set .c12405 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12406 (resolution :clauses (.c12404 .c12405) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c_2 c_2)) (not (= c4 c_1)))))
(set .c12407 (resolution :clauses (.c12403 .c12406) :conclusion ((= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)))))
(set .c12408 (resolution :clauses (.c12400 .c12407) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))))))
(set .c12409 (resolution :clauses (.c12408 .c34 .c8881 .c165 .c167 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_2 (f3 c_1 c_2)) (f3 (f3 c_2 c_1) c_2))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c12410 (resolution :clauses (.c12409 .c242 .c12353 .c9217 .c280 .c7730 .c252 .c12318 .c262 .c12269 .c181 .c217 .c199 .c187 .c223 .c9484 .c11762 .c9478 .c8880 .c1739) :conclusion ((not (= c_0 c6)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_1)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_1))) (= c_0 c7) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_2) (f2 c_1))) (not (= (f2 c5) (f1 c_2))))))
(set .c12411 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c12412 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c12413 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c12414 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12415 (resolution :clauses (.c12413 .c12414) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_1)))))
(set .c12416 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c12417 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (= c5 (f1 c_1)))))
(set .c12418 (resolution :clauses (.c12416 .c12417) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c12419 (resolution :clauses (.c12415 .c12418) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12420 (resolution :clauses (.c12412 .c12419) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12421 (resolution :clauses (.c12411 .c12420) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12422 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c12423 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c12424 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c12425 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (= c5 (f1 c_1)))))
(set .c12426 (resolution :clauses (.c12424 .c12425) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c12427 (resolution :clauses (.c12423 .c12426) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12428 (resolution :clauses (.c12422 .c12427) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12429 (resolution :clauses (.c12421 .c12428) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c12430 (resolution :clauses (.c12429 .c34 .c8881 .c165 .c167 .c168 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= c7 c_2)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c12431 (resolution :clauses (.c12430 .c262 .c6928 .c8881) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (= c_0 c7))))
(set .c12432 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (not (= c7 c_2)) (= c_1 c7))))
(set .c12433 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 c_2)))))
(set .c12434 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (= (f3 c_1 c_1) c_2))))
(set .c12435 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c12436 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12437 (resolution :clauses (.c12435 .c12436) :conclusion ((not (= c_1 (f3 c_0 c_1))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c12438 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c12439 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12440 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12441 (resolution :clauses (.c12439 .c12440) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12442 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c12443 (resolution :clauses (.c12441 .c12442) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12444 (resolution :clauses (.c12438 .c12443) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12445 (resolution :clauses (.c12437 .c12444) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12446 (resolution :clauses (.c12434 .c12445) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (= (f3 c_1 c_1) c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12447 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))))))
(set .c12448 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c12449 (resolution :clauses (.c12447 .c12448) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12450 (resolution :clauses (.c12446 .c12449) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (= (f3 c_1 c_1) c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12451 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1))))))
(set .c12452 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c12453 (resolution :clauses (.c12451 .c12452) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12454 (resolution :clauses (.c12450 .c12453) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (= (f3 c_1 c_1) c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c7 c_2)))))
(set .c12455 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_2)) (not (= c4 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 c4)))))
(set .c12456 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (= (f3 c_2 c_1) c_2))))
(set .c12457 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 c_1)) (= (f3 c_2 c_1) (f3 c_2 c4)))))
(set .c12458 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12459 (resolution :clauses (.c12457 .c12458) :conclusion ((not (= c4 c_1)) (= (f3 c_2 c_1) (f3 c_2 c4)))))
(set .c12460 (resolution :clauses (.c12456 .c12459) :conclusion ((not (= c_2 (f3 c_2 c4))) (= (f3 c_2 c_1) c_2) (not (= c4 c_1)))))
(set .c12461 (resolution :clauses (.c12455 .c12460) :conclusion ((not (= c4 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 c4)) (not (= c_2 (f3 c_2 c4))))))
(set .c12462 (resolution :clauses (.c12454 .c12461) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_2 (f3 c_2 c4))) (= (f3 c_1 c_1) c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c7 c_2)))))
(set .c12463 (resolution :clauses (.c12433 .c12462) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 c_2)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_2 (f3 c_2 c4))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c7 c_2)))))
(set .c12464 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12465 (resolution :clauses (.c12463 .c12464) :conclusion ((= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 c_2)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_2 (f3 c_2 c4))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c7 c_2)))))
(set .c12466 (resolution :clauses (.c12432 .c12465) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (not (= c7 c_2)) (= c_1 c7) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12467 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) c_2)) (not (= c4 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 c4)))))
(set .c12468 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (= (f3 c_2 c_1) c_2))))
(set .c12469 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 c_1)) (= (f3 c_2 c_1) (f3 c_2 c4)))))
(set .c12470 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12471 (resolution :clauses (.c12469 .c12470) :conclusion ((not (= c4 c_1)) (= (f3 c_2 c_1) (f3 c_2 c4)))))
(set .c12472 (resolution :clauses (.c12468 .c12471) :conclusion ((not (= c_2 (f3 c_2 c4))) (= (f3 c_2 c_1) c_2) (not (= c4 c_1)))))
(set .c12473 (resolution :clauses (.c12467 .c12472) :conclusion ((not (= c4 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 c4)) (not (= c_2 (f3 c_2 c4))))))
(set .c12474 (resolution :clauses (.c12466 .c12473) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_2 (f3 c_2 c4))) (not (= c7 c_2)) (= c_1 c7) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12475 (resolution :clauses (.c12474 .c1739 .c32 .c34) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c_2 (f3 c_2 c4))) (not (= c7 c_2)) (= c_1 c7) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12476 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) c_2)) (not (= c7 c_2)) (= c_1 c7))))
(set .c12477 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c12478 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c12479 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12480 (resolution :clauses (.c12478 .c12479) :conclusion ((not (= c_1 (f3 c_0 c_1))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c12481 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c12482 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12483 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12484 (resolution :clauses (.c12482 .c12483) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12485 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c12486 (resolution :clauses (.c12484 .c12485) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12487 (resolution :clauses (.c12481 .c12486) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12488 (resolution :clauses (.c12480 .c12487) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12489 (resolution :clauses (.c12477 .c12488) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12490 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))))))
(set .c12491 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c12492 (resolution :clauses (.c12490 .c12491) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12493 (resolution :clauses (.c12489 .c12492) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12494 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c12495 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c12496 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c12497 (resolution :clauses (.c12495 .c12496) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12498 (resolution :clauses (.c12494 .c12497) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12499 (resolution :clauses (.c12493 .c12498) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c12500 (resolution :clauses (.c12499 .c1739 .c32 .c34 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c7 c_2)) (not (= (f1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c12501 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_2)) (= c5 c_2))))
(set .c12502 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c12503 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12504 (resolution :clauses (.c12502 .c12503) :conclusion ((not (= c_1 (f3 c_0 c_1))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c12505 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c12506 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12507 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12508 (resolution :clauses (.c12506 .c12507) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12509 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c12510 (resolution :clauses (.c12508 .c12509) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12511 (resolution :clauses (.c12505 .c12510) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12512 (resolution :clauses (.c12504 .c12511) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12513 (resolution :clauses (.c12501 .c12512) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= c5 c_2) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12514 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))))))
(set .c12515 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c12516 (resolution :clauses (.c12514 .c12515) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12517 (resolution :clauses (.c12513 .c12516) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= c5 c_2) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)))))
(set .c12518 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1))))))
(set .c12519 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c12520 (resolution :clauses (.c12518 .c12519) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12521 (resolution :clauses (.c12517 .c12520) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= c5 c_2) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c7 c_2)))))
(set .c12522 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c12523 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_1) (f2 c_1)))))
(set .c12524 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c12525 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12526 (resolution :clauses (.c12524 .c12525) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c12527 (resolution :clauses (.c12523 .c12526) :conclusion ((not (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_1) (f2 c_1)) (not (= (f3 c_1 c_1) c_2)))))
(set .c12528 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c12529 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12530 (resolution :clauses (.c12528 .c12529) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c12531 (resolution :clauses (.c12527 .c12530) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_1) (f2 c_1)) (not (= (f3 c_1 c_1) c_2)))))
(set .c12532 (resolution :clauses (.c12522 .c12531) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c_1 c_1) c_2)))))
(set .c12533 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12534 (resolution :clauses (.c12532 .c12533) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c_1 c_1) c_2)))))
(set .c12535 (resolution :clauses (.c12521 .c12534) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= c5 c_2) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c7 c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)))))
(set .c12536 (resolution :clauses (.c12535 .c1739 .c32 .c34 .c1742) :conclusion ((not (= c5 c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= c5 c_2) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c7 c_2)) (not (= (f3 c_1 c_2) c_0)))))
(set .c12537 (resolution :clauses (.c12536 .c236 .c9047 .c292 .c9039 .c1991 .c234 .c12500) :conclusion ((not (= c5 c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (= c5 c_2) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (= c_1 (f3 c_2 c4)) (= (f3 c_1 c_1) c_1) (not (= (f2 c4) (f1 c_2))))))
(set .c12538 (eq_transitive :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c5))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2))))
(set .c12539 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c12540 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12541 (resolution :clauses (.c12539 .c12540) :conclusion ((not (= c_1 (f3 c_0 c_1))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c12542 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c12543 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12544 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c12545 (resolution :clauses (.c12543 .c12544) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c12546 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c12547 (resolution :clauses (.c12545 .c12546) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12548 (resolution :clauses (.c12542 .c12547) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12549 (resolution :clauses (.c12541 .c12548) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12550 (resolution :clauses (.c12538 .c12549) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c5))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12551 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))))))
(set .c12552 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c12553 (resolution :clauses (.c12551 .c12552) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12554 (resolution :clauses (.c12550 .c12553) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c5))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12555 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1))))))
(set .c12556 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c12557 (resolution :clauses (.c12555 .c12556) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c12558 (resolution :clauses (.c12554 .c12557) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c5))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c12559 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= c5 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c5)))))
(set .c12560 (resolution :clauses (.c12558 .c12559) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c12561 (resolution :clauses (.c12560 .c1739 .c32 .c34 .c1742) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c12562 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f1 c_2) (f2 c_1)))))
(set .c12563 (resolution :clauses (.c12562 .c1739) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (= (f1 c_2) (f2 c_1)))))
(set .c12564 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)))))
(set .c12565 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12566 (resolution :clauses (.c12564 .c12565) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)) (not (= c4 c_1)))))
(set .c12567 (resolution :clauses (.c12566 .c165) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)) (not (= c4 c_1)))))
(set .c12568 (resolution :clauses (.c12561 .c280 .c6380 .c234 .c6896 .c262 .c12537 .c716 .c294 .c288 .c2436 .c252 .c12431 .c260 .c12410 .c215 .c12563 .c12567 .c8881 .c8880 .c1739) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= c_0 c6)) (not (= c4 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (= c_0 c7) (not (= (f2 c4) (f1 c_1))) (= c5 c_0) (not (= (f1 c_0) (f2 c_1))))))
(set .c12569 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 (f3 c_1 c_1)) (f1 c_1))) (not (= (f1 (f3 c_1 c_1)) (f1 c_2))) (= (f2 c4) (f1 c_2)))))
(set .c12570 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f1 (f3 c_1 c_1)) (f1 c_2)))))
(set .c12571 (resolution :clauses (.c12569 .c12570) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 (f3 c_1 c_1)) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c12572 (resolution :clauses (.c12571 .c1741) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= (f3 c_1 c_1) c_2)))))
(set .c12573 (resolution :clauses (.c12269 .c181 .c199 .c9484 .c260 .c6896 .c1739 .c8881) :conclusion ((not (= c_0 c6)) (not (= c_1 c7)) (not (= c4 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_0) (f2 c_1))) (= c5 c_0) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)))))
(set .c12574 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)))))
(set .c12575 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12576 (resolution :clauses (.c12574 .c12575) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c4 c_1)))))
(set .c12577 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c12578 (resolution :clauses (.c12576 .c12577) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c6)))))
(set .c12579 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c12580 (resolution :clauses (.c12578 .c12579) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c12581 (resolution :clauses (.c12580 .c8881 .c164 .c165 .c166) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c12582 (resolution :clauses (.c716 .c234 .c288 .c12573 .c2436 .c8881) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c_1) c_2) (not (= (f2 c4) (f1 c_1))) (not (= c_0 c6)) (not (= c_1 c7)) (not (= (f1 c_0) (f2 c_1))) (= c5 c_0) (not (= (f1 c_1) c_0)))))
(set .c12583 (resolution :clauses (.c12220 .c181 .c199 .c9484 .c260 .c6928 .c252 .c12582 .c262 .c12581 .c12572 .c12568 .c1739 .c8881 .c8880) :conclusion ((not (= c4 c_1)) (not (= c_0 c6)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_0) (f2 c_1))) (= c5 c_0) (= c_0 c7) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f2 c5) (f1 c_1))))))
(set .c12584 (resolution :clauses (.c269 .c2163 .c2173 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c12585 (resolution :clauses (.c288 .c2430 .c2436 .c252 .c12584 .c8881 .c8880) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= c_1 c7)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))))))
(set .c12586 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)))))
(set .c12587 (eq_congruent :conclusion ((not (= c6 (f2 c_1))) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c12588 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c12589 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c12590 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c12591 (resolution :clauses (.c12589 .c12590) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c12592 (resolution :clauses (.c12588 .c12591) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c12593 (resolution :clauses (.c12587 .c12592) :conclusion ((not (= c6 (f2 c_1))) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c12594 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c6 (f2 c_1)))))
(set .c12595 (resolution :clauses (.c12593 .c12594) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12596 (resolution :clauses (.c12586 .c12595) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= (f1 c_1) (f2 c_1))))))
(set .c12597 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4)))))
(set .c12598 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c12599 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c12600 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c12601 (resolution :clauses (.c12599 .c12600) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c12602 (resolution :clauses (.c12598 .c12601) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c4 (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c12603 (resolution :clauses (.c12597 .c12602) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c12604 (resolution :clauses (.c12596 .c12603) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_1 (f3 c_2 c4)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c12605 (resolution :clauses (.c12604 .c1739 .c32 .c34 .c168) :conclusion ((= c_1 (f3 c_2 c4)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c12606 (resolution :clauses (.c12605 .c285 .c2436) :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))))))
(set .c12607 (resolution :clauses (.c267 .c10656 .c3308 .c238 .c226 .c10651 .c11007 .c274 .c271 .c8881) :conclusion ((not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= c5 c_0)) (= (f3 c_2 c_0) c_0) (= (f3 c_0 c_0) c_0) (not (= (f3 c_1 c5) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c12608 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c12609 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c12610 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12611 (resolution :clauses (.c12609 .c12610) :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c12612 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)))))
(set .c12613 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12614 (resolution :clauses (.c12612 .c12613) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c4 c_1)))))
(set .c12615 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c12616 (resolution :clauses (.c12614 .c12615) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c12617 (resolution :clauses (.c12611 .c12616) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c12618 (resolution :clauses (.c12608 .c12617) :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c12619 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))))))
(set .c12620 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)))))
(set .c12621 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12622 (resolution :clauses (.c12620 .c12621) :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c4 c_1)))))
(set .c12623 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c12624 (resolution :clauses (.c12622 .c12623) :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c6)))))
(set .c12625 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c12626 (resolution :clauses (.c12624 .c12625) :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c12627 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c12628 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12629 (resolution :clauses (.c12627 .c12628) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c12630 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c12631 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c12632 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12633 (resolution :clauses (.c12631 .c12632) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c12634 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c12635 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12636 (resolution :clauses (.c12634 .c12635) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c4 c_1)))))
(set .c12637 (resolution :clauses (.c12633 .c12636) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12638 (resolution :clauses (.c12630 .c12637) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12639 (resolution :clauses (.c12629 .c12638) :conclusion ((= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12640 (resolution :clauses (.c12626 .c12639) :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))))))
(set .c12641 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c12642 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c12643 (resolution :clauses (.c12641 .c12642) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c12644 (resolution :clauses (.c12640 .c12643) :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_0)))))
(set .c12645 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c_0 (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))))))
(set .c12646 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c12647 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c12648 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c12649 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12650 (resolution :clauses (.c12648 .c12649) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c12651 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c12652 (resolution :clauses (.c12650 .c12651) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c12653 (resolution :clauses (.c12647 .c12652) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c12654 (resolution :clauses (.c12646 .c12653) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c12655 (resolution :clauses (.c12645 .c12654) :conclusion ((not (= c7 c_2)) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c12656 (resolution :clauses (.c12644 .c12655) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c12657 (resolution :clauses (.c12619 .c12656) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c12658 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12659 (resolution :clauses (.c12657 .c12658) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c12660 (resolution :clauses (.c12618 .c12659) :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 (f3 c_0 (f1 c_0)))))))
(set .c12661 (resolution :clauses (.c12660 .c31 .c34 .c8881 .c164 .c165 .c166 .c167 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= c7 c_2)) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_1)))))
(set .c12662 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2))) (= c_0 (f3 c_2 c_2)))))
(set .c12663 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)))))
(set .c12664 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) c_2))))
(set .c12665 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c12666 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12667 (resolution :clauses (.c12665 .c12666) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c12668 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c12669 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c12670 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12671 (resolution :clauses (.c12669 .c12670) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c12672 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c12673 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12674 (resolution :clauses (.c12672 .c12673) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c4 c_1)))))
(set .c12675 (resolution :clauses (.c12671 .c12674) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12676 (resolution :clauses (.c12668 .c12675) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12677 (resolution :clauses (.c12667 .c12676) :conclusion ((= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12678 (resolution :clauses (.c12664 .c12677) :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12679 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c12680 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c12681 (resolution :clauses (.c12679 .c12680) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c12682 (resolution :clauses (.c12678 .c12681) :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c12683 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c_0 (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))))))
(set .c12684 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c12685 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c12686 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c12687 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12688 (resolution :clauses (.c12686 .c12687) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c12689 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c12690 (resolution :clauses (.c12688 .c12689) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c12691 (resolution :clauses (.c12685 .c12690) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c12692 (resolution :clauses (.c12684 .c12691) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c12693 (resolution :clauses (.c12683 .c12692) :conclusion ((not (= c7 c_2)) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c12694 (resolution :clauses (.c12682 .c12693) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c12695 (resolution :clauses (.c12663 .c12694) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c12696 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12697 (resolution :clauses (.c12695 .c12696) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c12698 (resolution :clauses (.c12662 .c12697) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (= c_0 (f3 c_2 c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c12699 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c12700 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12701 (resolution :clauses (.c12699 .c12700) :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c12702 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)))))
(set .c12703 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12704 (resolution :clauses (.c12702 .c12703) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c4 c_1)))))
(set .c12705 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c12706 (resolution :clauses (.c12704 .c12705) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c12707 (resolution :clauses (.c12701 .c12706) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c12708 (resolution :clauses (.c12698 .c12707) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (= c_0 (f3 c_2 c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c12709 (resolution :clauses (.c12708 .c31 .c34 .c8881 .c165 .c167) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (= c_0 (f3 c_2 c_2)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c12710 (resolution :clauses (.c12709 .c226 .c12661) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (= c_0 (f3 c_2 c_2)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_0 c_0) c_0))))
(set .c12711 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2))))
(set .c12712 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c12713 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12714 (resolution :clauses (.c12712 .c12713) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c12715 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c12716 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c12717 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12718 (resolution :clauses (.c12716 .c12717) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c12719 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c12720 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12721 (resolution :clauses (.c12719 .c12720) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c4 c_1)))))
(set .c12722 (resolution :clauses (.c12718 .c12721) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12723 (resolution :clauses (.c12715 .c12722) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12724 (resolution :clauses (.c12714 .c12723) :conclusion ((= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12725 (resolution :clauses (.c12711 .c12724) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12726 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c12727 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c12728 (resolution :clauses (.c12726 .c12727) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c12729 (resolution :clauses (.c12725 .c12728) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c12730 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5)))))
(set .c12731 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c12732 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c12733 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c12734 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12735 (resolution :clauses (.c12733 .c12734) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c12736 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c12737 (resolution :clauses (.c12735 .c12736) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c12738 (resolution :clauses (.c12732 .c12737) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c12739 (resolution :clauses (.c12731 .c12738) :conclusion ((not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c12740 (resolution :clauses (.c12730 .c12739) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c12741 (resolution :clauses (.c12729 .c12740) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c12742 (resolution :clauses (.c12741 .c31 .c34 .c8881 .c165 .c167) :conclusion ((not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c5) c_2) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c12743 (resolution :clauses (.c12742 .c268 .c11007) :conclusion ((not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))))))
(set .c12744 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c12745 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))))))
(set .c12746 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f3 c_0 c_0) (f1 c_2)))))
(set .c12747 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12748 (resolution :clauses (.c12746 .c12747) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c4 c_1)))))
(set .c12749 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c12750 (resolution :clauses (.c12748 .c12749) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c6)))))
(set .c12751 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c12752 (resolution :clauses (.c12750 .c12751) :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c12753 (resolution :clauses (.c12745 .c12752) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c12754 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12755 (resolution :clauses (.c12753 .c12754) :conclusion ((= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c12756 (resolution :clauses (.c12744 .c12755) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c4 c_1)))))
(set .c12757 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c_0 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c12758 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0))) (= (f3 c_2 c_0) (f3 c_0 c_0)))))
(set .c12759 (eq_congruent :conclusion ((not (= c_0 (f3 c_0 c_1))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c12760 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12761 (resolution :clauses (.c12759 .c12760) :conclusion ((not (= c_0 (f3 c_0 c_1))) (= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)))))
(set .c12762 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c12763 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c12764 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12765 (resolution :clauses (.c12763 .c12764) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c12766 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c12767 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12768 (resolution :clauses (.c12766 .c12767) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c4 c_1)))))
(set .c12769 (resolution :clauses (.c12765 .c12768) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12770 (resolution :clauses (.c12762 .c12769) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12771 (resolution :clauses (.c12761 .c12770) :conclusion ((= (f3 c_0 c_0) (f3 (f3 c_0 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12772 (resolution :clauses (.c12758 .c12771) :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= (f3 c_2 c_0) (f3 c_0 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c12773 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))))))
(set .c12774 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_0)) (= (f3 c_1 c_0) (f3 c4 c5)))))
(set .c12775 (resolution :clauses (.c12773 .c12774) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_0))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c12776 (resolution :clauses (.c12772 .c12775) :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= (f3 c_2 c_0) (f3 c_0 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c12777 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c_0 (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))))))
(set .c12778 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c12779 (eq_congruent :conclusion ((not (= c4 (f2 c_0))) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)))))
(set .c12780 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c12781 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12782 (resolution :clauses (.c12780 .c12781) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c_0) (f2 c5))) (= c4 (f2 c_0)))))
(set .c12783 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c12784 (resolution :clauses (.c12782 .c12783) :conclusion ((not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (= c4 (f2 c_0)) (not (= c5 c_0)))))
(set .c12785 (resolution :clauses (.c12779 .c12784) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c4 c5)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c12786 (resolution :clauses (.c12778 .c12785) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c5 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c12787 (resolution :clauses (.c12777 .c12786) :conclusion ((not (= c7 c_2)) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c5 c_0)) (not (= c4 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))))))
(set .c12788 (resolution :clauses (.c12776 .c12787) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (= (f3 c_2 c_0) (f3 c_0 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c12789 (resolution :clauses (.c12757 .c12788) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c12790 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12791 (resolution :clauses (.c12789 .c12790) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c12792 (resolution :clauses (.c12756 .c12791) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c4 c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c12793 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0))))))
(set .c12794 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_0) (f3 c_0 c_0)))))
(set .c12795 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c12796 (resolution :clauses (.c12794 .c12795) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_0) (f3 c_0 c_0)) (not (= c4 c_1)))))
(set .c12797 (resolution :clauses (.c12793 .c12796) :conclusion ((not (= c_0 c_0)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_1)))))
(set .c12798 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12799 (resolution :clauses (.c12797 .c12798) :conclusion ((= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_1)))))
(set .c12800 (resolution :clauses (.c12792 .c12799) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c4 c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c5 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)))))
(set .c12801 (resolution :clauses (.c12800 .c31 .c34 .c8881 .c164 .c165 .c166 .c167 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c7 c_2)) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= (f3 (f3 c_0 c_1) c_0) (f3 c_0 (f3 c_1 c_0)))) (not (= c5 c_0)))))
(set .c12802 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c_0) (f1 c_2)))))
(set .c12803 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c12804 (resolution :clauses (.c12802 .c12803) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c_0) (f1 c_2)) (not (= c5 c_0)))))
(set .c12805 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c12806 (resolution :clauses (.c12804 .c12805) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c_0) (f1 c_2)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c12807 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c12808 (resolution :clauses (.c12806 .c12807) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_2)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c12809 (resolution :clauses (.c12808 .c166 .c8881 .c164) :conclusion ((= (f2 c_0) (f1 c_2)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c12810 (resolution :clauses (.c12801 .c226 .c12743 .c2954 .c269 .c2173 .c252 .c12606 .c207 .c12809 .c2399 .c262 .c12585 .c177 .c195 .c17 .c171 .c343 .c11080 .c12583 .c179 .c5450 .c5460 .c476 .c8881 .c8880 .c1739) :conclusion ((not (= c_0 c6)) (not (= c4 c_1)) (not (= (f2 c4) (f1 c_1))) (= c_0 c7))))
(set .c12811 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)))))
(set .c12812 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= c5 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 c5)))))
(set .c12813 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (= (f3 c_2 c_0) c_2))))
(set .c12814 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 c_0)) (= (f3 c_2 c_0) (f3 c_2 c4)))))
(set .c12815 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12816 (resolution :clauses (.c12814 .c12815) :conclusion ((not (= c4 c_0)) (= (f3 c_2 c_0) (f3 c_2 c4)))))
(set .c12817 (resolution :clauses (.c12813 .c12816) :conclusion ((not (= c_2 (f3 c_2 c4))) (= (f3 c_2 c_0) c_2) (not (= c4 c_0)))))
(set .c12818 (resolution :clauses (.c12812 .c12817) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 c5)) (not (= c_2 (f3 c_2 c4))) (not (= c4 c_0)))))
(set .c12819 (resolution :clauses (.c12811 .c12818) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= c_2 (f3 c_2 c4))) (not (= c4 c_0)))))
(set .c12820 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))))))
(set .c12821 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c12822 (resolution :clauses (.c12820 .c12821) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c12823 (resolution :clauses (.c12819 .c12822) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= c_2 (f3 c_2 c4))) (not (= c4 c_0)) (not (= c7 c_2)))))
(set .c12824 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c12825 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c12826 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c12827 (resolution :clauses (.c12825 .c12826) :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c12828 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c12829 (resolution :clauses (.c12827 .c12828) :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c12830 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c12831 (resolution :clauses (.c12829 .c12830) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c12832 (resolution :clauses (.c12824 .c12831) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c12833 (resolution :clauses (.c12823 .c12832) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= c_2 (f3 c_2 c4))) (not (= c4 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c12834 (resolution :clauses (.c12833 .c34 .c164 .c166 .c167) :conclusion ((not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= c_2 (f3 c_2 c4))) (not (= c4 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c12835 (resolution :clauses (.c12834 .c226 .c2949 .c295 .c8881) :conclusion ((not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= c_2 (f3 c_2 c4))) (not (= c4 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f3 c_0 c_0) c_0))))
(set .c12836 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 c_2 c_0) c_1)) (= c4 c_1))))
(set .c12837 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c12838 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12839 (resolution :clauses (.c12837 .c12838) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c12840 (resolution :clauses (.c12836 .c12839) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= c4 c_1) (not (= (f3 c_0 c_0) c_2)))))
(set .c12841 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))))))
(set .c12842 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c12843 (resolution :clauses (.c12841 .c12842) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c12844 (resolution :clauses (.c12840 .c12843) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= c4 c_1) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c12845 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))))))
(set .c12846 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c12847 (resolution :clauses (.c12845 .c12846) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c12848 (resolution :clauses (.c12844 .c12847) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= c4 c_1) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c12849 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0)))))
(set .c12850 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c_0) (f2 c5))) (= (f3 c_2 c_0) (f2 c_0)))))
(set .c12851 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c12852 (resolution :clauses (.c12850 .c12851) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c_0) (f2 c5))) (= (f3 c_2 c_0) (f2 c_0)) (not (= c7 c_2)))))
(set .c12853 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c12854 (resolution :clauses (.c12852 .c12853) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c_0) (f2 c5))) (= (f3 c_2 c_0) (f2 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c12855 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c12856 (resolution :clauses (.c12854 .c12855) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (= (f3 c_2 c_0) (f2 c_0)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c12857 (resolution :clauses (.c12849 .c12856) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0)) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c12858 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12859 (resolution :clauses (.c12857 .c12858) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0)) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c12860 (resolution :clauses (.c12848 .c12859) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= c4 c_1) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))))))
(set .c12861 (resolution :clauses (.c12860 .c31 .c34 .c8881 .c164 .c166) :conclusion ((not (= c4 c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= c4 c_1) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c12862 (resolution :clauses (.c12861 .c226 .c3308 .c276 .c10656 .c238 .c9804 .c12835 .c8881) :conclusion ((not (= c4 c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c4 c_1) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_0 c_0) c_0) (= (f3 c_2 c_0) c_0) (= c_0 (f3 c_2 c5)))))
(set .c12863 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= c4 c_0))))
(set .c12864 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c12865 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12866 (resolution :clauses (.c12864 .c12865) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c12867 (resolution :clauses (.c12863 .c12866) :conclusion ((not (= c4 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= c4 c_0))))
(set .c12868 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))))))
(set .c12869 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c12870 (resolution :clauses (.c12868 .c12869) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c12871 (resolution :clauses (.c12867 .c12870) :conclusion ((not (= c4 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= c4 c_0) (not (= c7 c_2)) (not (= c5 c_0)))))
(set .c12872 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c12873 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c12874 (resolution :clauses (.c12872 .c12873) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c12875 (resolution :clauses (.c12871 .c12874) :conclusion ((not (= c4 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= c4 c_0) (not (= c7 c_2)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c12876 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c12877 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c12878 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c12879 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12880 (resolution :clauses (.c12878 .c12879) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c12881 (resolution :clauses (.c12877 .c12880) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c12882 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c12883 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12884 (resolution :clauses (.c12882 .c12883) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c12885 (resolution :clauses (.c12881 .c12884) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c12886 (resolution :clauses (.c12876 .c12885) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c12887 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12888 (resolution :clauses (.c12886 .c12887) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c12889 (resolution :clauses (.c12875 .c12888) :conclusion ((not (= c4 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= c4 c_0) (not (= c7 c_2)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c12890 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c12891 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12892 (resolution :clauses (.c12890 .c12891) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c12893 (resolution :clauses (.c12889 .c12892) :conclusion ((not (= c4 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 (f3 c_2 c_2))) (= c4 c_0) (not (= c7 c_2)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c12894 (resolution :clauses (.c12893 .c34) :conclusion ((not (= c4 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 (f3 c_2 c_2))) (= c4 c_0) (not (= c7 c_2)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c12895 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c_0) c_2))))
(set .c12896 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c12897 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12898 (resolution :clauses (.c12896 .c12897) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c12899 (resolution :clauses (.c12895 .c12898) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c_0) c_2) (not (= c_0 (f3 c_2 c_2))))))
(set .c12900 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))))))
(set .c12901 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c12902 (resolution :clauses (.c12900 .c12901) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c12903 (resolution :clauses (.c12899 .c12902) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c_0) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c12904 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c12905 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c12906 (resolution :clauses (.c12904 .c12905) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c12907 (resolution :clauses (.c12903 .c12906) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c_0) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c12908 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c12909 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c12910 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c12911 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12912 (resolution :clauses (.c12910 .c12911) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c12913 (resolution :clauses (.c12909 .c12912) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c12914 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c12915 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12916 (resolution :clauses (.c12914 .c12915) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c12917 (resolution :clauses (.c12913 .c12916) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c12918 (resolution :clauses (.c12908 .c12917) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c12919 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12920 (resolution :clauses (.c12918 .c12919) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c12921 (resolution :clauses (.c12907 .c12920) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c_0) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c12922 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))))))
(set .c12923 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_0 c_0) (f1 c_2)))))
(set .c12924 (resolution :clauses (.c12922 .c12923) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c12925 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12926 (resolution :clauses (.c12924 .c12925) :conclusion ((= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c12927 (resolution :clauses (.c12921 .c12926) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c_0) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c12928 (resolution :clauses (.c12927 .c34 .c169) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= (f3 c_0 c_0) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c12929 (resolution :clauses (.c12928 .c226 .c12894) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 (f3 c_2 c_2))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_0 c_0) c_0) (= c4 c_0))))
(set .c12930 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (= c6 c_1))))
(set .c12931 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)))))
(set .c12932 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12933 (resolution :clauses (.c12931 .c12932) :conclusion ((not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)))))
(set .c12934 (resolution :clauses (.c12930 .c12933) :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_2) c_1)) (= c6 c_1) (not (= (f3 c_2 c_0) c_2)))))
(set .c12935 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c12936 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12937 (resolution :clauses (.c12935 .c12936) :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c12938 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)))))
(set .c12939 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c12940 (resolution :clauses (.c12938 .c12939) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c7 c_2)))))
(set .c12941 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c12942 (resolution :clauses (.c12940 .c12941) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c12943 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c12944 (resolution :clauses (.c12942 .c12943) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c12945 (resolution :clauses (.c12937 .c12944) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c12946 (resolution :clauses (.c12934 .c12945) :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_2) c_1)) (= c6 c_1) (not (= (f3 c_2 c_0) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (not (= c5 c_0)))))
(set .c12947 (resolution :clauses (.c12946 .c31 .c8881 .c164 .c166) :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_2) c_1)) (= c6 c_1) (not (= (f3 c_2 c_0) c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (not (= c5 c_0)))))
(set .c12948 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= c4 c_0))))
(set .c12949 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))))))
(set .c12950 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)))))
(set .c12951 (resolution :clauses (.c12949 .c12950) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c12952 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c12953 (resolution :clauses (.c12951 .c12952) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c12954 (resolution :clauses (.c12948 .c12953) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= c4 c_0) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c12955 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c12956 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c12957 (resolution :clauses (.c12955 .c12956) :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c12958 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)))))
(set .c12959 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c12960 (resolution :clauses (.c12958 .c12959) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c7 c_2)))))
(set .c12961 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c12962 (resolution :clauses (.c12960 .c12961) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c12963 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c12964 (resolution :clauses (.c12962 .c12963) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c12965 (resolution :clauses (.c12957 .c12964) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c12966 (resolution :clauses (.c12954 .c12965) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= c4 c_0) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_1)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c12967 (resolution :clauses (.c12966 .c31 .c8881 .c164 .c166 .c169) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (= c4 c_0) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_2 c_2) c_1)) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c12968 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c_2) (f1 c_0)))))
(set .c12969 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c12970 (resolution :clauses (.c12968 .c12969) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c_2) (f1 c_0)) (not (= c4 c_2)))))
(set .c12971 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c12972 (resolution :clauses (.c12970 .c12971) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c_2) (f1 c_0)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c12973 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c12974 (resolution :clauses (.c12972 .c12973) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_2) (f1 c_0)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c12975 (resolution :clauses (.c12974 .c166 .c164) :conclusion ((not (= (f2 c4) (f1 c_2))) (= (f2 c_2) (f1 c_0)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c12976 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_2) (f1 c_2)))))
(set .c12977 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c12978 (resolution :clauses (.c12976 .c12977) :conclusion ((not (= (f2 c4) (f1 c_2))) (= (f2 c_2) (f1 c_2)) (not (= c4 c_2)))))
(set .c12979 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c12980 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)))))
(set .c12981 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c12982 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c12983 (resolution :clauses (.c12981 .c12982) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c7 c_2)))))
(set .c12984 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c12985 (resolution :clauses (.c12983 .c12984) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c12986 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c12987 (resolution :clauses (.c12985 .c12986) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c12988 (resolution :clauses (.c12980 .c12987) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c12989 (resolution :clauses (.c12979 .c12988) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c12990 (resolution :clauses (.c12989 .c164 .c8881 .c31 .c166) :conclusion ((= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c12991 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c5) (f1 c_2)))))
(set .c12992 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c12993 (resolution :clauses (.c12991 .c12992) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_2)) (not (= c7 c_2)))))
(set .c12994 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c12995 (resolution :clauses (.c12993 .c12994) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_2)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c12996 (resolution :clauses (.c12995 .c8881 .c164 .c166) :conclusion ((= (f2 c5) (f1 c_2)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c12997 (resolution :clauses (.c12967 .c238 .c12947 .c242 .c12929 .c183 .c219 .c223 .c12975 .c12978 .c8081 .c292 .c8152 .c258 .c12862 .c1344 .c2954 .c272 .c269 .c12990 .c12996 .c207 .c12809 .c8881) :conclusion ((not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c5 c_0)) (= c6 c_1) (= c4 c_1) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f2 c_0) (f1 c_0))))))
(set .c12998 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_0 c4) c_1))))
(set .c12999 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c13000 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13001 (resolution :clauses (.c12999 .c13000) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c13002 (resolution :clauses (.c12998 .c13001) :conclusion ((not (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_0 c4) c_1) (not (= (f3 c_0 c_0) c_2)))))
(set .c13003 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c13004 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c13005 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c13006 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13007 (resolution :clauses (.c13005 .c13006) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c13008 (resolution :clauses (.c13004 .c13007) :conclusion ((not (= (f3 c_0 c_2) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= (f3 c_0 c_0) c_2)))))
(set .c13009 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_2) (f3 c_0 (f3 c_0 c_0))))))
(set .c13010 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13011 (resolution :clauses (.c13009 .c13010) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_2) (f3 c_0 (f3 c_0 c_0))))))
(set .c13012 (resolution :clauses (.c13008 .c13011) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= (f3 c_0 c_0) c_2)))))
(set .c13013 (resolution :clauses (.c13003 .c13012) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)))))
(set .c13014 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13015 (resolution :clauses (.c13013 .c13014) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)))))
(set .c13016 (resolution :clauses (.c13002 .c13015) :conclusion ((not (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_0 c4) c_1) (not (= (f3 c_0 c_0) c_2)))))
(set .c13017 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c13018 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c13019 (resolution :clauses (.c13017 .c13018) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c13020 (resolution :clauses (.c13016 .c13019) :conclusion ((not (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_0 c4) c_1) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c6)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c13021 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))))))
(set .c13022 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c13023 (resolution :clauses (.c13021 .c13022) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c13024 (resolution :clauses (.c13020 .c13023) :conclusion ((not (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_0 c4) c_1) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c6)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_1 c7)))))
(set .c13025 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) (f3 c_0 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_1 c_2) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c13026 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13027 (resolution :clauses (.c13025 .c13026) :conclusion ((not (= (f3 c_1 c_2) (f3 c_0 c_0))) (= (f3 (f3 c_1 c_2) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c13028 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_1 c_2) (f3 c_0 c_0)))))
(set .c13029 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c13030 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c13031 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13032 (resolution :clauses (.c13030 .c13031) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c13033 (resolution :clauses (.c13029 .c13032) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c13034 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13035 (resolution :clauses (.c13033 .c13034) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c13036 (resolution :clauses (.c13028 .c13035) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_1 c_2) (f3 c_0 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c13037 (resolution :clauses (.c13027 .c13036) :conclusion ((= (f3 (f3 c_1 c_2) c_0) (f3 (f3 c_0 c_0) c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c13038 (resolution :clauses (.c13024 .c13037) :conclusion ((not (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_0 c4) c_1) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c6)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c13039 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c4 (f3 c_0 c_0))) (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0))))))
(set .c13040 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13041 (resolution :clauses (.c13039 .c13040) :conclusion ((not (= c4 (f3 c_0 c_0))) (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0))))))
(set .c13042 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_0 c_0) c_2)) (= c4 (f3 c_0 c_0)))))
(set .c13043 (resolution :clauses (.c13041 .c13042) :conclusion ((= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0))) (not (= c4 c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c13044 (resolution :clauses (.c13038 .c13043) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_0 c4) c_1) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c6)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c13045 (resolution :clauses (.c13044 .c33 .c34) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_0 c4) c_1) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c6)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c13046 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c13047 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)))))
(set .c13048 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13049 (resolution :clauses (.c13047 .c13048) :conclusion ((not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)))))
(set .c13050 (resolution :clauses (.c13046 .c13049) :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 c_2 c_0) c_2)))))
(set .c13051 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c13052 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13053 (resolution :clauses (.c13051 .c13052) :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c13054 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)))))
(set .c13055 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13056 (resolution :clauses (.c13054 .c13055) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c_1 c7)))))
(set .c13057 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13058 (resolution :clauses (.c13056 .c13057) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13059 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c13060 (resolution :clauses (.c13058 .c13059) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c13061 (resolution :clauses (.c13053 .c13060) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c13062 (resolution :clauses (.c13050 .c13061) :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 c_2 c_0) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c5 c_0)))))
(set .c13063 (resolution :clauses (.c13062 .c31 .c8881 .c164 .c166 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (not (= (f3 c_2 c_0) c_2)) (not (= (f1 c_1) c_1)) (not (= c5 c_0)))))
(set .c13064 (resolution :clauses (.c13063 .c238 .c10656 .c267 .c3308 .c226 .c13045 .c294 .c11459 .c8881) :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (not (= (f1 c_1) c_1)) (not (= c5 c_0)) (= (f3 c_2 c_0) c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (= (f3 c_0 c_0) c_0) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c4 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c13065 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_1 c_2) c_0))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2))))
(set .c13066 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_1 c_2) c_0)))))
(set .c13067 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c13068 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c13069 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c13070 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13071 (resolution :clauses (.c13069 .c13070) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c13072 (resolution :clauses (.c13068 .c13071) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c13073 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13074 (resolution :clauses (.c13072 .c13073) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c13075 (resolution :clauses (.c13067 .c13074) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c13076 (resolution :clauses (.c13066 .c13075) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_1 c_2) c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c13077 (resolution :clauses (.c13065 .c13076) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c13078 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))))))
(set .c13079 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c13080 (resolution :clauses (.c13078 .c13079) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c13081 (resolution :clauses (.c13077 .c13080) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)))))
(set .c13082 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c13083 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c13084 (resolution :clauses (.c13082 .c13083) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c13085 (resolution :clauses (.c13081 .c13084) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c13086 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c13087 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c13088 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c13089 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13090 (resolution :clauses (.c13088 .c13089) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c13091 (resolution :clauses (.c13087 .c13090) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c13092 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c13093 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13094 (resolution :clauses (.c13092 .c13093) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c13095 (resolution :clauses (.c13091 .c13094) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c13096 (resolution :clauses (.c13086 .c13095) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c13097 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13098 (resolution :clauses (.c13096 .c13097) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c13099 (resolution :clauses (.c13085 .c13098) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c13100 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))))))
(set .c13101 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_0 c_0) (f1 c_2)))))
(set .c13102 (resolution :clauses (.c13100 .c13101) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c13103 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13104 (resolution :clauses (.c13102 .c13103) :conclusion ((= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c13105 (resolution :clauses (.c13099 .c13104) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c13106 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4)))))
(set .c13107 (resolution :clauses (.c13105 .c13106) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c13108 (resolution :clauses (.c13107 .c33 .c34 .c169) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c13109 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)))))
(set .c13110 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c5 c_0)) (= (f3 (f3 c_1 c_2) c_0) (f3 c_2 c5)))))
(set .c13111 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c13112 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c13113 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c13114 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13115 (resolution :clauses (.c13113 .c13114) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c13116 (resolution :clauses (.c13112 .c13115) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c13117 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13118 (resolution :clauses (.c13116 .c13117) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c13119 (resolution :clauses (.c13111 .c13118) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c13120 (resolution :clauses (.c13110 .c13119) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_1 c_2) c_0) (f3 c_2 c5)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c13121 (resolution :clauses (.c13109 .c13120) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c13122 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))))))
(set .c13123 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c13124 (resolution :clauses (.c13122 .c13123) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c13125 (resolution :clauses (.c13121 .c13124) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)))))
(set .c13126 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c13127 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c13128 (resolution :clauses (.c13126 .c13127) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c13129 (resolution :clauses (.c13125 .c13128) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13130 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c13131 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c13132 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c13133 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13134 (resolution :clauses (.c13132 .c13133) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c13135 (resolution :clauses (.c13131 .c13134) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c13136 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c13137 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13138 (resolution :clauses (.c13136 .c13137) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c13139 (resolution :clauses (.c13135 .c13138) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c13140 (resolution :clauses (.c13130 .c13139) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c13141 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13142 (resolution :clauses (.c13140 .c13141) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c13143 (resolution :clauses (.c13129 .c13142) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c13144 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c13145 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13146 (resolution :clauses (.c13144 .c13145) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c13147 (resolution :clauses (.c13143 .c13146) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 c_0) c_2)))))
(set .c13148 (resolution :clauses (.c13147 .c33 .c34) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 c_0) c_2)))))
(set .c13149 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c_2) (f1 c_0)))))
(set .c13150 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13151 (resolution :clauses (.c13149 .c13150) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c_2) (f1 c_0)) (not (= c_1 c7)))))
(set .c13152 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13153 (resolution :clauses (.c13151 .c13152) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_2) (f1 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13154 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13155 (resolution :clauses (.c13153 .c13154) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_2) (f1 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c4 c_2)))))
(set .c13156 (resolution :clauses (.c13155 .c166 .c164) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c_2) (f1 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c4 c_2)))))
(set .c13157 (resolution :clauses (.c13148 .c226 .c13108 .c242 .c13064 .c183 .c13156 .c8081 .c219 .c223 .c292 .c289 .c201 .c12978 .c8152 .c8268 .c8881) :conclusion ((not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c_1 c7)) (not (= c_0 c6)) (= (f3 c_0 c_0) c_0) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f2 c_0) (f1 c_2))))))
(set .c13158 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)))))
(set .c13159 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c13160 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13161 (resolution :clauses (.c13159 .c13160) :conclusion ((not (= (f3 c_1 c_0) c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c13162 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c13163 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c13164 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13165 (resolution :clauses (.c13163 .c13164) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c13166 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c13167 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13168 (resolution :clauses (.c13166 .c13167) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c_1 c7)))))
(set .c13169 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13170 (resolution :clauses (.c13168 .c13169) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13171 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c13172 (resolution :clauses (.c13170 .c13171) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c13173 (resolution :clauses (.c13165 .c13172) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c13174 (resolution :clauses (.c13162 .c13173) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c13175 (resolution :clauses (.c13161 .c13174) :conclusion ((= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c13176 (resolution :clauses (.c13158 .c13175) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c13177 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c13178 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c13179 (resolution :clauses (.c13177 .c13178) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c13180 (resolution :clauses (.c13176 .c13179) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c13181 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))))))
(set .c13182 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c13183 (resolution :clauses (.c13181 .c13182) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c13184 (resolution :clauses (.c13180 .c13183) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c13185 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c4)))))
(set .c13186 (resolution :clauses (.c13184 .c13185) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c_2 (f3 c_2 c4)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c13187 (resolution :clauses (.c13186 .c31 .c34 .c8881 .c164 .c166) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c_2 (f3 c_2 c4)) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c13188 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c13189 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)))))
(set .c13190 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c13191 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13192 (resolution :clauses (.c13190 .c13191) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c_1 c7)))))
(set .c13193 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13194 (resolution :clauses (.c13192 .c13193) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13195 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c13196 (resolution :clauses (.c13194 .c13195) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c13197 (resolution :clauses (.c13189 .c13196) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13198 (resolution :clauses (.c13188 .c13197) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13199 (resolution :clauses (.c13198 .c166 .c8881 .c164 .c31) :conclusion ((= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13200 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c_0) (f1 c_1)))))
(set .c13201 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13202 (resolution :clauses (.c13200 .c13201) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_1)) (not (= c_1 c7)))))
(set .c13203 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13204 (resolution :clauses (.c13202 .c13203) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13205 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c13206 (resolution :clauses (.c13204 .c13205) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c13207 (resolution :clauses (.c13206 .c166 .c8881 .c164) :conclusion ((= (f2 c_0) (f1 c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c13208 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_2)))))
(set .c13209 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13210 (resolution :clauses (.c13208 .c13209) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_2)) (not (= c_1 c7)))))
(set .c13211 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13212 (resolution :clauses (.c13210 .c13211) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_2)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13213 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c13214 (resolution :clauses (.c13212 .c13213) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_2)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c13215 (resolution :clauses (.c13214 .c166 .c164 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_2)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_0)))))
(set .c13216 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c4) (f1 c_0)))))
(set .c13217 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13218 (resolution :clauses (.c13216 .c13217) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c4) (f1 c_0)) (not (= c_1 c7)))))
(set .c13219 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13220 (resolution :clauses (.c13218 .c13219) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13221 (resolution :clauses (.c13220 .c164 .c166) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13222 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)))))
(set .c13223 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13224 (resolution :clauses (.c13222 .c13223) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)) (not (= c_1 c7)))))
(set .c13225 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13226 (resolution :clauses (.c13224 .c13225) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13227 (resolution :clauses (.c13226 .c164 .c8881 .c166) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13228 (resolution :clauses (.c13187 .c295 .c2949 .c226 .c3613 .c258 .c13157 .c1344 .c2954 .c272 .c269 .c189 .c207 .c13199 .c13207 .c13215 .c13221 .c13227 .c262 .c12997 .c8881) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f1 c_1) c_1)) (not (= c_0 c6)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= c4 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c_0) (f1 c_0))) (= c_0 c7) (= c6 c_1))))
(set .c13229 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_2 (f3 c_1 c4)))))
(set .c13230 (eq_congruent :conclusion ((not (= (f2 c_2) c6)) (not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))))))
(set .c13231 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c13232 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c13233 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c13234 (resolution :clauses (.c13232 .c13233) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c13235 (resolution :clauses (.c13231 .c13234) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c13236 (resolution :clauses (.c13230 .c13235) :conclusion ((not (= (f2 c_2) c6)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c13237 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (= (f2 c_2) c6))))
(set .c13238 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13239 (resolution :clauses (.c13237 .c13238) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (= (f2 c_2) c6) (not (= c4 c_2)))))
(set .c13240 (resolution :clauses (.c13236 .c13239) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)))))
(set .c13241 (resolution :clauses (.c13229 .c13240) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4))) (= c_2 (f3 c_1 c4)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)))))
(set .c13242 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)))))
(set .c13243 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= c4 (f3 c4 c5)))))
(set .c13244 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c13245 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c13246 (resolution :clauses (.c13244 .c13245) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c13247 (resolution :clauses (.c13243 .c13246) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c13248 (resolution :clauses (.c13242 .c13247) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c4)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c13249 (resolution :clauses (.c13241 .c13248) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_2 (f3 c_1 c4)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)) (not (= c_1 c7)))))
(set .c13250 (resolution :clauses (.c13249 .c33 .c34 .c169) :conclusion ((= c_2 (f3 c_1 c4)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)) (not (= c_1 c7)))))
(set .c13251 (resolution :clauses (.c13250 .c289 .c10119 .c258 .c1407 .c8881) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)) (not (= c_1 c7)) (= c4 c_1))))
(set .c13252 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)))))
(set .c13253 (eq_congruent :conclusion ((not (= (f2 c_2) c6)) (not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))))))
(set .c13254 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c13255 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c13256 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c13257 (resolution :clauses (.c13255 .c13256) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c13258 (resolution :clauses (.c13254 .c13257) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c13259 (resolution :clauses (.c13253 .c13258) :conclusion ((not (= (f2 c_2) c6)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c13260 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (= (f2 c_2) c6))))
(set .c13261 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13262 (resolution :clauses (.c13260 .c13261) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (= (f2 c_2) c6) (not (= c4 c_2)))))
(set .c13263 (resolution :clauses (.c13259 .c13262) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)))))
(set .c13264 (resolution :clauses (.c13252 .c13263) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)))))
(set .c13265 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4)))))
(set .c13266 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= c4 (f3 c4 c5)))))
(set .c13267 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c13268 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c13269 (resolution :clauses (.c13267 .c13268) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c13270 (resolution :clauses (.c13266 .c13269) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c13271 (resolution :clauses (.c13265 .c13270) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c13272 (resolution :clauses (.c13264 .c13271) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_2 (f3 c_2 c4)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c13273 (resolution :clauses (.c13272 .c33 .c34 .c169) :conclusion ((= c_2 (f3 c_2 c4)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c13274 (resolution :clauses (.c13273 .c295 .c10119 .c8881) :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c13275 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c13276 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c13277 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)))))
(set .c13278 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c13279 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c13280 (eq_congruent :conclusion ((not (= c5 (f1 c_1))) (= (f2 (f1 c_1)) (f2 c5)))))
(set .c13281 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c13282 (resolution :clauses (.c13280 .c13281) :conclusion ((= (f2 (f1 c_1)) (f2 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c13283 (resolution :clauses (.c13279 .c13282) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c13284 (resolution :clauses (.c13278 .c13283) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c13285 (resolution :clauses (.c13277 .c13284) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c13286 (eq_congruent :conclusion ((not (= c5 (f1 c_1))) (= (f2 (f1 c_1)) (f2 c5)))))
(set .c13287 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c13288 (resolution :clauses (.c13286 .c13287) :conclusion ((= (f2 (f1 c_1)) (f2 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c13289 (resolution :clauses (.c13285 .c13288) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c13290 (resolution :clauses (.c13276 .c13289) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c13291 (resolution :clauses (.c13275 .c13290) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c13292 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c13293 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= (f1 c_2) (f3 c4 c5)))))
(set .c13294 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c13295 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c13296 (eq_congruent :conclusion ((not (= c5 (f1 c_1))) (= (f2 (f1 c_1)) (f2 c5)))))
(set .c13297 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c13298 (resolution :clauses (.c13296 .c13297) :conclusion ((= (f2 (f1 c_1)) (f2 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c13299 (resolution :clauses (.c13295 .c13298) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c13300 (resolution :clauses (.c13294 .c13299) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c13301 (resolution :clauses (.c13293 .c13300) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c13302 (resolution :clauses (.c13292 .c13301) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c13303 (resolution :clauses (.c13291 .c13302) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c13304 (resolution :clauses (.c13303 .c34 .c8881 .c90 .c167 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= c7 c_2)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c13305 (resolution :clauses (.c13304 .c258 .c13274 .c262 .c13251 .c252 .c13228 .c8880) :conclusion ((not (= c_0 c6)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (= c4 c_1) (= c_0 c7) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 c_0) (f1 c_0))) (= c6 c_1))))
(set .c13306 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)))))
(set .c13307 (eq_congruent :conclusion ((not (= c5 (f1 c_1))) (= (f2 (f1 c_1)) (f2 c5)))))
(set .c13308 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c13309 (resolution :clauses (.c13307 .c13308) :conclusion ((= (f2 (f1 c_1)) (f2 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c13310 (resolution :clauses (.c13306 .c13309) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c13311 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13312 (resolution :clauses (.c13310 .c13311) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)))))
(set .c13313 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c13314 (resolution :clauses (.c13312 .c13313) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c13315 (resolution :clauses (.c13314 .c8881 .c90 .c164 .c166) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c13316 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c4) (f1 c_2)))))
(set .c13317 (eq_congruent :conclusion ((not (= c5 (f1 c_1))) (= (f2 (f1 c_1)) (f2 c5)))))
(set .c13318 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c13319 (resolution :clauses (.c13317 .c13318) :conclusion ((= (f2 (f1 c_1)) (f2 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c13320 (resolution :clauses (.c13316 .c13319) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c4) (f1 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c13321 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c13322 (resolution :clauses (.c13320 .c13321) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c4))) (= (f2 c4) (f1 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13323 (resolution :clauses (.c13322 .c90 .c165) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13324 (resolution :clauses (.c13323 .c258 .c1407 .c262 .c13315) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c4 c_1) (not (= c_0 c6)) (= c_0 c7))))
(set .c13325 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c4) (f1 c_2)))))
(set .c13326 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13327 (resolution :clauses (.c13325 .c13326) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)))))
(set .c13328 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13329 (resolution :clauses (.c13327 .c13328) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13330 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c13331 (resolution :clauses (.c13329 .c13330) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c4 c_2)))))
(set .c13332 (resolution :clauses (.c13331 .c8881 .c164 .c165 .c166) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c4 c_2)))))
(set .c13333 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_2))) (= (f2 c4) (f1 c_2)))))
(set .c13334 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13335 (resolution :clauses (.c13333 .c13334) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)))))
(set .c13336 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13337 (resolution :clauses (.c13335 .c13336) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13338 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f1 (f3 c_0 c_0)) (f1 c_2)))))
(set .c13339 (resolution :clauses (.c13337 .c13338) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_2)))))
(set .c13340 (resolution :clauses (.c13339 .c164 .c166) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_2)))))
(set .c13341 (resolution :clauses (.c13340 .c226 .c3613 .c258 .c13332 .c2954 .c269 .c189 .c13199 .c13207 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c4) (f1 c_2)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f1 c_1) c_1)) (not (= c5 c_0)) (= c4 c_1) (not (= (f2 c_0) (f1 c_0))))))
(set .c13342 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)))))
(set .c13343 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13344 (resolution :clauses (.c13342 .c13343) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c4 c_2)))))
(set .c13345 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))))))
(set .c13346 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c13347 (resolution :clauses (.c13345 .c13346) :conclusion ((= (f2 (f3 c_2 c_0)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c13348 (resolution :clauses (.c13344 .c13347) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c13349 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c13350 (resolution :clauses (.c13348 .c13349) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c13351 (resolution :clauses (.c13350 .c166) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (= (f2 c4) (f1 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c13352 (resolution :clauses (.c13351 .c258 .c23 .c3097 .c12809 .c262 .c13341 .c252 .c13324 .c13305 .c171 .c93 .c11 .c11080 .c8880) :conclusion ((not (= c5 c_0)) (= c4 c_1) (not (= c_0 c6)) (= c_0 c7) (not (= (f2 c4) (f1 c_1))) (= c6 c_1))))
(set .c13353 (resolution :clauses (.c260 .c8261 .c8183) :conclusion ((= c5 c_0) (not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= c4 c_2)))))
(set .c13354 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)))))
(set .c13355 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c13356 (resolution :clauses (.c13354 .c13355) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c4 c_0)))))
(set .c13357 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c13358 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c13359 (resolution :clauses (.c13357 .c13358) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c13360 (resolution :clauses (.c13356 .c13359) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c13361 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c13362 (resolution :clauses (.c13360 .c13361) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c13363 (resolution :clauses (.c13362 .c166) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (= (f2 c4) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c13364 (resolution :clauses (.c13363 .c15 .c9478) :conclusion ((= (f2 c4) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c13365 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)))))
(set .c13366 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c13367 (resolution :clauses (.c13365 .c13366) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c5 c_1)))))
(set .c13368 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13369 (resolution :clauses (.c13367 .c13368) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c13370 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c13371 (resolution :clauses (.c13369 .c13370) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_2)) (not (= c5 c_1)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c13372 (resolution :clauses (.c13371 .c1739 .c8881 .c164 .c166) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= c5 c_1)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c13373 (resolution :clauses (.c13372 .c260 .c13364) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= c_0 c6)) (not (= c7 c_2)) (= c5 c_0) (not (= c4 c_0)))))
(set .c13374 (resolution :clauses (.c263 .c6815 .c4937) :conclusion ((not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= c_0 (f3 c_0 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_1)) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c13375 (eq_transitive :conclusion ((not (= (f3 (f3 c_1 c_0) c_2) (f3 c_0 c5))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2))))
(set .c13376 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= c5 c_2)) (= (f3 (f3 c_1 c_0) c_2) (f3 c_0 c5)))))
(set .c13377 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c13378 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c13379 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13380 (resolution :clauses (.c13378 .c13379) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c13381 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c13382 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c13383 (resolution :clauses (.c13381 .c13382) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c13384 (resolution :clauses (.c13380 .c13383) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c13385 (resolution :clauses (.c13377 .c13384) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c13386 (resolution :clauses (.c13376 .c13385) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_1 c_0) c_2) (f3 c_0 c5)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c13387 (resolution :clauses (.c13375 .c13386) :conclusion ((not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c13388 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2))))))
(set .c13389 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c13390 (resolution :clauses (.c13388 .c13389) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c13391 (resolution :clauses (.c13387 .c13390) :conclusion ((not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)))))
(set .c13392 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))))))
(set .c13393 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c13394 (resolution :clauses (.c13392 .c13393) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c13395 (resolution :clauses (.c13391 .c13394) :conclusion ((not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13396 (eq_congruent :conclusion ((not (= (f2 c_2) (f3 c_0 c_0))) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2)))))
(set .c13397 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f2 c_2) (f3 c_0 c_0)))))
(set .c13398 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13399 (resolution :clauses (.c13397 .c13398) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f2 c_2) (f3 c_0 c_0)) (not (= c_1 c7)))))
(set .c13400 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13401 (resolution :clauses (.c13399 .c13400) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f2 c_2) (f3 c_0 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13402 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c13403 (resolution :clauses (.c13401 .c13402) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f2 c_2) (f3 c_0 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c13404 (resolution :clauses (.c13396 .c13403) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c13405 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13406 (resolution :clauses (.c13404 .c13405) :conclusion ((= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c13407 (resolution :clauses (.c13395 .c13406) :conclusion ((not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)))))
(set .c13408 (resolution :clauses (.c13407 .c34 .c31 .c33 .c164 .c166 .c8881) :conclusion ((not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_1)))))
(set .c13409 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2))))
(set .c13410 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)))))
(set .c13411 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c13412 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13413 (resolution :clauses (.c13411 .c13412) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c_1 c7)))))
(set .c13414 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13415 (resolution :clauses (.c13413 .c13414) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13416 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c13417 (resolution :clauses (.c13415 .c13416) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c13418 (resolution :clauses (.c13410 .c13417) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13419 (resolution :clauses (.c13409 .c13418) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13420 (resolution :clauses (.c13419 .c166 .c8881 .c164 .c33) :conclusion ((= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13421 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c_1) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)))))
(set .c13422 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c13423 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13424 (resolution :clauses (.c13422 .c13423) :conclusion ((not (= (f1 c_0) c_1)) (= (f3 c_0 c_1) (f3 c_0 (f1 c_0))))))
(set .c13425 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1))))
(set .c13426 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13427 (resolution :clauses (.c13425 .c13426) :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c_1 c7)))))
(set .c13428 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13429 (resolution :clauses (.c13427 .c13428) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f1 c_0) c_1) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13430 (resolution :clauses (.c13424 .c13429) :conclusion ((= (f3 c_0 c_1) (f3 c_0 (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13431 (resolution :clauses (.c13421 .c13430) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13432 (resolution :clauses (.c13431 .c166 .c167 .c164) :conclusion ((= c_0 (f3 c_0 c_1)) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13433 (resolution :clauses (.c271 .c13408 .c13420 .c175 .c193 .c9478 .c260 .c13374 .c13432 .c226 .c5758 .c287 .c5993 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f2 c_0) (f1 c_0))) (not (= (f2 c_0) (f1 c_1))) (= c5 c_0) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (= (f3 c_0 c_0) c_2))))
(set .c13434 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2))))
(set .c13435 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5)))))
(set .c13436 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c13437 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c13438 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c13439 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13440 (resolution :clauses (.c13438 .c13439) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c_1 c7)))))
(set .c13441 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13442 (resolution :clauses (.c13440 .c13441) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13443 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c13444 (resolution :clauses (.c13442 .c13443) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c13445 (resolution :clauses (.c13437 .c13444) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13446 (resolution :clauses (.c13436 .c13445) :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (= c5 (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13447 (resolution :clauses (.c13435 .c13446) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 c5)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c13448 (resolution :clauses (.c13434 .c13447) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2) (not (= c_1 c7)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c13449 (eq_congruent :conclusion ((not (= (f2 c_2) c6)) (not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))))))
(set .c13450 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2))))
(set .c13451 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c13452 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c13453 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13454 (resolution :clauses (.c13452 .c13453) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c_1 c7)))))
(set .c13455 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13456 (resolution :clauses (.c13454 .c13455) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13457 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c13458 (resolution :clauses (.c13456 .c13457) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c13459 (resolution :clauses (.c13451 .c13458) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13460 (resolution :clauses (.c13450 .c13459) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13461 (resolution :clauses (.c13449 .c13460) :conclusion ((not (= (f2 c_2) c6)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13462 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (= (f2 c_2) c6))))
(set .c13463 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13464 (resolution :clauses (.c13462 .c13463) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (= (f2 c_2) c6) (not (= c_1 c7)))))
(set .c13465 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13466 (resolution :clauses (.c13464 .c13465) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (= (f2 c_2) c6) (not (= c_1 c7)))))
(set .c13467 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c13468 (resolution :clauses (.c13466 .c13467) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (= (f2 c_2) c6) (not (= c_1 c7)) (not (= c5 c_2)))))
(set .c13469 (resolution :clauses (.c13461 .c13468) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13470 (resolution :clauses (.c13448 .c13469) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2) (not (= c_1 c7)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c13471 (resolution :clauses (.c13470 .c33 .c34 .c8881 .c164 .c166) :conclusion ((= (f3 c_1 c5) c_2) (not (= c_1 c7)) (not (= c5 c_2)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c13472 (resolution :clauses (.c13471 .c271 .c11989 .c8881) :conclusion ((not (= c_1 c7)) (not (= c5 c_2)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_0 c6)) (not (= (f2 c4) (f1 c_1))))))
(set .c13473 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c_0) c_0))))
(set .c13474 (eq_congruent :conclusion ((not (= (f2 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_0 c_0)))))
(set .c13475 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_0) c_0))))
(set .c13476 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c13477 (resolution :clauses (.c13475 .c13476) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_0) c_0) (not (= c4 c_0)))))
(set .c13478 (resolution :clauses (.c13474 .c13477) :conclusion ((not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_0 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c13479 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13480 (resolution :clauses (.c13478 .c13479) :conclusion ((= (f3 (f2 c_0) c_0) (f3 c_0 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c13481 (resolution :clauses (.c13473 .c13480) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c13482 (resolution :clauses (.c13481 .c31) :conclusion ((= (f3 c_0 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c13483 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c_0) (f1 c_0)))))
(set .c13484 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13485 (resolution :clauses (.c13483 .c13484) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c_0) (f1 c_0)) (not (= c_1 c7)))))
(set .c13486 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13487 (resolution :clauses (.c13485 .c13486) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13488 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c13489 (resolution :clauses (.c13487 .c13488) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c4 c_0)))))
(set .c13490 (resolution :clauses (.c13489 .c166 .c164) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c_0) (f1 c_0)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c4 c_0)))))
(set .c13491 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c5) (f1 c_1)))))
(set .c13492 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c13493 (resolution :clauses (.c13491 .c13492) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_1)) (not (= c_1 c7)))))
(set .c13494 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c13495 (resolution :clauses (.c13493 .c13494) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c5) (f1 c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13496 (resolution :clauses (.c13495 .c8881 .c164 .c166) :conclusion ((= (f2 c5) (f1 c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c13497 (resolution :clauses (.c270 .c6875 .c5984 .c260 .c13472 .c13482 .c252 .c13433 .c13340 .c173 .c189 .c171 .c93 .c13490 .c13496 .c191 .c13221 .c4132 .c262 .c13373 .c5946 .c258 .c13353 .c8881 .c8880) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= c_0 c6)) (= c5 c_0) (= (f2 c4) (f1 c_2)) (= c_0 c7) (= c4 c_1))))
(set .c13498 (resolution :clauses (.c270 .c6875 .c5984 .c260 .c13472 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 c_0) c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c_1 c7)) (= c5 c_0))))
(set .c13499 (eq_transitive :conclusion ((not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1))))
(set .c13500 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c13501 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_2) (f2 c_1)))))
(set .c13502 (resolution :clauses (.c13500 .c13501) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13503 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c13504 (resolution :clauses (.c13502 .c13503) :conclusion ((= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13505 (resolution :clauses (.c13499 .c13504) :conclusion ((not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13506 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) (f3 c_1 c_1))) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1))))))
(set .c13507 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)))))
(set .c13508 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))))))
(set .c13509 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c13510 (resolution :clauses (.c13508 .c13509) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c13511 (resolution :clauses (.c13507 .c13510) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c13512 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1)))))
(set .c13513 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c13514 (resolution :clauses (.c13512 .c13513) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1)))))
(set .c13515 (resolution :clauses (.c13511 .c13514) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)))))
(set .c13516 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))))))
(set .c13517 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c13518 (resolution :clauses (.c13516 .c13517) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c13519 (resolution :clauses (.c13515 .c13518) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)))))
(set .c13520 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)))))
(set .c13521 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c13522 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c13523 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c13524 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13525 (resolution :clauses (.c13523 .c13524) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c13526 (resolution :clauses (.c13522 .c13525) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13527 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13528 (resolution :clauses (.c13526 .c13527) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13529 (resolution :clauses (.c13521 .c13528) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13530 (resolution :clauses (.c13520 .c13529) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13531 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c13532 (resolution :clauses (.c13530 .c13531) :conclusion ((= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13533 (resolution :clauses (.c13519 .c13532) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13534 (resolution :clauses (.c13506 .c13533) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13535 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13536 (resolution :clauses (.c13534 .c13535) :conclusion ((= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13537 (resolution :clauses (.c13505 .c13536) :conclusion ((not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c13538 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f3 c_1 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c13539 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)))))
(set .c13540 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))))))
(set .c13541 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c13542 (resolution :clauses (.c13540 .c13541) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c13543 (resolution :clauses (.c13539 .c13542) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c13544 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1)))))
(set .c13545 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c13546 (resolution :clauses (.c13544 .c13545) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1)))))
(set .c13547 (resolution :clauses (.c13543 .c13546) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)))))
(set .c13548 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))))))
(set .c13549 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c13550 (resolution :clauses (.c13548 .c13549) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c13551 (resolution :clauses (.c13547 .c13550) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)))))
(set .c13552 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)))))
(set .c13553 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c13554 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c13555 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c13556 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13557 (resolution :clauses (.c13555 .c13556) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c13558 (resolution :clauses (.c13554 .c13557) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13559 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13560 (resolution :clauses (.c13558 .c13559) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13561 (resolution :clauses (.c13553 .c13560) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13562 (resolution :clauses (.c13552 .c13561) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13563 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c13564 (resolution :clauses (.c13562 .c13563) :conclusion ((= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13565 (resolution :clauses (.c13551 .c13564) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13566 (resolution :clauses (.c13538 .c13565) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13567 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c13568 (resolution :clauses (.c13566 .c13567) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13569 (resolution :clauses (.c13537 .c13568) :conclusion ((not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c13570 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_2 c_1) (f3 c_1 c_1))) (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1))))))
(set .c13571 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)))))
(set .c13572 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))))))
(set .c13573 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c13574 (resolution :clauses (.c13572 .c13573) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c13575 (resolution :clauses (.c13571 .c13574) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c13576 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1)))))
(set .c13577 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c13578 (resolution :clauses (.c13576 .c13577) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1)))))
(set .c13579 (resolution :clauses (.c13575 .c13578) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)))))
(set .c13580 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))))))
(set .c13581 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c13582 (resolution :clauses (.c13580 .c13581) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c13583 (resolution :clauses (.c13579 .c13582) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)))))
(set .c13584 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)))))
(set .c13585 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c13586 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c13587 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c13588 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13589 (resolution :clauses (.c13587 .c13588) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c13590 (resolution :clauses (.c13586 .c13589) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13591 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13592 (resolution :clauses (.c13590 .c13591) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13593 (resolution :clauses (.c13585 .c13592) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13594 (resolution :clauses (.c13584 .c13593) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13595 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c13596 (resolution :clauses (.c13594 .c13595) :conclusion ((= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13597 (resolution :clauses (.c13583 .c13596) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13598 (resolution :clauses (.c13570 .c13597) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13599 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c13600 (resolution :clauses (.c13598 .c13599) :conclusion ((= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13601 (resolution :clauses (.c13569 .c13600) :conclusion ((not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c13602 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= c5 c_1)) (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5)))))
(set .c13603 (resolution :clauses (.c13601 .c13602) :conclusion ((not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c13604 (resolution :clauses (.c13603 .c1739 .c32 .c33 .c34 .c1742) :conclusion ((not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c6)) (not (= (f2 c4) (f1 c_1))))))
(set .c13605 (resolution :clauses (.c13604 .c236 .c11615 .c290 .c10269) :conclusion ((not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c_0 c6)) (not (= (f2 c4) (f1 c_1))) (= (f3 c_1 c_2) c_2) (not (= (f2 c5) (f1 c_2))))))
(set .c13606 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_2) c_1)) (= c_0 (f3 c_2 c_2)))))
(set .c13607 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c13608 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13609 (resolution :clauses (.c13607 .c13608) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c13610 (resolution :clauses (.c13606 .c13609) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_2) c_1)) (= c_0 (f3 c_2 c_2)))))
(set .c13611 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_1)))))
(set .c13612 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c13613 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c13614 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c13615 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13616 (resolution :clauses (.c13614 .c13615) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c13617 (resolution :clauses (.c13613 .c13616) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13618 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13619 (resolution :clauses (.c13617 .c13618) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13620 (resolution :clauses (.c13612 .c13619) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13621 (resolution :clauses (.c13611 .c13620) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13622 (resolution :clauses (.c13610 .c13621) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_2) c_1)) (= c_0 (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13623 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))))))
(set .c13624 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c13625 (resolution :clauses (.c13623 .c13624) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c13626 (resolution :clauses (.c13622 .c13625) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_2) c_1)) (= c_0 (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c5 c_1)))))
(set .c13627 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))))))
(set .c13628 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c13629 (resolution :clauses (.c13627 .c13628) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c13630 (resolution :clauses (.c13626 .c13629) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_2) c_1)) (= c_0 (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c13631 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c13632 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c13633 (resolution :clauses (.c13631 .c13632) :conclusion ((not (= (f3 c_1 c_2) (f2 c_1))) (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c13634 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_1 c_2) (f2 c_1)))))
(set .c13635 (resolution :clauses (.c13633 .c13634) :conclusion ((= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13636 (resolution :clauses (.c13630 .c13635) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_2) c_1)) (= c_0 (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c5 c_1)) (not (= c_1 c7)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13637 (resolution :clauses (.c13636 .c1739 .c32 .c33 .c34) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_2 c_2) c_1)) (= c_0 (f3 c_2 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c5 c_1)) (not (= c_1 c7)))))
(set .c13638 (resolution :clauses (.c13637 .c236 .c11610 .c297 .c11459 .c242 .c13605 .c270 .c5984 .c8881) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c5 c_1)) (not (= c_1 c7)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (= (f3 c_2 c_2) c_2) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f2 c5) (f1 c_2))))))
(set .c13639 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (= c5 c_1))))
(set .c13640 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)))))
(set .c13641 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c13642 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c13643 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c13644 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13645 (resolution :clauses (.c13643 .c13644) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c13646 (resolution :clauses (.c13642 .c13645) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13647 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13648 (resolution :clauses (.c13646 .c13647) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13649 (resolution :clauses (.c13641 .c13648) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13650 (resolution :clauses (.c13640 .c13649) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13651 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13652 (resolution :clauses (.c13650 .c13651) :conclusion ((= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13653 (resolution :clauses (.c13639 .c13652) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= c5 c_1) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13654 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c13655 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c13656 (resolution :clauses (.c13654 .c13655) :conclusion ((not (= c_0 c6)) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c13657 (resolution :clauses (.c13653 .c13656) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= c5 c_1) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)))))
(set .c13658 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)))))
(set .c13659 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= (f3 c_2 c_2) c7))))
(set .c13660 (resolution :clauses (.c13658 .c13659) :conclusion ((not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)))))
(set .c13661 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) (f3 c4 c5))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c13662 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c13663 (resolution :clauses (.c13661 .c13662) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c13664 (resolution :clauses (.c13660 .c13663) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c13665 (resolution :clauses (.c13657 .c13664) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= c5 c_1) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c_1 c7)))))
(set .c13666 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c13667 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13668 (resolution :clauses (.c13666 .c13667) :conclusion ((not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c13669 (eq_transitive :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)))))
(set .c13670 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c13671 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13672 (resolution :clauses (.c13670 .c13671) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c13673 (resolution :clauses (.c13669 .c13672) :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c13674 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c13675 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13676 (resolution :clauses (.c13674 .c13675) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c13677 (resolution :clauses (.c13673 .c13676) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c13678 (resolution :clauses (.c13668 .c13677) :conclusion ((= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_2 c_2) c_1)))))
(set .c13679 (resolution :clauses (.c13665 .c13678) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= c5 c_1) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c_1 c7)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f2 c4) (f1 c_2))))))
(set .c13680 (resolution :clauses (.c13679 .c33 .c34 .c169) :conclusion ((not (= c5 c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= c5 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c_1 c7)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f2 c4) (f1 c_2))))))
(set .c13681 (resolution :clauses (.c13680 .c236 .c9454 .c279 .c8072) :conclusion ((not (= c5 c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= c5 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c_1 c7)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_1 c_2) c_2) (not (= (f2 c5) (f1 c_1))))))
(set .c13682 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c13683 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)))))
(set .c13684 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c13685 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c13686 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c13687 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13688 (resolution :clauses (.c13686 .c13687) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c13689 (resolution :clauses (.c13685 .c13688) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13690 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13691 (resolution :clauses (.c13689 .c13690) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13692 (resolution :clauses (.c13684 .c13691) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13693 (resolution :clauses (.c13683 .c13692) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13694 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13695 (resolution :clauses (.c13693 .c13694) :conclusion ((= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13696 (resolution :clauses (.c13682 .c13695) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13697 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c13698 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c13699 (resolution :clauses (.c13697 .c13698) :conclusion ((not (= c_0 c6)) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c13700 (resolution :clauses (.c13696 .c13699) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c13701 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))))))
(set .c13702 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c13703 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c13704 (resolution :clauses (.c13702 .c13703) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c13705 (resolution :clauses (.c13701 .c13704) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c13706 (resolution :clauses (.c13700 .c13705) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c13707 (resolution :clauses (.c13706 .c33 .c34 .c168 .c224) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c13708 (resolution :clauses (.c13707 .c242 .c13681 .c260 .c13638 .c8081 .c11620 .c221 .c187 .c223 .c286 .c289 .c185 .c203 .c12978 .c10119 .c13156 .c8268 .c258 .c13498 .c8881) :conclusion ((not (= c_0 c6)) (not (= c_1 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (= c5 c_0) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f2 c5) (f1 c_2))) (not (= (f1 c_2) (f2 c_1))) (not (= (f2 c4) (f1 c_0))) (= c4 c_1) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (not (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1))) (not (= (f3 c_0 c_0) c_0)))))
(set .c13709 (eq_transitive :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)))))
(set .c13710 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c4 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c4)))))
(set .c13711 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c13712 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c13713 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c13714 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13715 (resolution :clauses (.c13713 .c13714) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c13716 (resolution :clauses (.c13712 .c13715) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13717 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13718 (resolution :clauses (.c13716 .c13717) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13719 (resolution :clauses (.c13711 .c13718) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13720 (resolution :clauses (.c13710 .c13719) :conclusion ((not (= c4 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c4)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13721 (resolution :clauses (.c13709 .c13720) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (= c_2 (f3 c_2 c4)) (not (= c4 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13722 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c13723 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c13724 (resolution :clauses (.c13722 .c13723) :conclusion ((not (= c_0 c6)) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c13725 (resolution :clauses (.c13721 .c13724) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (= c_2 (f3 c_2 c4)) (not (= c4 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c13726 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c13727 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c13728 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c13729 (resolution :clauses (.c13727 .c13728) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c13730 (resolution :clauses (.c13726 .c13729) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c13731 (resolution :clauses (.c13725 .c13730) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (= c_2 (f3 c_2 c4)) (not (= c4 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c5 c_2)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= c_0 (f3 c_2 c_2))))))
(set .c13732 (resolution :clauses (.c13731 .c33 .c34 .c169) :conclusion ((not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (= c_2 (f3 c_2 c4)) (not (= c4 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c5 c_2)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= c_0 (f3 c_2 c_2))))))
(set .c13733 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1))))
(set .c13734 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)))))
(set .c13735 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c13736 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c13737 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c13738 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13739 (resolution :clauses (.c13737 .c13738) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c13740 (resolution :clauses (.c13736 .c13739) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13741 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13742 (resolution :clauses (.c13740 .c13741) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13743 (resolution :clauses (.c13735 .c13742) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13744 (resolution :clauses (.c13734 .c13743) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13745 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13746 (resolution :clauses (.c13744 .c13745) :conclusion ((= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13747 (resolution :clauses (.c13733 .c13746) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13748 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c13749 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c13750 (resolution :clauses (.c13748 .c13749) :conclusion ((not (= c_0 c6)) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c13751 (resolution :clauses (.c13747 .c13750) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c13752 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))))))
(set .c13753 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c13754 (resolution :clauses (.c13752 .c13753) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c13755 (resolution :clauses (.c13751 .c13754) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c13756 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_1 c5)))))
(set .c13757 (resolution :clauses (.c13755 .c13756) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c13758 (resolution :clauses (.c13757 .c33 .c34) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c13759 (resolution :clauses (.c13758 .c279 .c8072 .c242 .c13732) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c5 c_2)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (= (f3 c_2 c_2) c_2) (= c_2 (f3 c_2 c4)))))
(set .c13760 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c13761 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_1)))))
(set .c13762 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c13763 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c13764 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c13765 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13766 (resolution :clauses (.c13764 .c13765) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c13767 (resolution :clauses (.c13763 .c13766) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13768 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13769 (resolution :clauses (.c13767 .c13768) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13770 (resolution :clauses (.c13762 .c13769) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13771 (resolution :clauses (.c13761 .c13770) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13772 (resolution :clauses (.c13760 .c13771) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13773 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))))))
(set .c13774 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c13775 (resolution :clauses (.c13773 .c13774) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c13776 (resolution :clauses (.c13772 .c13775) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c13777 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c13778 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c13779 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c4 c5)))))
(set .c13780 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f3 c_2 c_2) c_1)) (= c5 (f3 c_2 c_2)))))
(set .c13781 (resolution :clauses (.c13779 .c13780) :conclusion ((not (= c4 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c4 c5)) (not (= c5 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c13782 (resolution :clauses (.c13778 .c13781) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c13783 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c13784 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13785 (resolution :clauses (.c13783 .c13784) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c13786 (resolution :clauses (.c13782 .c13785) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c13787 (resolution :clauses (.c13777 .c13786) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c13788 (resolution :clauses (.c13776 .c13787) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c13789 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c13790 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13791 (resolution :clauses (.c13789 .c13790) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c13792 (resolution :clauses (.c13788 .c13791) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c13793 (resolution :clauses (.c13792 .c33 .c34 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= c7 c_2)) (not (= (f3 c_2 c_2) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c13794 (resolution :clauses (.c13793 .c236 .c11610 .c297 .c11459) :conclusion ((not (= c_0 c6)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= c7 c_2)) (not (= (f3 c_2 c_2) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_2))) (= (f3 c_1 c_2) c_2) (not (= (f2 c5) (f1 c_1))))))
(set .c13795 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c5))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1))))
(set .c13796 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c5 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c5)))))
(set .c13797 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c13798 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c13799 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c13800 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c13801 (resolution :clauses (.c13799 .c13800) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c13802 (resolution :clauses (.c13798 .c13801) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13803 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13804 (resolution :clauses (.c13802 .c13803) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13805 (resolution :clauses (.c13797 .c13804) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13806 (resolution :clauses (.c13796 .c13805) :conclusion ((not (= c5 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c5)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13807 (resolution :clauses (.c13795 .c13806) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1) (not (= c5 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c13808 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))))))
(set .c13809 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c13810 (resolution :clauses (.c13808 .c13809) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c13811 (resolution :clauses (.c13807 .c13810) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1) (not (= c5 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)))))
(set .c13812 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))))))
(set .c13813 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c13814 (resolution :clauses (.c13812 .c13813) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c13815 (resolution :clauses (.c13811 .c13814) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1) (not (= c5 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c13816 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c13817 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_2) (f2 c_1)))))
(set .c13818 (resolution :clauses (.c13816 .c13817) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13819 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c13820 (resolution :clauses (.c13818 .c13819) :conclusion ((= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13821 (resolution :clauses (.c13815 .c13820) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1) (not (= c5 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) (f2 c_1))))))
(set .c13822 (resolution :clauses (.c13821 .c1739 .c32 .c33 .c34) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= (f3 c_2 c5) c_1) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c13823 (resolution :clauses (.c13822 .c242 .c13794 .c267 .c5984 .c260 .c13759 .c8081 .c11620 .c185 .c221 .c187 .c223 .c286 .c289 .c12975 .c12978 .c10119 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (= c5 c_0) (not (= (f1 c_2) (f2 c_1))))))
(set .c13824 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1))))
(set .c13825 (eq_congruent :conclusion ((not (= c6 (f2 c_1))) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)))))
(set .c13826 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c13827 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c13828 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c13829 (resolution :clauses (.c13827 .c13828) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13830 (resolution :clauses (.c13826 .c13829) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13831 (resolution :clauses (.c13825 .c13830) :conclusion ((not (= c6 (f2 c_1))) (= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13832 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c6 (f2 c_1)))))
(set .c13833 (resolution :clauses (.c13831 .c13832) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f2 c_1) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)))))
(set .c13834 (resolution :clauses (.c13824 .c13833) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)))))
(set .c13835 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5)))))
(set .c13836 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)))))
(set .c13837 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c13838 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c13839 (resolution :clauses (.c13837 .c13838) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13840 (resolution :clauses (.c13836 .c13839) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13841 (resolution :clauses (.c13835 .c13840) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5)) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13842 (resolution :clauses (.c13834 .c13841) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_2 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c13843 (resolution :clauses (.c13842 .c1739 .c32 .c34) :conclusion ((= (f3 c_2 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c13844 (resolution :clauses (.c13843 .c267 .c5984) :conclusion ((not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))))))
(set .c13845 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_2 c5) c_2))))
(set .c13846 (eq_congruent :conclusion ((not (= (f2 c_2) c6)) (not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))))))
(set .c13847 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2))))
(set .c13848 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c13849 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c13850 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c13851 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c13852 (resolution :clauses (.c13850 .c13851) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13853 (resolution :clauses (.c13849 .c13852) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c13854 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c13855 (resolution :clauses (.c13853 .c13854) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c13856 (resolution :clauses (.c13848 .c13855) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c13857 (resolution :clauses (.c13847 .c13856) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c13858 (resolution :clauses (.c13846 .c13857) :conclusion ((not (= (f2 c_2) c6)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c13859 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (= (f2 c_2) c6))))
(set .c13860 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c13861 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c13862 (resolution :clauses (.c13860 .c13861) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13863 (resolution :clauses (.c13859 .c13862) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (= (f2 c_2) c6))))
(set .c13864 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c13865 (resolution :clauses (.c13863 .c13864) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c6)) (= (f2 c_2) c6) (not (= c5 c_2)))))
(set .c13866 (resolution :clauses (.c13858 .c13865) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c13867 (resolution :clauses (.c13845 .c13866) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_2 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c13868 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5)))))
(set .c13869 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c13870 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c13871 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c13872 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c13873 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c13874 (resolution :clauses (.c13872 .c13873) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13875 (resolution :clauses (.c13871 .c13874) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c13876 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c13877 (resolution :clauses (.c13875 .c13876) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c13878 (resolution :clauses (.c13870 .c13877) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c13879 (resolution :clauses (.c13869 .c13878) :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (= c5 (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c13880 (resolution :clauses (.c13868 .c13879) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c13881 (resolution :clauses (.c13867 .c13880) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_2 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c13882 (resolution :clauses (.c13881 .c1739 .c29 .c33 .c34 .c8881) :conclusion ((= (f3 c_2 c5) c_2) (not (= c5 c_2)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c13883 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= c_1 (f3 c_0 c_1))) (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1)))))
(set .c13884 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c13885 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c13886 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c13887 (resolution :clauses (.c13885 .c13886) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c13888 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c13889 (resolution :clauses (.c13887 .c13888) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13890 (resolution :clauses (.c13884 .c13889) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13891 (resolution :clauses (.c13883 .c13890) :conclusion ((not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13892 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c_0) c_0))))
(set .c13893 (eq_congruent :conclusion ((not (= (f2 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_0 c_0)))))
(set .c13894 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_0) c_0))))
(set .c13895 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c13896 (resolution :clauses (.c13894 .c13895) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_0) c_0))))
(set .c13897 (resolution :clauses (.c13893 .c13896) :conclusion ((not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_0 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13898 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13899 (resolution :clauses (.c13897 .c13898) :conclusion ((= (f3 (f2 c_0) c_0) (f3 c_0 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13900 (resolution :clauses (.c13892 .c13899) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c_0) c_0) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13901 (resolution :clauses (.c13891 .c13900) :conclusion ((= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))))))
(set .c13902 (resolution :clauses (.c13901 .c1739 .c31 .c32 .c90) :conclusion ((= (f3 c_0 (f3 c_0 c_1)) (f3 (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_0)))))
(set .c13903 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_1)) (not (= c_1 (f3 c_0 c_1))) (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1))))))
(set .c13904 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_0) c_1))))
(set .c13905 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0)))))
(set .c13906 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c13907 (resolution :clauses (.c13905 .c13906) :conclusion ((not (= (f1 c_1) c_0)) (= (f3 c_1 (f1 c_1)) (f3 c_1 c_0)))))
(set .c13908 (resolution :clauses (.c13904 .c13907) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_1 c_0) c_1) (not (= (f1 c_1) c_0)))))
(set .c13909 (resolution :clauses (.c13903 .c13908) :conclusion ((not (= c_1 (f3 c_0 c_1))) (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f1 c_1) c_0)))))
(set .c13910 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c13911 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c13912 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c13913 (resolution :clauses (.c13911 .c13912) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c13914 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c13915 (resolution :clauses (.c13913 .c13914) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13916 (resolution :clauses (.c13910 .c13915) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13917 (resolution :clauses (.c13909 .c13916) :conclusion ((= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f1 c_1) c_0)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) (f2 c_1))))))
(set .c13918 (resolution :clauses (.c13917 .c1739 .c32 .c168) :conclusion ((= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13919 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c_0) c_0))))
(set .c13920 (eq_congruent :conclusion ((not (= (f2 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_0 c_0)))))
(set .c13921 (eq_transitive :conclusion ((not (= (f2 (f1 c_1)) (f2 c_0))) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_0) c_0))))
(set .c13922 (eq_congruent :conclusion ((not (= (f1 c_1) c_0)) (= (f2 (f1 c_1)) (f2 c_0)))))
(set .c13923 (resolution :clauses (.c13921 .c13922) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_0) c_0))))
(set .c13924 (resolution :clauses (.c13920 .c13923) :conclusion ((not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_0 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13925 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13926 (resolution :clauses (.c13924 .c13925) :conclusion ((= (f3 (f2 c_0) c_0) (f3 c_0 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13927 (resolution :clauses (.c13919 .c13926) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c_0) c_0) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c13928 (resolution :clauses (.c13927 .c31 .c90) :conclusion ((= (f3 c_0 c_0) c_0) (not (= (f1 c_1) c_0)))))
(set .c13929 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 (f2 c_1)) (f1 c_0))) (= (f2 c4) (f1 c_0)))))
(set .c13930 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c13931 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c13932 (resolution :clauses (.c13930 .c13931) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13933 (resolution :clauses (.c13929 .c13932) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 (f2 c_1)) (f2 c_1))) (= (f2 c4) (f1 c_0)) (not (= (f1 c_1) c_0)))))
(set .c13934 (resolution :clauses (.c13933 .c1739 .c29) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_0)) (not (= (f1 c_1) c_0)))))
(set .c13935 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c5) (f1 c_1)))))
(set .c13936 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c13937 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c13938 (resolution :clauses (.c13936 .c13937) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13939 (resolution :clauses (.c13935 .c13938) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c5) (f1 c_1)) (not (= (f1 c_1) c_0)))))
(set .c13940 (resolution :clauses (.c13939 .c1739 .c29 .c8881) :conclusion ((= (f2 c5) (f1 c_1)) (not (= (f1 c_1) c_0)))))
(set .c13941 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)))))
(set .c13942 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c13943 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c13944 (resolution :clauses (.c13942 .c13943) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c13945 (resolution :clauses (.c13941 .c13944) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)) (not (= (f1 c_1) c_0)))))
(set .c13946 (resolution :clauses (.c13945 .c29 .c8881 .c1739) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)) (not (= (f1 c_1) c_0)))))
(set .c13947 (resolution :clauses (.c13882 .c277 .c11989 .c260 .c13844 .c258 .c13823 .c262 .c13708 .c13902 .c13918 .c13928 .c13934 .c13940 .c13946 .c8881) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 c6)) (not (= (f2 c4) (f1 c_2))) (= c5 c_0) (= c4 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_2) (f2 c_1))) (= c_0 c7) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))))))
(set .c13948 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 c_0))))
(set .c13949 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c13950 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c13951 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c13952 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13953 (resolution :clauses (.c13951 .c13952) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c13954 (resolution :clauses (.c13950 .c13953) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))))))
(set .c13955 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c13956 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c13957 (resolution :clauses (.c13955 .c13956) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c13958 (resolution :clauses (.c13954 .c13957) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f1 c_2) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c13959 (resolution :clauses (.c13949 .c13958) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c13960 (resolution :clauses (.c13948 .c13959) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 c_0) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_0)))))
(set .c13961 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c13962 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c13963 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c13964 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13965 (resolution :clauses (.c13963 .c13964) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c13966 (resolution :clauses (.c13962 .c13965) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))))))
(set .c13967 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c13968 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c13969 (resolution :clauses (.c13967 .c13968) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c13970 (resolution :clauses (.c13966 .c13969) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c13971 (resolution :clauses (.c13961 .c13970) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c13972 (resolution :clauses (.c13960 .c13971) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 c_0) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c13973 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f2 c_0) c_0)))))
(set .c13974 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (= (f3 c_0 c_2) (f2 c_0)))))
(set .c13975 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c13976 (resolution :clauses (.c13974 .c13975) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (= (f3 c_0 c_2) (f2 c_0)) (not (= c4 c_0)))))
(set .c13977 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c13978 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13979 (resolution :clauses (.c13977 .c13978) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c13980 (resolution :clauses (.c13976 .c13979) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (= (f3 c_0 c_2) (f2 c_0)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c13981 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c13982 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c13983 (resolution :clauses (.c13981 .c13982) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c13984 (resolution :clauses (.c13980 .c13983) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (= (f3 c_0 c_2) (f2 c_0)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c13985 (resolution :clauses (.c13973 .c13984) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c13986 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13987 (resolution :clauses (.c13985 .c13986) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c13988 (resolution :clauses (.c13972 .c13987) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 c_0) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c13989 (resolution :clauses (.c13988 .c31 .c34 .c169) :conclusion ((not (= c5 c_2)) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (= c5 c_0) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c13990 (resolution :clauses (.c13989 .c238 .c11746) :conclusion ((not (= c5 c_2)) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (= c5 c_0) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_0)) (not (= c_0 c6)) (= (f3 c_2 c_0) c_0) (= (f3 c_0 c5) c_2))))
(set .c13991 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 c_0))))
(set .c13992 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c13993 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c13994 (resolution :clauses (.c13992 .c13993) :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c13995 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)))))
(set .c13996 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c13997 (resolution :clauses (.c13995 .c13996) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c4 c_0)))))
(set .c13998 (resolution :clauses (.c13994 .c13997) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_0)))))
(set .c13999 (resolution :clauses (.c13991 .c13998) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_0)))))
(set .c14000 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))))))
(set .c14001 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)))))
(set .c14002 (resolution :clauses (.c14000 .c14001) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14003 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14004 (resolution :clauses (.c14002 .c14003) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14005 (resolution :clauses (.c13999 .c14004) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= c5 c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_0)) (not (= (f3 c_2 c_0) c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c14006 (resolution :clauses (.c14005 .c31 .c169) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (= c5 c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_0)) (not (= (f3 c_2 c_0) c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c14007 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2))))
(set .c14008 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)))))
(set .c14009 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c14010 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c14011 (resolution :clauses (.c14009 .c14010) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c7 c_2)))))
(set .c14012 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14013 (resolution :clauses (.c14011 .c14012) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14014 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c14015 (resolution :clauses (.c14013 .c14014) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c7 c_2)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14016 (resolution :clauses (.c14008 .c14015) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14017 (resolution :clauses (.c14007 .c14016) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14018 (resolution :clauses (.c14017 .c164 .c8881 .c33 .c166) :conclusion ((= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14019 (resolution :clauses (.c14006 .c238 .c9828 .c242 .c13990 .c9217 .c274 .c271 .c14018 .c219 .c223 .c183 .c11762 .c9478 .c8881) :conclusion ((not (= c5 c_2)) (= c5 c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) c_0) (= c4 c_1) (not (= c7 c_2)) (not (= c_0 c6)) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c_0) (f1 c_2))))))
(set .c14020 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c14021 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c14022 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c14023 (resolution :clauses (.c14021 .c14022) :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c14024 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)))))
(set .c14025 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c14026 (resolution :clauses (.c14024 .c14025) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c4 c_0)))))
(set .c14027 (resolution :clauses (.c14023 .c14026) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_0)))))
(set .c14028 (resolution :clauses (.c14020 .c14027) :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_0)))))
(set .c14029 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))))))
(set .c14030 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)))))
(set .c14031 (resolution :clauses (.c14029 .c14030) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14032 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14033 (resolution :clauses (.c14031 .c14032) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14034 (resolution :clauses (.c14028 .c14033) :conclusion ((not (= c_0 c6)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_0)) (not (= (f3 c_2 c_0) c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c14035 (resolution :clauses (.c14034 .c31 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_0)) (not (= (f3 c_2 c_0) c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c14036 (resolution :clauses (.c14035 .c238 .c9828) :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_0)) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) c_0) (= c4 c_1))))
(set .c14037 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_2 c_2) c_1))))
(set .c14038 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c14039 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c14040 (resolution :clauses (.c14038 .c14039) :conclusion ((not (= (f3 c_2 c_2) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c14041 (resolution :clauses (.c14037 .c14040) :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_2 c_2) c_1))))
(set .c14042 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))))))
(set .c14043 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)))))
(set .c14044 (resolution :clauses (.c14042 .c14043) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14045 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14046 (resolution :clauses (.c14044 .c14045) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14047 (resolution :clauses (.c14041 .c14046) :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_2 c_2) c_1) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14048 (resolution :clauses (.c14047 .c169) :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_2 c_2) c_1) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14049 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2))))
(set .c14050 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c_0 (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))))))
(set .c14051 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c14052 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c14053 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)))))
(set .c14054 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c14055 (resolution :clauses (.c14053 .c14054) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)))))
(set .c14056 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14057 (resolution :clauses (.c14055 .c14056) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14058 (resolution :clauses (.c14052 .c14057) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14059 (resolution :clauses (.c14051 .c14058) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14060 (resolution :clauses (.c14050 .c14059) :conclusion ((not (= c7 c_2)) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c6)))))
(set .c14061 (resolution :clauses (.c14049 .c14060) :conclusion ((not (= (f3 c_0 c4) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c6)))))
(set .c14062 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c4 (f3 c4 c5))) (= (f3 c_0 c4) (f3 c6 (f3 c4 c5))))))
(set .c14063 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c14064 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c14065 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)))))
(set .c14066 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c14067 (resolution :clauses (.c14065 .c14066) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)))))
(set .c14068 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14069 (resolution :clauses (.c14067 .c14068) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14070 (resolution :clauses (.c14064 .c14069) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14071 (resolution :clauses (.c14063 .c14070) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14072 (resolution :clauses (.c14062 .c14071) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c4) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)))))
(set .c14073 (resolution :clauses (.c14061 .c14072) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c6)))))
(set .c14074 (resolution :clauses (.c14073 .c34 .c164 .c166 .c167) :conclusion ((not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)))))
(set .c14075 (resolution :clauses (.c14074 .c295 .c9804 .c8881) :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)))))
(set .c14076 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c14077 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))))))
(set .c14078 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_0 c_0) (f1 c_2)))))
(set .c14079 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c_0 (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))))))
(set .c14080 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c14081 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c14082 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)))))
(set .c14083 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c14084 (resolution :clauses (.c14082 .c14083) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)))))
(set .c14085 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14086 (resolution :clauses (.c14084 .c14085) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14087 (resolution :clauses (.c14081 .c14086) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14088 (resolution :clauses (.c14080 .c14087) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14089 (resolution :clauses (.c14079 .c14088) :conclusion ((not (= c7 c_2)) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c6)))))
(set .c14090 (resolution :clauses (.c14078 .c14089) :conclusion ((not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c6)))))
(set .c14091 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c14092 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c14093 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c14094 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)))))
(set .c14095 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c14096 (resolution :clauses (.c14094 .c14095) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)))))
(set .c14097 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14098 (resolution :clauses (.c14096 .c14097) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14099 (resolution :clauses (.c14093 .c14098) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14100 (resolution :clauses (.c14092 .c14099) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14101 (resolution :clauses (.c14091 .c14100) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)))))
(set .c14102 (resolution :clauses (.c14090 .c14101) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_0 c_0) (f1 c_2)) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c6)))))
(set .c14103 (resolution :clauses (.c14077 .c14102) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c6)))))
(set .c14104 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14105 (resolution :clauses (.c14103 .c14104) :conclusion ((= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c6)))))
(set .c14106 (resolution :clauses (.c14076 .c14105) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c14107 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c_0 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c14108 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_0) (f3 c_0 c_0)))))
(set .c14109 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c_0 (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))))))
(set .c14110 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c14111 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c14112 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)))))
(set .c14113 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c14114 (resolution :clauses (.c14112 .c14113) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)))))
(set .c14115 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14116 (resolution :clauses (.c14114 .c14115) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14117 (resolution :clauses (.c14111 .c14116) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14118 (resolution :clauses (.c14110 .c14117) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14119 (resolution :clauses (.c14109 .c14118) :conclusion ((not (= c7 c_2)) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c6)))))
(set .c14120 (resolution :clauses (.c14108 .c14119) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_0) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c6)))))
(set .c14121 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c14122 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c14123 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c14124 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)))))
(set .c14125 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c14126 (resolution :clauses (.c14124 .c14125) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)))))
(set .c14127 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14128 (resolution :clauses (.c14126 .c14127) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14129 (resolution :clauses (.c14123 .c14128) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14130 (resolution :clauses (.c14122 .c14129) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14131 (resolution :clauses (.c14121 .c14130) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)))))
(set .c14132 (resolution :clauses (.c14120 .c14131) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_0) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c6)))))
(set .c14133 (resolution :clauses (.c14107 .c14132) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c6)))))
(set .c14134 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c14135 (resolution :clauses (.c14133 .c14134) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c6)))))
(set .c14136 (resolution :clauses (.c14106 .c14135) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c14137 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0))))))
(set .c14138 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f1 c_0) (f3 c_0 c_0)))))
(set .c14139 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c_0 (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))))))
(set .c14140 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c14141 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c14142 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)))))
(set .c14143 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c14144 (resolution :clauses (.c14142 .c14143) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)))))
(set .c14145 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14146 (resolution :clauses (.c14144 .c14145) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14147 (resolution :clauses (.c14141 .c14146) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14148 (resolution :clauses (.c14140 .c14147) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14149 (resolution :clauses (.c14139 .c14148) :conclusion ((not (= c7 c_2)) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_0 c6)))))
(set .c14150 (resolution :clauses (.c14138 .c14149) :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f1 c_0) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c14151 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c14152 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c14153 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c14154 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)))))
(set .c14155 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c14156 (resolution :clauses (.c14154 .c14155) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)))))
(set .c14157 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14158 (resolution :clauses (.c14156 .c14157) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14159 (resolution :clauses (.c14153 .c14158) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14160 (resolution :clauses (.c14152 .c14159) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14161 (resolution :clauses (.c14151 .c14160) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c7 c_2)))))
(set .c14162 (resolution :clauses (.c14150 .c14161) :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f1 c_0) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c14163 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c14164 (resolution :clauses (.c14162 .c14163) :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f1 c_0) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c14165 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14166 (resolution :clauses (.c14164 .c14165) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f1 c_0) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c14167 (resolution :clauses (.c14137 .c14166) :conclusion ((not (= c_0 c_0)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c14168 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c14169 (resolution :clauses (.c14167 .c14168) :conclusion ((= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c14170 (resolution :clauses (.c14136 .c14169) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))))))
(set .c14171 (resolution :clauses (.c14170 .c34 .c164 .c166 .c167 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c7 c_2)) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c4 c_0)) (not (= c5 c_1)))))
(set .c14172 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c_0) (f1 c_0)))))
(set .c14173 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c14174 (resolution :clauses (.c14172 .c14173) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c_0) (f1 c_0)) (not (= c4 c_0)))))
(set .c14175 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c14176 (resolution :clauses (.c14174 .c14175) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c_0) (f1 c_0)) (not (= c4 c_0)) (not (= c7 c_2)))))
(set .c14177 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14178 (resolution :clauses (.c14176 .c14177) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_0)) (not (= c4 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14179 (resolution :clauses (.c14178 .c166 .c164) :conclusion ((not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_0)) (not (= c4 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14180 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_2)))))
(set .c14181 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c14182 (resolution :clauses (.c14180 .c14181) :conclusion ((not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_2)) (not (= c4 c_0)))))
(set .c14183 (resolution :clauses (.c14171 .c238 .c14075 .c260 .c14019 .c171 .c207 .c14179 .c14182 .c9809 .c290 .c5993) :conclusion ((not (= c_0 c6)) (not (= c7 c_2)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c4 c_0)) (= c5 c_0) (= c4 c_1) (not (= (f2 c5) (f1 c_2))))))
(set .c14184 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0))))
(set .c14185 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c4 (f3 c4 c5))) (= (f3 c_0 c4) (f3 c6 (f3 c4 c5))))))
(set .c14186 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= c4 (f3 c4 c5)))))
(set .c14187 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c14188 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c14189 (resolution :clauses (.c14187 .c14188) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14190 (resolution :clauses (.c14186 .c14189) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14191 (resolution :clauses (.c14185 .c14190) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c4) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14192 (resolution :clauses (.c14184 .c14191) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0) (not (= c_0 c6)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14193 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)))))
(set .c14194 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c14195 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c14196 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c14197 (resolution :clauses (.c14195 .c14196) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14198 (resolution :clauses (.c14194 .c14197) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14199 (resolution :clauses (.c14193 .c14198) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14200 (resolution :clauses (.c14192 .c14199) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0) (not (= c_0 c6)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c7 c_2)))))
(set .c14201 (resolution :clauses (.c14200 .c34 .c169) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0) (not (= c_0 c6)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c7 c_2)))))
(set .c14202 (resolution :clauses (.c14201 .c293 .c10269 .c8881) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c6)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c7 c_2)))))
(set .c14203 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c14204 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))))))
(set .c14205 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c_2 c_2)))))
(set .c14206 (resolution :clauses (.c14204 .c14205) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c14207 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14208 (resolution :clauses (.c14206 .c14207) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c14209 (resolution :clauses (.c14203 .c14208) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c14210 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)))))
(set .c14211 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 c_2 c_2)))))
(set .c14212 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)))))
(set .c14213 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c14214 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c14215 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c14216 (resolution :clauses (.c14214 .c14215) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14217 (resolution :clauses (.c14213 .c14216) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14218 (resolution :clauses (.c14212 .c14217) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14219 (resolution :clauses (.c14211 .c14218) :conclusion ((not (= (f3 c_0 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= c7 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14220 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c4 c5) c_2)) (= (f3 c_0 c_2) (f3 c6 (f3 c4 c5))))))
(set .c14221 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c14222 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c14223 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c14224 (resolution :clauses (.c14222 .c14223) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14225 (resolution :clauses (.c14221 .c14224) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14226 (resolution :clauses (.c14220 .c14225) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14227 (resolution :clauses (.c14219 .c14226) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= c7 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)))))
(set .c14228 (resolution :clauses (.c14210 .c14227) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)))))
(set .c14229 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14230 (resolution :clauses (.c14228 .c14229) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)))))
(set .c14231 (resolution :clauses (.c14209 .c14230) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c14232 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f1 c_0) (f3 c_2 c_2))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0))))))
(set .c14233 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c14234 (resolution :clauses (.c14232 .c14233) :conclusion ((not (= (f1 c_0) (f3 c_2 c_2))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0))))))
(set .c14235 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c_2 c_2)))))
(set .c14236 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c14237 (resolution :clauses (.c14235 .c14236) :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c_2 c_2)) (not (= c7 c_2)))))
(set .c14238 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14239 (resolution :clauses (.c14237 .c14238) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c_2 c_2)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14240 (resolution :clauses (.c14234 .c14239) :conclusion ((= (f3 c_0 (f3 c_2 c_2)) (f3 c_0 (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14241 (resolution :clauses (.c14231 .c14240) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c14242 (resolution :clauses (.c14241 .c34 .c164 .c166 .c167 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c14243 (resolution :clauses (.c14242 .c242 .c14202) :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_2) c_2))))
(set .c14244 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c14245 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c14246 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c14247 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14248 (resolution :clauses (.c14246 .c14247) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14249 (resolution :clauses (.c14245 .c14248) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14250 (resolution :clauses (.c14244 .c14249) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14251 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c14252 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c14253 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14254 (resolution :clauses (.c14252 .c14253) :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14255 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c14256 (resolution :clauses (.c14254 .c14255) :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c14257 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14258 (resolution :clauses (.c14256 .c14257) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c14259 (resolution :clauses (.c14251 .c14258) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c14260 (resolution :clauses (.c14250 .c14259) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))))))
(set .c14261 (resolution :clauses (.c14260 .c34 .c164 .c166 .c167 .c169 .c224) :conclusion ((not (= c_0 c6)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14262 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c4) c_0))))
(set .c14263 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))))))
(set .c14264 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14265 (resolution :clauses (.c14263 .c14264) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14266 (resolution :clauses (.c14262 .c14265) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14267 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c14268 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c14269 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14270 (resolution :clauses (.c14268 .c14269) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14271 (resolution :clauses (.c14267 .c14270) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14272 (resolution :clauses (.c14266 .c14271) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14273 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4)))))
(set .c14274 (resolution :clauses (.c14272 .c14273) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14275 (resolution :clauses (.c14274 .c34) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14276 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2))))
(set .c14277 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))))))
(set .c14278 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14279 (resolution :clauses (.c14277 .c14278) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14280 (resolution :clauses (.c14276 .c14279) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14281 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c14282 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c14283 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14284 (resolution :clauses (.c14282 .c14283) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14285 (resolution :clauses (.c14281 .c14284) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14286 (resolution :clauses (.c14280 .c14285) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14287 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4)))))
(set .c14288 (resolution :clauses (.c14286 .c14287) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14289 (resolution :clauses (.c14288 .c34) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14290 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2))))
(set .c14291 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0)))))
(set .c14292 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c14293 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14294 (resolution :clauses (.c14292 .c14293) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14295 (resolution :clauses (.c14291 .c14294) :conclusion ((not (= (f3 c_2 c_2) c6)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14296 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c6)) (= (f3 c_2 c_2) c6))))
(set .c14297 (resolution :clauses (.c14295 .c14296) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c14298 (resolution :clauses (.c14290 .c14297) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c14299 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))))))
(set .c14300 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)))))
(set .c14301 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c14302 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c14303 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14304 (resolution :clauses (.c14302 .c14303) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14305 (resolution :clauses (.c14301 .c14304) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14306 (resolution :clauses (.c14300 .c14305) :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14307 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c_0 (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))))))
(set .c14308 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c14309 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14310 (resolution :clauses (.c14308 .c14309) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14311 (resolution :clauses (.c14307 .c14310) :conclusion ((not (= c7 c_2)) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14312 (resolution :clauses (.c14306 .c14311) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c14313 (resolution :clauses (.c14299 .c14312) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c14314 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14315 (resolution :clauses (.c14313 .c14314) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c14316 (resolution :clauses (.c14298 .c14315) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c7 c_2)))))
(set .c14317 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))))))
(set .c14318 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14319 (resolution :clauses (.c14317 .c14318) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14320 (resolution :clauses (.c14316 .c14319) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c7 c_2)))))
(set .c14321 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4)))))
(set .c14322 (resolution :clauses (.c14320 .c14321) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c7 c_2)))))
(set .c14323 (resolution :clauses (.c14322 .c34 .c169) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c7 c_2)))))
(set .c14324 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f3 c_2 c_2)))) (not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_2)))))
(set .c14325 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c14326 (resolution :clauses (.c14324 .c14325) :conclusion ((not (= (f2 c_0) (f2 (f3 c_2 c_2)))) (not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_2)) (not (= c4 c_2)))))
(set .c14327 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f2 c_0) (f2 (f3 c_2 c_2))))))
(set .c14328 (resolution :clauses (.c14326 .c14327) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_2)) (not (= c4 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14329 (resolution :clauses (.c14323 .c226 .c14289 .c14275 .c219 .c14328 .c293 .c10269 .c242 .c14261 .c260 .c14243 .c8081 .c292 .c289 .c187 .c223 .c27 .c8152 .c12975 .c12978 .c258 .c14183 .c12996 .c8881) :conclusion ((not (= c_0 c6)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c7 c_2)) (= c5 c_0) (= c4 c_1))))
(set .c14330 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c14331 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c14332 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c14333 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14334 (resolution :clauses (.c14332 .c14333) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14335 (resolution :clauses (.c14331 .c14334) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14336 (resolution :clauses (.c14330 .c14335) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14337 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2))))))
(set .c14338 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14339 (resolution :clauses (.c14337 .c14338) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14340 (resolution :clauses (.c14336 .c14339) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14341 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)))))
(set .c14342 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c14343 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c14344 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c14345 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c14346 (resolution :clauses (.c14344 .c14345) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c_1 c7)))))
(set .c14347 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14348 (resolution :clauses (.c14346 .c14347) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c14349 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c14350 (resolution :clauses (.c14348 .c14349) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14351 (resolution :clauses (.c14343 .c14350) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14352 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14353 (resolution :clauses (.c14351 .c14352) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14354 (resolution :clauses (.c14342 .c14353) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14355 (resolution :clauses (.c14341 .c14354) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14356 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14357 (resolution :clauses (.c14355 .c14356) :conclusion ((= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14358 (resolution :clauses (.c14340 .c14357) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)))))
(set .c14359 (resolution :clauses (.c14358 .c33 .c34 .c8881 .c164 .c166 .c224) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_0 c_0) c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f1 c_1) c_1)))))
(set .c14360 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_0)) (= (f3 c_0 c4) c_0))))
(set .c14361 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c14362 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14363 (resolution :clauses (.c14361 .c14362) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c14364 (resolution :clauses (.c14360 .c14363) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c_0 (f3 c_2 c_2))))))
(set .c14365 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4)))))
(set .c14366 (resolution :clauses (.c14364 .c14365) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)))))
(set .c14367 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0))))
(set .c14368 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0)))))
(set .c14369 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c14370 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14371 (resolution :clauses (.c14369 .c14370) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14372 (resolution :clauses (.c14368 .c14371) :conclusion ((not (= (f3 c_2 c_2) c6)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14373 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c6)) (= (f3 c_2 c_2) c6))))
(set .c14374 (resolution :clauses (.c14372 .c14373) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c14375 (resolution :clauses (.c14367 .c14374) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= c4 c_2)) (not (= c_0 c6)))))
(set .c14376 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2))))))
(set .c14377 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14378 (resolution :clauses (.c14376 .c14377) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14379 (resolution :clauses (.c14375 .c14378) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c_1 c7)))))
(set .c14380 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)))))
(set .c14381 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c14382 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c14383 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c14384 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c14385 (resolution :clauses (.c14383 .c14384) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c_1 c7)))))
(set .c14386 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14387 (resolution :clauses (.c14385 .c14386) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c14388 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c14389 (resolution :clauses (.c14387 .c14388) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14390 (resolution :clauses (.c14382 .c14389) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14391 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14392 (resolution :clauses (.c14390 .c14391) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14393 (resolution :clauses (.c14381 .c14392) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14394 (resolution :clauses (.c14380 .c14393) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14395 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14396 (resolution :clauses (.c14394 .c14395) :conclusion ((= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14397 (resolution :clauses (.c14379 .c14396) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c_1 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)))))
(set .c14398 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))))))
(set .c14399 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)))))
(set .c14400 (resolution :clauses (.c14398 .c14399) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14401 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14402 (resolution :clauses (.c14400 .c14401) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14403 (resolution :clauses (.c14397 .c14402) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c_1 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14404 (resolution :clauses (.c14403 .c33 .c34 .c8881 .c164 .c166 .c169) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c_1 c7)) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14405 (resolution :clauses (.c14404 .c238 .c14366 .c219 .c293 .c14328 .c11746 .c10269 .c8881) :conclusion ((not (= c5 c_2)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= c4 c_2)) (not (= c_0 c6)) (not (= c_1 c7)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f2 c_2) (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (= (f3 c_0 c5) c_2))))
(set .c14406 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= c6 c7))))
(set .c14407 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)))))
(set .c14408 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c14409 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c14410 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c14411 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c14412 (resolution :clauses (.c14410 .c14411) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c_1 c7)))))
(set .c14413 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14414 (resolution :clauses (.c14412 .c14413) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c14415 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c14416 (resolution :clauses (.c14414 .c14415) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14417 (resolution :clauses (.c14409 .c14416) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14418 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14419 (resolution :clauses (.c14417 .c14418) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14420 (resolution :clauses (.c14408 .c14419) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14421 (resolution :clauses (.c14407 .c14420) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14422 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14423 (resolution :clauses (.c14421 .c14422) :conclusion ((= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14424 (resolution :clauses (.c14406 .c14423) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)))))
(set .c14425 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2))))))
(set .c14426 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14427 (resolution :clauses (.c14425 .c14426) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14428 (resolution :clauses (.c14424 .c14427) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c14429 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c14430 (eq_transitive :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c14431 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c14432 (resolution :clauses (.c14430 .c14431) :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)))))
(set .c14433 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14434 (resolution :clauses (.c14432 .c14433) :conclusion ((not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14435 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14436 (resolution :clauses (.c14434 .c14435) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c14437 (resolution :clauses (.c14429 .c14436) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14438 (resolution :clauses (.c14428 .c14437) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (= c6 c7) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c14439 (resolution :clauses (.c14438 .c33 .c34 .c8881 .c164 .c166 .c167 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= c_1 c7)) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c14440 (resolution :clauses (.c14439 .c242 .c14405) :conclusion ((not (= c_0 c6)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_1 c7)) (not (= (f1 c_1) c_1)) (not (= c5 c_2)) (not (= c4 c_2)) (= (f3 c_2 c_2) c_2) (= c5 c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f2 c_2) (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (= (f3 c_0 c5) c_2))))
(set .c14441 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_1 c_0) c_2) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_0 c_0) c_1))))
(set .c14442 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= (f3 c_0 c_0) c_2)) (= (f3 (f3 c_1 c_0) c_2) (f3 c_0 (f3 c_0 c_0))))))
(set .c14443 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c14444 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c14445 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c14446 (resolution :clauses (.c14444 .c14445) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c14447 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c14448 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c14449 (resolution :clauses (.c14447 .c14448) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c14450 (resolution :clauses (.c14446 .c14449) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14451 (resolution :clauses (.c14443 .c14450) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14452 (resolution :clauses (.c14442 .c14451) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 (f3 c_1 c_0) c_2) (f3 c_0 (f3 c_0 c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14453 (resolution :clauses (.c14441 .c14452) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_0 c_0) c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14454 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c14455 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c14456 (resolution :clauses (.c14454 .c14455) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c14457 (resolution :clauses (.c14453 .c14456) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_0 c_0) c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14458 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2))))))
(set .c14459 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c14460 (resolution :clauses (.c14458 .c14459) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c14461 (resolution :clauses (.c14457 .c14460) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_0 c_0) c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)))))
(set .c14462 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c14463 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_1 c_0) c_2) (f3 c4 c5))) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14464 (eq_congruent :conclusion ((not (= c4 (f3 c_1 c_0))) (not (= c5 c_2)) (= (f3 (f3 c_1 c_0) c_2) (f3 c4 c5)))))
(set .c14465 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (= c4 (f3 c_1 c_0)))))
(set .c14466 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c14467 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c14468 (resolution :clauses (.c14466 .c14467) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c14469 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c14470 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c14471 (resolution :clauses (.c14469 .c14470) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c14472 (resolution :clauses (.c14468 .c14471) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14473 (resolution :clauses (.c14465 .c14472) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c4 (f3 c_1 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c14474 (resolution :clauses (.c14464 .c14473) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_1 c_0) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c14475 (resolution :clauses (.c14463 .c14474) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (= (f3 c_2 c_2) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c14476 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2))))))
(set .c14477 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c14478 (resolution :clauses (.c14476 .c14477) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c14479 (resolution :clauses (.c14475 .c14478) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (= (f3 c_2 c_2) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)))))
(set .c14480 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))))))
(set .c14481 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c14482 (resolution :clauses (.c14480 .c14481) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c14483 (resolution :clauses (.c14479 .c14482) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (= (f3 c_2 c_2) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c14484 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2)))))
(set .c14485 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14486 (resolution :clauses (.c14484 .c14485) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2)))))
(set .c14487 (resolution :clauses (.c14483 .c14486) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (= (f3 c_2 c_2) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_2)))))
(set .c14488 (resolution :clauses (.c14462 .c14487) :conclusion ((not (= c_0 c6)) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= c5 c_2)) (not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= (f3 c_0 c_0) c_2)))))
(set .c14489 (resolution :clauses (.c14461 .c14488) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_0 c_0) c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))))))
(set .c14490 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)))))
(set .c14491 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 c_2 c_2)))))
(set .c14492 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_1 c_0) c_2)))))
(set .c14493 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c14494 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c14495 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c14496 (resolution :clauses (.c14494 .c14495) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c14497 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c14498 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c14499 (resolution :clauses (.c14497 .c14498) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c14500 (resolution :clauses (.c14496 .c14499) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14501 (resolution :clauses (.c14493 .c14500) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14502 (resolution :clauses (.c14492 .c14501) :conclusion ((not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_1 c_0) c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14503 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14504 (resolution :clauses (.c14502 .c14503) :conclusion ((= (f3 c_0 c_2) (f3 (f3 c_1 c_0) c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14505 (resolution :clauses (.c14491 .c14504) :conclusion ((not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14506 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2))))))
(set .c14507 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c14508 (resolution :clauses (.c14506 .c14507) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c14509 (resolution :clauses (.c14505 .c14508) :conclusion ((not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)))))
(set .c14510 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))))))
(set .c14511 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c14512 (resolution :clauses (.c14510 .c14511) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c14513 (resolution :clauses (.c14509 .c14512) :conclusion ((not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c14514 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2)))))
(set .c14515 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14516 (resolution :clauses (.c14514 .c14515) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2)))))
(set .c14517 (resolution :clauses (.c14513 .c14516) :conclusion ((not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_2)))))
(set .c14518 (resolution :clauses (.c14490 .c14517) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_2)))))
(set .c14519 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14520 (resolution :clauses (.c14518 .c14519) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_0 c_2) c_2)) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_2)))))
(set .c14521 (resolution :clauses (.c14489 .c14520) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_0 c_0) c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))))))
(set .c14522 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))))))
(set .c14523 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_1 c_0) c_2) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2))) (= (f1 c_2) (f3 c_2 c_2)))))
(set .c14524 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= (f3 c_0 c_0) c_2)) (= (f3 (f3 c_1 c_0) c_2) (f3 c_0 (f3 c_0 c_0))))))
(set .c14525 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c14526 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c14527 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c14528 (resolution :clauses (.c14526 .c14527) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c14529 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c14530 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c14531 (resolution :clauses (.c14529 .c14530) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c14532 (resolution :clauses (.c14528 .c14531) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14533 (resolution :clauses (.c14525 .c14532) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14534 (resolution :clauses (.c14524 .c14533) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 (f3 c_1 c_0) c_2) (f3 c_0 (f3 c_0 c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14535 (resolution :clauses (.c14523 .c14534) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2))) (= (f1 c_2) (f3 c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_0)))))
(set .c14536 (eq_congruent :conclusion ((not (= c_1 c7)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2))))))
(set .c14537 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c14538 (resolution :clauses (.c14536 .c14537) :conclusion ((not (= c_1 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c14539 (resolution :clauses (.c14535 .c14538) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2))) (= (f1 c_2) (f3 c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)))))
(set .c14540 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))))))
(set .c14541 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c14542 (resolution :clauses (.c14540 .c14541) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c14543 (resolution :clauses (.c14539 .c14542) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2))) (= (f1 c_2) (f3 c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c14544 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2)))))
(set .c14545 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14546 (resolution :clauses (.c14544 .c14545) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2)))))
(set .c14547 (resolution :clauses (.c14543 .c14546) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (= (f1 c_2) (f3 c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c14548 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c14549 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c14550 (resolution :clauses (.c14548 .c14549) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c14551 (resolution :clauses (.c14547 .c14550) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (= (f1 c_2) (f3 c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c14552 (resolution :clauses (.c14522 .c14551) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c14553 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14554 (resolution :clauses (.c14552 .c14553) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c14555 (resolution :clauses (.c14521 .c14554) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_0 c_0) c_1) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_2))))))
(set .c14556 (resolution :clauses (.c14555 .c31 .c34 .c169) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_0 c_0) c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f2 c4) (f1 c_2))))))
(set .c14557 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c_2) (f1 c_1)))))
(set .c14558 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c14559 (resolution :clauses (.c14557 .c14558) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_2) (f1 c_1)) (not (= c_1 c7)))))
(set .c14560 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14561 (resolution :clauses (.c14559 .c14560) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_2) (f1 c_1)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c14562 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c14563 (resolution :clauses (.c14561 .c14562) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_2) (f1 c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14564 (resolution :clauses (.c14563 .c166 .c8881 .c164) :conclusion ((= (f2 c_2) (f1 c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= c5 c_2)))))
(set .c14565 (resolution :clauses (.c14556 .c238 .c9804 .c286 .c2949 .c13433 .c9809 .c13408 .c175 .c189 .c171 .c290 .c193 .c13490 .c5993 .c5946 .c258 .c14440 .c205 .c14564 .c9217 .c274 .c271 .c187 .c223 .c27 .c13420 .c11762 .c9478 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (= c5 c_0) (not (= (f2 c5) (f1 c_1))) (= c4 c_1))))
(set .c14566 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0))))
(set .c14567 (eq_congruent :conclusion ((not (= (f2 c_0) c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)))))
(set .c14568 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c14569 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c14570 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)))))
(set .c14571 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c14572 (resolution :clauses (.c14570 .c14571) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)) (not (= c_1 c7)))))
(set .c14573 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14574 (resolution :clauses (.c14572 .c14573) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c14575 (resolution :clauses (.c14569 .c14574) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c14576 (resolution :clauses (.c14568 .c14575) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c14577 (resolution :clauses (.c14567 .c14576) :conclusion ((not (= (f2 c_0) c7)) (= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c14578 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= (f2 c_0) c7))))
(set .c14579 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c14580 (resolution :clauses (.c14578 .c14579) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= (f2 c_0) c7) (not (= c4 c_0)))))
(set .c14581 (resolution :clauses (.c14577 .c14580) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f2 c_0) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f2 c4) (f1 c_1))))))
(set .c14582 (resolution :clauses (.c14566 .c14581) :conclusion ((not (= (f3 c_0 c4) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f2 c4) (f1 c_1))))))
(set .c14583 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c4 (f3 c4 c5))) (= (f3 c_0 c4) (f3 c6 (f3 c4 c5))))))
(set .c14584 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c14585 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c14586 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f1 c_1))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)))))
(set .c14587 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c14588 (resolution :clauses (.c14586 .c14587) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= c5 (f1 c_0)) (not (= c_1 c7)))))
(set .c14589 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c14590 (resolution :clauses (.c14588 .c14589) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= c5 (f1 c_0)) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c14591 (resolution :clauses (.c14585 .c14590) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c14592 (resolution :clauses (.c14584 .c14591) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c_0 c6)))))
(set .c14593 (resolution :clauses (.c14583 .c14592) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c4) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)))))
(set .c14594 (resolution :clauses (.c14582 .c14593) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f2 c4) (f1 c_1))))))
(set .c14595 (resolution :clauses (.c14594 .c31 .c34 .c164 .c166 .c167) :conclusion ((= (f3 c_0 c4) c_0) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f2 c4) (f1 c_1))))))
(set .c14596 (resolution :clauses (.c14595 .c287 .c5993 .c8881) :conclusion ((not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c_0 c6)) (not (= (f2 c4) (f1 c_1))))))
(set .c14597 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c4) c_2))))
(set .c14598 (eq_congruent :conclusion ((not (= (f2 c_2) c7)) (not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5))))))
(set .c14599 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= (f2 c_2) c7))))
(set .c14600 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c14601 (resolution :clauses (.c14599 .c14600) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (= (f2 c_2) c7) (not (= c4 c_2)))))
(set .c14602 (resolution :clauses (.c14598 .c14601) :conclusion ((not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_2)))))
(set .c14603 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c14604 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c14605 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c14606 (resolution :clauses (.c14604 .c14605) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14607 (resolution :clauses (.c14603 .c14606) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14608 (resolution :clauses (.c14602 .c14607) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c14609 (resolution :clauses (.c14597 .c14608) :conclusion ((not (= (f3 c_0 c4) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c4) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c14610 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c4 (f3 c4 c5))) (= (f3 c_0 c4) (f3 c6 (f3 c4 c5))))))
(set .c14611 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= c4 (f3 c4 c5)))))
(set .c14612 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c14613 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c14614 (resolution :clauses (.c14612 .c14613) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14615 (resolution :clauses (.c14611 .c14614) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14616 (resolution :clauses (.c14610 .c14615) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c4) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14617 (resolution :clauses (.c14609 .c14616) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c4) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)))))
(set .c14618 (resolution :clauses (.c14617 .c33 .c34 .c169) :conclusion ((= (f3 c_0 c4) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= c_0 c6)))))
(set .c14619 (resolution :clauses (.c14618 .c289 .c8152 .c258 .c14596 .c260 .c14565 .c13227 .c13496 .c13221 .c262 .c14329 .c252 .c13947 .c215 .c12563 .c13497 .c13352 .c12810 .c256 .c12183 .c11089 .c8881 .c8880 .c1739) :conclusion ((not (= (f2 c4) (f1 c_1))) (= c6 c_1))))
(set .c14620 (resolution :clauses (.c14329 .c252 .c262 .c13947 .c12810 .c303 .c8880) :conclusion ((not (= c_0 c6)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 c_0) (= c_1 c7) (not (= (f1 c_2) (f2 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))))))
(set .c14621 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c4) c_2))))
(set .c14622 (eq_congruent :conclusion ((not (= (f2 c_2) c6)) (not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))))))
(set .c14623 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c14624 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c14625 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c14626 (resolution :clauses (.c14624 .c14625) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14627 (resolution :clauses (.c14623 .c14626) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14628 (resolution :clauses (.c14622 .c14627) :conclusion ((not (= (f2 c_2) c6)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14629 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_2) c6))))
(set .c14630 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c14631 (resolution :clauses (.c14629 .c14630) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_2) c6) (not (= c4 c_2)))))
(set .c14632 (resolution :clauses (.c14628 .c14631) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c6 c_1)))))
(set .c14633 (resolution :clauses (.c14621 .c14632) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c4) c_2) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c6 c_1)))))
(set .c14634 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4)))))
(set .c14635 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= c4 (f3 c4 c5)))))
(set .c14636 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c14637 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c14638 (resolution :clauses (.c14636 .c14637) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14639 (resolution :clauses (.c14635 .c14638) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14640 (resolution :clauses (.c14634 .c14639) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14641 (resolution :clauses (.c14633 .c14640) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c4) c_2) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c14642 (resolution :clauses (.c14641 .c33 .c34 .c169) :conclusion ((= (f3 c_0 c4) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c14643 (resolution :clauses (.c14642 .c262 .c8371) :conclusion ((= (f3 c_0 c4) c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c6 c_1)) (= c_1 c7) (= c_2 (f3 c_2 c4)))))
(set .c14644 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0))))
(set .c14645 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)))))
(set .c14646 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c14647 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c14648 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c14649 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c14650 (resolution :clauses (.c14648 .c14649) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c14651 (resolution :clauses (.c14647 .c14650) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14652 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14653 (resolution :clauses (.c14651 .c14652) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14654 (resolution :clauses (.c14646 .c14653) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14655 (resolution :clauses (.c14645 .c14654) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14656 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14657 (resolution :clauses (.c14655 .c14656) :conclusion ((= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14658 (resolution :clauses (.c14644 .c14657) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14659 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c14660 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14661 (resolution :clauses (.c14659 .c14660) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14662 (resolution :clauses (.c14658 .c14661) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)))))
(set .c14663 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0)))))
(set .c14664 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= (f3 c_2 c_2) c7))))
(set .c14665 (resolution :clauses (.c14663 .c14664) :conclusion ((not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)))))
(set .c14666 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c14667 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14668 (resolution :clauses (.c14666 .c14667) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14669 (resolution :clauses (.c14665 .c14668) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14670 (resolution :clauses (.c14662 .c14669) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c14671 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))))))
(set .c14672 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)))))
(set .c14673 (resolution :clauses (.c14671 .c14672) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14674 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14675 (resolution :clauses (.c14673 .c14674) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14676 (resolution :clauses (.c14670 .c14675) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f3 c_2 c_0) c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c14677 (resolution :clauses (.c14676 .c33 .c34 .c169) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f3 c_2 c_0) c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c14678 (resolution :clauses (.c14677 .c238 .c14366 .c219 .c293 .c14328 .c11746 .c10269 .c8881) :conclusion ((not (= c5 c_2)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f2 c4) (f1 c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f2 c_2) (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (= (f3 c_0 c5) c_2))))
(set .c14679 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7))))
(set .c14680 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)))))
(set .c14681 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c14682 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c14683 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c14684 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c14685 (resolution :clauses (.c14683 .c14684) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c14686 (resolution :clauses (.c14682 .c14685) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14687 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14688 (resolution :clauses (.c14686 .c14687) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14689 (resolution :clauses (.c14681 .c14688) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14690 (resolution :clauses (.c14680 .c14689) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14691 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14692 (resolution :clauses (.c14690 .c14691) :conclusion ((= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14693 (resolution :clauses (.c14679 .c14692) :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14694 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c14695 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14696 (resolution :clauses (.c14694 .c14695) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14697 (resolution :clauses (.c14693 .c14696) :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14698 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f1 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))))))
(set .c14699 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_0) (f3 c4 c5)))))
(set .c14700 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14701 (resolution :clauses (.c14699 .c14700) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14702 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c14703 (resolution :clauses (.c14701 .c14702) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f1 c_0) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14704 (resolution :clauses (.c14698 .c14703) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14705 (resolution :clauses (.c14697 .c14704) :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c4) (f1 c_2))))))
(set .c14706 (resolution :clauses (.c14705 .c33 .c34 .c8881 .c165 .c167 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_2))))))
(set .c14707 (resolution :clauses (.c14706 .c242 .c14678) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 c7)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_2) c_2) (= c5 c_0) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f2 c_2) (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (= (f3 c_0 c5) c_2))))
(set .c14708 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0))))
(set .c14709 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)))))
(set .c14710 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c14711 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c14712 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c14713 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c14714 (resolution :clauses (.c14712 .c14713) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c14715 (resolution :clauses (.c14711 .c14714) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14716 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14717 (resolution :clauses (.c14715 .c14716) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14718 (resolution :clauses (.c14710 .c14717) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14719 (resolution :clauses (.c14709 .c14718) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14720 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14721 (resolution :clauses (.c14719 .c14720) :conclusion ((= (f3 (f3 c_1 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14722 (resolution :clauses (.c14708 .c14721) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14723 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c14724 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14725 (resolution :clauses (.c14723 .c14724) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14726 (resolution :clauses (.c14722 .c14725) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_2)))))
(set .c14727 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))))))
(set .c14728 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c14729 (resolution :clauses (.c14727 .c14728) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c14730 (resolution :clauses (.c14726 .c14729) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c14731 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4)))))
(set .c14732 (resolution :clauses (.c14730 .c14731) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c14733 (resolution :clauses (.c14732 .c33 .c34) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c14734 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c14735 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c14736 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c14737 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c14738 (resolution :clauses (.c14736 .c14737) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c14739 (resolution :clauses (.c14735 .c14738) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14740 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14741 (resolution :clauses (.c14739 .c14740) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14742 (resolution :clauses (.c14734 .c14741) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14743 (resolution :clauses (.c14742 .c33) :conclusion ((= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c14744 (resolution :clauses (.c14733 .c293 .c10269 .c242 .c8464 .c262 .c14707 .c271 .c9464 .c260 .c14643 .c14743 .c8081 .c292 .c289 .c223 .c27 .c205 .c8152 .c12978 .c8268 .c2677 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= (f2 c4) (f1 c_2))) (= c4 c_1) (= c_1 c7) (= c5 c_0))))
(set .c14745 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c14746 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_0) c_2)))))
(set .c14747 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14748 (resolution :clauses (.c14746 .c14747) :conclusion ((not (= (f3 c_1 c_0) (f3 c_2 c_2))) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_0) c_2)))))
(set .c14749 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_1 c_0) (f3 c_2 c_2)))))
(set .c14750 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c14751 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c14752 (resolution :clauses (.c14750 .c14751) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c14753 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c14754 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c14755 (resolution :clauses (.c14753 .c14754) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c14756 (resolution :clauses (.c14752 .c14755) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14757 (resolution :clauses (.c14749 .c14756) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_1 c_0) (f3 c_2 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14758 (resolution :clauses (.c14748 .c14757) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_0) c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14759 (resolution :clauses (.c14745 .c14758) :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14760 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c_1 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c14761 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c14762 (resolution :clauses (.c14760 .c14761) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c14763 (resolution :clauses (.c14759 .c14762) :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c14764 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c14765 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c14766 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c14767 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c14768 (resolution :clauses (.c14766 .c14767) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14769 (resolution :clauses (.c14765 .c14768) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f1 c_2) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14770 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c14771 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14772 (resolution :clauses (.c14770 .c14771) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c14773 (resolution :clauses (.c14769 .c14772) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f1 c_2) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14774 (resolution :clauses (.c14764 .c14773) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14775 (resolution :clauses (.c14763 .c14774) :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_2))))))
(set .c14776 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c14777 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14778 (resolution :clauses (.c14776 .c14777) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c14779 (resolution :clauses (.c14775 .c14778) :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_2))))))
(set .c14780 (resolution :clauses (.c14779 .c31 .c34 .c169 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_2))))))
(set .c14781 (resolution :clauses (.c14780 .c238 .c11746) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) c_0) (= (f3 c_0 c5) c_2))))
(set .c14782 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2))))
(set .c14783 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)))))
(set .c14784 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c14785 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c14786 (resolution :clauses (.c14784 .c14785) :conclusion ((not (= (f2 c5) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c5 c_2)))))
(set .c14787 (resolution :clauses (.c14783 .c14786) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_1 c5)) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c14788 (resolution :clauses (.c14782 .c14787) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c14789 (resolution :clauses (.c14788 .c33) :conclusion ((= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c14790 (resolution :clauses (.c238 .c14006 .c9828 .c242 .c14781 .c9217 .c274 .c271 .c14789 .c219 .c223 .c9809 .c11762 .c290 .c8881) :conclusion ((not (= c5 c_2)) (= c5 c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= (f2 c4) (f1 c_2))) (= c4 c_1) (not (= c6 c_1)) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= c7 c_2)) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c_0) (f1 c_2))) (not (= c_0 (f3 c_1 c4))))))
(set .c14791 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)))))
(set .c14792 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c_2) (f1 c_2))) (= (f2 c5) (f1 c_2)))))
(set .c14793 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c14794 (resolution :clauses (.c14792 .c14793) :conclusion ((not (= (f2 c_2) (f1 c_2))) (= (f2 c5) (f1 c_2)) (not (= c5 c_2)))))
(set .c14795 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)))))
(set .c14796 (resolution :clauses (.c14795 .c8881) :conclusion ((not (= (f2 c4) (f1 c_0))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)))))
(set .c14797 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)))))
(set .c14798 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c4)) (= (f2 c4) (f2 (f3 c_2 c_0))))))
(set .c14799 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= c4 c_0)) (= (f3 c_2 c_0) c4))))
(set .c14800 (resolution :clauses (.c14798 .c14799) :conclusion ((= (f2 c4) (f2 (f3 c_2 c_0))) (not (= (f3 c_2 c_0) c_0)) (not (= c4 c_0)))))
(set .c14801 (resolution :clauses (.c14797 .c14800) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)) (not (= (f3 c_2 c_0) c_0)) (not (= c4 c_0)))))
(set .c14802 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c14803 (resolution :clauses (.c14801 .c14802) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)) (not (= (f3 c_2 c_0) c_0)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c14804 (eq_transitive :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c_1) (f1 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)))))
(set .c14805 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_1)) (= (f1 c_1) (f1 (f3 c_2 c_0))))))
(set .c14806 (resolution :clauses (.c14804 .c14805) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)) (not (= (f3 c_2 c_0) c_1)))))
(set .c14807 (resolution :clauses (.c14806 .c8881) :conclusion ((not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)) (not (= (f3 c_2 c_0) c_1)))))
(set .c14808 (resolution :clauses (.c14807 .c238 .c14803 .c9804 .c11785) :conclusion ((not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c5) (f1 c_2)) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c14809 (resolution :clauses (.c238 .c14006 .c9828) :conclusion ((= (f3 c_2 c_0) c_0) (not (= c5 c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (= c5 c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_0)) (not (= (f2 c4) (f1 c_2))) (= c4 c_1))))
(set .c14810 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4))) (= c_0 (f3 c_2 c4)))))
(set .c14811 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4)))))
(set .c14812 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c14813 (resolution :clauses (.c14811 .c14812) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14814 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14815 (resolution :clauses (.c14813 .c14814) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14816 (resolution :clauses (.c14810 .c14815) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_0 (f3 c_2 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14817 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_0) c_2)))))
(set .c14818 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14819 (resolution :clauses (.c14817 .c14818) :conclusion ((not (= (f3 c_1 c_0) (f3 c_2 c_2))) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_0) c_2)))))
(set .c14820 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_1 c_0) (f3 c_2 c_2)))))
(set .c14821 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c14822 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c14823 (resolution :clauses (.c14821 .c14822) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c14824 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c14825 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c14826 (resolution :clauses (.c14824 .c14825) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c14827 (resolution :clauses (.c14823 .c14826) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14828 (resolution :clauses (.c14820 .c14827) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_1 c_0) (f3 c_2 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14829 (resolution :clauses (.c14819 .c14828) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_0) c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c14830 (resolution :clauses (.c14816 .c14829) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_0 (f3 c_2 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c14831 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c_1 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c14832 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c14833 (resolution :clauses (.c14831 .c14832) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c14834 (resolution :clauses (.c14830 .c14833) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_0 (f3 c_2 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c5 c_2)))))
(set .c14835 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c14836 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c14837 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c14838 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14839 (resolution :clauses (.c14837 .c14838) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c14840 (resolution :clauses (.c14836 .c14839) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14841 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c14842 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c14843 (resolution :clauses (.c14841 .c14842) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14844 (resolution :clauses (.c14840 .c14843) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c14845 (resolution :clauses (.c14835 .c14844) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c14846 (resolution :clauses (.c14834 .c14845) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_0 (f3 c_2 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c14847 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f2 c_0) c_0)))))
(set .c14848 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (= (f3 c_0 c_2) (f2 c_0)))))
(set .c14849 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c14850 (resolution :clauses (.c14848 .c14849) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (= (f3 c_0 c_2) (f2 c_0)) (not (= c4 c_0)))))
(set .c14851 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c14852 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14853 (resolution :clauses (.c14851 .c14852) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c14854 (resolution :clauses (.c14850 .c14853) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (= (f3 c_0 c_2) (f2 c_0)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14855 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c14856 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14857 (resolution :clauses (.c14855 .c14856) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c14858 (resolution :clauses (.c14854 .c14857) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (= (f3 c_0 c_2) (f2 c_0)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14859 (resolution :clauses (.c14847 .c14858) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14860 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c14861 (resolution :clauses (.c14859 .c14860) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c14862 (resolution :clauses (.c14846 .c14861) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_0 (f3 c_2 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= (f3 c_2 c_0) c_1)))))
(set .c14863 (resolution :clauses (.c14862 .c31 .c34) :conclusion ((not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_0 (f3 c_2 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= (f3 c_2 c_0) c_1)))))
(set .c14864 (resolution :clauses (.c14863 .c238 .c11746 .c242 .c14809 .c9217 .c262 .c271 .c219 .c223 .c9809 .c274 .c14790 .c14789 .c11762 .c290 .c14808 .c183 .c193 .c9478 .c8881) :conclusion ((not (= c4 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c5 c_2)) (= c5 c_0) (not (= (f2 c4) (f1 c_2))) (= c4 c_1) (= c_1 c7) (not (= (f2 c_0) (f1 c_2))) (not (= c_0 (f3 c_1 c4))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f2 c_0) (f1 c_1))))))
(set .c14865 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0))))
(set .c14866 (eq_congruent :conclusion ((not (= (f2 c_0) c6)) (not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))))))
(set .c14867 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_0) c6))))
(set .c14868 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c14869 (resolution :clauses (.c14867 .c14868) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_0) c6) (not (= c4 c_0)))))
(set .c14870 (resolution :clauses (.c14866 .c14869) :conclusion ((not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)))))
(set .c14871 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c14872 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c14873 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c14874 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c14875 (resolution :clauses (.c14873 .c14874) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c14876 (resolution :clauses (.c14872 .c14875) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c14877 (resolution :clauses (.c14871 .c14876) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c14878 (resolution :clauses (.c14870 .c14877) :conclusion ((= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c14879 (resolution :clauses (.c14865 .c14878) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c14880 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4)))))
(set .c14881 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c14882 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c14883 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c14884 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c14885 (resolution :clauses (.c14883 .c14884) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c14886 (resolution :clauses (.c14882 .c14885) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c14887 (resolution :clauses (.c14881 .c14886) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c14888 (resolution :clauses (.c14880 .c14887) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c14889 (resolution :clauses (.c14879 .c14888) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= c_0 c7)))))
(set .c14890 (resolution :clauses (.c14889 .c1739 .c31 .c34 .c8881 .c167) :conclusion ((= (f3 c_0 c4) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c_0 c7)))))
(set .c14891 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4))) (= c_0 (f3 c_2 c4)))))
(set .c14892 (eq_congruent :conclusion ((not (= (f2 c_0) c6)) (not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))))))
(set .c14893 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_0) c6))))
(set .c14894 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c14895 (resolution :clauses (.c14893 .c14894) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_0) c6) (not (= c4 c_0)))))
(set .c14896 (resolution :clauses (.c14892 .c14895) :conclusion ((not (= c_0 (f3 c4 c5))) (= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)))))
(set .c14897 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)))))
(set .c14898 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c14899 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c14900 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c14901 (resolution :clauses (.c14899 .c14900) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c14902 (resolution :clauses (.c14898 .c14901) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c14903 (resolution :clauses (.c14897 .c14902) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c14904 (resolution :clauses (.c14896 .c14903) :conclusion ((= (f3 (f2 c_0) c_0) (f3 c6 (f3 c4 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c14905 (resolution :clauses (.c14891 .c14904) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4))) (= c_0 (f3 c_2 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c14906 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4)))))
(set .c14907 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c14908 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c14909 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c14910 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c14911 (resolution :clauses (.c14909 .c14910) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c14912 (resolution :clauses (.c14908 .c14911) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c14913 (resolution :clauses (.c14907 .c14912) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c14914 (resolution :clauses (.c14906 .c14913) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c14915 (resolution :clauses (.c14905 .c14914) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_2 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= c7 c_2)))))
(set .c14916 (resolution :clauses (.c14915 .c1739 .c31 .c34 .c8881 .c167) :conclusion ((= c_0 (f3 c_2 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= c7 c_2)))))
(set .c14917 (resolution :clauses (.c14916 .c262 .c14890 .c296 .c8265 .c260 .c14864 .c105 .c23 .c287 .c14182 .c5993 .c5946 .c258 .c14744 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= c_1 c7) (not (= (f2 c4) (f1 c_2))) (= c5 c_0) (= c4 c_1))))
(set .c14918 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c14919 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c14920 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_2) (f2 c_1)))))
(set .c14921 (resolution :clauses (.c14919 .c14920) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14922 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c14923 (resolution :clauses (.c14921 .c14922) :conclusion ((= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14924 (resolution :clauses (.c14918 .c14923) :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14925 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c14926 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14927 (resolution :clauses (.c14925 .c14926) :conclusion ((not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c14928 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)))))
(set .c14929 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c14930 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c14931 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c14932 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c14933 (resolution :clauses (.c14931 .c14932) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14934 (resolution :clauses (.c14930 .c14933) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14935 (resolution :clauses (.c14929 .c14934) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14936 (resolution :clauses (.c14928 .c14935) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14937 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)))))
(set .c14938 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c14939 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c14940 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c14941 (resolution :clauses (.c14939 .c14940) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14942 (resolution :clauses (.c14938 .c14941) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14943 (resolution :clauses (.c14937 .c14942) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14944 (resolution :clauses (.c14936 .c14943) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c14945 (resolution :clauses (.c14927 .c14944) :conclusion ((= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c14946 (resolution :clauses (.c14924 .c14945) :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c14947 (resolution :clauses (.c14946 .c1739 .c32 .c34 .c169 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c14948 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c4 c_1))))
(set .c14949 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) c_2)) (= (f3 c_2 c_2) (f3 c_2 (f3 c_2 c_1))))))
(set .c14950 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c_1) c_2))))
(set .c14951 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c14952 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c14953 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c14954 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c14955 (resolution :clauses (.c14953 .c14954) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14956 (resolution :clauses (.c14952 .c14955) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14957 (resolution :clauses (.c14951 .c14956) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14958 (resolution :clauses (.c14950 .c14957) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c_1) c_2) (not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14959 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)))))
(set .c14960 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c14961 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c14962 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c14963 (resolution :clauses (.c14961 .c14962) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14964 (resolution :clauses (.c14960 .c14963) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14965 (resolution :clauses (.c14959 .c14964) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14966 (resolution :clauses (.c14958 .c14965) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c_1) c_2) (not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c14967 (resolution :clauses (.c14949 .c14966) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_2) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_2)) (not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c14968 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c14969 (resolution :clauses (.c14967 .c14968) :conclusion ((= (f3 c_2 c_2) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_2)) (not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c14970 (resolution :clauses (.c14948 .c14969) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c4 c_1) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_2)) (not (= c6 c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c14971 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c14972 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_2) (f2 c_1)))))
(set .c14973 (resolution :clauses (.c14971 .c14972) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14974 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c14975 (resolution :clauses (.c14973 .c14974) :conclusion ((= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14976 (resolution :clauses (.c14970 .c14975) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c4 c_1) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_2)) (not (= c6 c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c14977 (resolution :clauses (.c14976 .c1739 .c32 .c34) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= c4 c_1) (not (= (f3 c_1 c_1) c_2)) (not (= c6 c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_0)) (not (= c7 c_2)))))
(set .c14978 (resolution :clauses (.c14977 .c234 .c14947) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= c4 c_1) (not (= c6 c_1)) (not (= c5 c_1)) (not (= (f1 c_1) c_0)) (not (= c7 c_2)) (= (f3 c_1 c_1) c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c14979 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c5) c_2)) (= (f3 c_2 c5) c_2))))
(set .c14980 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c5 (f3 c4 c5))) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))))))
(set .c14981 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)))))
(set .c14982 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c14983 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c14984 (resolution :clauses (.c14982 .c14983) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14985 (resolution :clauses (.c14981 .c14984) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14986 (resolution :clauses (.c14980 .c14985) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14987 (resolution :clauses (.c14979 .c14986) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c5) c_2)) (= (f3 c_2 c5) c_2) (not (= c6 c_1)) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14988 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5)))))
(set .c14989 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)))))
(set .c14990 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c14991 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c14992 (resolution :clauses (.c14990 .c14991) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14993 (resolution :clauses (.c14989 .c14992) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 (f3 c4 c5)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14994 (resolution :clauses (.c14988 .c14993) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c5)) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c14995 (resolution :clauses (.c14987 .c14994) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c5) c_2)) (= (f3 c_2 c5) c_2) (not (= c6 c_1)) (not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c14996 (resolution :clauses (.c14995 .c1739 .c32 .c34) :conclusion ((not (= (f3 c_1 c5) c_2)) (= (f3 c_2 c5) c_2) (not (= c6 c_1)) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= c7 c_2)))))
(set .c14997 (resolution :clauses (.c14996 .c280) :conclusion ((not (= (f3 c_1 c5) c_2)) (not (= c6 c_1)) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c14998 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c14999 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_1 c_1) (f1 c_2))) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2))))))
(set .c15000 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_1 c_1) (f1 c_2)))))
(set .c15001 (resolution :clauses (.c14999 .c15000) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15002 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15003 (resolution :clauses (.c15001 .c15002) :conclusion ((= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15004 (resolution :clauses (.c14998 .c15003) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15005 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f3 c_1 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c15006 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)))))
(set .c15007 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c15008 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c15009 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c15010 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c15011 (resolution :clauses (.c15009 .c15010) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15012 (resolution :clauses (.c15008 .c15011) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15013 (resolution :clauses (.c15007 .c15012) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15014 (resolution :clauses (.c15006 .c15013) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15015 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)))))
(set .c15016 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1))))
(set .c15017 (eq_congruent :conclusion ((not (= c4 (f2 c_1))) (not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)))))
(set .c15018 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c4 (f2 c_1)))))
(set .c15019 (resolution :clauses (.c15017 .c15018) :conclusion ((not (= c5 c_1)) (= (f3 c4 c5) (f3 (f2 c_1) c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15020 (resolution :clauses (.c15016 .c15019) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c4 c5) c_1) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15021 (resolution :clauses (.c15015 .c15020) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15022 (resolution :clauses (.c15014 .c15021) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c15023 (resolution :clauses (.c15005 .c15022) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c15024 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15025 (resolution :clauses (.c15023 .c15024) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)))))
(set .c15026 (resolution :clauses (.c15004 .c15025) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15027 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1))))))
(set .c15028 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (= (f3 c_1 c_1) (f1 c_1)))))
(set .c15029 (resolution :clauses (.c15027 .c15028) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)))))
(set .c15030 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15031 (resolution :clauses (.c15029 .c15030) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)))))
(set .c15032 (resolution :clauses (.c15026 .c15031) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= c5 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15033 (resolution :clauses (.c15032 .c1739 .c32 .c34 .c168 .c169 .c1742 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c7 c_2)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c5 c_1)) (not (= c4 c_0)))))
(set .c15034 (resolution :clauses (.c15033 .c234 .c6380 .c14997 .c262 .c5978) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c5 c_1)) (not (= c4 c_0)) (= (f3 c_1 c_1) c_1) (not (= (f2 c5) (f1 c_1))) (= c_1 c7) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))) (= (f3 c_1 c5) c_1))))
(set .c15035 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c15036 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c15037 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c15038 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15039 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15040 (resolution :clauses (.c15038 .c15039) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15041 (resolution :clauses (.c15037 .c15040) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15042 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c4 c5)))))
(set .c15043 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f3 c_2 c_2) c_1)) (= c5 (f3 c_2 c_2)))))
(set .c15044 (resolution :clauses (.c15042 .c15043) :conclusion ((not (= c4 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c4 c5)) (not (= c5 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15045 (resolution :clauses (.c15041 .c15044) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f1 c_2) (f3 c4 c5)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15046 (resolution :clauses (.c15036 .c15045) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15047 (resolution :clauses (.c15035 .c15046) :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15048 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c15049 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c15050 (resolution :clauses (.c15048 .c15049) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15051 (resolution :clauses (.c15047 .c15050) :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15052 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c15053 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15054 (resolution :clauses (.c15052 .c15053) :conclusion ((not (= (f3 c_1 c_2) (f2 c_1))) (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c15055 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_1 c_2) (f2 c_1)))))
(set .c15056 (resolution :clauses (.c15054 .c15055) :conclusion ((= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15057 (resolution :clauses (.c15051 .c15056) :conclusion ((not (= c6 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15058 (resolution :clauses (.c15057 .c1739 .c32 .c34 .c169 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15059 (resolution :clauses (.c15058 .c236 .c11610 .c291 .c11459) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_1 c_2) c_2) (not (= (f2 c5) (f1 c_2))))))
(set .c15060 (eq_transitive :conclusion ((not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1))))
(set .c15061 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c15062 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_2) (f2 c_1)))))
(set .c15063 (resolution :clauses (.c15061 .c15062) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15064 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15065 (resolution :clauses (.c15063 .c15064) :conclusion ((= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15066 (resolution :clauses (.c15060 .c15065) :conclusion ((not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15067 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))))))
(set .c15068 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c15069 (resolution :clauses (.c15067 .c15068) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15070 (resolution :clauses (.c15066 .c15069) :conclusion ((not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15071 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c15072 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c15073 (resolution :clauses (.c15071 .c15072) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15074 (resolution :clauses (.c15070 .c15073) :conclusion ((not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_1)))))
(set .c15075 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= c5 c_1)) (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5)))))
(set .c15076 (resolution :clauses (.c15074 .c15075) :conclusion ((not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)))))
(set .c15077 (resolution :clauses (.c15076 .c1739 .c32 .c34) :conclusion ((not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)))))
(set .c15078 (resolution :clauses (.c15077 .c236 .c11615 .c290 .c10269 .c242 .c15059) :conclusion ((not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= (f3 c_1 c5) c_1) (not (= (f1 c_1) c_0)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c6 c_1)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (= (f3 c_2 c_2) c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c15079 (eq_transitive :conclusion ((not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1))))
(set .c15080 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c15081 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_2) (f2 c_1)))))
(set .c15082 (resolution :clauses (.c15080 .c15081) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15083 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15084 (resolution :clauses (.c15082 .c15083) :conclusion ((= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15085 (resolution :clauses (.c15079 .c15084) :conclusion ((not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15086 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) (f3 c_1 c_1))) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1))))))
(set .c15087 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)))))
(set .c15088 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c15089 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c15090 (resolution :clauses (.c15088 .c15089) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15091 (resolution :clauses (.c15087 .c15090) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15092 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1)))))
(set .c15093 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15094 (resolution :clauses (.c15092 .c15093) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1)))))
(set .c15095 (resolution :clauses (.c15091 .c15094) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)))))
(set .c15096 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))))))
(set .c15097 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c15098 (resolution :clauses (.c15096 .c15097) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15099 (resolution :clauses (.c15095 .c15098) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)))))
(set .c15100 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)))))
(set .c15101 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c15102 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c15103 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c15104 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c15105 (resolution :clauses (.c15103 .c15104) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c15106 (resolution :clauses (.c15102 .c15105) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15107 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15108 (resolution :clauses (.c15106 .c15107) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15109 (resolution :clauses (.c15101 .c15108) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15110 (resolution :clauses (.c15100 .c15109) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15111 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15112 (resolution :clauses (.c15110 .c15111) :conclusion ((= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15113 (resolution :clauses (.c15099 .c15112) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c15114 (resolution :clauses (.c15086 .c15113) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c15115 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15116 (resolution :clauses (.c15114 .c15115) :conclusion ((= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c15117 (resolution :clauses (.c15085 .c15116) :conclusion ((not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c15118 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f3 c_1 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c15119 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)))))
(set .c15120 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c15121 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c15122 (resolution :clauses (.c15120 .c15121) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15123 (resolution :clauses (.c15119 .c15122) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15124 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1)))))
(set .c15125 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15126 (resolution :clauses (.c15124 .c15125) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1)))))
(set .c15127 (resolution :clauses (.c15123 .c15126) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)))))
(set .c15128 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))))))
(set .c15129 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c15130 (resolution :clauses (.c15128 .c15129) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15131 (resolution :clauses (.c15127 .c15130) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)))))
(set .c15132 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)))))
(set .c15133 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c15134 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c15135 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c15136 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c15137 (resolution :clauses (.c15135 .c15136) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c15138 (resolution :clauses (.c15134 .c15137) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15139 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15140 (resolution :clauses (.c15138 .c15139) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15141 (resolution :clauses (.c15133 .c15140) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15142 (resolution :clauses (.c15132 .c15141) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15143 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15144 (resolution :clauses (.c15142 .c15143) :conclusion ((= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15145 (resolution :clauses (.c15131 .c15144) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c15146 (resolution :clauses (.c15118 .c15145) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c15147 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15148 (resolution :clauses (.c15146 .c15147) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c15149 (resolution :clauses (.c15117 .c15148) :conclusion ((not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c15150 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_2 c_1) (f3 c_1 c_1))) (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1))))))
(set .c15151 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)))))
(set .c15152 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c15153 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c15154 (resolution :clauses (.c15152 .c15153) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15155 (resolution :clauses (.c15151 .c15154) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15156 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= c_1 c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1)))))
(set .c15157 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15158 (resolution :clauses (.c15156 .c15157) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c_1 c_1) (f3 (f3 c_1 c_2) c_1)))))
(set .c15159 (resolution :clauses (.c15155 .c15158) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)))))
(set .c15160 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))))))
(set .c15161 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c15162 (resolution :clauses (.c15160 .c15161) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15163 (resolution :clauses (.c15159 .c15162) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)))))
(set .c15164 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)))))
(set .c15165 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c15166 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c15167 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c15168 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c15169 (resolution :clauses (.c15167 .c15168) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c15170 (resolution :clauses (.c15166 .c15169) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15171 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15172 (resolution :clauses (.c15170 .c15171) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15173 (resolution :clauses (.c15165 .c15172) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15174 (resolution :clauses (.c15164 .c15173) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15175 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15176 (resolution :clauses (.c15174 .c15175) :conclusion ((= (f3 (f3 c_0 c_2) c_1) (f3 c_2 c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15177 (resolution :clauses (.c15163 .c15176) :conclusion ((not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c15178 (resolution :clauses (.c15150 .c15177) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c15179 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15180 (resolution :clauses (.c15178 .c15179) :conclusion ((= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)))))
(set .c15181 (resolution :clauses (.c15149 .c15180) :conclusion ((not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c15182 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= c5 c_1)) (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c5)))))
(set .c15183 (resolution :clauses (.c15181 .c15182) :conclusion ((not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c_1 (f3 (f2 c_1) c_1))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))))))
(set .c15184 (resolution :clauses (.c15183 .c1739 .c32 .c33 .c34 .c1742) :conclusion ((not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c_0 c7)) (not (= (f2 c4) (f1 c_1))))))
(set .c15185 (resolution :clauses (.c15184 .c236 .c11615 .c290 .c10269) :conclusion ((not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= (f3 c_1 c5) c_1) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_1)) (not (= c_0 c7)) (not (= (f2 c4) (f1 c_1))) (= (f3 c_1 c_2) c_2) (not (= (f2 c5) (f1 c_2))))))
(set .c15186 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_2) c_1)) (= c_0 (f3 c_2 c_2)))))
(set .c15187 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15188 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15189 (resolution :clauses (.c15187 .c15188) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15190 (resolution :clauses (.c15186 .c15189) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_1))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_2) c_1)) (= c_0 (f3 c_2 c_2)))))
(set .c15191 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_1)))))
(set .c15192 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c15193 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c15194 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c15195 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c15196 (resolution :clauses (.c15194 .c15195) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c4 c_2)))))
(set .c15197 (resolution :clauses (.c15193 .c15196) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15198 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15199 (resolution :clauses (.c15197 .c15198) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15200 (resolution :clauses (.c15192 .c15199) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15201 (resolution :clauses (.c15191 .c15200) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_1)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15202 (resolution :clauses (.c15190 .c15201) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_2) c_1)) (= c_0 (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)))))
(set .c15203 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))))))
(set .c15204 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c15205 (resolution :clauses (.c15203 .c15204) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_1))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15206 (resolution :clauses (.c15202 .c15205) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_2) c_1)) (= c_0 (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c7)) (not (= c5 c_1)))))
(set .c15207 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c15208 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c15209 (resolution :clauses (.c15207 .c15208) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c15210 (resolution :clauses (.c15206 .c15209) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_2) c_1)) (= c_0 (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c6 c_1)))))
(set .c15211 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c15212 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15213 (resolution :clauses (.c15211 .c15212) :conclusion ((not (= (f3 c_1 c_2) (f2 c_1))) (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c15214 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_1 c_2) (f2 c_1)))))
(set .c15215 (resolution :clauses (.c15213 .c15214) :conclusion ((= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15216 (resolution :clauses (.c15210 .c15215) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_2 c_2) c_1)) (= c_0 (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c6 c_1)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15217 (resolution :clauses (.c15216 .c1739 .c32 .c33 .c34) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_0 c_2) c_1) (f3 c_0 (f3 c_2 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 c_2 c_2) c_1)) (= c_0 (f3 c_2 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c_0 c7)) (not (= c5 c_1)) (not (= c6 c_1)))))
(set .c15218 (resolution :clauses (.c15217 .c236 .c11610 .c291 .c11459 .c242 .c15185 .c262 .c15078 .c8081 .c11620 .c286 .c289 .c185 .c221 .c223 .c203 .c10119 .c10342 .c12978 .c8268 .c258 .c15034 .c10005 .c270 .c5984 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_1)) (not (= c6 c_1)) (not (= (f2 c5) (f1 c_2))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (= c_1 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_0))) (not (= (f1 c_2) (f2 c_1))) (= c4 c_1) (not (= (f2 c5) (f1 c_1))) (not (= (f3 (f3 c_1 c_0) c_1) (f3 c_1 (f3 c_0 c_1)))))))
(set .c15219 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1))))
(set .c15220 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)))))
(set .c15221 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c15222 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c15223 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c15224 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c15225 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c15226 (resolution :clauses (.c15224 .c15225) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15227 (resolution :clauses (.c15223 .c15226) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c15228 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c15229 (resolution :clauses (.c15227 .c15228) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c5 c_2)))))
(set .c15230 (resolution :clauses (.c15222 .c15229) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)))))
(set .c15231 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15232 (resolution :clauses (.c15230 .c15231) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)))))
(set .c15233 (resolution :clauses (.c15221 .c15232) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)))))
(set .c15234 (resolution :clauses (.c15220 .c15233) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)))))
(set .c15235 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15236 (resolution :clauses (.c15234 .c15235) :conclusion ((= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)))))
(set .c15237 (resolution :clauses (.c15219 .c15236) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)))))
(set .c15238 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_2))))))
(set .c15239 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c15240 (resolution :clauses (.c15238 .c15239) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15241 (resolution :clauses (.c15237 .c15240) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c15242 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c6)) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)))))
(set .c15243 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) (f3 c4 c5))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c15244 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c15245 (resolution :clauses (.c15243 .c15244) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15246 (resolution :clauses (.c15242 .c15245) :conclusion ((not (= (f3 c_2 c_2) c6)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15247 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)) (= (f3 c_2 c_2) c6))))
(set .c15248 (resolution :clauses (.c15246 .c15247) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c6 c_1)))))
(set .c15249 (resolution :clauses (.c15241 .c15248) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c6 c_1)))))
(set .c15250 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c15251 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15252 (resolution :clauses (.c15250 .c15251) :conclusion ((not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c15253 (eq_transitive :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)))))
(set .c15254 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15255 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15256 (resolution :clauses (.c15254 .c15255) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15257 (resolution :clauses (.c15253 .c15256) :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15258 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c15259 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15260 (resolution :clauses (.c15258 .c15259) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c15261 (resolution :clauses (.c15257 .c15260) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15262 (resolution :clauses (.c15252 .c15261) :conclusion ((= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_2 c_2) c_1)))))
(set .c15263 (resolution :clauses (.c15249 .c15262) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15264 (resolution :clauses (.c15263 .c1739 .c29 .c33 .c34 .c8881 .c169) :conclusion ((not (= c4 c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15265 (resolution :clauses (.c15264 .c236 .c9454 .c273 .c8072) :conclusion ((not (= c4 c_2)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 c_2) c_1)) (= c4 c_1) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= c6 c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_1 c_2) c_2) (not (= (f2 c5) (f1 c_2))))))
(set .c15266 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7))))
(set .c15267 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)))))
(set .c15268 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c_0 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c15269 (eq_congruent :conclusion ((not (= (f2 c_2) c_0)) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)))))
(set .c15270 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c15271 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c15272 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c15273 (resolution :clauses (.c15271 .c15272) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15274 (resolution :clauses (.c15270 .c15273) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0))))
(set .c15275 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c15276 (resolution :clauses (.c15274 .c15275) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (= (f2 c_2) c_0) (not (= c5 c_2)))))
(set .c15277 (resolution :clauses (.c15269 .c15276) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)))))
(set .c15278 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15279 (resolution :clauses (.c15277 .c15278) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c_0 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)))))
(set .c15280 (resolution :clauses (.c15268 .c15279) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c_2) c_2) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)))))
(set .c15281 (resolution :clauses (.c15267 .c15280) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)))))
(set .c15282 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15283 (resolution :clauses (.c15281 .c15282) :conclusion ((= (f3 (f3 c_0 c_2) c_2) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)))))
(set .c15284 (resolution :clauses (.c15266 .c15283) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_2)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)))))
(set .c15285 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_2))))))
(set .c15286 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c15287 (resolution :clauses (.c15285 .c15286) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15288 (resolution :clauses (.c15284 .c15287) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c15289 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c15290 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c15291 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c15292 (resolution :clauses (.c15290 .c15291) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15293 (resolution :clauses (.c15289 .c15292) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15294 (resolution :clauses (.c15288 .c15293) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c15295 (resolution :clauses (.c15294 .c1739 .c29 .c33 .c34 .c8881 .c168 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c4 c_2)))))
(set .c15296 (resolution :clauses (.c15295 .c242 .c15265) :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= c_0 c7)) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c4 c_2)) (= (f3 c_2 c_2) c_2) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= c4 c_1) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_1 c_2) c_2) (not (= (f2 c5) (f1 c_2))))))
(set .c15297 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c15298 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c15299 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c15300 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c15301 (resolution :clauses (.c15299 .c15300) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15302 (resolution :clauses (.c15298 .c15301) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15303 (resolution :clauses (.c15297 .c15302) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15304 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c15305 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c15306 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c15307 (resolution :clauses (.c15305 .c15306) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15308 (resolution :clauses (.c15304 .c15307) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15309 (resolution :clauses (.c15303 .c15308) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15310 (resolution :clauses (.c15309 .c34 .c168 .c169 .c224) :conclusion ((not (= c6 c_1)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15311 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_1 c5))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_1 c5) c_2))))
(set .c15312 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_1 c5)))))
(set .c15313 (resolution :clauses (.c15311 .c15312) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_1 c5) c_2) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_2)))))
(set .c15314 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))))))
(set .c15315 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c15316 (resolution :clauses (.c15314 .c15315) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15317 (resolution :clauses (.c15313 .c15316) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_1 c5) c_2) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_2)) (not (= c7 c_2)) (not (= c4 c_2)))))
(set .c15318 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c6)) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)))))
(set .c15319 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) (f3 c4 c5))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c15320 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c15321 (resolution :clauses (.c15319 .c15320) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15322 (resolution :clauses (.c15318 .c15321) :conclusion ((not (= (f3 c_2 c_2) c6)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c15323 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)) (= (f3 c_2 c_2) c6))))
(set .c15324 (resolution :clauses (.c15322 .c15323) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c6 c_1)))))
(set .c15325 (resolution :clauses (.c15317 .c15324) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_1 c5) c_2) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_2)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c6 c_1)))))
(set .c15326 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c15327 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15328 (resolution :clauses (.c15326 .c15327) :conclusion ((not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c15329 (eq_transitive :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)))))
(set .c15330 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15331 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15332 (resolution :clauses (.c15330 .c15331) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15333 (resolution :clauses (.c15329 .c15332) :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15334 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c15335 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15336 (resolution :clauses (.c15334 .c15335) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c15337 (resolution :clauses (.c15333 .c15336) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15338 (resolution :clauses (.c15328 .c15337) :conclusion ((= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_2 c_2) c_1)))))
(set .c15339 (resolution :clauses (.c15325 .c15338) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_1 c5) c_2) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_2)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15340 (resolution :clauses (.c15339 .c34 .c169) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= (f3 c_1 c5) c_2) (not (= (f3 c_2 c_2) c_1)) (not (= c5 c_2)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15341 (resolution :clauses (.c15340 .c236 .c9454 .c273 .c8072 .c242 .c15310 .c262 .c15296) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (= (f3 c_1 c5) c_2) (not (= c5 c_2)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_1 c_2) c_2) (not (= (f2 c5) (f1 c_2))) (= (f3 c_2 c_2) c_2) (= c_1 c7) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (= c4 c_1))))
(set .c15342 (eq_transitive :conclusion ((not (= (f3 c_1 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1))))
(set .c15343 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c5 (f3 c4 c5))) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))))))
(set .c15344 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c15345 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c15346 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c15347 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c15348 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c15349 (resolution :clauses (.c15347 .c15348) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15350 (resolution :clauses (.c15346 .c15349) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c15351 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c15352 (resolution :clauses (.c15350 .c15351) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c15353 (resolution :clauses (.c15345 .c15352) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15354 (resolution :clauses (.c15344 .c15353) :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (= c5 (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15355 (resolution :clauses (.c15343 .c15354) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15356 (resolution :clauses (.c15342 .c15355) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= c6 c_1)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15357 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)))))
(set .c15358 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2))))
(set .c15359 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c15360 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c15361 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c15362 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c15363 (resolution :clauses (.c15361 .c15362) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15364 (resolution :clauses (.c15360 .c15363) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c15365 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c15366 (resolution :clauses (.c15364 .c15365) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c15367 (resolution :clauses (.c15359 .c15366) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15368 (resolution :clauses (.c15358 .c15367) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15369 (resolution :clauses (.c15357 .c15368) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15370 (resolution :clauses (.c15356 .c15369) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= c6 c_1)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c7 c_2)))))
(set .c15371 (resolution :clauses (.c15370 .c1739 .c29 .c33 .c34 .c8881) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c5) c_1) (not (= c6 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c7 c_2)))))
(set .c15372 (resolution :clauses (.c15371 .c273 .c8072) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)) (not (= c5 c_2)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))))))
(set .c15373 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c15374 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))))))
(set .c15375 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_2) (f3 c_2 c_2)))))
(set .c15376 (resolution :clauses (.c15374 .c15375) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c15377 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15378 (resolution :clauses (.c15376 .c15377) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c15379 (resolution :clauses (.c15373 .c15378) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c15380 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2)))))
(set .c15381 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2))) (= (f3 c_1 c_2) (f3 c_2 c_2)))))
(set .c15382 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)))))
(set .c15383 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2))))
(set .c15384 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c15385 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c15386 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c15387 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c15388 (resolution :clauses (.c15386 .c15387) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15389 (resolution :clauses (.c15385 .c15388) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c15390 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c15391 (resolution :clauses (.c15389 .c15390) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c15392 (resolution :clauses (.c15384 .c15391) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15393 (resolution :clauses (.c15383 .c15392) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15394 (resolution :clauses (.c15382 .c15393) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15395 (resolution :clauses (.c15381 .c15394) :conclusion ((not (= (f3 c_1 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_2) (f3 c_2 c_2)) (not (= c7 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15396 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_2)) (= (f3 c_1 c_2) (f3 c6 (f3 c4 c5))))))
(set .c15397 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2))))
(set .c15398 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c15399 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c15400 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c15401 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c15402 (resolution :clauses (.c15400 .c15401) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15403 (resolution :clauses (.c15399 .c15402) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c15404 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c15405 (resolution :clauses (.c15403 .c15404) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c15406 (resolution :clauses (.c15398 .c15405) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15407 (resolution :clauses (.c15397 .c15406) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15408 (resolution :clauses (.c15396 .c15407) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15409 (resolution :clauses (.c15395 .c15408) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_2) (f3 c_2 c_2)) (not (= c7 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c15410 (resolution :clauses (.c15380 .c15409) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c15411 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15412 (resolution :clauses (.c15410 .c15411) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c15413 (resolution :clauses (.c15379 .c15412) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_0)))))
(set .c15414 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) (f3 c_2 c_2))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2))))))
(set .c15415 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_1) (f3 c_2 c_2)))))
(set .c15416 (resolution :clauses (.c15414 .c15415) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c15417 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15418 (resolution :clauses (.c15416 .c15417) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c15419 (resolution :clauses (.c15413 .c15418) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_0)))))
(set .c15420 (resolution :clauses (.c15419 .c1739 .c29 .c33 .c34 .c8881 .c168 .c169 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c15421 (resolution :clauses (.c15420 .c242 .c15372) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c5 c_2)) (not (= c4 c_0)) (= (f3 c_2 c_2) c_2) (not (= (f2 c5) (f1 c_2))))))
(set .c15422 (eq_transitive :conclusion ((not (= (f3 c_1 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2))))
(set .c15423 (eq_congruent :conclusion ((not (= (f2 c_2) c7)) (not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5))))))
(set .c15424 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_2) c7))))
(set .c15425 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c15426 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c15427 (resolution :clauses (.c15425 .c15426) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15428 (resolution :clauses (.c15424 .c15427) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_2) c7))))
(set .c15429 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c15430 (resolution :clauses (.c15428 .c15429) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_2) c7) (not (= c5 c_2)))))
(set .c15431 (resolution :clauses (.c15423 .c15430) :conclusion ((not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c5 c_2)))))
(set .c15432 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2))))
(set .c15433 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c15434 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c15435 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c15436 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c15437 (resolution :clauses (.c15435 .c15436) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15438 (resolution :clauses (.c15434 .c15437) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c15439 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c15440 (resolution :clauses (.c15438 .c15439) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c15441 (resolution :clauses (.c15433 .c15440) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15442 (resolution :clauses (.c15432 .c15441) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15443 (resolution :clauses (.c15431 .c15442) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c4 c_0)))))
(set .c15444 (resolution :clauses (.c15422 .c15443) :conclusion ((not (= (f3 c_1 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c15445 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c5 (f3 c4 c5))) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))))))
(set .c15446 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c15447 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c15448 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c15449 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c15450 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c15451 (resolution :clauses (.c15449 .c15450) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15452 (resolution :clauses (.c15448 .c15451) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4))))
(set .c15453 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c15454 (resolution :clauses (.c15452 .c15453) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c15455 (resolution :clauses (.c15447 .c15454) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15456 (resolution :clauses (.c15446 .c15455) :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (= c5 (f3 c4 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15457 (resolution :clauses (.c15445 .c15456) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_0)))))
(set .c15458 (resolution :clauses (.c15444 .c15457) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c5) c_2) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c15459 (resolution :clauses (.c15458 .c1739 .c29 .c33 .c34 .c8881) :conclusion ((= (f3 c_1 c5) c_2) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c15460 (resolution :clauses (.c15459 .c262 .c15421 .c258 .c15341 .c9217 .c9464 .c277 .c271 .c205 .c187 .c221 .c223 .c11989 .c11997 .c11762 .c9478 .c260 .c15218 .c13946 .c13940 .c13934 .c13918 .c252 .c14917 .c8881 .c8880) :conclusion ((not (= c6 c_1)) (= c_1 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (= c4 c_1) (not (= (f1 c_2) (f2 c_1))) (= c5 c_0) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))))))
(set .c15461 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)))))
(set .c15462 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)))))
(set .c15463 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c15464 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c15465 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15466 (resolution :clauses (.c15464 .c15465) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c15467 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c15468 (resolution :clauses (.c15466 .c15467) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15469 (resolution :clauses (.c15463 .c15468) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15470 (resolution :clauses (.c15462 .c15469) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15471 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15472 (resolution :clauses (.c15470 .c15471) :conclusion ((= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15473 (resolution :clauses (.c15461 .c15472) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15474 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))))))
(set .c15475 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c15476 (resolution :clauses (.c15474 .c15475) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15477 (resolution :clauses (.c15473 .c15476) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15478 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c4 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4)))))
(set .c15479 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c15480 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c15481 (resolution :clauses (.c15479 .c15480) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 c_2) c_1)) (= c4 (f3 c4 c5)) (not (= c5 c_2)))))
(set .c15482 (resolution :clauses (.c15478 .c15481) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4)) (not (= c4 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c5 c_2)))))
(set .c15483 (resolution :clauses (.c15477 .c15482) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_1 (f3 c_1 c4)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_1)))))
(set .c15484 (resolution :clauses (.c15483 .c1739 .c32 .c34) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (= c_1 (f3 c_1 c4)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c6 c_1)))))
(set .c15485 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)) (= c6 c7))))
(set .c15486 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)))))
(set .c15487 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c15488 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c15489 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15490 (resolution :clauses (.c15488 .c15489) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c15491 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c15492 (resolution :clauses (.c15490 .c15491) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15493 (resolution :clauses (.c15487 .c15492) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15494 (resolution :clauses (.c15486 .c15493) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15495 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15496 (resolution :clauses (.c15494 .c15495) :conclusion ((= (f3 c_1 c_2) (f3 (f3 c_0 c_1) c_2)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15497 (resolution :clauses (.c15485 .c15496) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)) (= c6 c7) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15498 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))))))
(set .c15499 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c15500 (resolution :clauses (.c15498 .c15499) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_2))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15501 (resolution :clauses (.c15497 .c15500) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)) (= c6 c7) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15502 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c15503 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c15504 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c15505 (resolution :clauses (.c15503 .c15504) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15506 (resolution :clauses (.c15502 .c15505) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15507 (resolution :clauses (.c15501 .c15506) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)) (= c6 c7) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15508 (resolution :clauses (.c15507 .c1739 .c32 .c34 .c168 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_0 c_1) c_2) (f3 c_0 (f3 c_1 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= c_0 c7)) (not (= (f1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15509 (resolution :clauses (.c15508 .c236 .c15484 .c9464 .c271 .c181 .c11989 .c11997 .c8881) :conclusion ((not (= c6 c_1)) (not (= c_0 c7)) (not (= (f1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_2)) (= c_1 (f3 c_1 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_0) (f2 c_1))))))
(set .c15510 (eq_transitive :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c5))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2))))
(set .c15511 (eq_congruent :conclusion ((not (= c_1 (f3 c_0 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c15512 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15513 (resolution :clauses (.c15511 .c15512) :conclusion ((not (= c_1 (f3 c_0 c_1))) (= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)))))
(set .c15514 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c15515 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c15516 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15517 (resolution :clauses (.c15515 .c15516) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c15518 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c15519 (resolution :clauses (.c15517 .c15518) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15520 (resolution :clauses (.c15514 .c15519) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15521 (resolution :clauses (.c15513 .c15520) :conclusion ((= (f3 (f3 c_0 c_1) c_1) (f3 c_1 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15522 (resolution :clauses (.c15510 .c15521) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c5))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15523 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))))))
(set .c15524 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c15525 (resolution :clauses (.c15523 .c15524) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c15526 (resolution :clauses (.c15522 .c15525) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c5))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c15527 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1))))))
(set .c15528 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c15529 (resolution :clauses (.c15527 .c15528) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c15530 (resolution :clauses (.c15526 .c15529) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c5))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_1)))))
(set .c15531 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= c5 c_1)) (= (f3 (f3 c_1 c_1) c_1) (f3 c_2 c5)))))
(set .c15532 (resolution :clauses (.c15530 .c15531) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_1)))))
(set .c15533 (resolution :clauses (.c15532 .c1739 .c32 .c34 .c1742) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c5) c_2) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= c6 c_1)))))
(set .c15534 (resolution :clauses (.c15533 .c280 .c6380 .c234 .c5081 .c4959 .c6851 .c260 .c15509) :conclusion ((not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (= (f3 c_1 c_1) c_1) (not (= (f3 c_0 c_0) c_0)) (= c_0 (f3 c_0 c_1)) (= c5 c_0) (= c_1 (f3 c_1 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_0) (f2 c_1))))))
(set .c15535 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)))))
(set .c15536 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)))))
(set .c15537 (eq_transitive :conclusion ((not (= (f3 c_1 c5) (f3 c4 c5))) (not (= (f3 c_1 c5) c_2)) (= (f3 c4 c5) c_2))))
(set .c15538 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c5)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c15539 (eq_reflexive :conclusion ((= c5 c5))))
(set .c15540 (resolution :clauses (.c15538 .c15539) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c15541 (resolution :clauses (.c15537 .c15540) :conclusion ((not (= (f3 c_1 c5) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_1)))))
(set .c15542 (resolution :clauses (.c15536 .c15541) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)) (not (= (f3 c_1 c5) c_2)) (not (= c4 c_1)))))
(set .c15543 (resolution :clauses (.c15535 .c15542) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)) (not (= c7 c_2)) (not (= (f3 c_1 c5) c_2)) (not (= c4 c_1)))))
(set .c15544 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c6)) (not (= (f3 c4 c5) c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c6 (f3 c4 c5))))))
(set .c15545 (eq_transitive :conclusion ((not (= (f3 c_1 c5) (f3 c4 c5))) (not (= (f3 c_1 c5) c_2)) (= (f3 c4 c5) c_2))))
(set .c15546 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c5)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c15547 (eq_reflexive :conclusion ((= c5 c5))))
(set .c15548 (resolution :clauses (.c15546 .c15547) :conclusion ((not (= c4 c_1)) (= (f3 c_1 c5) (f3 c4 c5)))))
(set .c15549 (resolution :clauses (.c15545 .c15548) :conclusion ((not (= (f3 c_1 c5) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_1)))))
(set .c15550 (resolution :clauses (.c15544 .c15549) :conclusion ((not (= (f3 c_2 c_2) c6)) (= (f3 (f3 c_2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 c5) c_2)) (not (= c4 c_1)))))
(set .c15551 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)) (= (f3 c_2 c_2) c6))))
(set .c15552 (resolution :clauses (.c15550 .c15551) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 c5) c_2)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)))))
(set .c15553 (resolution :clauses (.c15543 .c15552) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)) (not (= c7 c_2)) (not (= (f3 c_1 c5) c_2)) (not (= c4 c_1)) (not (= c6 c_1)))))
(set .c15554 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4)))))
(set .c15555 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)) (= c4 (f3 c_2 c_2)))))
(set .c15556 (resolution :clauses (.c15554 .c15555) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15557 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15558 (resolution :clauses (.c15556 .c15557) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15559 (resolution :clauses (.c15553 .c15558) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_1 (f3 c_2 c4)) (not (= c7 c_2)) (not (= (f3 c_1 c5) c_2)) (not (= c4 c_1)) (not (= c6 c_1)))))
(set .c15560 (resolution :clauses (.c15559 .c34) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_1 (f3 c_2 c4)) (not (= c7 c_2)) (not (= (f3 c_1 c5) c_2)) (not (= c4 c_1)) (not (= c6 c_1)))))
(set .c15561 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c15562 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c15563 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_1) (f3 c4 c5)))))
(set .c15564 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c15565 (resolution :clauses (.c15563 .c15564) :conclusion ((not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c15566 (resolution :clauses (.c15562 .c15565) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c15567 (resolution :clauses (.c15561 .c15566) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c15568 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c15569 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c15570 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c15571 (resolution :clauses (.c15569 .c15570) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c15572 (resolution :clauses (.c15568 .c15571) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c15573 (resolution :clauses (.c15567 .c15572) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c15574 (resolution :clauses (.c15573 .c34 .c168 .c169 .c224) :conclusion ((not (= c6 c_1)) (not (= c7 c_2)) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_1) c_0)) (not (= c4 c_1)) (not (= c5 c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c15575 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_2) c_0)) (= c5 c_0))))
(set .c15576 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_2)) (= (f3 c_1 c_2) (f3 c6 (f3 c4 c5))))))
(set .c15577 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) (f3 c4 c5))) (not (= (f3 c_1 c_1) c_2)) (= (f3 c4 c5) c_2))))
(set .c15578 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c15579 (resolution :clauses (.c15577 .c15578) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c15580 (resolution :clauses (.c15576 .c15579) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c15581 (resolution :clauses (.c15575 .c15580) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_2) c_0)) (= c5 c_0) (not (= c6 c_1)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)))))
(set .c15582 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_1 c_1) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1))))))
(set .c15583 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_1)) (= (f3 c_1 c_1) (f3 c4 c5)))))
(set .c15584 (resolution :clauses (.c15582 .c15583) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_1 c_1))) (not (= c4 c_1)) (not (= c5 c_1)))))
(set .c15585 (resolution :clauses (.c15581 .c15584) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_2) c_0)) (= c5 c_0) (not (= c6 c_1)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c7 c_2)))))
(set .c15586 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1)))))
(set .c15587 (eq_transitive :conclusion ((not (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_1) (f2 c_1)))))
(set .c15588 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c15589 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15590 (resolution :clauses (.c15588 .c15589) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_1 c_2) (f3 c_1 (f3 c_1 c_1))))))
(set .c15591 (resolution :clauses (.c15587 .c15590) :conclusion ((not (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_1) (f2 c_1)) (not (= (f3 c_1 c_1) c_2)))))
(set .c15592 (eq_congruent :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= c_1 c_1)) (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c15593 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15594 (resolution :clauses (.c15592 .c15593) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= (f3 c_2 c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c15595 (resolution :clauses (.c15591 .c15594) :conclusion ((not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_1) (f2 c_1)) (not (= (f3 c_1 c_1) c_2)))))
(set .c15596 (resolution :clauses (.c15586 .c15595) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c_1 c_1) c_2)))))
(set .c15597 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15598 (resolution :clauses (.c15596 .c15597) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c_1 c_1) c_2)))))
(set .c15599 (resolution :clauses (.c15585 .c15598) :conclusion ((not (= c5 c_1)) (not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_2) c_0)) (= c5 c_0) (not (= c6 c_1)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c7 c_2)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15600 (resolution :clauses (.c15599 .c1739 .c32 .c34 .c1742) :conclusion ((not (= c5 c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_1 c_2) c_0)) (= c5 c_0) (not (= c6 c_1)) (not (= (f3 c_1 c_1) c_2)) (not (= c4 c_1)) (not (= c7 c_2)) (not (= (f1 c_1) c_0)))))
(set .c15601 (resolution :clauses (.c15600 .c236 .c9047 .c292 .c9039 .c1991 .c234 .c15574) :conclusion ((not (= c5 c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (= c5 c_0) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c7 c_2)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))) (= c_1 (f3 c_2 c4)) (= (f3 c_1 c_1) c_1) (not (= (f2 c4) (f1 c_2))))))
(set .c15602 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)))))
(set .c15603 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c15604 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_2 c_2) (f2 c_1)))))
(set .c15605 (resolution :clauses (.c15603 .c15604) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15606 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15607 (resolution :clauses (.c15605 .c15606) :conclusion ((= (f3 (f3 c_2 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15608 (resolution :clauses (.c15602 .c15607) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15609 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) (f3 c_1 c_1))) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1))))))
(set .c15610 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)))))
(set .c15611 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c15612 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c15613 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c15614 (resolution :clauses (.c15612 .c15613) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15615 (resolution :clauses (.c15611 .c15614) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15616 (resolution :clauses (.c15610 .c15615) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15617 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)))))
(set .c15618 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c15619 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c15620 (resolution :clauses (.c15618 .c15619) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15621 (resolution :clauses (.c15617 .c15620) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15622 (resolution :clauses (.c15616 .c15621) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c15623 (resolution :clauses (.c15609 .c15622) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c15624 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15625 (resolution :clauses (.c15623 .c15624) :conclusion ((= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c15626 (resolution :clauses (.c15608 .c15625) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c15627 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f3 c_1 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c15628 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)))))
(set .c15629 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c15630 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c15631 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c15632 (resolution :clauses (.c15630 .c15631) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15633 (resolution :clauses (.c15629 .c15632) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15634 (resolution :clauses (.c15628 .c15633) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15635 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)))))
(set .c15636 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c15637 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c15638 (resolution :clauses (.c15636 .c15637) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15639 (resolution :clauses (.c15635 .c15638) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15640 (resolution :clauses (.c15634 .c15639) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c15641 (resolution :clauses (.c15627 .c15640) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c15642 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15643 (resolution :clauses (.c15641 .c15642) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c15644 (resolution :clauses (.c15626 .c15643) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c15645 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_2 c_1) (f3 c_1 c_1))) (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1))))))
(set .c15646 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)))))
(set .c15647 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c15648 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c15649 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c15650 (resolution :clauses (.c15648 .c15649) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15651 (resolution :clauses (.c15647 .c15650) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15652 (resolution :clauses (.c15646 .c15651) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15653 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)))))
(set .c15654 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c4 c5))) (not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1))))
(set .c15655 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c15656 (resolution :clauses (.c15654 .c15655) :conclusion ((not (= (f3 c_1 c_2) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15657 (resolution :clauses (.c15653 .c15656) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15658 (resolution :clauses (.c15652 .c15657) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c15659 (resolution :clauses (.c15645 .c15658) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c15660 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15661 (resolution :clauses (.c15659 .c15660) :conclusion ((= (f3 c_1 (f3 c_2 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c15662 (resolution :clauses (.c15644 .c15661) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c15663 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (= (f3 (f3 c_1 c_2) c_1) (f3 c_1 c4)))))
(set .c15664 (resolution :clauses (.c15662 .c15663) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= c_1 (f3 c_1 c4)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c15665 (resolution :clauses (.c15664 .c1739 .c32 .c34 .c1742) :conclusion ((not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= c_1 (f3 c_1 c4)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= c6 c_1)) (not (= (f3 c_1 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c15666 (resolution :clauses (.c15665 .c236 .c9459 .c278 .c8086) :conclusion ((not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= c_1 (f3 c_1 c4)) (not (= c_0 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_2)) (not (= c7 c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))))))
(set .c15667 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 c_1))))
(set .c15668 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c15669 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 c4 c5))) (= (f1 c_2) (f3 c4 c5)))))
(set .c15670 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 c_2)) (= (f3 c_1 c_2) (f3 c4 c5)))))
(set .c15671 (resolution :clauses (.c15669 .c15670) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15672 (resolution :clauses (.c15668 .c15671) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15673 (resolution :clauses (.c15667 .c15672) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 c_1) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= c4 c_1)))))
(set .c15674 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c15675 (eq_transitive :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c15676 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c15677 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)) (= c4 (f3 c_2 c_2)))))
(set .c15678 (resolution :clauses (.c15676 .c15677) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15679 (resolution :clauses (.c15675 .c15678) :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_1) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15680 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c15681 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15682 (resolution :clauses (.c15680 .c15681) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c15683 (resolution :clauses (.c15679 .c15682) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_1) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15684 (resolution :clauses (.c15674 .c15683) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_2 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c5 c_2)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15685 (resolution :clauses (.c15673 .c15684) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 c_1) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= c4 c_1)) (not (= c6 c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)))))
(set .c15686 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) (f2 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c15687 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15688 (resolution :clauses (.c15686 .c15687) :conclusion ((not (= (f3 c_1 c_2) (f2 c_1))) (= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)))))
(set .c15689 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= (f3 c_1 c_2) (f2 c_1)))))
(set .c15690 (resolution :clauses (.c15688 .c15689) :conclusion ((= (f3 (f3 c_1 c_2) c_1) (f3 (f2 c_1) c_1)) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15691 (resolution :clauses (.c15685 .c15690) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (not (= c_1 (f3 (f2 c_1) c_1))) (= c5 c_1) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= c4 c_1)) (not (= c6 c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15692 (resolution :clauses (.c15691 .c1739 .c32 .c34 .c169) :conclusion ((not (= c5 c_2)) (not (= (f3 c_1 (f3 c_2 c_1)) (f3 (f3 c_1 c_2) c_1))) (= c5 c_1) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= (f3 c_1 c_2) c_0)) (not (= c4 c_1)) (not (= c6 c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_2) c_1)))))
(set .c15693 (eq_transitive :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (not (= (f3 c_0 c_1) (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)))))
(set .c15694 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (not (= c_1 c_1)) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c15695 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15696 (resolution :clauses (.c15694 .c15695) :conclusion ((not (= c_0 (f2 c_1))) (= (f3 c_0 c_1) (f3 (f2 c_1) c_1)))))
(set .c15697 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c15698 (resolution :clauses (.c15696 .c15697) :conclusion ((= (f3 c_0 c_1) (f3 (f2 c_1) c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15699 (resolution :clauses (.c15693 .c15698) :conclusion ((not (= c_1 (f3 (f2 c_1) c_1))) (= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c15700 (resolution :clauses (.c15699 .c1739 .c32) :conclusion ((= c_1 (f3 c_0 c_1)) (not (= (f1 c_1) c_0)))))
(set .c15701 (resolution :clauses (.c15692 .c236 .c9454 .c273 .c8072 .c242 .c15666 .c9217 .c9464 .c277 .c271 .c203 .c221 .c223 .c11989 .c11997 .c11762 .c260 .c15601 .c262 .c15534 .c8191 .c15700 .c716 .c294 .c288 .c2436 .c13928 .c8881) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_1)) (not (= c6 c_1)) (not (= (f2 c5) (f1 c_2))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f2 c5) (f1 c_1))) (not (= (f1 c_2) (f2 c_1))) (= c5 c_0) (= c_1 c7) (not (= (f3 (f3 c_0 c_1) c_1) (f3 c_0 (f3 c_1 c_1)))) (not (= (f1 c_0) (f2 c_1))))))
(set .c15702 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2))))
(set .c15703 (eq_congruent :conclusion ((not (= (f2 c_2) c6)) (not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))))))
(set .c15704 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2))))
(set .c15705 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c15706 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c15707 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c15708 (resolution :clauses (.c15706 .c15707) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c15709 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c15710 (resolution :clauses (.c15708 .c15709) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c15711 (resolution :clauses (.c15705 .c15710) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c15712 (resolution :clauses (.c15704 .c15711) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c4 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c15713 (resolution :clauses (.c15703 .c15712) :conclusion ((not (= (f2 c_2) c6)) (= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c15714 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_2) c6))))
(set .c15715 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c15716 (resolution :clauses (.c15714 .c15715) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_2) c6) (not (= c4 c_1)))))
(set .c15717 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c15718 (resolution :clauses (.c15716 .c15717) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (= (f2 c_2) c6) (not (= c4 c_1)) (not (= c5 c_2)))))
(set .c15719 (resolution :clauses (.c15713 .c15718) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c5 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c6 c_1)))))
(set .c15720 (resolution :clauses (.c15702 .c15719) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c6 c_1)))))
(set .c15721 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c5 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5)))))
(set .c15722 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c15723 (eq_congruent :conclusion ((not (= (f2 c_2) c4)) (not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)))))
(set .c15724 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c15725 (eq_congruent :conclusion ((not (= c4 c_1)) (= (f1 c_1) (f1 c4)))))
(set .c15726 (resolution :clauses (.c15724 .c15725) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4))))
(set .c15727 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c15728 (resolution :clauses (.c15726 .c15727) :conclusion ((not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (= (f2 c_2) c4) (not (= c5 c_2)))))
(set .c15729 (resolution :clauses (.c15723 .c15728) :conclusion ((not (= c5 c_2)) (= (f3 (f2 c_2) c_2) (f3 c4 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c15730 (resolution :clauses (.c15722 .c15729) :conclusion ((not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (= c5 (f3 c4 c5)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c15731 (resolution :clauses (.c15721 .c15730) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c5)) (not (= c5 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)))))
(set .c15732 (resolution :clauses (.c15720 .c15731) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c15733 (resolution :clauses (.c15732 .c33 .c34 .c165) :conclusion ((= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c15734 (resolution :clauses (.c15733 .c262 .c8427 .c280 .c271 .c14789 .c8881) :conclusion ((not (= c5 c_2)) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c6 c_1)) (= c_1 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c_1))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))))))
(set .c15735 (resolution :clauses (.c262 .c5108 .c8394 .c260 .c15734 .c252 .c15701 .c179 .c12567 .c5460 .c476 .c15460 .c8880 .c1739 .c8881) :conclusion ((= c_1 c7) (not (= c6 c_1)) (= c5 c_0) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f1 c_2) (f2 c_1))))))
(set .c15736 (resolution :clauses (.c262 .c8583 .c4903 .c272 .c269 .c2173 .c8881) :conclusion ((= c_1 c7) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))))))
(set .c15737 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 c_1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c15738 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c6)) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)))))
(set .c15739 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c15740 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c15741 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c15742 (resolution :clauses (.c15740 .c15741) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15743 (resolution :clauses (.c15739 .c15742) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15744 (resolution :clauses (.c15738 .c15743) :conclusion ((not (= (f3 c_2 c_2) c6)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15745 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)) (= (f3 c_2 c_2) c6))))
(set .c15746 (resolution :clauses (.c15744 .c15745) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)))))
(set .c15747 (resolution :clauses (.c15737 .c15746) :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 c_1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15748 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))))))
(set .c15749 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c15750 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c15751 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c15752 (resolution :clauses (.c15750 .c15751) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15753 (resolution :clauses (.c15749 .c15752) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_2 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15754 (resolution :clauses (.c15748 .c15753) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15755 (resolution :clauses (.c15747 .c15754) :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 c_1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15756 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15757 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15758 (resolution :clauses (.c15756 .c15757) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15759 (resolution :clauses (.c15755 .c15758) :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15760 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) c_2)) (= (f3 c_2 c_2) (f3 c_2 (f3 c_2 c_1))))))
(set .c15761 (eq_transitive :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 c_1 c_2) c_2)) (= (f3 c_2 c_1) c_2))))
(set .c15762 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c15763 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15764 (resolution :clauses (.c15762 .c15763) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c15765 (resolution :clauses (.c15761 .c15764) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 c_1 c_2) c_2)) (= (f3 c_2 c_1) c_2) (not (= (f3 c_2 c_2) c_1)))))
(set .c15766 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15767 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15768 (resolution :clauses (.c15766 .c15767) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15769 (resolution :clauses (.c15765 .c15768) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_2)) (= (f3 c_2 c_1) c_2) (not (= (f3 c_2 c_2) c_1)))))
(set .c15770 (resolution :clauses (.c15760 .c15769) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 c_2) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15771 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15772 (resolution :clauses (.c15770 .c15771) :conclusion ((= (f3 c_2 c_2) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15773 (resolution :clauses (.c15759 .c15772) :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15774 (resolution :clauses (.c15773 .c34 .c168 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15775 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (= (f3 c_1 c_2) c_2))))
(set .c15776 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4)))))
(set .c15777 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)) (= c4 (f3 c_2 c_2)))))
(set .c15778 (resolution :clauses (.c15776 .c15777) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15779 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15780 (resolution :clauses (.c15778 .c15779) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15781 (resolution :clauses (.c15775 .c15780) :conclusion ((not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_2 (f3 c_2 c4))) (= (f3 c_1 c_2) c_2) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15782 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15783 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15784 (resolution :clauses (.c15782 .c15783) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15785 (resolution :clauses (.c15781 .c15784) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_2 (f3 c_2 c4))) (= (f3 c_1 c_2) c_2) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15786 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c_0 c7))))
(set .c15787 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15788 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15789 (resolution :clauses (.c15787 .c15788) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15790 (resolution :clauses (.c15786 .c15789) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c_0 c7) (not (= (f3 c_2 c_2) c_1)))))
(set .c15791 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))))))
(set .c15792 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c15793 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c15794 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c15795 (resolution :clauses (.c15793 .c15794) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15796 (resolution :clauses (.c15792 .c15795) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c_2 c_2) (f3 c4 c5)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15797 (resolution :clauses (.c15791 .c15796) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15798 (resolution :clauses (.c15790 .c15797) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c_0 c7) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15799 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c6)) (not (= (f3 c4 c5) c_1)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)))))
(set .c15800 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c15801 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c15802 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c15803 (resolution :clauses (.c15801 .c15802) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15804 (resolution :clauses (.c15800 .c15803) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15805 (resolution :clauses (.c15799 .c15804) :conclusion ((not (= (f3 c_2 c_2) c6)) (= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15806 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)) (= (f3 c_2 c_2) c6))))
(set .c15807 (resolution :clauses (.c15805 .c15806) :conclusion ((= (f3 c6 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)))))
(set .c15808 (resolution :clauses (.c15798 .c15807) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c_0 c7) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c6 c_1)))))
(set .c15809 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c15810 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15811 (resolution :clauses (.c15809 .c15810) :conclusion ((not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c15812 (eq_transitive :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)))))
(set .c15813 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15814 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15815 (resolution :clauses (.c15813 .c15814) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15816 (resolution :clauses (.c15812 .c15815) :conclusion ((not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15817 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c15818 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15819 (resolution :clauses (.c15817 .c15818) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c_1)))))
(set .c15820 (resolution :clauses (.c15816 .c15819) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15821 (resolution :clauses (.c15811 .c15820) :conclusion ((= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_1 c_2) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c_2 c_2) c_1)))))
(set .c15822 (resolution :clauses (.c15808 .c15821) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c_0 c7) (not (= (f3 c_2 c_2) c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c6 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15823 (resolution :clauses (.c15822 .c34 .c168 .c169) :conclusion ((not (= (f3 c_1 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c7 c_2)) (= c_0 c7) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c6 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15824 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)))))
(set .c15825 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15826 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15827 (resolution :clauses (.c15825 .c15826) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f3 c_1 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c15828 (resolution :clauses (.c15824 .c15827) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4))) (= c_1 (f3 c_2 c4)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15829 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4)))))
(set .c15830 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)) (= c4 (f3 c_2 c_2)))))
(set .c15831 (resolution :clauses (.c15829 .c15830) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15832 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15833 (resolution :clauses (.c15831 .c15832) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c15834 (resolution :clauses (.c15828 .c15833) :conclusion ((not (= (f3 c_1 c_2) c_1)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_1 (f3 c_2 c4)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)))))
(set .c15835 (resolution :clauses (.c15834 .c236 .c15823 .c15774) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_1 (f3 c_2 c4)) (not (= (f3 c_2 c_2) c_1)) (not (= c4 c_1)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= c7 c_2)) (= c_0 c7) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c6 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15836 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c_2) c_2)) (= c_0 (f3 c_2 c_2)))))
(set .c15837 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c15838 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c15839 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c15840 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c15841 (resolution :clauses (.c15839 .c15840) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15842 (resolution :clauses (.c15838 .c15841) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15843 (resolution :clauses (.c15837 .c15842) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15844 (resolution :clauses (.c15836 .c15843) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c_2) c_2)) (= c_0 (f3 c_2 c_2)) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15845 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c7)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)))))
(set .c15846 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= c7 c_2)) (= (f3 c_2 c_2) c7))))
(set .c15847 (resolution :clauses (.c15845 .c15846) :conclusion ((not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) c_2)) (not (= c7 c_2)))))
(set .c15848 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c15849 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c15850 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c15851 (resolution :clauses (.c15849 .c15850) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15852 (resolution :clauses (.c15848 .c15851) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15853 (resolution :clauses (.c15847 .c15852) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_1)) (not (= (f3 c_2 c_2) c_2)) (not (= c7 c_2)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15854 (resolution :clauses (.c15844 .c15853) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c_2) c_2)) (= c_0 (f3 c_2 c_2)) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c7 c_2)))))
(set .c15855 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c15856 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15857 (resolution :clauses (.c15855 .c15856) :conclusion ((not (= (f3 c_2 c_1) (f1 c_2))) (= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))))))
(set .c15858 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)))))
(set .c15859 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c15860 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c15861 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c15862 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c15863 (resolution :clauses (.c15861 .c15862) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15864 (resolution :clauses (.c15860 .c15863) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15865 (resolution :clauses (.c15859 .c15864) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15866 (resolution :clauses (.c15858 .c15865) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c15867 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)))))
(set .c15868 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c15869 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c15870 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c15871 (resolution :clauses (.c15869 .c15870) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15872 (resolution :clauses (.c15868 .c15871) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15873 (resolution :clauses (.c15867 .c15872) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15874 (resolution :clauses (.c15866 .c15873) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_1) (f1 c_2)) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c15875 (resolution :clauses (.c15857 .c15874) :conclusion ((= (f3 c_2 (f1 c_2)) (f3 c_2 (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c15876 (resolution :clauses (.c15854 .c15875) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 c_2) c_2)) (= c_0 (f3 c_2 c_2)) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15877 (resolution :clauses (.c15876 .c34 .c168 .c169) :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f3 (f3 c_2 c_2) c_1) (f3 c_2 (f3 c_2 c_1)))) (not (= (f3 c_2 c_2) c_2)) (= c_0 (f3 c_2 c_2)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15878 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)))))
(set .c15879 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c15880 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c15881 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c15882 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c15883 (resolution :clauses (.c15881 .c15882) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15884 (resolution :clauses (.c15880 .c15883) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15885 (resolution :clauses (.c15879 .c15884) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15886 (resolution :clauses (.c15878 .c15885) :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15887 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4)))))
(set .c15888 (eq_transitive :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c15889 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c15890 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c15891 (resolution :clauses (.c15889 .c15890) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15892 (resolution :clauses (.c15888 .c15891) :conclusion ((not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (= c4 (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15893 (resolution :clauses (.c15887 .c15892) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c4)) (not (= c4 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15894 (resolution :clauses (.c15886 .c15893) :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_2 (f3 c_2 c4)) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c7 c_2)))))
(set .c15895 (resolution :clauses (.c15894 .c34 .c168) :conclusion ((not (= (f3 c_1 c_1) c_2)) (= c_2 (f3 c_2 c4)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c7 c_2)))))
(set .c15896 (resolution :clauses (.c15895 .c292 .c1991) :conclusion ((not (= (f3 c_1 c_1) c_2)) (not (= c6 c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c5) (f1 c_2))))))
(set .c15897 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c15898 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_1 c_1) (f1 c_2))) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2))))))
(set .c15899 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_1 c_1) (f1 c_2)))))
(set .c15900 (resolution :clauses (.c15898 .c15899) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15901 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15902 (resolution :clauses (.c15900 .c15901) :conclusion ((= (f3 c_2 (f3 c_1 c_1)) (f3 c_2 (f1 c_2))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15903 (resolution :clauses (.c15897 .c15902) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15904 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f3 c_1 c_1))) (not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)))))
(set .c15905 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)))))
(set .c15906 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))))))
(set .c15907 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c15908 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c15909 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c15910 (resolution :clauses (.c15908 .c15909) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15911 (resolution :clauses (.c15907 .c15910) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15912 (resolution :clauses (.c15906 .c15911) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_1) (f3 c6 (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15913 (resolution :clauses (.c15905 .c15912) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15914 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_1)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)))))
(set .c15915 (eq_transitive :conclusion ((not (= (f3 c_1 (f1 c_1)) (f3 c4 c5))) (not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1))))
(set .c15916 (eq_congruent :conclusion ((not (= c4 c_1)) (not (= c5 (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)))))
(set .c15917 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c15918 (resolution :clauses (.c15916 .c15917) :conclusion ((not (= c4 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15919 (resolution :clauses (.c15915 .c15918) :conclusion ((not (= (f3 c_1 (f1 c_1)) c_1)) (= (f3 c4 c5) c_1) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15920 (resolution :clauses (.c15914 .c15919) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15921 (resolution :clauses (.c15913 .c15920) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_1) (f3 c_1 c_1)) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c7 c_2)))))
(set .c15922 (resolution :clauses (.c15904 .c15921) :conclusion ((not (= c_1 c_1)) (= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c7 c_2)))))
(set .c15923 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15924 (resolution :clauses (.c15922 .c15923) :conclusion ((= (f3 (f3 c_2 c_1) c_1) (f3 (f3 c_1 c_1) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c7 c_2)))))
(set .c15925 (resolution :clauses (.c15903 .c15924) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c15926 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f3 c_1 c_1) (f1 c_1))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1))))))
(set .c15927 (eq_transitive :conclusion ((not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (= (f3 c_1 c_1) (f1 c_1)))))
(set .c15928 (resolution :clauses (.c15926 .c15927) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)))))
(set .c15929 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15930 (resolution :clauses (.c15928 .c15929) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_1 c_1))) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)))))
(set .c15931 (resolution :clauses (.c15925 .c15930) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 (f3 c_1 c_1) c_1) (f3 c_1 (f3 c_1 c_1)))) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c15932 (resolution :clauses (.c15931 .c34 .c168 .c169 .c1742 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= c7 c_2)) (not (= (f3 c_1 c_1) c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c4 c_1)) (not (= c5 c_0)))))
(set .c15933 (resolution :clauses (.c15932 .c234 .c15896 .c262 .c716 .c4870 .c288 .c2436 .c252 .c15736 .c195 .c12567 .c343 .c8881 .c8880 .c1739) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_2 c_1) c_1) (f3 c_2 (f3 c_1 c_1)))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c4 c_1)) (not (= c5 c_0)) (= c_1 c7))))
(set .c15934 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4))) (= c_1 (f3 c_1 c4)))))
(set .c15935 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c4 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4)))))
(set .c15936 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= c4 (f3 c4 c5)))))
(set .c15937 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c15938 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c15939 (resolution :clauses (.c15937 .c15938) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15940 (resolution :clauses (.c15936 .c15939) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15941 (resolution :clauses (.c15935 .c15940) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15942 (resolution :clauses (.c15934 .c15941) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_1 (f3 c_1 c4)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15943 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)))))
(set .c15944 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c15945 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c15946 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c15947 (resolution :clauses (.c15945 .c15946) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15948 (resolution :clauses (.c15944 .c15947) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15949 (resolution :clauses (.c15943 .c15948) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15950 (resolution :clauses (.c15942 .c15949) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_1 (f3 c_1 c4)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c7 c_2)))))
(set .c15951 (resolution :clauses (.c15950 .c34 .c169) :conclusion ((not (= (f3 c_2 c_2) c_1)) (= c_1 (f3 c_1 c4)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c7 c_2)))))
(set .c15952 (resolution :clauses (.c15951 .c291 .c11459) :conclusion ((not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c7 c_2)) (not (= (f2 c5) (f1 c_2))))))
(set .c15953 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c15954 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f1 c_2) (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))))))
(set .c15955 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_2) (f3 c_2 c_2)))))
(set .c15956 (resolution :clauses (.c15954 .c15955) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c15957 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15958 (resolution :clauses (.c15956 .c15957) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c15959 (resolution :clauses (.c15953 .c15958) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c15960 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2)))))
(set .c15961 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2))) (= (f3 c_1 c_2) (f3 c_2 c_2)))))
(set .c15962 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)))))
(set .c15963 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c15964 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c15965 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c15966 (resolution :clauses (.c15964 .c15965) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15967 (resolution :clauses (.c15963 .c15966) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15968 (resolution :clauses (.c15962 .c15967) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15969 (resolution :clauses (.c15961 .c15968) :conclusion ((not (= (f3 c_1 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_2) (f3 c_2 c_2)) (not (= c7 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15970 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c4 c5) c_2)) (= (f3 c_1 c_2) (f3 c6 (f3 c4 c5))))))
(set .c15971 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c15972 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c15973 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c15974 (resolution :clauses (.c15972 .c15973) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15975 (resolution :clauses (.c15971 .c15974) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15976 (resolution :clauses (.c15970 .c15975) :conclusion ((not (= c6 c_1)) (= (f3 c_1 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c15977 (resolution :clauses (.c15969 .c15976) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_1 c_2) (f3 c_2 c_2)) (not (= c7 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c6 c_1)))))
(set .c15978 (resolution :clauses (.c15960 .c15977) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c6 c_1)))))
(set .c15979 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c15980 (resolution :clauses (.c15978 .c15979) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 (f3 c_1 c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c6 c_1)))))
(set .c15981 (resolution :clauses (.c15959 .c15980) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c15982 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= (f1 c_1) (f3 c_2 c_2))) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2))))))
(set .c15983 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f1 c_1) (f3 c_2 c_2)))))
(set .c15984 (resolution :clauses (.c15982 .c15983) :conclusion ((not (= c_1 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c15985 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c15986 (resolution :clauses (.c15984 .c15985) :conclusion ((= (f3 c_1 (f1 c_1)) (f3 c_1 (f3 c_2 c_2))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c15987 (resolution :clauses (.c15981 .c15986) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c15988 (resolution :clauses (.c15987 .c34 .c168 .c169 .c224) :conclusion ((not (= c6 c_1)) (not (= (f3 (f3 c_1 c_2) c_2) (f3 c_1 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c15989 (resolution :clauses (.c15988 .c242 .c15952 .c8081 .c286 .c223 .c205 .c10119 .c12978 .c8268) :conclusion ((not (= c6 c_1)) (not (= c7 c_2)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f2 c5) (f1 c_2))) (not (= (f2 c4) (f1 c_0))))))
(set .c15990 (eq_transitive :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c15991 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f1 c_1) (f3 c4 c5))) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))))))
(set .c15992 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= (f1 c_1) (f3 c4 c5)))))
(set .c15993 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c15994 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c15995 (eq_congruent :conclusion ((not (= c5 (f1 c_1))) (= (f2 (f1 c_1)) (f2 c5)))))
(set .c15996 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c15997 (resolution :clauses (.c15995 .c15996) :conclusion ((= (f2 (f1 c_1)) (f2 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c15998 (resolution :clauses (.c15994 .c15997) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c15999 (resolution :clauses (.c15993 .c15998) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c16000 (resolution :clauses (.c15992 .c15999) :conclusion ((not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f1 c_1) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c16001 (resolution :clauses (.c15991 .c16000) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f1 c_1)) (f3 c6 (f3 c4 c5))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c16002 (resolution :clauses (.c15990 .c16001) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c16003 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f1 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))))))
(set .c16004 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= (f1 c_2) (f3 c4 c5)))))
(set .c16005 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c16006 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 (f1 c_1)) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c16007 (eq_congruent :conclusion ((not (= c5 (f1 c_1))) (= (f2 (f1 c_1)) (f2 c5)))))
(set .c16008 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (= c5 (f1 c_1)))))
(set .c16009 (resolution :clauses (.c16007 .c16008) :conclusion ((= (f2 (f1 c_1)) (f2 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)))))
(set .c16010 (resolution :clauses (.c16006 .c16009) :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c16011 (resolution :clauses (.c16005 .c16010) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c16012 (resolution :clauses (.c16004 .c16011) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= (f1 c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c16013 (resolution :clauses (.c16003 .c16012) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f1 c_2))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c16014 (resolution :clauses (.c16002 .c16013) :conclusion ((not (= c6 c_1)) (not (= (f3 c_1 (f1 c_1)) c_1)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= (f1 c_1) c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 (f1 c_1)) (f1 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c16015 (resolution :clauses (.c16014 .c34 .c8881 .c90 .c167 .c168 .c169 .c224) :conclusion ((not (= c6 c_1)) (not (= c7 c_2)) (not (= (f1 c_1) c_0)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))))))
(set .c16016 (resolution :clauses (.c16015 .c258 .c15989 .c13946 .c13934) :conclusion ((not (= c6 c_1)) (not (= c7 c_2)) (not (= (f1 c_1) c_0)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c4) (f1 c_1))) (= c4 c_1))))
(set .c16017 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0))))
(set .c16018 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)))))
(set .c16019 (eq_transitive :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c4 c5))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (= (f3 c4 c5) c_2))))
(set .c16020 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= c4 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 c4)))))
(set .c16021 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (= (f3 c_2 c_0) c_2))))
(set .c16022 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 c_0)) (= (f3 c_2 c_0) (f3 c_2 c4)))))
(set .c16023 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16024 (resolution :clauses (.c16022 .c16023) :conclusion ((not (= c4 c_0)) (= (f3 c_2 c_0) (f3 c_2 c4)))))
(set .c16025 (resolution :clauses (.c16021 .c16024) :conclusion ((not (= c_2 (f3 c_2 c4))) (= (f3 c_2 c_0) c_2) (not (= c4 c_0)))))
(set .c16026 (resolution :clauses (.c16020 .c16025) :conclusion ((not (= c4 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 c4)) (not (= c_2 (f3 c_2 c4))))))
(set .c16027 (resolution :clauses (.c16019 .c16026) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c4 c5))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_2 (f3 c_2 c4))) (= (f3 c4 c5) c_2) (not (= c4 c_0)))))
(set .c16028 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))))))
(set .c16029 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16030 (resolution :clauses (.c16028 .c16029) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16031 (resolution :clauses (.c16027 .c16030) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c4 c5))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_2 (f3 c_2 c4))) (= (f3 c4 c5) c_2) (not (= c4 c_0)) (not (= c7 c_2)) (not (= c5 c_0)))))
(set .c16032 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c16033 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16034 (resolution :clauses (.c16032 .c16033) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16035 (resolution :clauses (.c16031 .c16034) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c4 c5))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_2 (f3 c_2 c4))) (= (f3 c4 c5) c_2) (not (= c4 c_0)) (not (= c7 c_2)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c16036 (eq_congruent :conclusion ((not (= c4 (f3 c_1 c_0))) (not (= c5 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c4 c5)))))
(set .c16037 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (= c4 (f3 c_1 c_0)))))
(set .c16038 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c16039 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16040 (resolution :clauses (.c16038 .c16039) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c16041 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c16042 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c16043 (resolution :clauses (.c16041 .c16042) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c16044 (resolution :clauses (.c16040 .c16043) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c16045 (resolution :clauses (.c16037 .c16044) :conclusion ((not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (= c4 (f3 c_1 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c16046 (resolution :clauses (.c16036 .c16045) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c4 c5)) (not (= c4 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c16047 (resolution :clauses (.c16035 .c16046) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_2 (f3 c_2 c4))) (= (f3 c4 c5) c_2) (not (= c4 c_0)) (not (= c7 c_2)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c16048 (resolution :clauses (.c16018 .c16047) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_2 (f3 c_2 c4))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c16049 (resolution :clauses (.c16017 .c16048) :conclusion ((not (= (f3 c_0 c4) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0) (not (= c7 c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_2 (f3 c_2 c4))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c16050 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c16051 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16052 (resolution :clauses (.c16050 .c16051) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16053 (resolution :clauses (.c16049 .c16052) :conclusion ((not (= (f3 c_0 c4) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0) (not (= c7 c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_2 (f3 c_2 c4))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c16054 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= c4 c_0)) (= (f3 c_0 c4) (f3 (f3 c_1 c_0) c_0)))))
(set .c16055 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c16056 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c16057 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16058 (resolution :clauses (.c16056 .c16057) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c16059 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c16060 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c16061 (resolution :clauses (.c16059 .c16060) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c16062 (resolution :clauses (.c16058 .c16061) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c16063 (resolution :clauses (.c16055 .c16062) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c16064 (resolution :clauses (.c16054 .c16063) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c4) (f3 (f3 c_1 c_0) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c16065 (resolution :clauses (.c16053 .c16064) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0) (not (= c7 c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_2 (f3 c_2 c4))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c16066 (resolution :clauses (.c16065 .c31 .c34) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c4) c_0) (not (= c7 c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_2 (f3 c_2 c4))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c16067 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0))))
(set .c16068 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0)))))
(set .c16069 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f2 c_0))) (= (f3 c_2 c_0) (f2 c_0)))))
(set .c16070 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c16071 (resolution :clauses (.c16069 .c16070) :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (= (f3 c_2 c_0) (f2 c_0)) (not (= c4 c_0)))))
(set .c16072 (resolution :clauses (.c16068 .c16071) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0)) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)))))
(set .c16073 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16074 (resolution :clauses (.c16072 .c16073) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 (f2 c_0) c_0)) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)))))
(set .c16075 (resolution :clauses (.c16067 .c16074) :conclusion ((not (= (f3 c_0 c4) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)))))
(set .c16076 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))))))
(set .c16077 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16078 (resolution :clauses (.c16076 .c16077) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16079 (resolution :clauses (.c16075 .c16078) :conclusion ((not (= (f3 c_0 c4) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)) (not (= c7 c_2)) (not (= c5 c_0)))))
(set .c16080 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c16081 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16082 (resolution :clauses (.c16080 .c16081) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16083 (resolution :clauses (.c16079 .c16082) :conclusion ((not (= (f3 c_0 c4) (f3 (f3 c_1 c_0) c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)) (not (= c7 c_2)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c16084 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= c4 c_0)) (= (f3 c_0 c4) (f3 (f3 c_1 c_0) c_0)))))
(set .c16085 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c16086 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c16087 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16088 (resolution :clauses (.c16086 .c16087) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c16089 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c16090 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c16091 (resolution :clauses (.c16089 .c16090) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c16092 (resolution :clauses (.c16088 .c16091) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c16093 (resolution :clauses (.c16085 .c16092) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c16094 (resolution :clauses (.c16084 .c16093) :conclusion ((not (= c4 c_0)) (= (f3 c_0 c4) (f3 (f3 c_1 c_0) c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c16095 (resolution :clauses (.c16083 .c16094) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)) (not (= c7 c_2)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c16096 (resolution :clauses (.c16095 .c31 .c34) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= (f3 c_0 c4) c_0) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= c4 c_0)) (not (= c7 c_2)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c16097 (eq_transitive :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c5))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c5) c_2))))
(set .c16098 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c16099 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16100 (resolution :clauses (.c16098 .c16099) :conclusion ((not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c16101 (resolution :clauses (.c16097 .c16100) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c5))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c5) c_2))))
(set .c16102 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))))))
(set .c16103 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16104 (resolution :clauses (.c16102 .c16103) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16105 (resolution :clauses (.c16101 .c16104) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c5))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c5) c_2) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16106 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c16107 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16108 (resolution :clauses (.c16106 .c16107) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16109 (resolution :clauses (.c16105 .c16108) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c5))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c5) c_2) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)))))
(set .c16110 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= c5 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c5)))))
(set .c16111 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c16112 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c16113 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16114 (resolution :clauses (.c16112 .c16113) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c16115 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c16116 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c16117 (resolution :clauses (.c16115 .c16116) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c16118 (resolution :clauses (.c16114 .c16117) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c16119 (resolution :clauses (.c16111 .c16118) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c16120 (resolution :clauses (.c16110 .c16119) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c5)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c16121 (resolution :clauses (.c16109 .c16120) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c5) c_2) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c16122 (resolution :clauses (.c16121 .c31 .c34) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c5) c_2) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)))))
(set .c16123 (resolution :clauses (.c16122 .c268 .c10651 .c238 .c16096 .c9809 .c296 .c287 .c207 .c189 .c5993 .c3133 .c10829 .c3141 .c14182 .c5946 .c8881) :conclusion ((not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c_0) (f1 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))))))
(set .c16124 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1))))
(set .c16125 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))))))
(set .c16126 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_1 c_2) c_0))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)))))
(set .c16127 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_1 c_2) c_0)))))
(set .c16128 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c16129 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c16130 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c16131 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c16132 (resolution :clauses (.c16130 .c16131) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c16133 (resolution :clauses (.c16129 .c16132) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16134 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16135 (resolution :clauses (.c16133 .c16134) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16136 (resolution :clauses (.c16128 .c16135) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16137 (resolution :clauses (.c16127 .c16136) :conclusion ((not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_1 c_2) c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16138 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16139 (resolution :clauses (.c16137 .c16138) :conclusion ((= (f3 c_2 c_0) (f3 (f3 c_1 c_2) c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16140 (resolution :clauses (.c16126 .c16139) :conclusion ((not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c4 c_2)))))
(set .c16141 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))))))
(set .c16142 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16143 (resolution :clauses (.c16141 .c16142) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16144 (resolution :clauses (.c16140 .c16143) :conclusion ((not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)))))
(set .c16145 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))))))
(set .c16146 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16147 (resolution :clauses (.c16145 .c16146) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16148 (resolution :clauses (.c16144 .c16147) :conclusion ((not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c16149 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16150 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16151 (resolution :clauses (.c16149 .c16150) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16152 (resolution :clauses (.c16148 .c16151) :conclusion ((not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16153 (resolution :clauses (.c16125 .c16152) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16154 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16155 (resolution :clauses (.c16153 .c16154) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16156 (resolution :clauses (.c16124 .c16155) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16157 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16158 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16159 (resolution :clauses (.c16157 .c16158) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16160 (resolution :clauses (.c16156 .c16159) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16161 (resolution :clauses (.c16160 .c33 .c34 .c169) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_1)) (= c4 c_1) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16162 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_1 c_2) c_0))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2))))
(set .c16163 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_1 c_2) c_0)))))
(set .c16164 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c16165 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c16166 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c16167 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c16168 (resolution :clauses (.c16166 .c16167) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c16169 (resolution :clauses (.c16165 .c16168) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16170 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16171 (resolution :clauses (.c16169 .c16170) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16172 (resolution :clauses (.c16164 .c16171) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16173 (resolution :clauses (.c16163 .c16172) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_1 c_2) c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16174 (resolution :clauses (.c16162 .c16173) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16175 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))))))
(set .c16176 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16177 (resolution :clauses (.c16175 .c16176) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16178 (resolution :clauses (.c16174 .c16177) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)))))
(set .c16179 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))))))
(set .c16180 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16181 (resolution :clauses (.c16179 .c16180) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16182 (resolution :clauses (.c16178 .c16181) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c16183 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16184 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16185 (resolution :clauses (.c16183 .c16184) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16186 (resolution :clauses (.c16182 .c16185) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c16187 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4)))))
(set .c16188 (resolution :clauses (.c16186 .c16187) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c16189 (resolution :clauses (.c16188 .c33 .c34) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c7 c_2)))))
(set .c16190 (resolution :clauses (.c16189 .c226 .c16161 .c242 .c8507 .c2954 .c8081 .c272 .c269 .c292 .c289 .c219 .c223 .c201 .c8521 .c402 .c8152 .c12978 .c8268 .c2677 .c258 .c16123 .c252 .c16016 .c8881 .c8880) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c7 c_2)) (= c4 c_1) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c_0) (f1 c_0))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))))))
(set .c16191 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_2 c5))) (= c_0 (f3 c_2 c5)))))
(set .c16192 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c5 c_0)) (= (f3 (f3 c_1 c_2) c_0) (f3 c_2 c5)))))
(set .c16193 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c16194 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c16195 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c16196 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c16197 (resolution :clauses (.c16195 .c16196) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c16198 (resolution :clauses (.c16194 .c16197) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16199 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16200 (resolution :clauses (.c16198 .c16199) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16201 (resolution :clauses (.c16193 .c16200) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16202 (resolution :clauses (.c16192 .c16201) :conclusion ((not (= c5 c_0)) (= (f3 (f3 c_1 c_2) c_0) (f3 c_2 c5)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16203 (resolution :clauses (.c16191 .c16202) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16204 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))))))
(set .c16205 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16206 (resolution :clauses (.c16204 .c16205) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16207 (resolution :clauses (.c16203 .c16206) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)))))
(set .c16208 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c16209 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16210 (resolution :clauses (.c16208 .c16209) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16211 (resolution :clauses (.c16207 .c16210) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c16212 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c16213 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c16214 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c16215 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16216 (resolution :clauses (.c16214 .c16215) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c16217 (resolution :clauses (.c16213 .c16216) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16218 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c16219 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16220 (resolution :clauses (.c16218 .c16219) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c16221 (resolution :clauses (.c16217 .c16220) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16222 (resolution :clauses (.c16212 .c16221) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c16223 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16224 (resolution :clauses (.c16222 .c16223) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c16225 (resolution :clauses (.c16211 .c16224) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c16226 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c16227 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16228 (resolution :clauses (.c16226 .c16227) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c16229 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c_0 c5))) (not (= (f3 c_0 c5) c_2)) (= (f3 c_0 c_0) c_2))))
(set .c16230 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c16231 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16232 (resolution :clauses (.c16230 .c16231) :conclusion ((not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c16233 (resolution :clauses (.c16229 .c16232) :conclusion ((not (= (f3 c_0 c5) c_2)) (= (f3 c_0 c_0) c_2) (not (= c5 c_0)))))
(set .c16234 (resolution :clauses (.c16228 .c16233) :conclusion ((= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)) (not (= (f3 c_0 c5) c_2)) (not (= c5 c_0)))))
(set .c16235 (resolution :clauses (.c16225 .c16234) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 c5) c_2)))))
(set .c16236 (resolution :clauses (.c16235 .c33 .c34) :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (= c_0 (f3 c_2 c5)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_0 c5) c_2)))))
(set .c16237 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_1 c_2) c_0))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2))))
(set .c16238 (eq_congruent :conclusion ((not (= (f3 c_1 c_2) c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_1 c_2) c_0)))))
(set .c16239 (eq_transitive :conclusion ((not (= (f3 c_1 c_2) (f3 (f2 c_2) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2))))
(set .c16240 (eq_congruent :conclusion ((not (= (f2 c_2) c_1)) (not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)))))
(set .c16241 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1))))
(set .c16242 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c16243 (resolution :clauses (.c16241 .c16242) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_2) c_1) (not (= c4 c_2)))))
(set .c16244 (resolution :clauses (.c16240 .c16243) :conclusion ((not (= c_2 c_2)) (= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16245 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16246 (resolution :clauses (.c16244 .c16245) :conclusion ((= (f3 c_1 c_2) (f3 (f2 c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16247 (resolution :clauses (.c16239 .c16246) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_1 c_2) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16248 (resolution :clauses (.c16238 .c16247) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 (f3 c_1 c_2) c_0)) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16249 (resolution :clauses (.c16237 .c16248) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)))))
(set .c16250 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))))))
(set .c16251 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16252 (resolution :clauses (.c16250 .c16251) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16253 (resolution :clauses (.c16249 .c16252) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)))))
(set .c16254 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c16255 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16256 (resolution :clauses (.c16254 .c16255) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16257 (resolution :clauses (.c16253 .c16256) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c16258 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c16259 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c16260 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c16261 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16262 (resolution :clauses (.c16260 .c16261) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c16263 (resolution :clauses (.c16259 .c16262) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16264 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c16265 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16266 (resolution :clauses (.c16264 .c16265) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c16267 (resolution :clauses (.c16263 .c16266) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16268 (resolution :clauses (.c16258 .c16267) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c16269 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16270 (resolution :clauses (.c16268 .c16269) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c16271 (resolution :clauses (.c16257 .c16270) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c16272 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))))))
(set .c16273 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_0 c_0) (f1 c_2)))))
(set .c16274 (resolution :clauses (.c16272 .c16273) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c16275 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16276 (resolution :clauses (.c16274 .c16275) :conclusion ((= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_0 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c16277 (resolution :clauses (.c16271 .c16276) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c16278 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4)))))
(set .c16279 (resolution :clauses (.c16277 .c16278) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c16280 (resolution :clauses (.c16279 .c33 .c34 .c169) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_1)) (not (= (f2 c4) (f1 c_2))))))
(set .c16281 (resolution :clauses (.c16280 .c226 .c11007 .c16236) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_1 c_2) c_0) (f3 c_1 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_2)) (not (= c6 c_1)) (not (= c5 c_0)) (not (= c_0 c7)) (not (= (f2 c4) (f1 c_2))) (= (f3 c_0 c_0) c_0) (= c_0 (f3 c_2 c5)))))
(set .c16282 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 c_2))))
(set .c16283 (eq_congruent :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16284 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16285 (resolution :clauses (.c16283 .c16284) :conclusion ((not (= (f2 c_0) (f3 c_2 c_2))) (= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16286 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)))))
(set .c16287 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c16288 (resolution :clauses (.c16286 .c16287) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c6 c_1)))))
(set .c16289 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c16290 (resolution :clauses (.c16288 .c16289) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c16291 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c16292 (resolution :clauses (.c16290 .c16291) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (= (f2 c_0) (f3 c_2 c_2)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c16293 (resolution :clauses (.c16285 .c16292) :conclusion ((= (f3 (f2 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c16294 (resolution :clauses (.c16282 .c16293) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 c_2) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c16295 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) (f1 c_2))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))))))
(set .c16296 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) (f1 c_2)))))
(set .c16297 (resolution :clauses (.c16295 .c16296) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c16298 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16299 (resolution :clauses (.c16297 .c16298) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 (f1 c_2))) (not (= (f3 c_2 c_0) c_1)) (not (= (f1 c_1) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c16300 (resolution :clauses (.c16294 .c16299) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c_0 c_2) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= (f3 c_2 c_0) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c16301 (resolution :clauses (.c16300 .c8 .c31 .c8881 .c164 .c166 .c169) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f1 c_1) c_1)) (not (= (f3 c_2 c_2) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= (f3 c_2 c_0) c_1)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c16302 (resolution :clauses (.c16301 .c238 .c10651 .c10627 .c242 .c16281 .c8081 .c183 .c292 .c289 .c219 .c223 .c201 .c10741 .c8152 .c12978 .c8268 .c8881) :conclusion ((not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f3 c_2 c_0) c_0) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= c4 c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= (f3 c_0 c_0) c_0) (= c_0 (f3 c_2 c5)) (not (= (f2 c_0) (f1 c_2))) (not (= (f2 c5) (f1 c_2))))))
(set .c16303 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)))))
(set .c16304 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c16305 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16306 (resolution :clauses (.c16304 .c16305) :conclusion ((not (= (f3 c_1 c_0) c_0)) (= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)))))
(set .c16307 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c16308 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c16309 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16310 (resolution :clauses (.c16308 .c16309) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c16311 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c16312 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c16313 (resolution :clauses (.c16311 .c16312) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c6 c_1)))))
(set .c16314 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c16315 (resolution :clauses (.c16313 .c16314) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c16316 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c16317 (resolution :clauses (.c16315 .c16316) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c16318 (resolution :clauses (.c16310 .c16317) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c16319 (resolution :clauses (.c16307 .c16318) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c16320 (resolution :clauses (.c16306 .c16319) :conclusion ((= (f3 (f3 c_1 c_0) c_0) (f3 c_0 c_0)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c16321 (resolution :clauses (.c16303 .c16320) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c16322 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))))))
(set .c16323 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16324 (resolution :clauses (.c16322 .c16323) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16325 (resolution :clauses (.c16321 .c16324) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c16326 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))))))
(set .c16327 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16328 (resolution :clauses (.c16326 .c16327) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16329 (resolution :clauses (.c16325 .c16328) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c16330 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c4)))))
(set .c16331 (resolution :clauses (.c16329 .c16330) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c_2 (f3 c_2 c4)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c16332 (resolution :clauses (.c16331 .c31 .c34 .c8881 .c164 .c166) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c_2 (f3 c_2 c4)) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c16333 (eq_transitive :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f3 (f2 c_0) c_0) (f3 c_1 c5))) (= c_0 (f3 c_1 c5)))))
(set .c16334 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)))))
(set .c16335 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c16336 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c16337 (resolution :clauses (.c16335 .c16336) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c6 c_1)))))
(set .c16338 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c16339 (resolution :clauses (.c16337 .c16338) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c16340 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c16341 (resolution :clauses (.c16339 .c16340) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c16342 (resolution :clauses (.c16334 .c16341) :conclusion ((not (= c5 c_0)) (= (f3 (f2 c_0) c_0) (f3 c_1 c5)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c16343 (resolution :clauses (.c16333 .c16342) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c16344 (resolution :clauses (.c16343 .c166 .c8881 .c164 .c31) :conclusion ((= c_0 (f3 c_1 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c16345 (resolution :clauses (.c16332 .c286 .c2949 .c226 .c4436 .c258 .c16302 .c1344 .c2954 .c272 .c269 .c16344 .c8881) :conclusion ((not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f1 c_1) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (= c4 c_1) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f2 c_0) (f1 c_2))))))
(set .c16346 (eq_transitive :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4))) (= c_2 (f3 c_1 c4)))))
(set .c16347 (eq_congruent :conclusion ((not (= (f2 c_2) c7)) (not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5))))))
(set .c16348 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_2) c7))))
(set .c16349 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c16350 (resolution :clauses (.c16348 .c16349) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_2) c7) (not (= c4 c_2)))))
(set .c16351 (resolution :clauses (.c16347 .c16350) :conclusion ((not (= (f3 c4 c5) c_2)) (= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_2)))))
(set .c16352 (eq_transitive :conclusion ((not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2))))
(set .c16353 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c16354 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c16355 (resolution :clauses (.c16353 .c16354) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c16356 (resolution :clauses (.c16352 .c16355) :conclusion ((not (= (f3 c_2 (f1 c_2)) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c16357 (resolution :clauses (.c16351 .c16356) :conclusion ((= (f3 (f2 c_2) c_2) (f3 c7 (f3 c4 c5))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_2))))))
(set .c16358 (resolution :clauses (.c16346 .c16357) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4))) (= c_2 (f3 c_1 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_2))))))
(set .c16359 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= c4 (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4)))))
(set .c16360 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= c4 (f3 c4 c5)))))
(set .c16361 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c16362 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c16363 (resolution :clauses (.c16361 .c16362) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c16364 (resolution :clauses (.c16360 .c16363) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c16365 (resolution :clauses (.c16359 .c16364) :conclusion ((not (= c6 c_1)) (= (f3 c6 (f3 c4 c5)) (f3 c_1 c4)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))))))
(set .c16366 (resolution :clauses (.c16358 .c16365) :conclusion ((not (= (f3 (f2 c_2) c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_2 (f3 c_1 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_2))) (not (= c6 c_1)))))
(set .c16367 (resolution :clauses (.c16366 .c33 .c34 .c169) :conclusion ((= c_2 (f3 c_1 c4)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f2 c4) (f1 c_2))) (not (= c6 c_1)))))
(set .c16368 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c_0) (f1 c_1)))))
(set .c16369 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c16370 (resolution :clauses (.c16368 .c16369) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_1)) (not (= c6 c_1)))))
(set .c16371 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c16372 (resolution :clauses (.c16370 .c16371) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_1)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c16373 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c16374 (resolution :clauses (.c16372 .c16373) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c_0) (f1 c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c16375 (resolution :clauses (.c16374 .c166 .c8881 .c164) :conclusion ((= (f2 c_0) (f1 c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c16376 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_2)))))
(set .c16377 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c16378 (resolution :clauses (.c16376 .c16377) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_2)) (not (= c6 c_1)))))
(set .c16379 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c16380 (resolution :clauses (.c16378 .c16379) :conclusion ((not (= (f2 c_0) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c16381 (eq_congruent :conclusion ((not (= c5 c_0)) (= (f2 c_0) (f2 c5)))))
(set .c16382 (resolution :clauses (.c16380 .c16381) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_2)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c16383 (resolution :clauses (.c16382 .c164 .c166 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_0) (f1 c_2)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_0)))))
(set .c16384 (resolution :clauses (.c16367 .c289 .c10119 .c258 .c1285 .c252 .c16345 .c189 .c207 .c23 .c16375 .c16383 .c14796 .c5999 .c262 .c16190 .c15933 .c171 .c11 .c11080 .c15735 .c215 .c12563 .c8881 .c8880 .c1739) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 c4) (f1 c_2))) (not (= c6 c_1)) (= c_1 c7))))
(set .c16385 (resolution :clauses (.c258 .c13323 .c1285) :conclusion ((= c4 c_1) (not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= c5 c_0)) (not (= (f1 c_1) c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c16386 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_2))) (= (f2 c4) (f1 c_2)))))
(set .c16387 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c16388 (resolution :clauses (.c16386 .c16387) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c6 c_1)))))
(set .c16389 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c16390 (resolution :clauses (.c16388 .c16389) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_2))) (= (f2 c4) (f1 c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c16391 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f1 (f3 c_0 c_0)) (f1 c_2)))))
(set .c16392 (resolution :clauses (.c16390 .c16391) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c4) (f1 c_2)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16393 (resolution :clauses (.c16392 .c164 .c166) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c4) (f1 c_2)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16394 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c4) (f1 c_2)))))
(set .c16395 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c16396 (resolution :clauses (.c16394 .c16395) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c4) (f1 c_2)) (not (= c6 c_1)))))
(set .c16397 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c16398 (resolution :clauses (.c16396 .c16397) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (not (= (f1 c_2) (f1 c4))) (= (f2 c4) (f1 c_2)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c16399 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c16400 (resolution :clauses (.c16398 .c16399) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c4))) (= (f2 c4) (f1 c_2)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c4 c_2)))))
(set .c16401 (resolution :clauses (.c16400 .c8881 .c164 .c165 .c166) :conclusion ((not (= (f2 c4) (f1 c_1))) (= (f2 c4) (f1 c_2)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c4 c_2)))))
(set .c16402 (resolution :clauses (.c2954 .c226 .c269 .c4436 .c4458 .c252 .c258 .c16385 .c8881 .c8880) :conclusion ((not (= c5 c_0)) (= (f3 c_0 c_0) c_2) (not (= (f2 c4) (f1 c_1))) (not (= (f3 (f3 c_1 c_0) c_0) (f3 c_1 (f3 c_0 c_0)))) (= c4 c_1) (not (= c6 c_1)) (not (= c_0 c7)) (= c4 c_2) (= (f2 c4) (f1 c_2)))))
(set .c16403 (resolution :clauses (.c269 .c4903 .c2173 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f3 c_1 (f3 c_1 c_0)) (f3 (f3 c_1 c_1) c_0))) (not (= (f1 c_1) c_1)) (not (= c4 c_1)) (not (= c5 c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c16404 (resolution :clauses (.c288 .c4870 .c2436 .c252 .c16403 .c16402 .c16393 .c189 .c195 .c93 .c16375 .c11080 .c8881 .c8880 .c1739) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= c5 c_0)) (not (= c_0 c7)) (not (= c6 c_1)) (= c4 c_2) (= (f2 c4) (f1 c_2)))))
(set .c16405 (resolution :clauses (.c4959 .c5081 .c6851 .c260 .c234 .c15509 .c716 .c288 .c8191 .c2436 .c15700 .c13928 .c8881) :conclusion ((not (= c_0 c7)) (not (= c4 c_1)) (not (= c6 c_1)) (= c5 c_0) (= (f3 c_1 c_1) c_2) (not (= (f1 c_1) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_0) (f2 c_1))))))
(set .c16406 (resolution :clauses (.c271 .c15733 .c7730 .c260 .c5108 .c252 .c16405 .c8881 .c8880) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= c4 c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (= c5 c_0) (= (f3 c_1 c_1) c_2) (not (= (f1 c_0) (f2 c_1))))))
(set .c16407 (eq_transitive :conclusion ((not (= (f3 (f3 c_1 c_0) c_2) (f3 c_0 c5))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2))))
(set .c16408 (eq_congruent :conclusion ((not (= (f3 c_1 c_0) c_0)) (not (= c5 c_2)) (= (f3 (f3 c_1 c_0) c_2) (f3 c_0 c5)))))
(set .c16409 (eq_transitive :conclusion ((not (= (f3 c_1 c_0) (f3 (f2 c_0) c_0))) (not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0))))
(set .c16410 (eq_congruent :conclusion ((not (= (f2 c_0) c_1)) (not (= c_0 c_0)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c16411 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16412 (resolution :clauses (.c16410 .c16411) :conclusion ((not (= (f2 c_0) c_1)) (= (f3 c_1 c_0) (f3 (f2 c_0) c_0)))))
(set .c16413 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1))))
(set .c16414 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c16415 (resolution :clauses (.c16413 .c16414) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (= (f2 c_0) c_1) (not (= c4 c_0)))))
(set .c16416 (resolution :clauses (.c16412 .c16415) :conclusion ((= (f3 c_1 c_0) (f3 (f2 c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c16417 (resolution :clauses (.c16409 .c16416) :conclusion ((not (= (f3 (f2 c_0) c_0) c_0)) (= (f3 c_1 c_0) c_0) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c16418 (resolution :clauses (.c16408 .c16417) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_1 c_0) c_2) (f3 c_0 c5)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c16419 (resolution :clauses (.c16407 .c16418) :conclusion ((not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c_1 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)))))
(set .c16420 (eq_congruent :conclusion ((not (= c6 c_1)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c_1 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c16421 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c16422 (resolution :clauses (.c16420 .c16421) :conclusion ((not (= c6 c_1)) (= (f3 c_1 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c16423 (resolution :clauses (.c16419 .c16422) :conclusion ((not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c16424 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))))))
(set .c16425 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c16426 (resolution :clauses (.c16424 .c16425) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c16427 (resolution :clauses (.c16423 .c16426) :conclusion ((not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c16428 (eq_congruent :conclusion ((not (= (f2 c_2) (f3 c_0 c_0))) (not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2)))))
(set .c16429 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f2 c_2) (f3 c_0 c_0)))))
(set .c16430 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c16431 (resolution :clauses (.c16429 .c16430) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f2 c_2) (f3 c_0 c_0)) (not (= c6 c_1)))))
(set .c16432 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c16433 (resolution :clauses (.c16431 .c16432) :conclusion ((not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f2 c_2) (f3 c_0 c_0)) (not (= c6 c_1)) (not (= c_0 c7)))))
(set .c16434 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c16435 (resolution :clauses (.c16433 .c16434) :conclusion ((not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (= (f2 c_2) (f3 c_0 c_0)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_2)))))
(set .c16436 (resolution :clauses (.c16428 .c16435) :conclusion ((not (= c_2 c_2)) (= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_2)))))
(set .c16437 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16438 (resolution :clauses (.c16436 .c16437) :conclusion ((= (f3 (f2 c_2) c_2) (f3 (f3 c_0 c_0) c_2)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= c5 c_2)))))
(set .c16439 (resolution :clauses (.c16427 .c16438) :conclusion ((not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f2 c_2) c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f3 (f2 c_0) c_0) c_0)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f3 c_0 c_0) c_1)))))
(set .c16440 (resolution :clauses (.c16439 .c31 .c33 .c34 .c8881 .c164 .c166) :conclusion ((not (= (f3 c_1 (f3 c_0 c_2)) (f3 (f3 c_1 c_0) c_2))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (= (f3 c_0 c5) c_2) (not (= c5 c_2)) (not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_1)))))
(set .c16441 (resolution :clauses (.c16440 .c271 .c9868 .c175 .c193 .c15 .c9478 .c260 .c226 .c14890 .c5758 .c287 .c5993 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= (f1 c_1) c_1)) (not (= c4 c_0)) (not (= c6 c_1)) (not (= c_0 c7)) (not (= (f2 c_0) (f1 c_0))) (not (= (f2 c_0) (f1 c_1))) (= c5 c_0) (= (f3 c_0 c_0) c_2))))
(set .c16442 (resolution :clauses (.c271 .c11989 .c15459 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))) (not (= c5 c_2)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c6 c_1)))))
(set .c16443 (resolution :clauses (.c264 .c5984 .c5978 .c260 .c16442 .c252 .c16441 .c16393 .c93 .c191 .c5943 .c5946 .c258 .c16406 .c16404 .c16401 .c6005 .c5999 .c4675 .c262 .c12572 .c8470 .c16384 .c1380 .c14619 .c8880 .c8881) :conclusion ((not (= (f2 c4) (f1 c_1))))))
(set .c16444 (resolution :clauses (.c2620 .c16443) :conclusion ((not (= c4 c_1)))))
(set .c16445 (eq_transitive :conclusion ((not (= (f2 c4) (f2 (f1 c_1)))) (not (= (f2 (f1 c_1)) (f1 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c16446 (eq_congruent :conclusion ((not (= c4 (f1 c_1))) (= (f2 c4) (f2 (f1 c_1))))))
(set .c16447 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)) (= c4 (f1 c_1)))))
(set .c16448 (resolution :clauses (.c16446 .c16447) :conclusion ((= (f2 c4) (f2 (f1 c_1))) (not (= c4 c_0)) (not (= (f1 c_1) c_0)))))
(set .c16449 (resolution :clauses (.c16445 .c16448) :conclusion ((not (= (f2 (f1 c_1)) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= (f1 c_1) c_0)))))
(set .c16450 (resolution :clauses (.c16449 .c16443 .c90) :conclusion ((not (= c4 c_0)) (not (= (f1 c_1) c_0)))))
(set .c16451 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_1)) (f1 c7))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c16452 (eq_congruent :conclusion ((not (= (f2 c_1) c7)) (= (f1 (f2 c_1)) (f1 c7)))))
(set .c16453 (eq_transitive :conclusion ((not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (= (f2 c_1) c7))))
(set .c16454 (resolution :clauses (.c16452 .c16453) :conclusion ((= (f1 (f2 c_1)) (f1 c7)) (not (= (f1 c_1) (f2 c_1))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)))))
(set .c16455 (resolution :clauses (.c16451 .c16454) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)))))
(set .c16456 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5))))))
(set .c16457 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c16458 (resolution :clauses (.c16456 .c16457) :conclusion ((= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c16459 (resolution :clauses (.c16455 .c16458) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c16460 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c16461 (resolution :clauses (.c16459 .c16460) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c16462 (resolution :clauses (.c16461 .c1739 .c29 .c16443 .c166) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f1 c_1) c_0)) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c16463 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c16464 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c16465 (resolution :clauses (.c16463 .c16464) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_1)) (not (= c_1 c7)))))
(set .c16466 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5))))))
(set .c16467 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c16468 (resolution :clauses (.c16466 .c16467) :conclusion ((= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c16469 (resolution :clauses (.c16465 .c16468) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c16470 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c16471 (resolution :clauses (.c16469 .c16470) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_1)) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c16472 (resolution :clauses (.c16471 .c16443 .c166) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= c_1 c7)) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c16473 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c16474 (eq_congruent :conclusion ((not (= c_0 (f2 c_1))) (= (f1 (f2 c_1)) (f1 c_0)))))
(set .c16475 (eq_transitive :conclusion ((not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))) (= c_0 (f2 c_1)))))
(set .c16476 (resolution :clauses (.c16474 .c16475) :conclusion ((= (f1 (f2 c_1)) (f1 c_0)) (not (= (f1 c_1) c_0)) (not (= (f1 c_1) (f2 c_1))))))
(set .c16477 (resolution :clauses (.c16473 .c16476) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= (f1 c_1) c_0)))))
(set .c16478 (eq_congruent :conclusion ((not (= c4 c7)) (= (f1 c7) (f1 c4)))))
(set .c16479 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= c7 c_2)) (= c4 c7))))
(set .c16480 (resolution :clauses (.c16478 .c16479) :conclusion ((= (f1 c7) (f1 c4)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c16481 (resolution :clauses (.c16477 .c16480) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c7 c_2)))))
(set .c16482 (eq_congruent :conclusion ((not (= (f3 c_2 c_1) (f3 c4 c5))) (= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5))))))
(set .c16483 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_1)) (= (f3 c_2 c_1) (f3 c4 c5)))))
(set .c16484 (resolution :clauses (.c16482 .c16483) :conclusion ((= (f2 (f3 c_2 c_1)) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_1)))))
(set .c16485 (resolution :clauses (.c16481 .c16484) :conclusion ((not (= (f2 c_2) (f2 c4))) (not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c5 c_1)))))
(set .c16486 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f2 c_2) (f2 c4)))))
(set .c16487 (resolution :clauses (.c16485 .c16486) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f2 c_1)) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c5 c_1)))))
(set .c16488 (resolution :clauses (.c16487 .c1739 .c29 .c8881 .c16443 .c165 .c166) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_1)))) (not (= (f1 c_1) c_0)) (not (= c4 c_2)) (not (= c7 c_2)) (not (= c5 c_1)))))
(set .c16489 (resolution :clauses (.c16488 .c262 .c16472 .c16462 .c25 .c8255 .c260 .c8183 .c258 .c16450 .c16444) :conclusion ((not (= (f1 c_1) c_0)) (= c5 c_0) (= (f2 c4) (f1 c_2)))))
(set .c16490 (eq_transitive :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c16491 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c16492 (resolution :clauses (.c16490 .c16491) :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c5 c_1)))))
(set .c16493 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c16494 (resolution :clauses (.c16492 .c16493) :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c5 c_1)) (not (= c_0 c6)))))
(set .c16495 (eq_congruent :conclusion ((not (= c4 (f3 c4 c5))) (= (f2 c4) (f2 (f3 c4 c5))))))
(set .c16496 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f3 c4 c5) (f3 c_2 (f1 c_2)))) (= c4 (f3 c4 c5)))))
(set .c16497 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 (f1 c_2))) (= (f3 c4 c5) (f3 c_2 (f1 c_2))))))
(set .c16498 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c16499 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c16500 (resolution :clauses (.c16498 .c16499) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= c5 (f1 c_2)))))
(set .c16501 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c16502 (resolution :clauses (.c16500 .c16501) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_2))) (= c5 (f1 c_2)) (not (= c_0 c6)))))
(set .c16503 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c16504 (resolution :clauses (.c16502 .c16503) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= c5 (f1 c_2)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c16505 (resolution :clauses (.c16497 .c16504) :conclusion ((not (= c4 c_2)) (= (f3 c4 c5) (f3 c_2 (f1 c_2))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c16506 (resolution :clauses (.c16496 .c16505) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c16507 (resolution :clauses (.c16495 .c16506) :conclusion ((= (f2 c4) (f2 (f3 c4 c5))) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c16508 (resolution :clauses (.c16494 .c16507) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c5 c_1)) (not (= c_0 c6)) (not (= c4 c_2)) (not (= (f3 c_2 (f1 c_2)) c_2)) (not (= (f1 c_1) c_1)) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= c7 c_2)))))
(set .c16509 (resolution :clauses (.c16508 .c1739 .c8881 .c16443 .c164 .c166 .c169) :conclusion ((not (= c5 c_1)) (not (= c_0 c6)) (not (= c4 c_2)) (not (= (f1 c_1) c_1)) (not (= c7 c_2)))))
(set .c16510 (resolution :clauses (.c16509 .c260 .c8183) :conclusion ((not (= c_0 c6)) (not (= c4 c_2)) (not (= (f1 c_1) c_1)) (not (= c7 c_2)) (= c5 c_0) (= (f2 c4) (f1 c_2)))))
(set .c16511 (resolution :clauses (.c13 .c7240 .c6724 .c16443 .c8881) :conclusion ((not (= c5 c_1)) (not (= c_0 c6)) (not (= c4 c_0)))))
(set .c16512 (resolution :clauses (.c15 .c13363 .c9478 .c260 .c16511 .c258 .c16510 .c16444) :conclusion ((= (f2 c4) (f1 c_2)) (not (= c7 c_2)) (= c5 c_0) (not (= c_0 c6)) (not (= (f1 c_1) c_1)))))
(set .c16513 (resolution :clauses (.c15 .c13363 .c9478) :conclusion ((= (f2 c4) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c16514 (resolution :clauses (.c13 .c5588 .c6724 .c260 .c16513 .c16443 .c8881) :conclusion ((not (= c4 c_0)) (not (= c6 c_1)) (= c5 c_0) (= (f2 c4) (f1 c_2)) (not (= c7 c_2)))))
(set .c16515 (resolution :clauses (.c260 .c8340 .c8183 .c258 .c16514 .c25 .c7539 .c256 .c16512 .c1476 .c16443 .c16444) :conclusion ((= c5 c_0) (= (f2 c4) (f1 c_2)) (not (= c7 c_2)) (not (= (f1 c_1) c_1)))))
(set .c16516 (resolution :clauses (.c303 .c256 .c262 .c8340 .c16472 .c25 .c8306 .c8255 .c16443) :conclusion ((= c7 c_2) (not (= c4 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c16517 (eq_transitive :conclusion ((not (= (f2 c4) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)))))
(set .c16518 (eq_congruent :conclusion ((not (= c4 (f3 c4 c5))) (= (f2 c4) (f2 (f3 c4 c5))))))
(set .c16519 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c4 c5) (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)))))
(set .c16520 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f1 c_0))) (= (f3 c4 c5) (f3 c_0 (f1 c_0))))))
(set .c16521 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c16522 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c16523 (resolution :clauses (.c16521 .c16522) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c16524 (resolution :clauses (.c16520 .c16523) :conclusion ((not (= c4 c_0)) (= (f3 c4 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c16525 (resolution :clauses (.c16519 .c16524) :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (= c4 (f3 c4 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c16526 (resolution :clauses (.c16518 .c16525) :conclusion ((= (f2 c4) (f2 (f3 c4 c5))) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c16527 (resolution :clauses (.c16517 .c16526) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_2) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c16528 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c16529 (resolution :clauses (.c16527 .c16528) :conclusion ((not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_0 (f1 c_0)))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (not (= c6 c_2)))))
(set .c16530 (resolution :clauses (.c16529 .c1739 .c8881 .c164 .c167) :conclusion ((= (f2 c4) (f1 c_2)) (not (= c4 c_0)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= c6 c_2)))))
(set .c16531 (eq_transitive :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (not (= (f3 c_0 c5) (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c5)))))
(set .c16532 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 (f1 c_0))) (= (f3 c_0 c5) (f3 c_0 (f1 c_0))))))
(set .c16533 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16534 (resolution :clauses (.c16532 .c16533) :conclusion ((not (= c5 (f1 c_0))) (= (f3 c_0 c5) (f3 c_0 (f1 c_0))))))
(set .c16535 (eq_transitive :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c16536 (eq_congruent :conclusion ((not (= c5 c_1)) (= (f2 c5) (f2 c_1)))))
(set .c16537 (resolution :clauses (.c16535 .c16536) :conclusion ((not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))) (= c5 (f1 c_0)))))
(set .c16538 (resolution :clauses (.c16534 .c16537) :conclusion ((= (f3 c_0 c5) (f3 c_0 (f1 c_0))) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c16539 (resolution :clauses (.c16531 .c16538) :conclusion ((not (= c_0 (f3 c_0 (f1 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (not (= (f1 c_1) (f2 c_1))) (not (= (f2 c5) (f1 c_0))))))
(set .c16540 (resolution :clauses (.c16539 .c1739 .c8881 .c167) :conclusion ((= c_0 (f3 c_0 c5)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)))))
(set .c16541 (resolution :clauses (.c16530 .c256 .c16511 .c5568 .c258 .c16516 .c16540 .c16443 .c16444) :conclusion ((= (f2 c4) (f1 c_2)) (not (= c5 c_1)) (not (= (f1 c_1) c_1)) (= c7 c_2))))
(set .c16542 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c16543 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c16544 (resolution :clauses (.c16542 .c16543) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)))))
(set .c16545 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c16546 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c16547 (resolution :clauses (.c16545 .c16546) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c16548 (resolution :clauses (.c16544 .c16547) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c16549 (eq_congruent :conclusion ((not (= c_1 c7)) (= (f1 c7) (f1 c_1)))))
(set .c16550 (resolution :clauses (.c16548 .c16549) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c_1 c7)))))
(set .c16551 (resolution :clauses (.c16550 .c16443 .c166) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c_1 c7)))))
(set .c16552 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)))))
(set .c16553 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c16554 (resolution :clauses (.c16552 .c16553) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)))))
(set .c16555 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))))))
(set .c16556 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c16557 (resolution :clauses (.c16555 .c16556) :conclusion ((= (f2 (f3 c4 c5)) (f2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c16558 (resolution :clauses (.c16554 .c16557) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_1) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c16559 (eq_congruent :conclusion ((not (= c6 c_1)) (= (f1 c_1) (f1 c6)))))
(set .c16560 (resolution :clauses (.c16558 .c16559) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_1)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_1)))))
(set .c16561 (resolution :clauses (.c16560 .c16443 .c164) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_1)))))
(set .c16562 (resolution :clauses (.c16561 .c256 .c303 .c262 .c16551 .c9894 .c258 .c15 .c8183 .c9478 .c260 .c16541 .c16515 .c252 .c16489 .c16444 .c8880) :conclusion ((= (f2 c4) (f1 c_2)) (= c5 c_0))))
(set .c16563 (resolution :clauses (.c23 .c402 .c8826 .c258 .c3087 .c16443 .c16444) :conclusion ((not (= c5 c_0)) (not (= c6 c_1)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))))))
(set .c16564 (resolution :clauses (.c303 .c262 .c256 .c8816 .c8710 .c23 .c402 .c16443) :conclusion ((= c7 c_2) (= c6 c_1) (not (= c4 c_2)) (not (= c5 c_0)) (= (f2 c4) (f1 c_2)))))
(set .c16565 (resolution :clauses (.c303 .c256 .c262 .c3839 .c3679 .c258 .c16564 .c16443 .c16444) :conclusion ((= c6 c_1) (= c7 c_2) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f2 c4) (f1 c_2)) (not (= c5 c_0)))))
(set .c16566 (resolution :clauses (.c23 .c13351 .c12809 .c258 .c256 .c3097 .c1476 .c16565 .c16563 .c11 .c11080 .c16562 .c16444) :conclusion ((= (f2 c4) (f1 c_2)))))
(set .c16567 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c16568 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c16569 (resolution :clauses (.c16567 .c16568) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c_0 c6)))))
(set .c16570 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c16571 (resolution :clauses (.c16569 .c16570) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c5) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c16572 (resolution :clauses (.c16571 .c8881 .c16443 .c16566 .c164 .c166) :conclusion ((not (= (f2 c5) (f1 c_1))) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c16573 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 (f3 c_2 c_2)) (f1 c_2))) (not (= (f1 (f3 c_2 c_2)) (f1 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c16574 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_1)) (= (f1 (f3 c_2 c_2)) (f1 c_1)))))
(set .c16575 (resolution :clauses (.c16573 .c16574) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 (f3 c_2 c_2)) (f1 c_2))) (= (f2 c4) (f1 c_1)) (not (= (f3 c_2 c_2) c_1)))))
(set .c16576 (resolution :clauses (.c16575 .c16443 .c16566) :conclusion ((not (= (f1 (f3 c_2 c_2)) (f1 c_2))) (not (= (f3 c_2 c_2) c_1)))))
(set .c16577 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 c_0 c5))) (not (= (f3 c_0 c5) c_2)) (not (= (f3 c_2 c_2) c_2)) (= c_0 (f3 c_2 c_2)))))
(set .c16578 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c16579 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16580 (resolution :clauses (.c16578 .c16579) :conclusion ((not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c_0 c5)))))
(set .c16581 (resolution :clauses (.c16577 .c16580) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c5) c_2)) (not (= (f3 c_2 c_2) c_2)) (= c_0 (f3 c_2 c_2)) (not (= c5 c_0)))))
(set .c16582 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c16583 (resolution :clauses (.c16582 .c1739 .c16443 .c16566) :conclusion ((not (= (f1 c_2) (f2 c_1))))))
(set .c16584 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c16585 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c16586 (resolution :clauses (.c16584 .c16585) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c_0 c6)))))
(set .c16587 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c16588 (resolution :clauses (.c16586 .c16587) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f2 c_1))) (not (= (f1 c_1) (f2 c_1))) (= (f2 c4) (f1 c_1)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c16589 (resolution :clauses (.c16588 .c1739 .c16443 .c16566 .c164 .c166) :conclusion ((not (= (f1 c_0) (f2 c_1))) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c16590 (eq_transitive :conclusion ((not (= c_1 (f3 c_1 c4))) (not (= (f3 c_1 c_2) (f3 c_1 c4))) (not (= (f3 c_1 c_2) c_2)) (= c_1 c_2))))
(set .c16591 (eq_congruent :conclusion ((not (= c_1 c_1)) (not (= c4 c_2)) (= (f3 c_1 c_2) (f3 c_1 c4)))))
(set .c16592 (eq_reflexive :conclusion ((= c_1 c_1))))
(set .c16593 (resolution :clauses (.c16591 .c16592) :conclusion ((not (= c4 c_2)) (= (f3 c_1 c_2) (f3 c_1 c4)))))
(set .c16594 (resolution :clauses (.c16590 .c16593) :conclusion ((not (= c_1 (f3 c_1 c4))) (not (= (f3 c_1 c_2) c_2)) (= c_1 c_2) (not (= c4 c_2)))))
(set .c16595 (resolution :clauses (.c16594 .c9) :conclusion ((not (= c_1 (f3 c_1 c4))) (not (= (f3 c_1 c_2) c_2)) (not (= c4 c_2)))))
(set .c16596 (eq_transitive :conclusion ((not (= (f3 c_1 c5) c_1)) (not (= (f3 c_1 c5) c_2)) (= c_1 c_2))))
(set .c16597 (resolution :clauses (.c16596 .c9) :conclusion ((not (= (f3 c_1 c5) c_1)) (not (= (f3 c_1 c5) c_2)))))
(set .c16598 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= (f3 c_1 c5) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_1 c5))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_2 c_2) c_1))))
(set .c16599 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_2 c_0) (f3 c_2 (f3 c_0 c_0))))))
(set .c16600 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16601 (resolution :clauses (.c16599 .c16600) :conclusion ((not (= (f3 c_0 c_0) c_0)) (= (f3 c_2 c_0) (f3 c_2 (f3 c_0 c_0))))))
(set .c16602 (resolution :clauses (.c16598 .c16601) :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= (f3 c_1 c5) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_1 c5))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_2 c_2) c_1) (not (= (f3 c_0 c_0) c_0)))))
(set .c16603 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_1)) (not (= c5 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_1 c5)))))
(set .c16604 (resolution :clauses (.c16602 .c16603) :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= (f3 c_1 c5) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) c_1)) (= (f3 c_2 c_2) c_1) (not (= (f3 c_0 c_0) c_0)) (not (= c5 c_0)))))
(set .c16605 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2))))
(set .c16606 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16607 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16608 (resolution :clauses (.c16606 .c16607) :conclusion ((not (= (f3 c_2 c_2) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16609 (resolution :clauses (.c16605 .c16608) :conclusion ((not (= (f3 c_0 c4) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= (f3 c_2 c_2) c_2)))))
(set .c16610 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))))))
(set .c16611 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16612 (resolution :clauses (.c16610 .c16611) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16613 (resolution :clauses (.c16609 .c16612) :conclusion ((not (= (f3 c_0 c4) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= (f3 c_2 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16614 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c4 (f3 c4 c5))) (= (f3 c_0 c4) (f3 c6 (f3 c4 c5))))))
(set .c16615 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c16616 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16617 (resolution :clauses (.c16615 .c16616) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 c_0) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_0)))))
(set .c16618 (resolution :clauses (.c16614 .c16617) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c4) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= c5 c_0)))))
(set .c16619 (resolution :clauses (.c16613 .c16618) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= (f3 c_2 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c16620 (resolution :clauses (.c16619 .c34) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= (f3 c_2 c_2) c_2)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c16621 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c_1) (f1 (f3 c_2 c_0)))) (= (f2 c4) (f1 c_1)))))
(set .c16622 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_1)) (= (f1 c_1) (f1 (f3 c_2 c_0))))))
(set .c16623 (resolution :clauses (.c16621 .c16622) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= (f2 c4) (f1 c_1)) (not (= (f3 c_2 c_0) c_1)))))
(set .c16624 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c16625 (resolution :clauses (.c16623 .c16624) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= (f2 c4) (f1 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= c_0 c6)))))
(set .c16626 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c16627 (resolution :clauses (.c16625 .c16626) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= (f2 c4) (f1 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c16628 (resolution :clauses (.c16627 .c16443 .c16566 .c164 .c166) :conclusion ((not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f3 c_2 c_0) c_1)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c16629 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c5) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c5)))))
(set .c16630 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))))))
(set .c16631 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16632 (resolution :clauses (.c16630 .c16631) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16633 (resolution :clauses (.c16629 .c16632) :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c5) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c5)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16634 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c5 (f3 c4 c5))) (= (f3 c_0 c5) (f3 c6 (f3 c4 c5))))))
(set .c16635 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c16636 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16637 (resolution :clauses (.c16635 .c16636) :conclusion ((not (= c5 c_0)) (not (= (f3 c_2 c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_2)))))
(set .c16638 (resolution :clauses (.c16634 .c16637) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 c_2 c_0) c_0)) (not (= c4 c_2)))))
(set .c16639 (resolution :clauses (.c16633 .c16638) :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c5)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)))))
(set .c16640 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16641 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16642 (resolution :clauses (.c16640 .c16641) :conclusion ((not (= (f3 c_2 c_2) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16643 (resolution :clauses (.c16639 .c16642) :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_0 c5)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f3 c_2 c_2) c_2)))))
(set .c16644 (resolution :clauses (.c16643 .c34) :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (= c_0 (f3 c_0 c5)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f3 c_2 c_2) c_2)))))
(set .c16645 (resolution :clauses (.c16644 .c275 .c1344 .c238 .c16620 .c295 .c8081 .c8881 .c16566) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c6)) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_2 c_0) c_1))))
(set .c16646 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_2) c_0))) (not (= (f3 c_2 c_0) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c16647 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)))))
(set .c16648 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c4 c5))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c4 c5) c_2))))
(set .c16649 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16650 (resolution :clauses (.c16648 .c16649) :conclusion ((not (= (f3 c_2 c_0) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16651 (resolution :clauses (.c16647 .c16650) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16652 (resolution :clauses (.c16646 .c16651) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_2) c_0))) (not (= (f3 c_2 c_0) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16653 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c16654 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16655 (resolution :clauses (.c16653 .c16654) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16656 (resolution :clauses (.c16652 .c16655) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_2) c_0))) (not (= (f3 c_2 c_0) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16657 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_2) c_0)))))
(set .c16658 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c16659 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c16660 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16661 (resolution :clauses (.c16659 .c16660) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c16662 (resolution :clauses (.c16658 .c16661) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c_2) c_2) (not (= c_0 (f3 c_2 c_2))))))
(set .c16663 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c16664 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16665 (resolution :clauses (.c16663 .c16664) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c16666 (resolution :clauses (.c16662 .c16665) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c_2) c_2) (not (= c_0 (f3 c_2 c_2))))))
(set .c16667 (resolution :clauses (.c16657 .c16666) :conclusion ((not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16668 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16669 (resolution :clauses (.c16667 .c16668) :conclusion ((= (f3 c_2 c_0) (f3 (f3 c_0 c_2) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16670 (resolution :clauses (.c16656 .c16669) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_2 c_0) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c16671 (resolution :clauses (.c16670 .c34 .c224) :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_2 c_0) c_2)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c16672 (resolution :clauses (.c16671 .c238 .c14366 .c293 .c10269 .c242 .c16645 .c16576 .c183 .c219 .c223 .c109 .c12975 .c12978 .c8881 .c16566) :conclusion ((not (= c_0 c6)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) c_1) (not (= (f2 c_0) (f1 c_2))))))
(set .c16673 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (not (= c7 c_2)) (= c6 c7))))
(set .c16674 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= c4 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 c4)))))
(set .c16675 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 c4))) (not (= c_2 (f3 c_2 c4))) (= (f3 c_2 c_0) c_2))))
(set .c16676 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c4 c_0)) (= (f3 c_2 c_0) (f3 c_2 c4)))))
(set .c16677 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16678 (resolution :clauses (.c16676 .c16677) :conclusion ((not (= c4 c_0)) (= (f3 c_2 c_0) (f3 c_2 c4)))))
(set .c16679 (resolution :clauses (.c16675 .c16678) :conclusion ((not (= c_2 (f3 c_2 c4))) (= (f3 c_2 c_0) c_2) (not (= c4 c_0)))))
(set .c16680 (resolution :clauses (.c16674 .c16679) :conclusion ((not (= c4 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 c4)) (not (= c_2 (f3 c_2 c4))))))
(set .c16681 (resolution :clauses (.c16673 .c16680) :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_2 (f3 c_2 c4))) (not (= c7 c_2)) (= c6 c7) (not (= c4 c_0)))))
(set .c16682 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))))))
(set .c16683 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16684 (resolution :clauses (.c16682 .c16683) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16685 (resolution :clauses (.c16681 .c16684) :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_2 (f3 c_2 c4))) (not (= c7 c_2)) (= c6 c7) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16686 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c16687 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c16688 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16689 (resolution :clauses (.c16687 .c16688) :conclusion ((not (= (f3 c_0 c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16690 (resolution :clauses (.c16686 .c16689) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= (f3 c_0 c_0) c_0)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16691 (resolution :clauses (.c16685 .c16690) :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_2 (f3 c_2 c4))) (not (= c7 c_2)) (= c6 c7) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16692 (resolution :clauses (.c16691 .c34 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_0) c_0)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_2 (f3 c_2 c4))) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16693 (resolution :clauses (.c16692 .c226 .c2949 .c295 .c8881 .c16566) :conclusion ((not (= c_0 c6)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_2 (f3 c_2 c4))) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) c_1))))
(set .c16694 (eq_transitive :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c16695 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)))))
(set .c16696 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16697 (resolution :clauses (.c16695 .c16696) :conclusion ((not (= (f3 c_2 c_0) c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)))))
(set .c16698 (resolution :clauses (.c16694 .c16697) :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c7 c_2)) (= c6 c7))))
(set .c16699 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))))))
(set .c16700 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16701 (resolution :clauses (.c16699 .c16700) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16702 (resolution :clauses (.c16698 .c16701) :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16703 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))))))
(set .c16704 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16705 (resolution :clauses (.c16703 .c16704) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16706 (resolution :clauses (.c16702 .c16705) :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_0) c_0)) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16707 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c16708 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16709 (resolution :clauses (.c16707 .c16708) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c16710 (resolution :clauses (.c16706 .c16709) :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c7 c_2)) (= c6 c7) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16711 (resolution :clauses (.c16710 .c34 .c224) :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16712 (resolution :clauses (.c16711 .c226 .c2954 .c275 .c1344 .c238 .c9804 .c16693 .c3273 .c258 .c16672 .c16628 .c207 .c105 .c12809 .c256 .c1476 .c8881 .c16566 .c16443 .c16444) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c7 c_2)) (not (= c5 c_0)) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f2 c_0) (f1 c_0))) (= c6 c_1))))
(set .c16713 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_2) c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7))))
(set .c16714 (resolution :clauses (.c16713 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_2) c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)))))
(set .c16715 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7))))
(set .c16716 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c16717 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16718 (resolution :clauses (.c16716 .c16717) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c16719 (resolution :clauses (.c16715 .c16718) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7))))
(set .c16720 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_0)) (not (= c_0 c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)))))
(set .c16721 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16722 (resolution :clauses (.c16720 .c16721) :conclusion ((not (= (f3 c_2 c_0) c_0)) (= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)))))
(set .c16723 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) c_0))))
(set .c16724 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c7)) (not (= (f3 c4 c5) c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c7 (f3 c4 c5))))))
(set .c16725 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= (f3 c_2 c_2) c7))))
(set .c16726 (resolution :clauses (.c16724 .c16725) :conclusion ((not (= (f3 c4 c5) c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c7 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)))))
(set .c16727 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c4 c5) c_2))))
(set .c16728 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16729 (resolution :clauses (.c16727 .c16728) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16730 (resolution :clauses (.c16726 .c16729) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 c7 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16731 (resolution :clauses (.c16723 .c16730) :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) c_0) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16732 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c16733 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c4 c5) c_2))))
(set .c16734 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16735 (resolution :clauses (.c16733 .c16734) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16736 (resolution :clauses (.c16732 .c16735) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16737 (resolution :clauses (.c16731 .c16736) :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) c_0) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c16738 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c16739 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16740 (resolution :clauses (.c16738 .c16739) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c16741 (resolution :clauses (.c16737 .c16740) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) c_0) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c16742 (resolution :clauses (.c16722 .c16741) :conclusion ((= (f3 (f3 c_2 c_0) c_0) (f3 c_0 c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c16743 (resolution :clauses (.c16719 .c16742) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16744 (resolution :clauses (.c16743 .c34 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16745 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c5) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_2 c5)))))
(set .c16746 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)))))
(set .c16747 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c16748 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16749 (resolution :clauses (.c16747 .c16748) :conclusion ((not (= (f3 c_0 c_0) c_0)) (= c_0 (f3 c4 c5)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16750 (resolution :clauses (.c16746 .c16749) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c_0)) (not (= (f3 c_0 c_0) c_0)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16751 (resolution :clauses (.c16745 .c16750) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c5) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_2 c5)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16752 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= c5 (f3 c4 c5))) (= (f3 c_2 c5) (f3 c6 (f3 c4 c5))))))
(set .c16753 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c16754 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16755 (resolution :clauses (.c16753 .c16754) :conclusion ((not (= c5 c_0)) (not (= (f3 c_0 c_0) c_0)) (= c5 (f3 c4 c5)) (not (= c4 c_0)))))
(set .c16756 (resolution :clauses (.c16752 .c16755) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_0)) (not (= (f3 c_0 c_0) c_0)) (not (= c4 c_0)))))
(set .c16757 (resolution :clauses (.c16751 .c16756) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= c_0 (f3 c_2 c5)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c16758 (resolution :clauses (.c16757 .c34) :conclusion ((not (= (f3 c_0 c_0) c_0)) (= c_0 (f3 c_2 c5)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)))))
(set .c16759 (resolution :clauses (.c16758 .c266 .c2954) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))))))
(set .c16760 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)))))
(set .c16761 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))))))
(set .c16762 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16763 (resolution :clauses (.c16761 .c16762) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16764 (resolution :clauses (.c16760 .c16763) :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16765 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 c_2 c4)))))
(set .c16766 (resolution :clauses (.c16764 .c16765) :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c_2 (f3 c_2 c4)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16767 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c16768 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c4 c5) c_2))))
(set .c16769 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16770 (resolution :clauses (.c16768 .c16769) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16771 (resolution :clauses (.c16767 .c16770) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16772 (resolution :clauses (.c16766 .c16771) :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c_2 (f3 c_2 c4)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_0 c_0) c_2)) (not (= c6 c_2)))))
(set .c16773 (resolution :clauses (.c16772 .c34) :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= c_2 (f3 c_2 c4)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f3 c_0 c_0) c_2)) (not (= c6 c_2)))))
(set .c16774 (eq_transitive :conclusion ((not (= (f1 (f3 c_2 c_2)) (f1 (f3 c_2 c_0)))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f2 c5))) (not (= (f2 c4) (f1 c_2))) (= (f1 (f3 c_2 c_2)) (f1 c_2)))))
(set .c16775 (eq_congruent :conclusion ((not (= c5 c4)) (= (f2 c4) (f2 c5)))))
(set .c16776 (eq_transitive :conclusion ((not (= c5 c_0)) (not (= c4 c_0)) (= c5 c4))))
(set .c16777 (resolution :clauses (.c16775 .c16776) :conclusion ((= (f2 c4) (f2 c5)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c16778 (resolution :clauses (.c16774 .c16777) :conclusion ((not (= (f1 (f3 c_2 c_2)) (f1 (f3 c_2 c_0)))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_2))) (= (f1 (f3 c_2 c_2)) (f1 c_2)) (not (= c5 c_0)) (not (= c4 c_0)))))
(set .c16779 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 c_2))) (= (f1 (f3 c_2 c_2)) (f1 (f3 c_2 c_0))))))
(set .c16780 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_0) (f3 c_2 c_2)))))
(set .c16781 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_0 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))))))
(set .c16782 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16783 (resolution :clauses (.c16781 .c16782) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_0))) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16784 (resolution :clauses (.c16780 .c16783) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_0) (f3 c_2 c_2)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16785 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c16786 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c4 c5))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c4 c5) c_2))))
(set .c16787 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_0)) (= (f3 c_0 c_0) (f3 c4 c5)))))
(set .c16788 (resolution :clauses (.c16786 .c16787) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16789 (resolution :clauses (.c16785 .c16788) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_0)))))
(set .c16790 (resolution :clauses (.c16784 .c16789) :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_0) (f3 c_2 c_2)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16791 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c16792 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16793 (resolution :clauses (.c16791 .c16792) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c16794 (resolution :clauses (.c16790 .c16793) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_0) (f3 c_2 c_2)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16795 (resolution :clauses (.c16779 .c16794) :conclusion ((= (f1 (f3 c_2 c_2)) (f1 (f3 c_2 c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_0)) (not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16796 (resolution :clauses (.c16778 .c16795) :conclusion ((not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f2 c5) (f1 c_0))) (not (= (f2 c4) (f1 c_2))) (= (f1 (f3 c_2 c_2)) (f1 c_2)) (not (= c5 c_0)) (not (= c4 c_0)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c_0 c7)) (not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16797 (resolution :clauses (.c16796 .c16566 .c8881 .c34) :conclusion ((not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= (f1 (f3 c_2 c_2)) (f1 c_2)) (not (= c5 c_0)) (not (= c4 c_0)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c_0 c7)) (not (= c6 c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16798 (eq_transitive :conclusion ((not (= (f2 c_2) (f2 (f3 c_0 c_0)))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_2) (f1 c_2)))))
(set .c16799 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c16800 (resolution :clauses (.c16798 .c16799) :conclusion ((not (= (f2 c_2) (f2 (f3 c_0 c_0)))) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_2) (f1 c_2)) (not (= c4 c_0)))))
(set .c16801 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f2 c_2) (f2 (f3 c_0 c_0))))))
(set .c16802 (resolution :clauses (.c16800 .c16801) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (not (= (f2 c4) (f1 c_2))) (= (f2 c_2) (f1 c_2)) (not (= c4 c_0)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16803 (resolution :clauses (.c16802 .c16566) :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= (f2 c_2) (f1 c_2)) (not (= c4 c_0)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16804 (resolution :clauses (.c16773 .c242 .c16744 .c16576 .c223 .c16797 .c16803 .c286 .c2949 .c226 .c16759 .c256 .c303 .c207 .c105 .c14796 .c262 .c14182 .c3273 .c3141 .c3679 .c16566 .c16443) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= c4 c_0)) (not (= c5 c_0)) (not (= (f2 (f3 c_0 c_0)) (f2 c_0))) (= c6 c_1) (not (= (f2 c_0) (f1 c_0))) (= c7 c_2) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))))))
(set .c16805 (eq_transitive :conclusion ((not (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c4) c_2))))
(set .c16806 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c16807 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16808 (resolution :clauses (.c16806 .c16807) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16809 (resolution :clauses (.c16805 .c16808) :conclusion ((not (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16810 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c16811 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c16812 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c16813 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16814 (resolution :clauses (.c16812 .c16813) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c16815 (resolution :clauses (.c16811 .c16814) :conclusion ((not (= (f3 c_0 c_2) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16816 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_2) (f3 c_0 (f3 c_0 c_0))))))
(set .c16817 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16818 (resolution :clauses (.c16816 .c16817) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_0 c_2) (f3 c_0 (f3 c_0 c_0))))))
(set .c16819 (resolution :clauses (.c16815 .c16818) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16820 (resolution :clauses (.c16810 .c16819) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)))))
(set .c16821 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16822 (resolution :clauses (.c16820 .c16821) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)))))
(set .c16823 (resolution :clauses (.c16809 .c16822) :conclusion ((not (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16824 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c16825 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16826 (resolution :clauses (.c16824 .c16825) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c16827 (resolution :clauses (.c16823 .c16826) :conclusion ((not (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16828 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c16829 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16830 (resolution :clauses (.c16828 .c16829) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16831 (resolution :clauses (.c16827 .c16830) :conclusion ((not (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 c_0 c_0) c_2)) (not (= c6 c_2)))))
(set .c16832 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16833 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c_0) (f3 c_2 c_2)))))
(set .c16834 (resolution :clauses (.c16832 .c16833) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 c_2) c_2)))))
(set .c16835 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16836 (resolution :clauses (.c16834 .c16835) :conclusion ((= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 c_2) c_2)))))
(set .c16837 (resolution :clauses (.c16831 .c16836) :conclusion ((not (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 c_0 c_0) c_2)) (not (= c6 c_2)))))
(set .c16838 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c4 (f3 c_0 c_0))) (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0))))))
(set .c16839 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16840 (resolution :clauses (.c16838 .c16839) :conclusion ((not (= c4 (f3 c_0 c_0))) (= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0))))))
(set .c16841 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_0 c_0) c_2)) (= c4 (f3 c_0 c_0)))))
(set .c16842 (resolution :clauses (.c16840 .c16841) :conclusion ((= (f3 c_0 c4) (f3 c_0 (f3 c_0 c_0))) (not (= c4 c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16843 (resolution :clauses (.c16837 .c16842) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 c_0 c_0) c_2)) (not (= c6 c_2)))))
(set .c16844 (resolution :clauses (.c16843 .c34) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= (f3 c_0 c_0) c_2)) (not (= c6 c_2)))))
(set .c16845 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c16846 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f1 (f3 c_0 c_0)) (f1 c_1)))))
(set .c16847 (resolution :clauses (.c16845 .c16846) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c4) (f1 c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c16848 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c16849 (resolution :clauses (.c16847 .c16848) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c4) (f1 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_2)))))
(set .c16850 (resolution :clauses (.c16849 .c8881 .c16443 .c16566 .c165) :conclusion ((not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f3 c_0 c_0) c_1)) (not (= c4 c_2)))))
(set .c16851 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c16852 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c16853 (resolution :clauses (.c16851 .c16852) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c4 c_2)))))
(set .c16854 (resolution :clauses (.c16853 .c16443 .c16566 .c165) :conclusion ((not (= (f2 c5) (f1 c_1))) (not (= c4 c_2)))))
(set .c16855 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c_1) (f1 (f3 c_2 c_0)))) (= (f2 c4) (f1 c_1)))))
(set .c16856 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_1)) (= (f1 c_1) (f1 (f3 c_2 c_0))))))
(set .c16857 (resolution :clauses (.c16855 .c16856) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= (f2 c4) (f1 c_1)) (not (= (f3 c_2 c_0) c_1)))))
(set .c16858 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c16859 (resolution :clauses (.c16857 .c16858) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= (f2 c4) (f1 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= c4 c_2)))))
(set .c16860 (resolution :clauses (.c16859 .c8881 .c16443 .c16566 .c165) :conclusion ((not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f3 c_2 c_0) c_1)) (not (= c4 c_2)))))
(set .c16861 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2))))
(set .c16862 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16863 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16864 (resolution :clauses (.c16862 .c16863) :conclusion ((not (= (f3 c_2 c_2) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16865 (resolution :clauses (.c16861 .c16864) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= (f3 c_2 c_2) c_2)))))
(set .c16866 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c16867 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16868 (resolution :clauses (.c16866 .c16867) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16869 (resolution :clauses (.c16865 .c16868) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= (f3 c_2 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16870 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4)))))
(set .c16871 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c16872 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16873 (resolution :clauses (.c16871 .c16872) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 c_0) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_0)))))
(set .c16874 (resolution :clauses (.c16870 .c16873) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4)) (not (= c4 c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= c5 c_0)))))
(set .c16875 (resolution :clauses (.c16869 .c16874) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= (f3 c_2 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c16876 (resolution :clauses (.c16875 .c34) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= (f3 c_2 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c16877 (resolution :clauses (.c16876 .c238 .c1344 .c266 .c2954 .c226 .c16844 .c295 .c8081 .c8881 .c16566) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c7)) (= (f3 c_2 c_0) c_1) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (= (f3 c_0 c_0) c_1) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))))))
(set .c16878 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c4) c_0))))
(set .c16879 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16880 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16881 (resolution :clauses (.c16879 .c16880) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16882 (resolution :clauses (.c16878 .c16881) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c_0 (f3 c_2 c_2))))))
(set .c16883 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c16884 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16885 (resolution :clauses (.c16883 .c16884) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16886 (resolution :clauses (.c16882 .c16885) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16887 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c16888 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_0)) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16889 (resolution :clauses (.c16887 .c16888) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= c4 c_2)) (not (= c5 c_0)))))
(set .c16890 (resolution :clauses (.c16886 .c16889) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c16891 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c16892 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c16893 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c16894 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16895 (resolution :clauses (.c16893 .c16894) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c16896 (resolution :clauses (.c16892 .c16895) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16897 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c16898 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16899 (resolution :clauses (.c16897 .c16898) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c16900 (resolution :clauses (.c16896 .c16899) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16901 (resolution :clauses (.c16891 .c16900) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c16902 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16903 (resolution :clauses (.c16901 .c16902) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c16904 (resolution :clauses (.c16890 .c16903) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c16905 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0))))))
(set .c16906 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 c_2 c_2)))))
(set .c16907 (resolution :clauses (.c16905 .c16906) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16908 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16909 (resolution :clauses (.c16907 .c16908) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c16910 (resolution :clauses (.c16904 .c16909) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c16911 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4)))))
(set .c16912 (resolution :clauses (.c16910 .c16911) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c16913 (resolution :clauses (.c16912 .c34) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_0 c4) c_0) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_0)) (not (= c_0 c7)))))
(set .c16914 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c4))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)))))
(set .c16915 (eq_congruent :conclusion ((not (= c4 c_2)) (= (f1 c_2) (f1 c4)))))
(set .c16916 (resolution :clauses (.c16914 .c16915) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 c5) (f1 c4))) (not (= (f2 c5) (f1 c_0))) (= (f2 c4) (f1 c_0)) (not (= c4 c_2)))))
(set .c16917 (resolution :clauses (.c16916 .c8881 .c16566 .c165) :conclusion ((= (f2 c4) (f1 c_0)) (not (= c4 c_2)))))
(set .c16918 (resolution :clauses (.c16913 .c226 .c293 .c10691 .c10269 .c242 .c16877 .c16860 .c16850 .c16917 .c183 .c256 .c10741 .c303 .c262 .c16576 .c8816 .c219 .c223 .c109 .c207 .c105 .c23 .c12978 .c402 .c2677 .c258 .c16804 .c16712 .c16563 .c171 .c93 .c11 .c11080 .c8881 .c16566 .c16443 .c16444) :conclusion ((not (= c5 c_0)))))
(set .c16919 (eq_transitive :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= (f3 c_2 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7))))
(set .c16920 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= c_0 (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c6 (f3 c4 c5))))))
(set .c16921 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c16922 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c16923 (resolution :clauses (.c16921 .c16922) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c16924 (resolution :clauses (.c16920 .c16923) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c16925 (resolution :clauses (.c16919 .c16924) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c16926 (eq_congruent :conclusion ((not (= (f3 c_2 c_2) c7)) (not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0)))))
(set .c16927 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= (f3 c_2 c_2) c7))))
(set .c16928 (resolution :clauses (.c16926 .c16927) :conclusion ((not (= c_0 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)))))
(set .c16929 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c16930 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c16931 (resolution :clauses (.c16929 .c16930) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c16932 (resolution :clauses (.c16928 .c16931) :conclusion ((= (f3 c7 (f3 c4 c5)) (f3 (f3 c_2 c_2) c_0)) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c16933 (resolution :clauses (.c16925 .c16932) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c16934 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)))))
(set .c16935 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16936 (resolution :clauses (.c16934 .c16935) :conclusion ((not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c_2 c_2)))))
(set .c16937 (resolution :clauses (.c16933 .c16936) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (= c6 c7) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c16938 (resolution :clauses (.c16937 .c34 .c224) :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c16939 (resolution :clauses (.c16938 .c238 .c16860 .c14366 .c219 .c105 .c293 .c14328 .c10269 .c8881 .c16566) :conclusion ((not (= c6 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c_0 c7)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f2 c_2) (f1 c_2))) (not (= (f2 c_2) (f2 (f3 c_2 c_2)))))))
(set .c16940 (eq_transitive :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c4) c_2))))
(set .c16941 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))))))
(set .c16942 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) (f3 c4 c5))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c4 c5) c_2))))
(set .c16943 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c16944 (resolution :clauses (.c16942 .c16943) :conclusion ((not (= (f3 c_2 c_2) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c16945 (resolution :clauses (.c16941 .c16944) :conclusion ((not (= c6 c_2)) (= (f3 c_2 c_2) (f3 c6 (f3 c4 c5))) (not (= (f3 c_2 c_2) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c16946 (resolution :clauses (.c16940 .c16945) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c4) c_2) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c16947 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= c4 (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4)))))
(set .c16948 (eq_transitive :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 c_2) c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c4 (f3 c4 c5)))))
(set .c16949 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c16950 (resolution :clauses (.c16948 .c16949) :conclusion ((not (= c4 c_2)) (not (= (f3 c_2 c_2) c_2)) (= c4 (f3 c4 c5)) (not (= c5 c_2)))))
(set .c16951 (resolution :clauses (.c16947 .c16950) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 c4)) (not (= c4 c_2)) (not (= (f3 c_2 c_2) c_2)) (not (= c5 c_2)))))
(set .c16952 (resolution :clauses (.c16946 .c16951) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c4) c_2) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c16953 (resolution :clauses (.c16952 .c34) :conclusion ((not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c4) c_2) (not (= c6 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c16954 (resolution :clauses (.c16953 .c295 .c8081 .c242 .c16939 .c256 .c6005 .c303 .c262 .c8317 .c16576 .c260 .c223 .c109 .c27 .c16854 .c8255 .c12978 .c8881 .c16566 .c16443 .c16918 .c16583) :conclusion ((not (= c4 c_2)) (= c7 c_2))))
(set .c16955 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c16956 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c16957 (resolution :clauses (.c16955 .c16956) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_1))) (= (f2 c4) (f1 c_1)) (not (= c_0 c7)))))
(set .c16958 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f1 (f3 c_0 c_0)) (f1 c_1)))))
(set .c16959 (resolution :clauses (.c16957 .c16958) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c4) (f1 c_1)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_1)))))
(set .c16960 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c16961 (resolution :clauses (.c16959 .c16960) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c4) (f1 c_1)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_1)) (not (= c6 c_2)))))
(set .c16962 (resolution :clauses (.c16961 .c16443 .c16566 .c164 .c166) :conclusion ((not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_1)) (not (= c6 c_2)))))
(set .c16963 (eq_transitive :conclusion ((not (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2))))
(set .c16964 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2)))))
(set .c16965 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c16966 (resolution :clauses (.c16964 .c16965) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2)))))
(set .c16967 (resolution :clauses (.c16963 .c16966) :conclusion ((not (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_0 c_0) c_2)))))
(set .c16968 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))))))
(set .c16969 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c16970 (resolution :clauses (.c16968 .c16969) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c16971 (resolution :clauses (.c16967 .c16970) :conclusion ((not (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c16972 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c16973 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c16974 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c16975 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16976 (resolution :clauses (.c16974 .c16975) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c16977 (resolution :clauses (.c16973 .c16976) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16978 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c4 c5)))))
(set .c16979 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)) (= c5 (f3 c_0 c_0)))))
(set .c16980 (resolution :clauses (.c16978 .c16979) :conclusion ((not (= c4 c_0)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16981 (resolution :clauses (.c16977 .c16980) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c16982 (resolution :clauses (.c16972 .c16981) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c16983 (resolution :clauses (.c16971 .c16982) :conclusion ((not (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c16984 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c16985 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c_0) (f3 c_2 c_2)))))
(set .c16986 (resolution :clauses (.c16984 .c16985) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 c_2) c_2)))))
(set .c16987 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16988 (resolution :clauses (.c16986 .c16987) :conclusion ((= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 c_2) c_2)))))
(set .c16989 (resolution :clauses (.c16983 .c16988) :conclusion ((not (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c16990 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 (f3 c_0 c_0))) (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0))))))
(set .c16991 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c16992 (resolution :clauses (.c16990 .c16991) :conclusion ((not (= c5 (f3 c_0 c_0))) (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0))))))
(set .c16993 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)) (= c5 (f3 c_0 c_0)))))
(set .c16994 (resolution :clauses (.c16992 .c16993) :conclusion ((= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0))) (not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c16995 (resolution :clauses (.c16989 .c16994) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c16996 (resolution :clauses (.c16995 .c34) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c7)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c6 c_2)))))
(set .c16997 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f1 c_1) (f1 (f3 c_2 c_0)))) (= (f2 c4) (f1 c_1)))))
(set .c16998 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_1)) (= (f1 c_1) (f1 (f3 c_2 c_0))))))
(set .c16999 (resolution :clauses (.c16997 .c16998) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= (f2 c4) (f1 c_1)) (not (= (f3 c_2 c_0) c_1)))))
(set .c17000 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c17001 (resolution :clauses (.c16999 .c17000) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= (f2 c4) (f1 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= c_0 c7)))))
(set .c17002 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c17003 (resolution :clauses (.c17001 .c17002) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= (f2 c4) (f1 c_1)) (not (= (f3 c_2 c_0) c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c17004 (resolution :clauses (.c17003 .c16443 .c16566 .c164 .c166) :conclusion ((not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (not (= (f3 c_2 c_0) c_1)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c17005 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 c5))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2))))
(set .c17006 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= c_2 c_2)) (= (f3 c_2 c_2) (f3 (f3 c_2 c_0) c_2)))))
(set .c17007 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17008 (resolution :clauses (.c17006 .c17007) :conclusion ((not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 c_2) (f3 (f3 c_2 c_0) c_2)))))
(set .c17009 (resolution :clauses (.c17005 .c17008) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 c5))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_2 c_0) c_2)))))
(set .c17010 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c_2 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c17011 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c17012 (resolution :clauses (.c17010 .c17011) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_0 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c17013 (resolution :clauses (.c17009 .c17012) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 c5))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_2 c_0) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c17014 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))))))
(set .c17015 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c17016 (resolution :clauses (.c17014 .c17015) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c17017 (resolution :clauses (.c17013 .c17016) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 c5))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_2 c_0) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c_0 c7)))))
(set .c17018 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= c5 c_2)) (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 c5)))))
(set .c17019 (resolution :clauses (.c17017 .c17018) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_2 c_0) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_0)))))
(set .c17020 (resolution :clauses (.c17019 .c34) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_2 c_0) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c_0 c7)) (not (= (f3 c_0 c_0) c_0)))))
(set .c17021 (resolution :clauses (.c17020 .c238 .c9809 .c284 .c5758 .c226 .c16996 .c268 .c9217) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) c_2)) (not (= c6 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c_0 c7)) (= (f3 c_2 c_0) c_1) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (= (f3 c_0 c_0) c_1) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))))))
(set .c17022 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c17023 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c17024 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c17025 (resolution :clauses (.c17023 .c17024) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c17026 (resolution :clauses (.c17022 .c17025) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17027 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c17028 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c17029 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17030 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17031 (resolution :clauses (.c17029 .c17030) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17032 (resolution :clauses (.c17028 .c17031) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17033 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c17034 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c17035 (resolution :clauses (.c17033 .c17034) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17036 (resolution :clauses (.c17032 .c17035) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c17037 (resolution :clauses (.c17027 .c17036) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c17038 (resolution :clauses (.c17026 .c17037) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c17039 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c17040 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c17041 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17042 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17043 (resolution :clauses (.c17041 .c17042) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17044 (resolution :clauses (.c17040 .c17043) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17045 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c17046 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c17047 (resolution :clauses (.c17045 .c17046) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17048 (resolution :clauses (.c17044 .c17047) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c17049 (resolution :clauses (.c17039 .c17048) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c17050 (resolution :clauses (.c17038 .c17049) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c17051 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c17052 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c17053 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17054 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17055 (resolution :clauses (.c17053 .c17054) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17056 (resolution :clauses (.c17052 .c17055) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17057 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17058 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17059 (resolution :clauses (.c17057 .c17058) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17060 (resolution :clauses (.c17056 .c17059) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17061 (resolution :clauses (.c17051 .c17060) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c17062 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c17063 (resolution :clauses (.c17061 .c17062) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c17064 (resolution :clauses (.c17050 .c17063) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c17065 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0))))))
(set .c17066 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 c_2 c_2)))))
(set .c17067 (resolution :clauses (.c17065 .c17066) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17068 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17069 (resolution :clauses (.c17067 .c17068) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17070 (resolution :clauses (.c17064 .c17069) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c17071 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5)))))
(set .c17072 (resolution :clauses (.c17070 .c17071) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_0 (f3 c_0 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c17073 (resolution :clauses (.c17072 .c34) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_0 (f3 c_0 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c17074 (eq_transitive :conclusion ((not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_2) c_2))))
(set .c17075 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c17076 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c17077 (resolution :clauses (.c17075 .c17076) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c17078 (resolution :clauses (.c17074 .c17077) :conclusion ((not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_2) c_2) (not (= c_0 (f3 c_2 c_2))))))
(set .c17079 (eq_congruent :conclusion ((not (= c6 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))))))
(set .c17080 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c17081 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17082 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17083 (resolution :clauses (.c17081 .c17082) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17084 (resolution :clauses (.c17080 .c17083) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17085 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c17086 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c17087 (resolution :clauses (.c17085 .c17086) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17088 (resolution :clauses (.c17084 .c17087) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c17089 (resolution :clauses (.c17079 .c17088) :conclusion ((not (= c6 c_2)) (= (f3 c_2 (f3 c_2 c_0)) (f3 c6 (f3 c4 c5))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c17090 (resolution :clauses (.c17078 .c17089) :conclusion ((not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_2) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c17091 (eq_congruent :conclusion ((not (= c_0 c7)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c17092 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c17093 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17094 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17095 (resolution :clauses (.c17093 .c17094) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17096 (resolution :clauses (.c17092 .c17095) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17097 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c17098 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c17099 (resolution :clauses (.c17097 .c17098) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17100 (resolution :clauses (.c17096 .c17099) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c17101 (resolution :clauses (.c17091 .c17100) :conclusion ((not (= c_0 c7)) (= (f3 c7 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c17102 (resolution :clauses (.c17090 .c17101) :conclusion ((not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_2) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c17103 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c17104 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c17105 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17106 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17107 (resolution :clauses (.c17105 .c17106) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17108 (resolution :clauses (.c17104 .c17107) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17109 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17110 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17111 (resolution :clauses (.c17109 .c17110) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17112 (resolution :clauses (.c17108 .c17111) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17113 (resolution :clauses (.c17103 .c17112) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c17114 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c17115 (resolution :clauses (.c17113 .c17114) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c17116 (resolution :clauses (.c17102 .c17115) :conclusion ((not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_2) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c17117 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c17118 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17119 (resolution :clauses (.c17117 .c17118) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c17120 (resolution :clauses (.c17116 .c17119) :conclusion ((not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_2) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c17121 (resolution :clauses (.c17120 .c34) :conclusion ((not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_2) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c6 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 c7)))))
(set .c17122 (resolution :clauses (.c17121 .c226 .c17073 .c275 .c8086 .c242 .c17021 .c16576 .c219 .c223 .c109 .c175 .c183 .c211 .c11762 .c9478 .c8881 .c16566) :conclusion ((not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c6 c_2)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 c7)) (= (f3 c_0 c_0) c_1) (= (f3 c_2 c_0) c_1) (not (= (f2 c4) (f1 c_0))) (not (= (f2 c5) (f1 c_2))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f2 c_0) (f1 c_2))) (not (= (f2 c_0) (f1 c_0))))))
(set .c17123 (eq_transitive :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c_0) (f1 c_0)))))
(set .c17124 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c17125 (resolution :clauses (.c17123 .c17124) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)))))
(set .c17126 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c17127 (resolution :clauses (.c17125 .c17126) :conclusion ((not (= (f2 c4) (f2 c_0))) (not (= (f2 c4) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c17128 (eq_congruent :conclusion ((not (= c4 c_0)) (= (f2 c4) (f2 c_0)))))
(set .c17129 (resolution :clauses (.c17127 .c17128) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c4 c_0)))))
(set .c17130 (resolution :clauses (.c17129 .c166 .c16566 .c164) :conclusion ((= (f2 c_0) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_2)) (not (= c4 c_0)))))
(set .c17131 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f1 c7) (f1 c_0))) (= (f2 c4) (f1 c_0)))))
(set .c17132 (eq_congruent :conclusion ((not (= c_0 c7)) (= (f1 c7) (f1 c_0)))))
(set .c17133 (resolution :clauses (.c17131 .c17132) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c_2) (f1 c6))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_0)) (not (= c_0 c7)))))
(set .c17134 (eq_congruent :conclusion ((not (= c6 c_2)) (= (f1 c_2) (f1 c6)))))
(set .c17135 (resolution :clauses (.c17133 .c17134) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (= (f2 c4) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c17136 (resolution :clauses (.c17135 .c16566 .c164 .c166) :conclusion ((= (f2 c4) (f1 c_0)) (not (= c_0 c7)) (not (= c6 c_2)))))
(set .c17137 (resolution :clauses (.c13 .c6146 .c6724 .c260 .c17122 .c17004 .c16962 .c207 .c171 .c93 .c17130 .c17136 .c5456 .c256 .c303 .c8881 .c16443 .c16918) :conclusion ((not (= c4 c_0)) (not (= c_0 c7)) (not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))) (= c6 c_1))))
(set .c17138 (resolution :clauses (.c15 .c16551 .c9478 .c260 .c16511 .c256 .c12176 .c262 .c17137 .c16918 .c16583) :conclusion ((not (= c4 c_0)) (= c6 c_1) (= c7 c_2) (not (= (f2 c_0) (f1 c_2))) (not (= (f1 c_0) (f1 (f3 c_2 c_0)))))))
(set .c17139 (resolution :clauses (.c15 .c16561 .c9478 .c260 .c16540 .c5568 .c17138 .c105 .c252 .c14182 .c16450 .c258 .c16954 .c16918 .c16443 .c8880 .c16566 .c16444) :conclusion ((= c7 c_2))))
(set .c17140 (resolution :clauses (.c1476 .c17139) :conclusion ((not (= c6 c_2)))))
(set .c17141 (resolution :clauses (.c5113 .c17139) :conclusion ((not (= c_0 c7)))))
(set .c17142 (resolution :clauses (.c7539 .c17139 .c16583) :conclusion ((not (= c6 c_1)))))
(set .c17143 (resolution :clauses (.c256 .c17140 .c17142) :conclusion ((= c_0 c6))))
(set .c17144 (resolution :clauses (.c12996 .c17143 .c17139) :conclusion ((= (f2 c5) (f1 c_2)))))
(set .c17145 (resolution :clauses (.c16572 .c17143 .c17139) :conclusion ((not (= (f2 c5) (f1 c_1))))))
(set .c17146 (resolution :clauses (.c16589 .c17143 .c17139) :conclusion ((not (= (f1 c_0) (f2 c_1))))))
(set .c17147 (resolution :clauses (.c8265 .c17145) :conclusion ((not (= c5 c_1)))))
(set .c17148 (resolution :clauses (.c13940 .c17145) :conclusion ((not (= (f1 c_1) c_0)))))
(set .c17149 (resolution :clauses (.c13496 .c17145 .c17143) :conclusion ((not (= c_1 c7)))))
(set .c17150 (resolution :clauses (.c260 .c17147 .c16918) :conclusion ((= c5 c_2))))
(set .c17151 (resolution :clauses (.c252 .c17148 .c8880) :conclusion ((= (f1 c_1) c_1))))
(set .c17152 (resolution :clauses (.c9478 .c17150) :conclusion ((= (f2 c_2) (f1 c_0)))))
(set .c17153 (resolution :clauses (.c11762 .c17150 .c17144) :conclusion ((= (f2 c_2) (f1 c_2)))))
(set .c17154 (resolution :clauses (.c3543 .c17151) :conclusion ((not (= (f2 c_1) c_2)))))
(set .c17155 (resolution :clauses (.c7814 .c17151) :conclusion ((not (= c_0 (f2 c_1))))))
(set .c17156 (resolution :clauses (.c9582 .c17151) :conclusion ((not (= (f3 c_1 c_1) c_0)))))
(set .c17157 (resolution :clauses (.c9773 .c17151 .c17147 .c17150) :conclusion ((not (= (f3 c_1 c_1) c_2)))))
(set .c17158 (resolution :clauses (.c15 .c17152) :conclusion ((= (f2 c_0) (f2 (f3 c_0 c_2))))))
(set .c17159 (resolution :clauses (.c97 .c17152) :conclusion ((= (f1 (f3 c_0 c_2)) (f1 c_2)))))
(set .c17160 (resolution :clauses (.c187 .c17152 .c17153) :conclusion ((= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2)))))
(set .c17161 (resolution :clauses (.c27 .c17153) :conclusion ((= (f2 c_2) (f2 (f3 c_2 c_2))))))
(set .c17162 (resolution :clauses (.c109 .c17153) :conclusion ((= (f1 (f3 c_2 c_2)) (f1 c_2)))))
(set .c17163 (resolution :clauses (.c223 .c17153) :conclusion ((= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2))))))
(set .c17164 (resolution :clauses (.c246 .c17155 .c17154) :conclusion ((= c_1 (f2 c_1)))))
(set .c17165 (resolution :clauses (.c234 .c17157 .c17156) :conclusion ((= (f3 c_1 c_1) c_1))))
(set .c17166 (resolution :clauses (.c16576 .c17162) :conclusion ((not (= (f3 c_2 c_2) c_1)))))
(set .c17167 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c4) (f1 c_0)))))
(set .c17168 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c17169 (resolution :clauses (.c17167 .c17168) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f2 c4) (f1 c_0)) (not (= c7 c_2)))))
(set .c17170 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c17171 (resolution :clauses (.c17169 .c17170) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f2 c4) (f1 c_0)) (not (= c7 c_2)) (not (= c_0 c6)))))
(set .c17172 (resolution :clauses (.c17171 .c16566 .c164 .c166 .c17143 .c17139) :conclusion ((= (f2 c4) (f1 c_0)))))
(set .c17173 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0))))
(set .c17174 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))))))
(set .c17175 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c17176 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c17177 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c17178 (resolution :clauses (.c17176 .c17177) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17179 (resolution :clauses (.c17175 .c17178) :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17180 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17181 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17182 (resolution :clauses (.c17180 .c17181) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17183 (resolution :clauses (.c17179 .c17182) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17184 (resolution :clauses (.c17174 .c17183) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17185 (resolution :clauses (.c17173 .c17184) :conclusion ((not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= c7 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)))))
(set .c17186 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c17187 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c17188 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c17189 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c17190 (resolution :clauses (.c17188 .c17189) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17191 (resolution :clauses (.c17187 .c17190) :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17192 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17193 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17194 (resolution :clauses (.c17192 .c17193) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17195 (resolution :clauses (.c17191 .c17194) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17196 (resolution :clauses (.c17186 .c17195) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17197 (resolution :clauses (.c17185 .c17196) :conclusion ((not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= c7 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c17198 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c17199 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c17200 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17201 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17202 (resolution :clauses (.c17200 .c17201) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17203 (resolution :clauses (.c17199 .c17202) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17204 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17205 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17206 (resolution :clauses (.c17204 .c17205) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17207 (resolution :clauses (.c17203 .c17206) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17208 (resolution :clauses (.c17198 .c17207) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c17209 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c17210 (resolution :clauses (.c17208 .c17209) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c17211 (resolution :clauses (.c17197 .c17210) :conclusion ((not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= c7 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c17212 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c17213 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17214 (resolution :clauses (.c17212 .c17213) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 (f3 c_0 c_0)) (f3 c_2 c_2)))))
(set .c17215 (resolution :clauses (.c17211 .c17214) :conclusion ((not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= c7 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c17216 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c17217 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c17218 (resolution :clauses (.c17216 .c17217) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c17219 (resolution :clauses (.c17215 .c17218) :conclusion ((not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 (f3 c_2 c_2))) (= c5 c_0) (not (= c7 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c17220 (resolution :clauses (.c17219 .c34 .c17163 .c17143 .c16918 .c17150 .c17139) :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_0)))))
(set .c17221 (eq_transitive :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f1 (f3 c_0 c_0)) (f1 c_1))) (= (f2 c4) (f1 c_1)))))
(set .c17222 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_1)) (= (f1 (f3 c_0 c_0)) (f1 c_1)))))
(set .c17223 (resolution :clauses (.c17221 .c17222) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c4) (f1 c_1)) (not (= (f3 c_0 c_0) c_1)))))
(set .c17224 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c17225 (resolution :clauses (.c17223 .c17224) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c4) (f1 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c_0 c6)))))
(set .c17226 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c17227 (resolution :clauses (.c17225 .c17226) :conclusion ((not (= (f2 c4) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (= (f2 c4) (f1 c_1)) (not (= (f3 c_0 c_0) c_1)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c17228 (resolution :clauses (.c17227 .c16443 .c16566 .c164 .c166 .c17143 .c17139) :conclusion ((not (= (f1 (f3 c_0 c_0)) (f1 c_0))) (not (= (f3 c_0 c_0) c_1)))))
(set .c17229 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)))))
(set .c17230 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))))))
(set .c17231 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c17232 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17233 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17234 (resolution :clauses (.c17232 .c17233) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17235 (resolution :clauses (.c17231 .c17234) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17236 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c17237 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c17238 (resolution :clauses (.c17236 .c17237) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17239 (resolution :clauses (.c17235 .c17238) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c17240 (resolution :clauses (.c17230 .c17239) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c17241 (resolution :clauses (.c17229 .c17240) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c17242 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))))))
(set .c17243 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c17244 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17245 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17246 (resolution :clauses (.c17244 .c17245) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17247 (resolution :clauses (.c17243 .c17246) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17248 (eq_congruent :conclusion ((not (= c4 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)))))
(set .c17249 (eq_transitive :conclusion ((not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))) (= c4 (f3 c_2 c_2)))))
(set .c17250 (resolution :clauses (.c17248 .c17249) :conclusion ((not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c4 c5)) (not (= c4 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17251 (resolution :clauses (.c17247 .c17250) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c17252 (resolution :clauses (.c17242 .c17251) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_2 c_0))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)))))
(set .c17253 (resolution :clauses (.c17241 .c17252) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c17254 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)))))
(set .c17255 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c17256 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17257 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17258 (resolution :clauses (.c17256 .c17257) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17259 (resolution :clauses (.c17255 .c17258) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17260 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17261 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17262 (resolution :clauses (.c17260 .c17261) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17263 (resolution :clauses (.c17259 .c17262) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17264 (resolution :clauses (.c17254 .c17263) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c17265 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c17266 (resolution :clauses (.c17264 .c17265) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_2 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c17267 (resolution :clauses (.c17253 .c17266) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c17268 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_0) (f3 c_2 c_2))) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0))))))
(set .c17269 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 c_2 c_2)))))
(set .c17270 (resolution :clauses (.c17268 .c17269) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17271 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17272 (resolution :clauses (.c17270 .c17271) :conclusion ((= (f3 c_2 (f3 c_2 c_2)) (f3 c_2 (f3 c_0 c_0))) (not (= (f3 c_0 c_0) c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17273 (resolution :clauses (.c17267 .c17272) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5))) (= c_0 (f3 c_0 c5)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c17274 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c5)))))
(set .c17275 (resolution :clauses (.c17273 .c17274) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_0 (f3 c_0 c5)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c17276 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c17277 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c17278 (resolution :clauses (.c17276 .c17277) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c17279 (resolution :clauses (.c17275 .c17278) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= c_0 (f3 c_0 c5)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c5 c_2)) (not (= c4 c_0)) (not (= c_0 c6)))))
(set .c17280 (resolution :clauses (.c17279 .c34 .c17163 .c17143 .c17150 .c17139) :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (= c_0 (f3 c_0 c5)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_0)))))
(set .c17281 (resolution :clauses (.c17280 .c226 .c275 .c17220 .c8086 .c8881 .c16566 .c17150) :conclusion ((not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 (f3 c_2 c_0) c_0) (f3 c_2 (f3 c_0 c_0)))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_0)) (= (f3 c_0 c_0) c_1))))
(set .c17282 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 c5))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_2)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2))))
(set .c17283 (eq_congruent :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= c_2 c_2)) (= (f3 c_2 c_2) (f3 (f3 c_2 c_0) c_2)))))
(set .c17284 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17285 (resolution :clauses (.c17283 .c17284) :conclusion ((not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 c_2) (f3 (f3 c_2 c_0) c_2)))))
(set .c17286 (resolution :clauses (.c17282 .c17285) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 c5))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_2)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_2 c_0) c_2)))))
(set .c17287 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_2))))))
(set .c17288 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c17289 (resolution :clauses (.c17287 .c17288) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c17290 (resolution :clauses (.c17286 .c17289) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 c5))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_2 c_0) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c17291 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))))))
(set .c17292 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c17293 (resolution :clauses (.c17291 .c17292) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c17294 (resolution :clauses (.c17290 .c17293) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 c5))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_2 c_0) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c17295 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_0)) (not (= c5 c_2)) (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 c5)))))
(set .c17296 (resolution :clauses (.c17294 .c17295) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_2 c_0) c_2)) (not (= c7 c_2)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 c_0 c_0) c_0)))))
(set .c17297 (resolution :clauses (.c17296 .c34 .c17143 .c17150 .c17139) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_2 c_0) c_2)) (not (= c4 c_0)) (not (= (f3 c_0 c_0) c_0)))))
(set .c17298 (resolution :clauses (.c17297 .c238 .c9809 .c284 .c5758 .c17144 .c17172) :conclusion ((not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c4 c_0)) (not (= (f3 c_0 c_0) c_0)) (= (f3 c_2 c_0) c_1))))
(set .c17299 (eq_transitive :conclusion ((not (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2))))
(set .c17300 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_2 c_2)) (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2)))))
(set .c17301 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17302 (resolution :clauses (.c17300 .c17301) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 (f3 c_0 c_0) c_2) (f3 c_2 c_2)))))
(set .c17303 (resolution :clauses (.c17299 .c17302) :conclusion ((not (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_0 c_0) c_2)))))
(set .c17304 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_0 c_2) (f3 c4 c5))) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))))))
(set .c17305 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 c_2)) (= (f3 c_0 c_2) (f3 c4 c5)))))
(set .c17306 (resolution :clauses (.c17304 .c17305) :conclusion ((not (= c_0 c6)) (= (f3 c6 (f3 c4 c5)) (f3 c_0 (f3 c_0 c_2))) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c17307 (resolution :clauses (.c17303 .c17306) :conclusion ((not (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c17308 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_0) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))))))
(set .c17309 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)))))
(set .c17310 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= c_0 c_0)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c17311 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c17312 (resolution :clauses (.c17310 .c17311) :conclusion ((not (= (f3 c_0 c_0) c_2)) (= (f3 c_2 c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c17313 (resolution :clauses (.c17309 .c17312) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= (f3 c_0 c_0) c_2)))))
(set .c17314 (eq_congruent :conclusion ((not (= c4 c_0)) (not (= c5 (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c4 c5)))))
(set .c17315 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)) (= c5 (f3 c_0 c_0)))))
(set .c17316 (resolution :clauses (.c17314 .c17315) :conclusion ((not (= c4 c_0)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c4 c5)) (not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c17317 (resolution :clauses (.c17313 .c17316) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (= (f3 c_2 c_0) (f3 c4 c5)) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c17318 (resolution :clauses (.c17308 .c17317) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_0))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)) (not (= c5 c_2)))))
(set .c17319 (resolution :clauses (.c17307 .c17318) :conclusion ((not (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c17320 (eq_congruent :conclusion ((not (= (f3 c_0 c_0) (f3 c_2 c_2))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0)))))
(set .c17321 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c_0) (f3 c_2 c_2)))))
(set .c17322 (resolution :clauses (.c17320 .c17321) :conclusion ((not (= c_0 c_0)) (= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 c_2) c_2)))))
(set .c17323 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c17324 (resolution :clauses (.c17322 .c17323) :conclusion ((= (f3 (f3 c_0 c_0) c_0) (f3 (f3 c_2 c_2) c_0)) (not (= (f3 c_0 c_0) c_2)) (not (= (f3 c_2 c_2) c_2)))))
(set .c17325 (resolution :clauses (.c17319 .c17324) :conclusion ((not (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c17326 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= c5 (f3 c_0 c_0))) (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0))))))
(set .c17327 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c17328 (resolution :clauses (.c17326 .c17327) :conclusion ((not (= c5 (f3 c_0 c_0))) (= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0))))))
(set .c17329 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)) (= c5 (f3 c_0 c_0)))))
(set .c17330 (resolution :clauses (.c17328 .c17329) :conclusion ((= (f3 c_0 c5) (f3 c_0 (f3 c_0 c_0))) (not (= c5 c_2)) (not (= (f3 c_0 c_0) c_2)))))
(set .c17331 (resolution :clauses (.c17325 .c17330) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c_0 c6)) (not (= c4 c_0)) (not (= c5 c_2)) (not (= c7 c_2)))))
(set .c17332 (resolution :clauses (.c17331 .c34 .c17143 .c17150 .c17139) :conclusion ((not (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0)))) (not (= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0))) (not (= (f3 (f3 c_0 c_0) c_2) (f3 c_0 (f3 c_0 c_2)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= (f3 c_0 c_0) c_2)) (not (= c4 c_0)))))
(set .c17333 (resolution :clauses (.c17332 .c226 .c17298 .c268 .c9217 .c242 .c17281 .c17228 .c16628 .c175 .c207 .c171 .c93 .c219 .c183 .c211 .c105 .c14179 .c14182 .c17144 .c17172 .c17150 .c17166 .c17139 .c17143 .c17152 .c17153 .c16566) :conclusion ((not (= c4 c_0)))))
(set .c17334 (resolution :clauses (.c258 .c17333 .c16444) :conclusion ((= c4 c_2))))
(set .c17335 (eq_transitive :conclusion ((not (= (f3 c_0 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2))))
(set .c17336 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c4 c5) c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)))))
(set .c17337 (eq_transitive :conclusion ((not (= (f3 c_2 c_2) (f3 c4 c5))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c4 c5) c_2))))
(set .c17338 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17339 (resolution :clauses (.c17337 .c17338) :conclusion ((not (= (f3 c_2 c_2) c_2)) (= (f3 c4 c5) c_2) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17340 (resolution :clauses (.c17336 .c17339) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 c_2)) (not (= (f3 c_2 c_2) c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17341 (resolution :clauses (.c17335 .c17340) :conclusion ((not (= (f3 c_0 c5) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17342 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c5 (f3 c4 c5))) (= (f3 c_0 c5) (f3 c6 (f3 c4 c5))))))
(set .c17343 (eq_transitive :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 c_2) c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c5 (f3 c4 c5)))))
(set .c17344 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17345 (resolution :clauses (.c17343 .c17344) :conclusion ((not (= c5 c_2)) (not (= (f3 c_2 c_2) c_2)) (= c5 (f3 c4 c5)) (not (= c4 c_2)))))
(set .c17346 (resolution :clauses (.c17342 .c17345) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c5) (f3 c6 (f3 c4 c5))) (not (= c5 c_2)) (not (= (f3 c_2 c_2) c_2)) (not (= c4 c_2)))))
(set .c17347 (resolution :clauses (.c17341 .c17346) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c17348 (resolution :clauses (.c17347 .c34 .c17143 .c17334 .c17150 .c17139) :conclusion ((not (= (f3 c_2 c_2) c_2)) (= (f3 c_0 c5) c_2))))
(set .c17349 (resolution :clauses (.c17348 .c268 .c9217 .c17144 .c17172 .c17150) :conclusion ((not (= (f3 c_2 c_2) c_2)))))
(set .c17350 (resolution :clauses (.c242 .c17349 .c17166) :conclusion ((= c_0 (f3 c_2 c_2)))))
(set .c17351 (resolution :clauses (.c10269 .c17350 .c17334) :conclusion ((= c_0 (f3 c_2 c4)))))
(set .c17352 (resolution :clauses (.c8086 .c17350 .c17150) :conclusion ((= c_0 (f3 c_2 c5)))))
(set .c17353 (resolution :clauses (.c14328 .c17350 .c17161 .c17334 .c16566) :conclusion ((= (f2 c_0) (f1 c_2)))))
(set .c17354 (resolution :clauses (.c293 .c17351 .c8881 .c16566) :conclusion ((not (= (f3 c_0 c4) c_0)))))
(set .c17355 (resolution :clauses (.c275 .c17352 .c8881 .c16566) :conclusion ((not (= c_0 (f3 c_0 c5))))))
(set .c17356 (resolution :clauses (.c23 .c17353) :conclusion ((= (f2 c_2) (f2 (f3 c_2 c_0))))))
(set .c17357 (resolution :clauses (.c105 .c17353) :conclusion ((= (f1 c_0) (f1 (f3 c_2 c_0))))))
(set .c17358 (resolution :clauses (.c211 .c17353 .c17152) :conclusion ((= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2)))))
(set .c17359 (resolution :clauses (.c183 .c17353 .c17152) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0))))))
(set .c17360 (resolution :clauses (.c219 .c17353 .c17153) :conclusion ((= (f3 c_2 (f3 c_2 c_0)) (f3 (f3 c_2 c_2) c_0)))))
(set .c17361 (resolution :clauses (.c14366 .c17354 .c17334 .c17350 .c17163) :conclusion ((not (= (f3 c_2 c_0) c_0)))))
(set .c17362 (resolution :clauses (.c14275 .c17354 .c17139 .c17150 .c17143 .c17163 .c17334 .c17350) :conclusion ((not (= (f3 c_0 c_0) c_0)))))
(set .c17363 (resolution :clauses (.c16628 .c17357 .c17139 .c17143) :conclusion ((not (= (f3 c_2 c_0) c_1)))))
(set .c17364 (resolution :clauses (.c238 .c17361 .c17363) :conclusion ((= (f3 c_2 c_0) c_2))))
(set .c17365 (resolution :clauses (.c11746 .c17364 .c17150 .c17350 .c17163) :conclusion ((= (f3 c_0 c5) c_2))))
(set .c17366 (resolution :clauses (.c268 .c17365 .c17144 .c17172) :conclusion ((not (= (f3 c_2 c5) c_2)))))
(set .c17367 (eq_transitive :conclusion ((not (= (f2 c_0) (f2 (f3 c_2 c_2)))) (not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f2 c_2) (f2 c5))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_0) (f1 c_0)))))
(set .c17368 (eq_congruent :conclusion ((not (= c5 c_2)) (= (f2 c_2) (f2 c5)))))
(set .c17369 (resolution :clauses (.c17367 .c17368) :conclusion ((not (= (f2 c_0) (f2 (f3 c_2 c_2)))) (not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_0) (f1 c_0)) (not (= c5 c_2)))))
(set .c17370 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f2 c_0) (f2 (f3 c_2 c_2))))))
(set .c17371 (resolution :clauses (.c17369 .c17370) :conclusion ((not (= (f2 c_2) (f2 (f3 c_2 c_2)))) (not (= (f2 c5) (f1 c_0))) (= (f2 c_0) (f1 c_0)) (not (= c5 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17372 (resolution :clauses (.c17371 .c17161 .c8881 .c17350 .c17150) :conclusion ((= (f2 c_0) (f1 c_0)))))
(set .c17373 (eq_transitive :conclusion ((not (= (f1 (f3 c_0 c_0)) (f1 (f3 c_0 c_2)))) (not (= (f1 (f3 c_0 c_2)) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (not (= (f1 c_0) (f1 c6))) (= (f1 (f3 c_0 c_0)) (f1 c_0)))))
(set .c17374 (eq_congruent :conclusion ((not (= c_0 c6)) (= (f1 c_0) (f1 c6)))))
(set .c17375 (resolution :clauses (.c17373 .c17374) :conclusion ((not (= (f1 (f3 c_0 c_0)) (f1 (f3 c_0 c_2)))) (not (= (f1 (f3 c_0 c_2)) (f1 c_2))) (not (= (f1 c7) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f1 (f3 c_0 c_0)) (f1 c_0)) (not (= c_0 c6)))))
(set .c17376 (eq_congruent :conclusion ((not (= c7 c_2)) (= (f1 c7) (f1 c_2)))))
(set .c17377 (resolution :clauses (.c17375 .c17376) :conclusion ((not (= (f1 (f3 c_0 c_0)) (f1 (f3 c_0 c_2)))) (not (= (f1 (f3 c_0 c_2)) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f1 (f3 c_0 c_0)) (f1 c_0)) (not (= c_0 c6)) (not (= c7 c_2)))))
(set .c17378 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_0 c_0))) (= (f1 (f3 c_0 c_0)) (f1 (f3 c_0 c_2))))))
(set .c17379 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_0 c_0)))))
(set .c17380 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))))))
(set .c17381 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17382 (resolution :clauses (.c17380 .c17381) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17383 (resolution :clauses (.c17379 .c17382) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17384 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c17385 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c17386 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17387 (resolution :clauses (.c17385 .c17386) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17388 (resolution :clauses (.c17384 .c17387) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17389 (resolution :clauses (.c17383 .c17388) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17390 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17391 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17392 (resolution :clauses (.c17390 .c17391) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17393 (resolution :clauses (.c17389 .c17392) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17394 (resolution :clauses (.c17378 .c17393) :conclusion ((= (f1 (f3 c_0 c_0)) (f1 (f3 c_0 c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17395 (resolution :clauses (.c17377 .c17394) :conclusion ((not (= (f1 (f3 c_0 c_2)) (f1 c_2))) (not (= (f1 c7) (f2 (f3 c4 c5)))) (not (= (f2 (f3 c4 c5)) (f1 c6))) (= (f1 (f3 c_0 c_0)) (f1 c_0)) (not (= c_0 c6)) (not (= c7 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17396 (resolution :clauses (.c17395 .c17159 .c164 .c166 .c17163 .c17350 .c17143 .c17334 .c17150 .c34 .c17139) :conclusion ((= (f1 (f3 c_0 c_0)) (f1 c_0)))))
(set .c17397 (eq_transitive :conclusion ((not (= (f2 (f3 c_0 c_0)) (f2 (f3 c_0 c_2)))) (not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (= (f2 (f3 c_0 c_0)) (f2 c_0)))))
(set .c17398 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_0 c_0))) (= (f2 (f3 c_0 c_0)) (f2 (f3 c_0 c_2))))))
(set .c17399 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_0 c_0)))))
(set .c17400 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))))))
(set .c17401 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17402 (resolution :clauses (.c17400 .c17401) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17403 (resolution :clauses (.c17399 .c17402) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17404 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c17405 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c17406 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17407 (resolution :clauses (.c17405 .c17406) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17408 (resolution :clauses (.c17404 .c17407) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17409 (resolution :clauses (.c17403 .c17408) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17410 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17411 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17412 (resolution :clauses (.c17410 .c17411) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17413 (resolution :clauses (.c17409 .c17412) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17414 (resolution :clauses (.c17398 .c17413) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 (f3 c_0 c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17415 (resolution :clauses (.c17397 .c17414) :conclusion ((not (= (f2 c_0) (f2 (f3 c_0 c_2)))) (= (f2 (f3 c_0 c_0)) (f2 c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17416 (resolution :clauses (.c17415 .c17158 .c34 .c17163 .c17350 .c17143 .c17334 .c17150 .c17139) :conclusion ((= (f2 (f3 c_0 c_0)) (f2 c_0)))))
(set .c17417 (eq_transitive :conclusion ((not (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_0 c_0) c_0))) (not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_2 c_0)))) (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0))))))
(set .c17418 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_0 c_0))) (not (= c_0 c_0)) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c17419 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c17420 (resolution :clauses (.c17418 .c17419) :conclusion ((not (= (f3 c_0 c_2) (f3 c_0 c_0))) (= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_0 c_0) c_0)))))
(set .c17421 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_0 c_0)))))
(set .c17422 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))))))
(set .c17423 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17424 (resolution :clauses (.c17422 .c17423) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17425 (resolution :clauses (.c17421 .c17424) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17426 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c17427 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c17428 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17429 (resolution :clauses (.c17427 .c17428) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17430 (resolution :clauses (.c17426 .c17429) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17431 (resolution :clauses (.c17425 .c17430) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17432 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17433 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17434 (resolution :clauses (.c17432 .c17433) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17435 (resolution :clauses (.c17431 .c17434) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_0 c_2) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17436 (resolution :clauses (.c17420 .c17435) :conclusion ((= (f3 (f3 c_0 c_2) c_0) (f3 (f3 c_0 c_0) c_0)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17437 (resolution :clauses (.c17417 .c17436) :conclusion ((not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (not (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_2 c_0)))) (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17438 (eq_congruent :conclusion ((not (= c_0 c_0)) (not (= (f3 c_2 c_0) (f3 c_0 c_0))) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_2 c_0))))))
(set .c17439 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_0) (f3 c_0 c_0)))))
(set .c17440 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c_0 (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))))))
(set .c17441 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c17442 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17443 (resolution :clauses (.c17441 .c17442) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17444 (resolution :clauses (.c17440 .c17443) :conclusion ((not (= c7 c_2)) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17445 (resolution :clauses (.c17439 .c17444) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_0) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17446 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c17447 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c17448 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17449 (resolution :clauses (.c17447 .c17448) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17450 (resolution :clauses (.c17446 .c17449) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17451 (resolution :clauses (.c17445 .c17450) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (= (f3 c_2 c_0) (f3 c_0 c_0)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c17452 (resolution :clauses (.c17438 .c17451) :conclusion ((not (= c_0 c_0)) (= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_2 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c17453 (eq_reflexive :conclusion ((= c_0 c_0))))
(set .c17454 (resolution :clauses (.c17452 .c17453) :conclusion ((= (f3 c_0 (f3 c_0 c_0)) (f3 c_0 (f3 c_2 c_0))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c17455 (resolution :clauses (.c17437 .c17454) :conclusion ((not (= (f3 (f3 c_0 c_2) c_0) (f3 c_0 (f3 c_2 c_0)))) (= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17456 (resolution :clauses (.c17455 .c17359 .c17163 .c17350 .c17143 .c17334 .c17150 .c34 .c17139) :conclusion ((= (f3 (f3 c_0 c_0) c_0) (f3 c_0 (f3 c_0 c_0))))))
(set .c17457 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c17458 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17459 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17460 (resolution :clauses (.c17458 .c17459) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17461 (resolution :clauses (.c17457 .c17460) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c_2) c_2) (not (= c_0 (f3 c_2 c_2))))))
(set .c17462 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17463 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17464 (resolution :clauses (.c17462 .c17463) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17465 (resolution :clauses (.c17461 .c17464) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c_2) c_2) (not (= c_0 (f3 c_2 c_2))))))
(set .c17466 (resolution :clauses (.c17465 .c17163 .c17364 .c17350) :conclusion ((= (f3 c_0 c_2) c_2))))
(set .c17467 (eq_transitive :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2))))
(set .c17468 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17469 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17470 (resolution :clauses (.c17468 .c17469) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17471 (resolution :clauses (.c17467 .c17470) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))))))
(set .c17472 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (= (f3 (f3 c_2 c_2) c_2) (f3 c_0 c4)))))
(set .c17473 (resolution :clauses (.c17471 .c17472) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c4) c_2) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)))))
(set .c17474 (resolution :clauses (.c17473 .c17163 .c17364 .c17350 .c17334) :conclusion ((= (f3 c_0 c4) c_2))))
(set .c17475 (eq_transitive :conclusion ((not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c_0) c_2))))
(set .c17476 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c_0 (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))))))
(set .c17477 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c17478 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17479 (resolution :clauses (.c17477 .c17478) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17480 (resolution :clauses (.c17476 .c17479) :conclusion ((not (= c7 c_2)) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17481 (resolution :clauses (.c17475 .c17480) :conclusion ((not (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c_0) c_2) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17482 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= c_0 (f3 c4 c5))) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))))))
(set .c17483 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c17484 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17485 (resolution :clauses (.c17483 .c17484) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17486 (resolution :clauses (.c17482 .c17485) :conclusion ((not (= c_0 c6)) (= (f3 c_0 c_0) (f3 c6 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17487 (resolution :clauses (.c17481 .c17486) :conclusion ((not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c_0) c_2) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c17488 (resolution :clauses (.c17487 .c17364 .c17350 .c17143 .c17334 .c17150 .c34 .c17139) :conclusion ((= (f3 c_0 c_0) c_2))))
(set .c17489 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) c_0))))
(set .c17490 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))))))
(set .c17491 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17492 (resolution :clauses (.c17490 .c17491) :conclusion ((not (= c7 c_2)) (= (f3 c7 (f3 c4 c5)) (f3 c_2 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17493 (resolution :clauses (.c17489 .c17492) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) c_0) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17494 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c17495 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17496 (resolution :clauses (.c17494 .c17495) :conclusion ((not (= c_0 c6)) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17497 (resolution :clauses (.c17493 .c17496) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) c_0) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c17498 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2)))))
(set .c17499 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c17500 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17501 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17502 (resolution :clauses (.c17500 .c17501) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17503 (resolution :clauses (.c17499 .c17502) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17504 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17505 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17506 (resolution :clauses (.c17504 .c17505) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17507 (resolution :clauses (.c17503 .c17506) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17508 (resolution :clauses (.c17498 .c17507) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c17509 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17510 (resolution :clauses (.c17508 .c17509) :conclusion ((= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c17511 (resolution :clauses (.c17497 .c17510) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c_2))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) c_0) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c17512 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_2) c_2)) (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c_2)))))
(set .c17513 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c17514 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17515 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17516 (resolution :clauses (.c17514 .c17515) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17517 (resolution :clauses (.c17513 .c17516) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c_2) c_2) (not (= c_0 (f3 c_2 c_2))))))
(set .c17518 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17519 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17520 (resolution :clauses (.c17518 .c17519) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17521 (resolution :clauses (.c17517 .c17520) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c_2) c_2) (not (= c_0 (f3 c_2 c_2))))))
(set .c17522 (resolution :clauses (.c17512 .c17521) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17523 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17524 (resolution :clauses (.c17522 .c17523) :conclusion ((= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17525 (resolution :clauses (.c17511 .c17524) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) c_0) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 c_2 c_0) c_2)))))
(set .c17526 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17527 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17528 (resolution :clauses (.c17526 .c17527) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17529 (resolution :clauses (.c17525 .c17528) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) c_0) (not (= c7 c_2)) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 c_2 c_0) c_2)))))
(set .c17530 (resolution :clauses (.c17529 .c17160 .c17358 .c17163 .c17364 .c17350 .c17143 .c17334 .c17150 .c34 .c17139) :conclusion ((= (f3 c_0 c_2) c_0))))
(set .c17531 (eq_transitive :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)))))
(set .c17532 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c_0 (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))))))
(set .c17533 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c17534 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17535 (resolution :clauses (.c17533 .c17534) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17536 (resolution :clauses (.c17532 .c17535) :conclusion ((not (= c7 c_2)) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17537 (resolution :clauses (.c17531 .c17536) :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17538 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c17539 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17540 (resolution :clauses (.c17538 .c17539) :conclusion ((not (= c_0 c6)) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17541 (resolution :clauses (.c17537 .c17540) :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c17542 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2)))))
(set .c17543 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c17544 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17545 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17546 (resolution :clauses (.c17544 .c17545) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17547 (resolution :clauses (.c17543 .c17546) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17548 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17549 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17550 (resolution :clauses (.c17548 .c17549) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17551 (resolution :clauses (.c17547 .c17550) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17552 (resolution :clauses (.c17542 .c17551) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c17553 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17554 (resolution :clauses (.c17552 .c17553) :conclusion ((= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c17555 (resolution :clauses (.c17541 .c17554) :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c4))) (= c_2 (f3 c_2 c4)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c17556 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_2) c4)) (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c4)))))
(set .c17557 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17558 (resolution :clauses (.c17556 .c17557) :conclusion ((not (= (f3 c_0 c_2) c4)) (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c4)))))
(set .c17559 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (not (= c4 c_2)) (= (f3 c_0 c_2) c4))))
(set .c17560 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17561 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17562 (resolution :clauses (.c17560 .c17561) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17563 (resolution :clauses (.c17559 .c17562) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (not (= c4 c_2)) (= (f3 c_0 c_2) c4) (not (= c_0 (f3 c_2 c_2))))))
(set .c17564 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17565 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17566 (resolution :clauses (.c17564 .c17565) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17567 (resolution :clauses (.c17563 .c17566) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (not (= c4 c_2)) (= (f3 c_0 c_2) c4) (not (= c_0 (f3 c_2 c_2))))))
(set .c17568 (resolution :clauses (.c17558 .c17567) :conclusion ((= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c4)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (not (= c4 c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17569 (resolution :clauses (.c17555 .c17568) :conclusion ((not (= (f3 c_2 c_0) c_2)) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (= c_2 (f3 c_2 c4)) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c17570 (resolution :clauses (.c17569 .c17160 .c17358 .c17163 .c17364 .c17350 .c17143 .c17334 .c17150 .c34 .c17139) :conclusion ((= c_2 (f3 c_2 c4)))))
(set .c17571 (eq_transitive :conclusion ((not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 c_2) c_2))))
(set .c17572 (eq_congruent :conclusion ((not (= c7 c_2)) (not (= c_0 (f3 c4 c5))) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))))))
(set .c17573 (eq_transitive :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= c_0 (f3 c4 c5)))))
(set .c17574 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17575 (resolution :clauses (.c17573 .c17574) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= c_0 (f3 c4 c5)) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17576 (resolution :clauses (.c17572 .c17575) :conclusion ((not (= c7 c_2)) (= (f3 c_2 c_0) (f3 c7 (f3 c4 c5))) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17577 (resolution :clauses (.c17571 .c17576) :conclusion ((not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 c_2) c_2) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17578 (eq_congruent :conclusion ((not (= c_0 c6)) (not (= (f3 c_2 c_2) (f3 c4 c5))) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))))))
(set .c17579 (eq_congruent :conclusion ((not (= c4 c_2)) (not (= c5 c_2)) (= (f3 c_2 c_2) (f3 c4 c5)))))
(set .c17580 (resolution :clauses (.c17578 .c17579) :conclusion ((not (= c_0 c6)) (= (f3 c_0 (f3 c_2 c_2)) (f3 c6 (f3 c4 c5))) (not (= c4 c_2)) (not (= c5 c_2)))))
(set .c17581 (resolution :clauses (.c17577 .c17580) :conclusion ((not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 c_2) c_2) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)))))
(set .c17582 (eq_congruent :conclusion ((not (= (f3 c_0 c_2) (f3 c_2 c_0))) (not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2)))))
(set .c17583 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)))))
(set .c17584 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17585 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17586 (resolution :clauses (.c17584 .c17585) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17587 (resolution :clauses (.c17583 .c17586) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17588 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17589 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17590 (resolution :clauses (.c17588 .c17589) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17591 (resolution :clauses (.c17587 .c17590) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (= (f3 c_0 c_2) (f3 c_2 c_0)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17592 (resolution :clauses (.c17582 .c17591) :conclusion ((not (= c_2 c_2)) (= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c17593 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17594 (resolution :clauses (.c17592 .c17593) :conclusion ((= (f3 (f3 c_0 c_2) c_2) (f3 (f3 c_2 c_0) c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= c_0 (f3 c_2 c_2))))))
(set .c17595 (resolution :clauses (.c17581 .c17594) :conclusion ((not (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c_2))) (not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 c_2) c_2) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c17596 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= (f3 c_0 c_2) c_2)) (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c_2)))))
(set .c17597 (eq_transitive :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c_2) c_2))))
(set .c17598 (eq_congruent :conclusion ((not (= c_2 c_2)) (not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17599 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17600 (resolution :clauses (.c17598 .c17599) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_2 c_0) (f3 c_2 (f3 c_2 c_2))))))
(set .c17601 (resolution :clauses (.c17597 .c17600) :conclusion ((not (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2))) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c_2) c_2) (not (= c_0 (f3 c_2 c_2))))))
(set .c17602 (eq_congruent :conclusion ((not (= c_0 (f3 c_2 c_2))) (not (= c_2 c_2)) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17603 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17604 (resolution :clauses (.c17602 .c17603) :conclusion ((not (= c_0 (f3 c_2 c_2))) (= (f3 c_0 c_2) (f3 (f3 c_2 c_2) c_2)))))
(set .c17605 (resolution :clauses (.c17601 .c17604) :conclusion ((not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_0 c_2) c_2) (not (= c_0 (f3 c_2 c_2))))))
(set .c17606 (resolution :clauses (.c17596 .c17605) :conclusion ((not (= c_2 c_2)) (= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17607 (eq_reflexive :conclusion ((= c_2 c_2))))
(set .c17608 (resolution :clauses (.c17606 .c17607) :conclusion ((= (f3 c_2 (f3 c_0 c_2)) (f3 c_2 c_2)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))) (not (= (f3 c_2 c_0) c_2)) (not (= c_0 (f3 c_2 c_2))))))
(set .c17609 (resolution :clauses (.c17595 .c17608) :conclusion ((not (= (f3 c_2 (f3 c_0 c_2)) (f3 (f3 c_2 c_0) c_2))) (not (= (f3 c_0 (f3 c_2 c_2)) (f3 (f3 c_0 c_2) c_2))) (not (= (f3 c7 (f3 c4 c5)) (f3 c6 (f3 c4 c5)))) (not (= (f3 c_2 c_0) c_2)) (= (f3 c_2 c_2) c_2) (not (= c7 c_2)) (not (= c_0 (f3 c_2 c_2))) (not (= c4 c_2)) (not (= c5 c_2)) (not (= c_0 c6)) (not (= (f3 (f3 c_2 c_2) c_2) (f3 c_2 (f3 c_2 c_2)))))))
(set .c17610 (resolution :clauses (.c17609 .c34 .c17160 .c17358 .c17163 .c17364 .c17350 .c17349 .c17143 .c17334 .c17150 .c17139) :conclusion ()))
